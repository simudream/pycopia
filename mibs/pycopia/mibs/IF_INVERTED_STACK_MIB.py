# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, mib_2
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from SNMPv2_TC import RowStatus
from IF_MIB import ifStackGroup2, ifStackHigherLayer, ifStackLowerLayer

class IF_INVERTED_STACK_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/IF-INVERTED-STACK-MIB'
	name = 'IF-INVERTED-STACK-MIB'
	language = 2
	description = 'The MIB module which provides the Inverted Stack Table for\ninterface sub-layers.'

# nodes
class ifInvertedStackMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 77])
	name = 'ifInvertedStackMIB'

class ifInvMIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 77, 1])
	name = 'ifInvMIBObjects'

class ifInvConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 77, 1, 2])
	name = 'ifInvConformance'

class ifInvGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 77, 1, 2, 1])
	name = 'ifInvGroups'

class ifInvCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 77, 1, 2, 2])
	name = 'ifInvCompliances'


# macros
# types 
# scalars 
# columns
class ifInvStackStatus(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 77, 1, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


# rows 
class ifInvStackEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifStackLowerLayer, ifStackHigherLayer], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 77, 1, 1, 1])
	access = 2
	rowstatus = ifInvStackStatus
	columns = {'ifInvStackStatus': ifInvStackStatus}


# notifications (traps) 
# groups 
class ifInvStackGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 77, 1, 2, 1, 1])
	group = [ifInvStackStatus]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
