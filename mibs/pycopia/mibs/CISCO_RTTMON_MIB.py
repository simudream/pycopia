# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, NOTIFICATION_TYPE, Integer32, Gauge32, TimeTicks
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from CISCO_SMI import ciscoMgmt
from SNMPv2_TC import DisplayString, TruthValue, RowStatus, TimeInterval, TimeStamp, TEXTUAL_CONVENTION
from IF_MIB import OwnerString

class CISCO_RTTMON_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/site/CISCO-RTTMON-MIB'
	conformance = 4
	name = 'CISCO-RTTMON-MIB'
	language = 2
	description = "This module defines a MIB for Round Trip Time \n(RTT) monitoring of a list of targets, using a \nvariety of protocols.\n\nThe table structure overview is a follows (t: \n indicates a table, at:  indicates an augmented \n table, and it:  indicates table with the same \n indices/control as parent table):\n\nRTTMON MIB\n|--- Application Group\n|    |--- Application Identity\n|    |--- Application Capabilities\n|    |--- Application Reset\n|    |t-- Supported RTT Types\n|         |--- Truth Value\n|    |t-- Supported Protocols\n|         |--- Truth Value\n|    |t-- Application Preconfigured\n|         |--- Script Names\n|         |--- File Paths\n|\n|--- Overall Control Group\n|    |t-- Master Definitions Table\n|    |    |--- Global Configuration Definitions\n|    |         |--- Config for a single RTT Life\n|    |    |it- Echo Specific Configuration\n|    |    |it- File I/O Specific Configuration\n|    |    |it- Script Specific Configuration\n|    |    |at- Schedule Configuration\n|    |    |at- Reaction Specific Config\n|    |    |at- Statistics Capture Configuration\n|    |    |at- History Collection Configuration\n|    |    |at- Monitoring Operational State\n|    |    |at- Last RTT operation\n|    |\n|    |t-- Reaction Trigger Table\n|         |at- Reaction Trigger Operational State\n|\n|--- Statistics Collection Group\n|    |t-- Statistics Capture Table\n|         |--- Captured Statistics\n|              |--- Path Information\n|              |--- Distribution Capture \n|              |--- Mean and Deviation Capture\n|         |it- Statistics Collection Table\n|    |it- Statistics Totals Table\n|\n|--- History Collection Group\n|    |t-- History Collection Table\n|         |-- Path Information\n|         |-- Completion Information per operation\n\nDEFINITIONS:\n  conceptual RTT control row - \n          This is a row in the 'Overall Control \n          Group'.  This row is indexed via the \n          rttMonCtrlAdminIndex object.  This row \n          is spread across multiple real tables \n          in the 'Overall Control Group'.\n  conceptual statistics row -\n          This is a row in the 'Statistics \n          Collection Group'.  This row is based \n          off of the conceptual Rtt control row's\n          index.  This statistics row is spread \n          across multiple real tables in the\n          'Statistics Collection Group'.\n  conceptual history row -\n          This is a row in the 'History Collection\n          Group'.  This row is also based off of\n          the conceptual Rtt control row's index.\n  probe -\n          This is the entity that executes via a \n          conceptual RTT control row and populates\n          a conceptual statistics row and a \n          conceptual history row.\n  Rtt operation -\n          This is a single operation performed by\n          a probe.  This operation can be a single\n          Rtt attempt/completion or a group of Rtt\n          attempts/completions that produce one\n          operation table entry.\n          \nARR Protocol Definition:\n\nThe format of the RTT Asymmetric Request/Responses \n (ARR) protocol is as follows:\n\n  The ARR Header (total of 12 octets): \n\n  4 octet -> eyecatcher: 'WxYz'\n  1 octet -> version   : 0x01 - protocol version\n  1 octet -> command   : 0x01 - logoff request\n                         0x02 - echo request\n                         0x03 - echo response\n                         0x04 - software version request\n                         0x05 - software version response\n  2 octet -> sequence number (Network Byte Order)\n  4 octet -> response data size (Network Byte Order)\n\n  The ARR Data:\n\n  n octets -> request/response data\n                        : 'AB..ZAB..ZAB..' \n\n  For software version request/response the \n   protocol version octet will contain the version\n   number of the responder.  Thus the sequence \n   number, etc will not be included.\n\n  For snaLU0EchoAppl and snaLU2EchoAppl all character \n   fields will be in EBCDIC.\n\n  The response data should be appended to the \n   origin request data.  This allows data  \n   verification to check the data that flows in \n   both directions.  If the response data size is\n   smaller than the request data size the original\n   request data will be truncated.  \n\n  An example would be:\n    Request:        /       Response:\n    'WxYz'          /       'WxYz'\n    0x01            /       0x01\n    0x02            /       0x03\n    0x0001          /       0x0001\n    0x00000008      /       0x00000008\n    'ABCDEF'        /       'ABCDEFGH'\n\n  NOTE: We requested 8 bytes in the response and \n        the response had 8 bytes.  The size of the\n        request data has no correlation to the\n        size of the response data.\n\nNOTE:  For native RTT request/response (i.e. \n       ipIcmpecho) operations both the 'Header' \n       and 'Data' will be included.  Only the \n       'sequence number' in the Header will be \n       valid.\n\nNOTE:  For non-connection oriented protocol the \n       initial RTT request/response operation will\n       be preceded with an RTT request/response \n       operation to the target address to force \n       path exploration and to prove \n       connectivity.  The History collection table\n       will contain these responses, but the \n       Statistics capture table will omit them to\n       prevent skewed results.\n\nROLLOVER NOTE:  For objects that start at zero and \n                potentially can rollover (Integer32 \n                'counters'), those object cannot attain\n                their maximum value.  They can only attain\n                their maximum value minus one.  When one\n                of these object has its maximum value, it\n                means that a rollover should have occurred\n                and that object is no longer valid.  \n                Configuration in the conceptual RTT \n                control row should be modified to \n                prevent this from occurring another time.\n                This does not apply to indices."

# nodes
class ciscoRttMonMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42])
	name = 'ciscoRttMonMIB'

class ciscoRttMonObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1])
	name = 'ciscoRttMonObjects'

class rttMonAppl(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 1])
	name = 'rttMonAppl'

class rttMonCtrl(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2])
	name = 'rttMonCtrl'

class rttMonStats(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3])
	name = 'rttMonStats'

class rttMonHistory(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 4])
	name = 'rttMonHistory'

class rttMonNotificationsPrefix(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 2])
	name = 'rttMonNotificationsPrefix'

class rttMonNotifications(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 2, 0])
	name = 'rttMonNotifications'

class ciscoRttMonMibConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 3])
	name = 'ciscoRttMonMibConformance'

class ciscoRttMonMibCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 3, 1])
	name = 'ciscoRttMonMibCompliances'

class ciscoRttMonMibGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 3, 2])
	name = 'ciscoRttMonMibGroups'


# macros
# types 

class RttReset(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'ready'), Enum(2, 'reset')]


class RttResponseSense(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'ok'), Enum(2, 'disconnected'), Enum(3, 'overThreshold'), Enum(4, 'timeout'), Enum(5, 'busy'), Enum(6, 'notConnected'), Enum(7, 'dropped'), Enum(8, 'sequenceError'), Enum(9, 'verifyError'), Enum(10, 'applicationSpecific')]


class RttMonRttType(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'echo'), Enum(2, 'pathEcho'), Enum(3, 'fileIO'), Enum(4, 'script')]


class RttMonProtocol(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'notApplicable'), Enum(2, 'ipIcmpEcho'), Enum(3, 'ipUdpEchoAppl'), Enum(4, 'snaRUEcho'), Enum(5, 'snaLU0EchoAppl'), Enum(6, 'snaLU2EchoAppl'), Enum(7, 'snaLU62Echo'), Enum(8, 'snaLU62EchoAppl'), Enum(9, 'appleTalkEcho'), Enum(10, 'appleTalkEchoAppl'), Enum(11, 'decNetEcho'), Enum(12, 'decNetEchoAppl'), Enum(13, 'ipxEcho'), Enum(14, 'ipxEchoAppl'), Enum(15, 'isoClnsEcho'), Enum(16, 'isoClnsEchoAppl'), Enum(17, 'vinesEcho'), Enum(18, 'vinesEchoAppl'), Enum(19, 'xnsEcho'), Enum(20, 'xnsEchoAppl'), Enum(21, 'apolloEcho'), Enum(22, 'apolloEchoAppl'), Enum(23, 'netbiosEchoAppl')]


class RttMonTargetAddress(pycopia.SMI.Basetypes.OctetString):
	status = 1

# scalars 
class rttMonApplVersion(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class rttMonApplMaxPacketDataSize(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = 'octets'


class rttMonApplTimeOfLastSet(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class rttMonApplNumCtrlAdminEntry(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rttMonApplReset(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 1, 5])
	syntaxobject = RttReset


class rttMonApplPreConfigedReset(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 1, 6])
	syntaxobject = RttReset


# columns
class rttMonApplSupportedRttTypes(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 1, 7, 1, 1])
	syntaxobject = RttMonRttType


class rttMonApplSupportedRttTypesValid(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 1, 7, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class rttMonApplSupportedProtocols(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 1, 8, 1, 1])
	syntaxobject = RttMonProtocol


class rttMonApplSupportedProtocolsValid(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 1, 8, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class rttMonApplPreConfigedType(ColumnObject):
	status = 1
	access = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 1, 9, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'filePath'), Enum(2, 'scriptName')]


class rttMonApplPreConfigedName(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 1, 9, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class rttMonApplPreConfigedValid(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 1, 9, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class rttMonCtrlAdminIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rttMonCtrlAdminOwner(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 1, 1, 2])
	syntaxobject = OwnerString


class rttMonCtrlAdminTag(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class rttMonCtrlAdminRttType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 1, 1, 4])
	syntaxobject = RttMonRttType


class rttMonCtrlAdminThreshold(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'milliseconds'


class rttMonCtrlAdminFrequency(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class rttMonCtrlAdminTimeout(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'milliseconds'


class rttMonCtrlAdminVerifyData(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class rttMonCtrlAdminStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class rttMonEchoAdminProtocol(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 2, 1, 1])
	syntaxobject = RttMonProtocol


class rttMonEchoAdminTargetAddress(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 2, 1, 2])
	syntaxobject = RttMonTargetAddress


class rttMonEchoAdminPktDataRequestSize(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'octets'


class rttMonEchoAdminPktDataResponseSize(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rttMonFileIOAdminFilePath(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 3, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class rttMonFileIOAdminSize(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 3, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'n256'), Enum(2, 'n1k'), Enum(3, 'n64k'), Enum(4, 'n128k'), Enum(5, 'n256k')]
	units = 'bytes'


class rttMonFileIOAdminAction(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 3, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'write'), Enum(2, 'read'), Enum(3, 'writeRead')]


class rttMonScriptAdminName(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 4, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class rttMonScriptAdminCmdLineParams(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 4, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class rttMonScheduleAdminRttLife(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 5, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class rttMonScheduleAdminRttStartTime(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 5, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class rttMonScheduleAdminConceptRowAgeout(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 5, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class rttMonReactAdminConnectionEnable(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 6, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class rttMonReactAdminTimeoutEnable(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 6, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class rttMonReactAdminThresholdType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 6, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'never'), Enum(2, 'immediate'), Enum(3, 'consecutive'), Enum(4, 'xOfy'), Enum(5, 'average')]


class rttMonReactAdminThresholdFalling(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 6, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'milliseconds'


class rttMonReactAdminThresholdCount(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 6, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rttMonReactAdminThresholdCount2(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 6, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rttMonReactAdminActionType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 6, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'none'), Enum(2, 'trapOnly'), Enum(3, 'nmvtOnly'), Enum(4, 'triggerOnly'), Enum(5, 'trapAndNmvt'), Enum(6, 'trapAndTrigger'), Enum(7, 'nmvtAndTrigger'), Enum(8, 'trapNmvtAndTrigger')]


class rttMonStatisticsAdminNumHourGroups(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 7, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rttMonStatisticsAdminNumPaths(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 7, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rttMonStatisticsAdminNumHops(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 7, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rttMonStatisticsAdminNumDistBuckets(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 7, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rttMonStatisticsAdminDistInterval(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 7, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'milliseconds'


class rttMonHistoryAdminNumLives(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 8, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rttMonHistoryAdminNumBuckets(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 8, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rttMonHistoryAdminNumSamples(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 8, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rttMonHistoryAdminFilter(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 8, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'none'), Enum(2, 'all'), Enum(3, 'overThreshold'), Enum(4, 'failures')]


class rttMonCtrlOperModificationTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 9, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class rttMonCtrlOperDiagText(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 9, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class rttMonCtrlOperResetTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 9, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class rttMonCtrlOperOctetsInUse(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 9, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class rttMonCtrlOperConnectionLostOccurred(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 9, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class rttMonCtrlOperTimeoutOccurred(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 9, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class rttMonCtrlOperOverThresholdOccurred(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 9, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class rttMonCtrlOperNumRtts(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 9, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rttMonCtrlOperRttLife(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 9, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = 'seconds'


class rttMonCtrlOperState(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 9, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'reset'), Enum(2, 'orderlyStop'), Enum(3, 'immediateStop'), Enum(4, 'pending'), Enum(5, 'inactive'), Enum(6, 'active')]


class rttMonLatestRttOperCompletionTime(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 10, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32
	access = 4
	units = 'milliseconds'


class rttMonLatestRttOperSense(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 10, 1, 2])
	syntaxobject = RttResponseSense


class rttMonLatestRttOperApplSpecificSense(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 10, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rttMonLatestRttOperSenseDescription(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 10, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class rttMonLatestRttOperTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 10, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class rttMonLatestRttOperAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 10, 1, 6])
	syntaxobject = RttMonTargetAddress


class rttMonReactTriggerAdminRttMonCtrlAdminIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 11, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rttMonReactTriggerAdminStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 11, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class rttMonReactTriggerOperState(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 12, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'active'), Enum(2, 'pending')]


class rttMonStatsCaptureStartTimeIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class rttMonStatsCapturePathIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rttMonStatsCaptureHopIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rttMonStatsCaptureDistIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rttMonStatsCaptureCompletions(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rttMonStatsCaptureOverThresholds(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rttMonStatsCaptureSumCompletionTime(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32
	access = 4
	units = 'milliseconds'


class rttMonStatsCaptureSumCompletionTime2Low(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class rttMonStatsCaptureSumCompletionTime2High(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class rttMonStatsCaptureCompletionTimeMax(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32
	access = 4
	units = 'milliseconds'


class rttMonStatsCaptureCompletionTimeMin(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 1, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32
	access = 4
	units = 'milliseconds'


class rttMonStatsCollectNumDisconnects(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rttMonStatsCollectTimeouts(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rttMonStatsCollectBusies(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rttMonStatsCollectNoConnections(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rttMonStatsCollectDrops(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rttMonStatsCollectSequenceErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rttMonStatsCollectVerifyErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 2, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rttMonStatsCollectAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 2, 1, 8])
	syntaxobject = RttMonTargetAddress


class rttMonStatsTotalsElapsedTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 3, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.TimeInterval


class rttMonStatsTotalsInitiations(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 3, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rttMonHistoryCollectionLifeIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 4, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rttMonHistoryCollectionBucketIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 4, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rttMonHistoryCollectionSampleIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 4, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rttMonHistoryCollectionSampleTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 4, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class rttMonHistoryCollectionAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 4, 1, 1, 5])
	syntaxobject = RttMonTargetAddress


class rttMonHistoryCollectionCompletionTime(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 4, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32
	access = 4
	units = 'milliseconds'


class rttMonHistoryCollectionSense(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 4, 1, 1, 7])
	syntaxobject = RttResponseSense


class rttMonHistoryCollectionApplSpecificSense(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 4, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rttMonHistoryCollectionSenseDescription(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 4, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


# rows 
class rttMonApplSupportedRttTypesEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([rttMonApplSupportedRttTypes], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 1, 7, 1])
	access = 2
	columns = {'rttMonApplSupportedRttTypes': rttMonApplSupportedRttTypes, 'rttMonApplSupportedRttTypesValid': rttMonApplSupportedRttTypesValid}


class rttMonApplSupportedProtocolsEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([rttMonApplSupportedProtocols], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 1, 8, 1])
	access = 2
	columns = {'rttMonApplSupportedProtocols': rttMonApplSupportedProtocols, 'rttMonApplSupportedProtocolsValid': rttMonApplSupportedProtocolsValid}


class rttMonApplPreConfigedEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([rttMonApplPreConfigedType, rttMonApplPreConfigedName], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 1, 9, 1])
	access = 2
	columns = {'rttMonApplPreConfigedType': rttMonApplPreConfigedType, 'rttMonApplPreConfigedName': rttMonApplPreConfigedName, 'rttMonApplPreConfigedValid': rttMonApplPreConfigedValid}


class rttMonCtrlAdminEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([rttMonCtrlAdminIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 1, 1])
	access = 2
	rowstatus = rttMonCtrlAdminStatus
	columns = {'rttMonCtrlAdminIndex': rttMonCtrlAdminIndex, 'rttMonCtrlAdminOwner': rttMonCtrlAdminOwner, 'rttMonCtrlAdminTag': rttMonCtrlAdminTag, 'rttMonCtrlAdminRttType': rttMonCtrlAdminRttType, 'rttMonCtrlAdminThreshold': rttMonCtrlAdminThreshold, 'rttMonCtrlAdminFrequency': rttMonCtrlAdminFrequency, 'rttMonCtrlAdminTimeout': rttMonCtrlAdminTimeout, 'rttMonCtrlAdminVerifyData': rttMonCtrlAdminVerifyData, 'rttMonCtrlAdminStatus': rttMonCtrlAdminStatus}


class rttMonEchoAdminEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([rttMonCtrlAdminIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 2, 1])
	access = 2
	columns = {'rttMonEchoAdminProtocol': rttMonEchoAdminProtocol, 'rttMonEchoAdminTargetAddress': rttMonEchoAdminTargetAddress, 'rttMonEchoAdminPktDataRequestSize': rttMonEchoAdminPktDataRequestSize, 'rttMonEchoAdminPktDataResponseSize': rttMonEchoAdminPktDataResponseSize}


class rttMonFileIOAdminEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([rttMonCtrlAdminIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 3, 1])
	access = 2
	columns = {'rttMonFileIOAdminFilePath': rttMonFileIOAdminFilePath, 'rttMonFileIOAdminSize': rttMonFileIOAdminSize, 'rttMonFileIOAdminAction': rttMonFileIOAdminAction}


class rttMonScriptAdminEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([rttMonCtrlAdminIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 4, 1])
	access = 2
	columns = {'rttMonScriptAdminName': rttMonScriptAdminName, 'rttMonScriptAdminCmdLineParams': rttMonScriptAdminCmdLineParams}


from CISCO_RTTMON_MIB import rttMonCtrlAdminIndex
class rttMonScheduleAdminEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([rttMonCtrlAdminIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 5, 1])
	access = 2
	columns = {'rttMonScheduleAdminRttLife': rttMonScheduleAdminRttLife, 'rttMonScheduleAdminRttStartTime': rttMonScheduleAdminRttStartTime, 'rttMonScheduleAdminConceptRowAgeout': rttMonScheduleAdminConceptRowAgeout}


from CISCO_RTTMON_MIB import rttMonCtrlAdminIndex
class rttMonReactAdminEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([rttMonCtrlAdminIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 6, 1])
	access = 2
	columns = {'rttMonReactAdminConnectionEnable': rttMonReactAdminConnectionEnable, 'rttMonReactAdminTimeoutEnable': rttMonReactAdminTimeoutEnable, 'rttMonReactAdminThresholdType': rttMonReactAdminThresholdType, 'rttMonReactAdminThresholdFalling': rttMonReactAdminThresholdFalling, 'rttMonReactAdminThresholdCount': rttMonReactAdminThresholdCount, 'rttMonReactAdminThresholdCount2': rttMonReactAdminThresholdCount2, 'rttMonReactAdminActionType': rttMonReactAdminActionType}


from CISCO_RTTMON_MIB import rttMonCtrlAdminIndex
class rttMonStatisticsAdminEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([rttMonCtrlAdminIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 7, 1])
	access = 2
	columns = {'rttMonStatisticsAdminNumHourGroups': rttMonStatisticsAdminNumHourGroups, 'rttMonStatisticsAdminNumPaths': rttMonStatisticsAdminNumPaths, 'rttMonStatisticsAdminNumHops': rttMonStatisticsAdminNumHops, 'rttMonStatisticsAdminNumDistBuckets': rttMonStatisticsAdminNumDistBuckets, 'rttMonStatisticsAdminDistInterval': rttMonStatisticsAdminDistInterval}


from CISCO_RTTMON_MIB import rttMonCtrlAdminIndex
class rttMonHistoryAdminEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([rttMonCtrlAdminIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 8, 1])
	access = 2
	columns = {'rttMonHistoryAdminNumLives': rttMonHistoryAdminNumLives, 'rttMonHistoryAdminNumBuckets': rttMonHistoryAdminNumBuckets, 'rttMonHistoryAdminNumSamples': rttMonHistoryAdminNumSamples, 'rttMonHistoryAdminFilter': rttMonHistoryAdminFilter}


from CISCO_RTTMON_MIB import rttMonCtrlAdminIndex
class rttMonCtrlOperEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([rttMonCtrlAdminIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 9, 1])
	access = 2
	columns = {'rttMonCtrlOperModificationTime': rttMonCtrlOperModificationTime, 'rttMonCtrlOperDiagText': rttMonCtrlOperDiagText, 'rttMonCtrlOperResetTime': rttMonCtrlOperResetTime, 'rttMonCtrlOperOctetsInUse': rttMonCtrlOperOctetsInUse, 'rttMonCtrlOperConnectionLostOccurred': rttMonCtrlOperConnectionLostOccurred, 'rttMonCtrlOperTimeoutOccurred': rttMonCtrlOperTimeoutOccurred, 'rttMonCtrlOperOverThresholdOccurred': rttMonCtrlOperOverThresholdOccurred, 'rttMonCtrlOperNumRtts': rttMonCtrlOperNumRtts, 'rttMonCtrlOperRttLife': rttMonCtrlOperRttLife, 'rttMonCtrlOperState': rttMonCtrlOperState}


from CISCO_RTTMON_MIB import rttMonCtrlAdminIndex
class rttMonLatestRttOperEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([rttMonCtrlAdminIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 10, 1])
	access = 2
	columns = {'rttMonLatestRttOperCompletionTime': rttMonLatestRttOperCompletionTime, 'rttMonLatestRttOperSense': rttMonLatestRttOperSense, 'rttMonLatestRttOperApplSpecificSense': rttMonLatestRttOperApplSpecificSense, 'rttMonLatestRttOperSenseDescription': rttMonLatestRttOperSenseDescription, 'rttMonLatestRttOperTime': rttMonLatestRttOperTime, 'rttMonLatestRttOperAddress': rttMonLatestRttOperAddress}


class rttMonReactTriggerAdminEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([rttMonCtrlAdminIndex, rttMonReactTriggerAdminRttMonCtrlAdminIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 11, 1])
	access = 2
	rowstatus = rttMonReactTriggerAdminStatus
	columns = {'rttMonReactTriggerAdminRttMonCtrlAdminIndex': rttMonReactTriggerAdminRttMonCtrlAdminIndex, 'rttMonReactTriggerAdminStatus': rttMonReactTriggerAdminStatus}


from CISCO_RTTMON_MIB import rttMonCtrlAdminIndex
from CISCO_RTTMON_MIB import rttMonReactTriggerAdminRttMonCtrlAdminIndex
class rttMonReactTriggerOperEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([rttMonCtrlAdminIndex, rttMonReactTriggerAdminRttMonCtrlAdminIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 2, 12, 1])
	access = 2
	columns = {'rttMonReactTriggerOperState': rttMonReactTriggerOperState}


class rttMonStatsCaptureEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([rttMonCtrlAdminIndex, rttMonStatsCaptureStartTimeIndex, rttMonStatsCapturePathIndex, rttMonStatsCaptureHopIndex, rttMonStatsCaptureDistIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 1, 1])
	access = 2
	columns = {'rttMonStatsCaptureStartTimeIndex': rttMonStatsCaptureStartTimeIndex, 'rttMonStatsCapturePathIndex': rttMonStatsCapturePathIndex, 'rttMonStatsCaptureHopIndex': rttMonStatsCaptureHopIndex, 'rttMonStatsCaptureDistIndex': rttMonStatsCaptureDistIndex, 'rttMonStatsCaptureCompletions': rttMonStatsCaptureCompletions, 'rttMonStatsCaptureOverThresholds': rttMonStatsCaptureOverThresholds, 'rttMonStatsCaptureSumCompletionTime': rttMonStatsCaptureSumCompletionTime, 'rttMonStatsCaptureSumCompletionTime2Low': rttMonStatsCaptureSumCompletionTime2Low, 'rttMonStatsCaptureSumCompletionTime2High': rttMonStatsCaptureSumCompletionTime2High, 'rttMonStatsCaptureCompletionTimeMax': rttMonStatsCaptureCompletionTimeMax, 'rttMonStatsCaptureCompletionTimeMin': rttMonStatsCaptureCompletionTimeMin}


class rttMonStatsCollectEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([rttMonCtrlAdminIndex, rttMonStatsCaptureStartTimeIndex, rttMonStatsCapturePathIndex, rttMonStatsCaptureHopIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 2, 1])
	access = 2
	columns = {'rttMonStatsCollectNumDisconnects': rttMonStatsCollectNumDisconnects, 'rttMonStatsCollectTimeouts': rttMonStatsCollectTimeouts, 'rttMonStatsCollectBusies': rttMonStatsCollectBusies, 'rttMonStatsCollectNoConnections': rttMonStatsCollectNoConnections, 'rttMonStatsCollectDrops': rttMonStatsCollectDrops, 'rttMonStatsCollectSequenceErrors': rttMonStatsCollectSequenceErrors, 'rttMonStatsCollectVerifyErrors': rttMonStatsCollectVerifyErrors, 'rttMonStatsCollectAddress': rttMonStatsCollectAddress}


class rttMonStatsTotalsEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([rttMonCtrlAdminIndex, rttMonStatsCaptureStartTimeIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 3, 1])
	access = 2
	columns = {'rttMonStatsTotalsElapsedTime': rttMonStatsTotalsElapsedTime, 'rttMonStatsTotalsInitiations': rttMonStatsTotalsInitiations}


class rttMonHistoryCollectionEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([rttMonCtrlAdminIndex, rttMonHistoryCollectionLifeIndex, rttMonHistoryCollectionBucketIndex, rttMonHistoryCollectionSampleIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 4, 1, 1])
	access = 2
	columns = {'rttMonHistoryCollectionLifeIndex': rttMonHistoryCollectionLifeIndex, 'rttMonHistoryCollectionBucketIndex': rttMonHistoryCollectionBucketIndex, 'rttMonHistoryCollectionSampleIndex': rttMonHistoryCollectionSampleIndex, 'rttMonHistoryCollectionSampleTime': rttMonHistoryCollectionSampleTime, 'rttMonHistoryCollectionAddress': rttMonHistoryCollectionAddress, 'rttMonHistoryCollectionCompletionTime': rttMonHistoryCollectionCompletionTime, 'rttMonHistoryCollectionSense': rttMonHistoryCollectionSense, 'rttMonHistoryCollectionApplSpecificSense': rttMonHistoryCollectionApplSpecificSense, 'rttMonHistoryCollectionSenseDescription': rttMonHistoryCollectionSenseDescription}


# notifications (traps) 
class rttMonConnectionChangeNotification(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 2, 0, 1])

class rttMonTimeoutNotification(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 2, 0, 2])

class rttMonThresholdNotification(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 2, 0, 3])

# groups 
class ciscoApplGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 3, 2, 1])
	group = [rttMonApplVersion, rttMonApplMaxPacketDataSize, rttMonApplTimeOfLastSet, rttMonApplSupportedRttTypesValid, rttMonApplSupportedProtocolsValid, rttMonApplNumCtrlAdminEntry, rttMonApplReset, rttMonApplPreConfigedReset, rttMonApplPreConfigedValid]

class ciscoCtrlGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 3, 2, 2])
	group = [rttMonCtrlAdminOwner, rttMonCtrlAdminTag, rttMonCtrlAdminRttType, rttMonCtrlAdminThreshold, rttMonCtrlAdminFrequency, rttMonCtrlAdminTimeout, rttMonCtrlAdminVerifyData, rttMonCtrlAdminStatus, rttMonEchoAdminProtocol, rttMonEchoAdminTargetAddress, rttMonEchoAdminPktDataRequestSize, rttMonEchoAdminPktDataResponseSize, rttMonFileIOAdminFilePath, rttMonFileIOAdminSize, rttMonFileIOAdminAction, rttMonScriptAdminName, rttMonScriptAdminCmdLineParams, rttMonScheduleAdminRttLife, rttMonScheduleAdminRttStartTime, rttMonScheduleAdminConceptRowAgeout, rttMonReactAdminConnectionEnable, rttMonReactAdminTimeoutEnable, rttMonReactAdminThresholdType, rttMonReactAdminThresholdFalling, rttMonReactAdminThresholdCount, rttMonReactAdminThresholdCount2, rttMonReactAdminActionType, rttMonStatisticsAdminNumHourGroups, rttMonStatisticsAdminNumPaths, rttMonStatisticsAdminNumHops, rttMonStatisticsAdminNumDistBuckets, rttMonStatisticsAdminDistInterval, rttMonHistoryAdminNumLives, rttMonHistoryAdminNumBuckets, rttMonHistoryAdminNumSamples, rttMonHistoryAdminFilter, rttMonCtrlOperModificationTime, rttMonCtrlOperDiagText, rttMonCtrlOperResetTime, rttMonCtrlOperOctetsInUse, rttMonCtrlOperConnectionLostOccurred, rttMonCtrlOperTimeoutOccurred, rttMonCtrlOperOverThresholdOccurred, rttMonCtrlOperNumRtts, rttMonCtrlOperRttLife, rttMonCtrlOperState, rttMonLatestRttOperCompletionTime, rttMonLatestRttOperSense, rttMonLatestRttOperApplSpecificSense, rttMonLatestRttOperSenseDescription, rttMonLatestRttOperTime, rttMonLatestRttOperAddress, rttMonReactTriggerAdminStatus, rttMonReactTriggerOperState]

class ciscoStatsGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 3, 2, 3])
	group = [rttMonStatsCaptureCompletions, rttMonStatsCaptureOverThresholds, rttMonStatsCaptureSumCompletionTime, rttMonStatsCaptureSumCompletionTime2Low, rttMonStatsCaptureSumCompletionTime2High, rttMonStatsCaptureCompletionTimeMax, rttMonStatsCaptureCompletionTimeMin, rttMonStatsCollectNumDisconnects, rttMonStatsCollectTimeouts, rttMonStatsCollectBusies, rttMonStatsCollectNoConnections, rttMonStatsCollectDrops, rttMonStatsCollectSequenceErrors, rttMonStatsCollectVerifyErrors, rttMonStatsCollectAddress, rttMonStatsTotalsElapsedTime, rttMonStatsTotalsInitiations]

class ciscoHistoryGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 42, 3, 2, 4])
	group = [rttMonHistoryCollectionSampleTime, rttMonHistoryCollectionAddress, rttMonHistoryCollectionCompletionTime, rttMonHistoryCollectionSense, rttMonHistoryCollectionApplSpecificSense, rttMonHistoryCollectionSenseDescription]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
