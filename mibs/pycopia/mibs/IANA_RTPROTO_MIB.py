# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, mib_2
from SNMPv2_TC import TEXTUAL_CONVENTION

class IANA_RTPROTO_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/iana/IANA-RTPROTO-MIB'
	conformance = 5
	name = 'IANA-RTPROTO-MIB'
	language = 2
	description = 'This MIB module defines the IANAipRouteProtocol and\nIANAipMRouteProtocol textual conventions for use in MIBs\nwhich need to identify unicast or multicast routing\nmechanisms.\n\nAny additions or changes to the contents of this MIB module\nrequire either publication of an RFC, or Designated Expert\nReview as defined in RFC 2434, Guidelines for Writing an\nIANA Considerations Section in RFCs.  The Designated Expert \nwill be selected by the IESG Area Director(s) of the Routing\nArea.'

# nodes
class ianaRtProtoMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 84])
	name = 'ianaRtProtoMIB'


# macros
# types 

class IANAipRouteProtocol(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'other'), Enum(2, 'local'), Enum(3, 'netmgmt'), Enum(4, 'icmp'), Enum(5, 'egp'), Enum(6, 'ggp'), Enum(7, 'hello'), Enum(8, 'rip'), Enum(9, 'isIs'), Enum(10, 'esIs'), Enum(11, 'ciscoIgrp'), Enum(12, 'bbnSpfIgp'), Enum(13, 'ospf'), Enum(14, 'bgp'), Enum(15, 'idpr'), Enum(16, 'ciscoEigrp'), Enum(17, 'dvmrp')]


class IANAipMRouteProtocol(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'other'), Enum(2, 'local'), Enum(3, 'netmgmt'), Enum(4, 'dvmrp'), Enum(5, 'mospf'), Enum(6, 'pimSparseDense'), Enum(7, 'cbt'), Enum(8, 'pimSparseMode'), Enum(9, 'pimDenseMode'), Enum(10, 'igmpOnly'), Enum(11, 'bgmp'), Enum(12, 'msdp')]

# scalars 
# columns
# rows 
# notifications (traps) 
# groups 
# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
