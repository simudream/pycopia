# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, Counter32, Integer32, IpAddress, Gauge32, NOTIFICATION_TYPE
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from CISCO_SMI import ciscoMgmt
from SNMPv2_TC import TruthValue, MacAddress
from IF_MIB import InterfaceIndex

class CISCO_RSRB_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/site/CISCO-RSRB-MIB'
	conformance = 2
	name = 'CISCO-RSRB-MIB'
	language = 2
	description = "This is the MIB module for objects used to manage RSRB. \n\nOverview of remote source-route bridging (RSRB) management and MIB\n\nMIB description                        \nThe RSRB MIB will include the following managed entities: \n 1) Virtual Rings \n 2) Remote Peers\n 3) Associated Token Rings\n\nThe goal of this MIB to to allow a management stations to\ndisplay the attributes of the local-remote RSRB peer relationship.\n\nThe following example configuration will show how the RSRB MIB can\nbe used to manage RSRB.\n\n  == Token Ring == CISCO A == IP Network/ == CISCO B == Token Ring\n                              Virtual Ring\n\nBoth CISCO A and CISCO B are RSRB peers, having the same virtual ring\nnumber.  In this example information will be gatherered from CISCO A\n(the local peer), and CISCO B is considered to be CISCO A's remote peer.\n\nThe first table is the virtual ring table.  There is one entry for\neach RSRB virtual ring the router is defined on.  The fields included\nin this table include\n * the virtual ring number, or index\n * the IP address used by the router\n * the maximum outbound queue size for each RSRB remote peer\nIn this example the table has a single entry since CISCO A only belongs\nto one RSRB virtual ring.\n\nThe next table is for each remote peer in the virtual ring.  There\ncan be multiple RSRB remote peers.  The remote peer information includes:\n * an internally generated (not configured) index into the table\n * the type of data encapsulation with the remote peer\n * identification of how to get to the remote peer; either an IP address\n   or an interface index, depending upon the encapsulation type\n * the state of the remote peer\n * various statistics (bytes and packets sent and received, explorers\n   generated, outbound queue size, and packets dropped\n * whether local acknowledgment is used with the remote peer\n * the RSRB version of the peer\nIn this example there would be just one remote peer table entry, \nfor CISCO B.\n\nThe last table is for the real local and remote token rings associated\nwith the RSRB virtual ring, that this router has either had configured\nor learned about dynamically.  The ring information includes:\n * the token ring number (index)\n * the bridge number connecting the real ring to the virtual ring\n * the ring entry type\n * the local or remote routers mac address on the interface to the ring\n * the local router's interface index, or the remote router's IP address,\n   depending on if this is a local or remote ring\n * number of packets forwarded by the local router onto this ring\nIn this example CISCO A would have two ring entries:  one for the local\nring it is connected to, and one for the ring CISCO B is a part of.\n\nA management application can construct a virtual ring view either by\ncollecting MIB information from all routers and grouping those in the\nsame virtual ring together, or beginning with a particular router or\nrouters, and collecting MIB information about other peer routers."

# nodes
class ciscoRsrbMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 29])
	name = 'ciscoRsrbMIB'

class rsrbObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 29, 1])
	name = 'rsrbObjects'

class rsrbVirtualRings(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 1])
	name = 'rsrbVirtualRings'

class rsrbRemotePeers(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 2])
	name = 'rsrbRemotePeers'

class rsrbPhysicalRings(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 3])
	name = 'rsrbPhysicalRings'

class rsrbNotificationPrefix(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 29, 2])
	name = 'rsrbNotificationPrefix'

class rsrbNotifications(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 29, 2, 0])
	name = 'rsrbNotifications'

class rsrbMibConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 29, 3])
	name = 'rsrbMibConformance'

class rsrbMibCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 29, 3, 1])
	name = 'rsrbMibCompliances'

class rsrbMibGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 29, 3, 2])
	name = 'rsrbMibGroups'


# macros
# types 
# scalars 
# columns
class rsrbVirtRingIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 1, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rsrbVirtRingIPAddr(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 1, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class rsrbVirtRingMaxTcpQSize(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 1, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rsrbRemotePeerIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 2, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rsrbRemotePeerEncapsulation(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 2, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'tcp'), Enum(2, 'serial'), Enum(3, 'lan'), Enum(4, 'fst'), Enum(5, 'frameRelay')]


class rsrbRemotePeerIPAddr(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 2, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class rsrbRemotePeerLocalIfIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 2, 1, 1, 4])
	syntaxobject = InterfaceIndex


class rsrbRemotePeerState(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 2, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'dead'), Enum(2, 'closed'), Enum(3, 'opening'), Enum(4, 'openWaitXport'), Enum(5, 'waitRemoteRsp'), Enum(6, 'remoteResponded'), Enum(7, 'remoteOpened'), Enum(8, 'draining'), Enum(9, 'connected')]


class rsrbRemotePeerPacketsRx(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 2, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rsrbRemotePeerPacketsTx(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 2, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rsrbRemotePeerBytesRx(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 2, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rsrbRemotePeerBytesTx(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 2, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rsrbRemotePeerExplorersRx(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 2, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rsrbRemotePeerTcpQueue(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 2, 1, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class rsrbRemotePeerDrops(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 2, 1, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rsrbRemotePeerLocalAck(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 2, 1, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class rsrbRemotePeerVersion(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 2, 1, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rsrbRingIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 3, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rsrbRingBridge(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 3, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rsrbRingLocal(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 3, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class rsrbRingType(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 3, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'static'), Enum(2, 'dynamic'), Enum(3, 'sdllc'), Enum(4, 'qllc'), Enum(5, 'virtual')]


class rsrbRingMacAddr(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 3, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.MacAddress


class rsrbRingLocalIfIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 3, 1, 1, 6])
	syntaxobject = InterfaceIndex


class rsrbRingRemoteIpAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 3, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class rsrbRingNbrPacketsFwd(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 3, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


# rows 
class rsrbVirtRingEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([rsrbVirtRingIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 1, 1, 1])
	access = 2
	columns = {'rsrbVirtRingIndex': rsrbVirtRingIndex, 'rsrbVirtRingIPAddr': rsrbVirtRingIPAddr, 'rsrbVirtRingMaxTcpQSize': rsrbVirtRingMaxTcpQSize}


class rsrbRemotePeerEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([rsrbVirtRingIndex, rsrbRemotePeerIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 2, 1, 1])
	access = 2
	columns = {'rsrbRemotePeerIndex': rsrbRemotePeerIndex, 'rsrbRemotePeerEncapsulation': rsrbRemotePeerEncapsulation, 'rsrbRemotePeerIPAddr': rsrbRemotePeerIPAddr, 'rsrbRemotePeerLocalIfIndex': rsrbRemotePeerLocalIfIndex, 'rsrbRemotePeerState': rsrbRemotePeerState, 'rsrbRemotePeerPacketsRx': rsrbRemotePeerPacketsRx, 'rsrbRemotePeerPacketsTx': rsrbRemotePeerPacketsTx, 'rsrbRemotePeerBytesRx': rsrbRemotePeerBytesRx, 'rsrbRemotePeerBytesTx': rsrbRemotePeerBytesTx, 'rsrbRemotePeerExplorersRx': rsrbRemotePeerExplorersRx, 'rsrbRemotePeerTcpQueue': rsrbRemotePeerTcpQueue, 'rsrbRemotePeerDrops': rsrbRemotePeerDrops, 'rsrbRemotePeerLocalAck': rsrbRemotePeerLocalAck, 'rsrbRemotePeerVersion': rsrbRemotePeerVersion}


class rsrbRingEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([rsrbVirtRingIndex, rsrbRingIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 29, 1, 3, 1, 1])
	access = 2
	columns = {'rsrbRingIndex': rsrbRingIndex, 'rsrbRingBridge': rsrbRingBridge, 'rsrbRingLocal': rsrbRingLocal, 'rsrbRingType': rsrbRingType, 'rsrbRingMacAddr': rsrbRingMacAddr, 'rsrbRingLocalIfIndex': rsrbRingLocalIfIndex, 'rsrbRingRemoteIpAddress': rsrbRingRemoteIpAddress, 'rsrbRingNbrPacketsFwd': rsrbRingNbrPacketsFwd}


# notifications (traps) 
class rsrbPeerStateChangeNotification(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 29, 2, 0, 1])

# groups 
class rsrbVirtRingGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 29, 3, 2, 1])
	group = [rsrbVirtRingIPAddr, rsrbVirtRingMaxTcpQSize]

class rsrbRemotePeerGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 29, 3, 2, 2])
	group = [rsrbRemotePeerEncapsulation, rsrbRemotePeerIPAddr, rsrbRemotePeerLocalIfIndex, rsrbRemotePeerState, rsrbRemotePeerPacketsRx, rsrbRemotePeerPacketsTx, rsrbRemotePeerBytesRx, rsrbRemotePeerBytesTx, rsrbRemotePeerExplorersRx, rsrbRemotePeerTcpQueue, rsrbRemotePeerDrops, rsrbRemotePeerLocalAck, rsrbRemotePeerVersion]

class rsrbRingGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 29, 3, 2, 3])
	group = [rsrbRingBridge, rsrbRingLocal, rsrbRingType, rsrbRingMacAddr, rsrbRingLocalIfIndex, rsrbRingRemoteIpAddress, rsrbRingNbrPacketsFwd]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
