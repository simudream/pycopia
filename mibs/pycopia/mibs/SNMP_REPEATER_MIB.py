# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import Counter32, Counter64, Integer32, Gauge32, TimeTicks, OBJECT_TYPE, MODULE_IDENTITY, NOTIFICATION_TYPE, mib_2
from SNMPv2_CONF import OBJECT_GROUP, MODULE_COMPLIANCE
from SNMPv2_TC import TimeStamp, DisplayString, MacAddress, TEXTUAL_CONVENTION, RowStatus, TestAndIncr
from IF_MIB import OwnerString

class SNMP_REPEATER_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/SNMP-REPEATER-MIB'
	conformance = 3
	name = 'SNMP-REPEATER-MIB'
	language = 2
	description = "Management information for 802.3 repeaters.\n\nThe following references are used throughout\nthis MIB module:\n\n[IEEE 802.3 Std]\n    refers to IEEE 802.3/ISO 8802-3 Information\n    processing systems - Local area networks -\n    Part 3: Carrier sense multiple access with\n    collision detection (CSMA/CD) access method\n    and physical layer specifications (1993).\n\n[IEEE 802.3 Mgt]\n    refers to IEEE 802.3u-1995, '10 Mb/s &\n    100 Mb/s Management, Section 30,'\n    Supplement to ANSI/IEEE 802.3.\n\nThe following terms are used throughout this\nMIB module.  For complete formal definitions,\nthe IEEE 802.3 standards should be consulted\nwherever possible:\n\nSystem - A managed entity compliant with this\nMIB, and incorporating at least one managed\n802.3 repeater.\n\nChassis - An enclosure for one managed repeater,\npart of a managed repeater, or several managed\nrepeaters.  It typically contains an integral\npower supply and a variable number of available\nmodule slots.\n\nRepeater-unit - The portion of the repeater set\nthat is inboard of the physical media interfaces.\nThe physical media interfaces (MAUs, AUIs) may be\nphysically separated from the repeater-unit, or\nthey may be integrated into the same physical\npackage.\n\nTrivial repeater-unit - An isolated port that can\ngather statistics.\n\nGroup - A recommended, but optional, entity\ndefined by the IEEE 802.3 management standard,\nin order to support a modular numbering scheme.\nThe classical example allows an implementor to\nrepresent field-replaceable units as groups of\nports, with the port numbering matching the\nmodular hardware implementation.\n\nSystem interconnect segment - An internal\nsegment allowing interconnection of ports\nbelonging to different physical entities\ninto the same logical manageable repeater.\nExamples of implementation might be\nbackplane busses in modular hubs, or\nchaining cables in stacks of hubs.\nStack - A scalable system that may include\nmanaged repeaters, in which modularity is\nachieved by interconnecting a number of\ndifferent chassis.\n\nModule - A building block in a modular\nchassis.  It typically maps into one 'slot';\nhowever, the range of configurations may be\nvery large, with several modules entering\none slot, or one module covering several\nslots."

# nodes
class snmpDot3RptrMgt(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22])
	name = 'snmpDot3RptrMgt'

class rptrBasicPackage(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 1])
	name = 'rptrBasicPackage'

class rptrRptrInfo(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 1, 1])
	name = 'rptrRptrInfo'

class rptrGroupInfo(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 1, 2])
	name = 'rptrGroupInfo'

class rptrPortInfo(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 1, 3])
	name = 'rptrPortInfo'

class rptrAllRptrInfo(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 1, 4])
	name = 'rptrAllRptrInfo'

class rptrMonitorPackage(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 2])
	name = 'rptrMonitorPackage'

class rptrMonitorRptrInfo(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 2, 1])
	name = 'rptrMonitorRptrInfo'

class rptrMonitorGroupInfo(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 2, 2])
	name = 'rptrMonitorGroupInfo'

class rptrMonitorPortInfo(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 2, 3])
	name = 'rptrMonitorPortInfo'

class rptrMonitorAllRptrInfo(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 2, 4])
	name = 'rptrMonitorAllRptrInfo'

class rptrAddrTrackPackage(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 3])
	name = 'rptrAddrTrackPackage'

class rptrAddrTrackRptrInfo(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 3, 1])
	name = 'rptrAddrTrackRptrInfo'

class rptrAddrTrackGroupInfo(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 3, 2])
	name = 'rptrAddrTrackGroupInfo'

class rptrAddrTrackPortInfo(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 3, 3])
	name = 'rptrAddrTrackPortInfo'

class rptrTopNPackage(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 4])
	name = 'rptrTopNPackage'

class rptrTopNRptrInfo(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 4, 1])
	name = 'rptrTopNRptrInfo'

class rptrTopNGroupInfo(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 4, 2])
	name = 'rptrTopNGroupInfo'

class rptrTopNPortInfo(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 4, 3])
	name = 'rptrTopNPortInfo'

class snmpRptrMod(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 5])
	name = 'snmpRptrMod'

class snmpRptrModConf(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 5, 1])
	name = 'snmpRptrModConf'

class snmpRptrModCompls(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 5, 1, 1])
	name = 'snmpRptrModCompls'

class snmpRptrModObjGrps(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 5, 1, 2])
	name = 'snmpRptrModObjGrps'

class snmpRptrModNotGrps(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 5, 1, 3])
	name = 'snmpRptrModNotGrps'


# macros
# types 

class OptMacAddr(pycopia.SMI.Basetypes.OctetString):
	status = 1
	ranges = Ranges(Range(0, 0), Range(6, 6))
	format = '1x:'

# scalars 
class rptrGroupCapacity(ScalarObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rptrOperStatus(ScalarObject):
	status = 2
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'ok'), Enum(3, 'rptrFailure'), Enum(4, 'groupFailure'), Enum(5, 'portFailure'), Enum(6, 'generalFailure')]


class rptrHealthText(ScalarObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class rptrReset(ScalarObject):
	status = 2
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'noReset'), Enum(2, 'reset')]


class rptrNonDisruptTest(ScalarObject):
	status = 2
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'noSelfTest'), Enum(2, 'selfTest')]


class rptrTotalPartitionedPorts(ScalarObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class rptrMonitorTransmitCollisions(ScalarObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


# columns
class rptrGroupIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 1, 2, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rptrGroupDescr(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 1, 2, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class rptrGroupObjectID(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 1, 2, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.ObjectIdentifier


class rptrGroupOperStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 1, 2, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'operational'), Enum(3, 'malfunctioning'), Enum(4, 'notPresent'), Enum(5, 'underTest'), Enum(6, 'resetInProgress')]


class rptrGroupLastOperStatusChange(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 1, 2, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class rptrGroupPortCapacity(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 1, 2, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rptrPortGroupIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 1, 3, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rptrPortIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 1, 3, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rptrPortAdminStatus(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 1, 3, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class rptrPortAutoPartitionState(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 1, 3, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'notAutoPartitioned'), Enum(2, 'autoPartitioned')]


class rptrPortOperStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 1, 3, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'operational'), Enum(2, 'notOperational'), Enum(3, 'notPresent')]


class rptrPortRptrId(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 1, 3, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rptrInfoId(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 1, 4, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rptrInfoRptrType(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 1, 4, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'tenMb'), Enum(3, 'onehundredMbClassI'), Enum(4, 'onehundredMbClassII')]


class rptrInfoOperStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 1, 4, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'ok'), Enum(3, 'failure')]


class rptrInfoReset(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 1, 4, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'noReset'), Enum(2, 'reset')]


class rptrInfoPartitionedPorts(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 1, 4, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class rptrInfoLastChange(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 1, 4, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class rptrMonitorGroupIndex(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 2, 2, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rptrMonitorGroupTotalFrames(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 2, 2, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rptrMonitorGroupTotalOctets(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 2, 2, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rptrMonitorGroupTotalErrors(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 2, 2, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rptrMonitorPortGroupIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 2, 3, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rptrMonitorPortIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 2, 3, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rptrMonitorPortReadableFrames(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 2, 3, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rptrMonitorPortReadableOctets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 2, 3, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rptrMonitorPortFCSErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 2, 3, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rptrMonitorPortAlignmentErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 2, 3, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rptrMonitorPortFrameTooLongs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 2, 3, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rptrMonitorPortShortEvents(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 2, 3, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rptrMonitorPortRunts(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 2, 3, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rptrMonitorPortCollisions(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 2, 3, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rptrMonitorPortLateEvents(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 2, 3, 1, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rptrMonitorPortVeryLongEvents(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 2, 3, 1, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rptrMonitorPortDataRateMismatches(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 2, 3, 1, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rptrMonitorPortAutoPartitions(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 2, 3, 1, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rptrMonitorPortTotalErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 2, 3, 1, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rptrMonitorPortLastChange(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 2, 3, 1, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class rptrMonitorPortIsolates(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 2, 3, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rptrMonitorPortSymbolErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 2, 3, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rptrMonitorPortUpper32Octets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 2, 3, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rptrMonitorPortHCReadableOctets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 2, 3, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class rptrMonTxCollisions(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 2, 4, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rptrMonTotalFrames(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 2, 4, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rptrMonTotalErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 2, 4, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rptrMonTotalOctets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 2, 4, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rptrMonUpper32TotalOctets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 2, 4, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rptrMonHCTotalOctets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 2, 4, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class rptrAddrSearchLock(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 3, 1, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.TestAndIncr


class rptrAddrSearchStatus(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 3, 1, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'notInUse'), Enum(2, 'inUse')]


class rptrAddrSearchAddress(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 3, 1, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.MacAddress


class rptrAddrSearchState(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 3, 1, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'none'), Enum(2, 'single'), Enum(3, 'multiple')]


class rptrAddrSearchGroup(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 3, 1, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rptrAddrSearchPort(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 3, 1, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rptrAddrSearchOwner(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 3, 1, 1, 1, 7])
	syntaxobject = OwnerString


class rptrAddrTrackGroupIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 3, 3, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rptrAddrTrackPortIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 3, 3, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rptrAddrTrackLastSourceAddress(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 3, 3, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.MacAddress


class rptrAddrTrackSourceAddrChanges(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 3, 3, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rptrAddrTrackNewLastSrcAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 3, 3, 1, 1, 5])
	syntaxobject = OptMacAddr


class rptrAddrTrackCapacity(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 3, 3, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rptrExtAddrTrackMacIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 3, 3, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rptrExtAddrTrackSourceAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 3, 3, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.MacAddress


class rptrTopNPortControlIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 4, 3, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rptrTopNPortRepeaterId(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 4, 3, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rptrTopNPortRateBase(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 4, 3, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'readableFrames'), Enum(2, 'readableOctets'), Enum(3, 'fcsErrors'), Enum(4, 'alignmentErrors'), Enum(5, 'frameTooLongs'), Enum(6, 'shortEvents'), Enum(7, 'runts'), Enum(8, 'collisions'), Enum(9, 'lateEvents'), Enum(10, 'veryLongEvents'), Enum(11, 'dataRateMismatches'), Enum(12, 'autoPartitions'), Enum(13, 'totalErrors'), Enum(14, 'isolates'), Enum(15, 'symbolErrors')]


class rptrTopNPortTimeRemaining(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 4, 3, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rptrTopNPortDuration(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 4, 3, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rptrTopNPortRequestedSize(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 4, 3, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rptrTopNPortGrantedSize(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 4, 3, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rptrTopNPortStartTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 4, 3, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class rptrTopNPortOwner(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 4, 3, 1, 1, 9])
	syntaxobject = OwnerString


class rptrTopNPortRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 4, 3, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class rptrTopNPortIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 4, 3, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rptrTopNPortGroupIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 4, 3, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rptrTopNPortPortIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 4, 3, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rptrTopNPortRate(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 4, 3, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


# rows 
class rptrGroupEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([rptrGroupIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 1, 2, 1, 1])
	access = 2
	columns = {'rptrGroupIndex': rptrGroupIndex, 'rptrGroupDescr': rptrGroupDescr, 'rptrGroupObjectID': rptrGroupObjectID, 'rptrGroupOperStatus': rptrGroupOperStatus, 'rptrGroupLastOperStatusChange': rptrGroupLastOperStatusChange, 'rptrGroupPortCapacity': rptrGroupPortCapacity}


class rptrPortEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([rptrPortGroupIndex, rptrPortIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 1, 3, 1, 1])
	access = 2
	columns = {'rptrPortGroupIndex': rptrPortGroupIndex, 'rptrPortIndex': rptrPortIndex, 'rptrPortAdminStatus': rptrPortAdminStatus, 'rptrPortAutoPartitionState': rptrPortAutoPartitionState, 'rptrPortOperStatus': rptrPortOperStatus, 'rptrPortRptrId': rptrPortRptrId}


class rptrInfoEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([rptrInfoId], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 1, 4, 1, 1])
	access = 2
	columns = {'rptrInfoId': rptrInfoId, 'rptrInfoRptrType': rptrInfoRptrType, 'rptrInfoOperStatus': rptrInfoOperStatus, 'rptrInfoReset': rptrInfoReset, 'rptrInfoPartitionedPorts': rptrInfoPartitionedPorts, 'rptrInfoLastChange': rptrInfoLastChange}


class rptrMonitorGroupEntry(RowObject):
	status = 2
	index = pycopia.SMI.Objects.IndexObjects([rptrMonitorGroupIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 2, 2, 1, 1])
	access = 2
	columns = {'rptrMonitorGroupIndex': rptrMonitorGroupIndex, 'rptrMonitorGroupTotalFrames': rptrMonitorGroupTotalFrames, 'rptrMonitorGroupTotalOctets': rptrMonitorGroupTotalOctets, 'rptrMonitorGroupTotalErrors': rptrMonitorGroupTotalErrors}


class rptrMonitorPortEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([rptrMonitorPortGroupIndex, rptrMonitorPortIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 2, 3, 1, 1])
	access = 2
	columns = {'rptrMonitorPortGroupIndex': rptrMonitorPortGroupIndex, 'rptrMonitorPortIndex': rptrMonitorPortIndex, 'rptrMonitorPortReadableFrames': rptrMonitorPortReadableFrames, 'rptrMonitorPortReadableOctets': rptrMonitorPortReadableOctets, 'rptrMonitorPortFCSErrors': rptrMonitorPortFCSErrors, 'rptrMonitorPortAlignmentErrors': rptrMonitorPortAlignmentErrors, 'rptrMonitorPortFrameTooLongs': rptrMonitorPortFrameTooLongs, 'rptrMonitorPortShortEvents': rptrMonitorPortShortEvents, 'rptrMonitorPortRunts': rptrMonitorPortRunts, 'rptrMonitorPortCollisions': rptrMonitorPortCollisions, 'rptrMonitorPortLateEvents': rptrMonitorPortLateEvents, 'rptrMonitorPortVeryLongEvents': rptrMonitorPortVeryLongEvents, 'rptrMonitorPortDataRateMismatches': rptrMonitorPortDataRateMismatches, 'rptrMonitorPortAutoPartitions': rptrMonitorPortAutoPartitions, 'rptrMonitorPortTotalErrors': rptrMonitorPortTotalErrors, 'rptrMonitorPortLastChange': rptrMonitorPortLastChange}


class rptrMonitor100PortEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([rptrMonitorPortGroupIndex, rptrMonitorPortIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 2, 3, 2, 1])
	access = 2
	columns = {'rptrMonitorPortIsolates': rptrMonitorPortIsolates, 'rptrMonitorPortSymbolErrors': rptrMonitorPortSymbolErrors, 'rptrMonitorPortUpper32Octets': rptrMonitorPortUpper32Octets, 'rptrMonitorPortHCReadableOctets': rptrMonitorPortHCReadableOctets}


class rptrMonEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([rptrInfoId], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 2, 4, 1, 1])
	access = 2
	columns = {'rptrMonTxCollisions': rptrMonTxCollisions, 'rptrMonTotalFrames': rptrMonTotalFrames, 'rptrMonTotalErrors': rptrMonTotalErrors, 'rptrMonTotalOctets': rptrMonTotalOctets}


class rptrMon100Entry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([rptrInfoId], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 2, 4, 2, 1])
	access = 2
	columns = {'rptrMonUpper32TotalOctets': rptrMonUpper32TotalOctets, 'rptrMonHCTotalOctets': rptrMonHCTotalOctets}


class rptrAddrSearchEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([rptrInfoId], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 3, 1, 1, 1])
	access = 2
	columns = {'rptrAddrSearchLock': rptrAddrSearchLock, 'rptrAddrSearchStatus': rptrAddrSearchStatus, 'rptrAddrSearchAddress': rptrAddrSearchAddress, 'rptrAddrSearchState': rptrAddrSearchState, 'rptrAddrSearchGroup': rptrAddrSearchGroup, 'rptrAddrSearchPort': rptrAddrSearchPort, 'rptrAddrSearchOwner': rptrAddrSearchOwner}


class rptrAddrTrackEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([rptrAddrTrackGroupIndex, rptrAddrTrackPortIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 3, 3, 1, 1])
	access = 2
	columns = {'rptrAddrTrackGroupIndex': rptrAddrTrackGroupIndex, 'rptrAddrTrackPortIndex': rptrAddrTrackPortIndex, 'rptrAddrTrackLastSourceAddress': rptrAddrTrackLastSourceAddress, 'rptrAddrTrackSourceAddrChanges': rptrAddrTrackSourceAddrChanges, 'rptrAddrTrackNewLastSrcAddress': rptrAddrTrackNewLastSrcAddress, 'rptrAddrTrackCapacity': rptrAddrTrackCapacity}


class rptrExtAddrTrackEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([rptrAddrTrackGroupIndex, rptrAddrTrackPortIndex, rptrExtAddrTrackMacIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 3, 3, 2, 1])
	access = 2
	columns = {'rptrExtAddrTrackMacIndex': rptrExtAddrTrackMacIndex, 'rptrExtAddrTrackSourceAddress': rptrExtAddrTrackSourceAddress}


class rptrTopNPortControlEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([rptrTopNPortControlIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 4, 3, 1, 1])
	access = 2
	rowstatus = rptrTopNPortRowStatus
	columns = {'rptrTopNPortControlIndex': rptrTopNPortControlIndex, 'rptrTopNPortRepeaterId': rptrTopNPortRepeaterId, 'rptrTopNPortRateBase': rptrTopNPortRateBase, 'rptrTopNPortTimeRemaining': rptrTopNPortTimeRemaining, 'rptrTopNPortDuration': rptrTopNPortDuration, 'rptrTopNPortRequestedSize': rptrTopNPortRequestedSize, 'rptrTopNPortGrantedSize': rptrTopNPortGrantedSize, 'rptrTopNPortStartTime': rptrTopNPortStartTime, 'rptrTopNPortOwner': rptrTopNPortOwner, 'rptrTopNPortRowStatus': rptrTopNPortRowStatus}


class rptrTopNPortEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([rptrTopNPortControlIndex, rptrTopNPortIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 4, 3, 2, 1])
	access = 2
	columns = {'rptrTopNPortIndex': rptrTopNPortIndex, 'rptrTopNPortGroupIndex': rptrTopNPortGroupIndex, 'rptrTopNPortPortIndex': rptrTopNPortPortIndex, 'rptrTopNPortRate': rptrTopNPortRate}


# notifications (traps) 
class rptrHealth(NotificationObject):
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 0, 1])

class rptrGroupChange(NotificationObject):
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 0, 2])

class rptrResetEvent(NotificationObject):
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 0, 3])

class rptrInfoHealth(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 0, 4])

class rptrInfoResetEvent(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 0, 5])

# groups 
class snmpRptrGrpBasic1516(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 5, 1, 2, 1])
	group = [rptrGroupCapacity, rptrOperStatus, rptrHealthText, rptrReset, rptrNonDisruptTest, rptrTotalPartitionedPorts, rptrGroupIndex, rptrGroupDescr, rptrGroupObjectID, rptrGroupOperStatus, rptrGroupLastOperStatusChange, rptrGroupPortCapacity, rptrPortGroupIndex, rptrPortIndex, rptrPortAdminStatus, rptrPortAutoPartitionState, rptrPortOperStatus]

class snmpRptrGrpMonitor1516(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 5, 1, 2, 2])
	group = [rptrMonitorTransmitCollisions, rptrMonitorGroupIndex, rptrMonitorGroupTotalFrames, rptrMonitorGroupTotalOctets, rptrMonitorGroupTotalErrors, rptrMonitorPortGroupIndex, rptrMonitorPortIndex, rptrMonitorPortReadableFrames, rptrMonitorPortReadableOctets, rptrMonitorPortFCSErrors, rptrMonitorPortAlignmentErrors, rptrMonitorPortFrameTooLongs, rptrMonitorPortShortEvents, rptrMonitorPortRunts, rptrMonitorPortCollisions, rptrMonitorPortLateEvents, rptrMonitorPortVeryLongEvents, rptrMonitorPortDataRateMismatches, rptrMonitorPortAutoPartitions, rptrMonitorPortTotalErrors]

class snmpRptrGrpAddrTrack1516(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 5, 1, 2, 4])
	group = [rptrAddrTrackGroupIndex, rptrAddrTrackPortIndex, rptrAddrTrackLastSourceAddress, rptrAddrTrackSourceAddrChanges, rptrAddrTrackNewLastSrcAddress]

class snmpRptrGrpBasic(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 5, 1, 2, 5])
	group = [rptrGroupIndex, rptrGroupObjectID, rptrGroupOperStatus, rptrGroupPortCapacity, rptrPortGroupIndex, rptrPortIndex, rptrPortAdminStatus, rptrPortAutoPartitionState, rptrPortOperStatus, rptrPortRptrId, rptrInfoId, rptrInfoRptrType, rptrInfoOperStatus, rptrInfoReset, rptrInfoPartitionedPorts, rptrInfoLastChange]

class snmpRptrGrpMonitor(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 5, 1, 2, 6])
	group = [rptrMonitorPortGroupIndex, rptrMonitorPortIndex, rptrMonitorPortReadableFrames, rptrMonitorPortReadableOctets, rptrMonitorPortFCSErrors, rptrMonitorPortAlignmentErrors, rptrMonitorPortFrameTooLongs, rptrMonitorPortShortEvents, rptrMonitorPortRunts, rptrMonitorPortCollisions, rptrMonitorPortLateEvents, rptrMonitorPortVeryLongEvents, rptrMonitorPortDataRateMismatches, rptrMonitorPortAutoPartitions, rptrMonitorPortTotalErrors, rptrMonitorPortLastChange, rptrMonTxCollisions, rptrMonTotalFrames, rptrMonTotalErrors, rptrMonTotalOctets]

class snmpRptrGrpMonitor100(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 5, 1, 2, 7])
	group = [rptrMonitorPortIsolates, rptrMonitorPortSymbolErrors, rptrMonitorPortUpper32Octets, rptrMonUpper32TotalOctets]

class snmpRptrGrpMonitor100w64(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 5, 1, 2, 8])
	group = [rptrMonitorPortHCReadableOctets, rptrMonHCTotalOctets]

class snmpRptrGrpAddrTrack(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 5, 1, 2, 9])
	group = [rptrAddrTrackGroupIndex, rptrAddrTrackPortIndex, rptrAddrTrackSourceAddrChanges, rptrAddrTrackNewLastSrcAddress, rptrAddrTrackCapacity]

class snmpRptrGrpExtAddrTrack(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 5, 1, 2, 10])
	group = [rptrExtAddrTrackMacIndex, rptrExtAddrTrackSourceAddress]

class snmpRptrGrpRptrAddrSearch(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 5, 1, 2, 11])
	group = [rptrAddrSearchLock, rptrAddrSearchStatus, rptrAddrSearchAddress, rptrAddrSearchState, rptrAddrSearchGroup, rptrAddrSearchPort, rptrAddrSearchOwner]

class snmpRptrGrpTopNPort(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 22, 5, 1, 2, 12])
	group = [rptrTopNPortControlIndex, rptrTopNPortRepeaterId, rptrTopNPortRateBase, rptrTopNPortTimeRemaining, rptrTopNPortDuration, rptrTopNPortRequestedSize, rptrTopNPortGrantedSize, rptrTopNPortStartTime, rptrTopNPortOwner, rptrTopNPortRowStatus, rptrTopNPortIndex, rptrTopNPortGroupIndex, rptrTopNPortPortIndex, rptrTopNPortRate]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
