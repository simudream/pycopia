# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from IF_MIB import InterfaceIndexOrZero
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, TimeTicks, Gauge32, Counter32, Integer32, IpAddress
from CISCO_TC import Unsigned32
from CISCO_SMI import ciscoExperiment
from SNMPv2_TC import TimeStamp, DisplayString, TruthValue

class CISCO_VPDN_MGMT_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/site/CISCO-VPDN-MGMT-MIB'
	conformance = 3
	name = 'CISCO-VPDN-MGMT-MIB'
	language = 2
	description = "The MIB module for VPDN.\n\nOverview of VPDN MIB\n\nMIB description\n\nThis MIB is to support the VPDN (Virtual Private Dialup Network)\nfeature of Cisco IOS. VPDN handles the forwarding of PPP links \nfrom an Internet Provider (ISP) to a Home Gateway.\n\nThe VPDN MIB provides the operational information on Cisco's \nVPDN tunnelling implementation.  The following entities\nare managed:\n1) Global VPDN information\n2) VPDN tunnel information\n3) VPDN tunnel's user information\n4) Failure history per user\n\nThe following example configuration shows how the VPDN MIB returns\nVPDN information, from either CISCO A - Network Access Server (NAS)/\nLocal Access Concentrator (LAC) or CISCO B - Home Gateway (HGW)/\nLocal Network Server (LNS). User call is projected by either \ndomain name or Dialed Number Identification Service (DNIS).\n\n\t   (NAS/LAC)\t\t\t  (HGW/LNS)\nUser ===== Cisco A ===== IP Network ===== Cisco B ===== Server \n                |                          |\n\t        +========== VPDN ==========+\n\n1) The VPDN global entry identifies the system wide VPDN information.\n2) The VPDN tunnel table identifies the active VPDN tunnels on Cisco A \n   and Cisco B. The table contains an entry for each active tunnel \n   on the router.\n3) The VPDN tunnel user table identifies the active users for each\n   active tunnel on each router and provides relevant information\n   for each user.\n4) The VPDN failure history table identifies the last failure\n   recorded per user and provides relevant information."

# nodes
class ciscoVpdnMgmtMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24])
	name = 'ciscoVpdnMgmtMIB'

class ciscoVpdnMgmtMIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1])
	name = 'ciscoVpdnMgmtMIBObjects'

class cvpdnSystemInfo(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 1])
	name = 'cvpdnSystemInfo'

class cvpdnTunnelInfo(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2])
	name = 'cvpdnTunnelInfo'

class cvpdnTunnelSessionInfo(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3])
	name = 'cvpdnTunnelSessionInfo'

class cvpdnUserToFailHistInfo(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 4])
	name = 'cvpdnUserToFailHistInfo'

class ciscoVpdnMgmtMIBConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 3])
	name = 'ciscoVpdnMgmtMIBConformance'

class ciscoVpdnMgmtMIBCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 3, 1])
	name = 'ciscoVpdnMgmtMIBCompliances'

class ciscoVpdnMgmtMIBGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 3, 2])
	name = 'ciscoVpdnMgmtMIBGroups'


# macros
# types 
# scalars 
class cvpdnTunnelTotal(ScalarObject):
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32
	access = 4
	units = 'tunnels'


class cvpdnSessionTotal(ScalarObject):
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32
	access = 4
	units = 'users'


class cvpdnDeniedUsersTotal(ScalarObject):
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'attempts'


# columns
class cvpdnSystemTunnelType(ColumnObject):
	status = 1
	access = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 1, 4, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'l2f'), Enum(2, 'l2tp')]


class cvpdnSystemTunnelTotal(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 1, 4, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32
	access = 4
	units = 'tunnels'


class cvpdnSystemSessionTotal(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 1, 4, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32
	access = 4
	units = 'sessions'


class cvpdnSystemDeniedUsersTotal(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 1, 4, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'attempts'


class cvpdnTunnelTunnelId(ColumnObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class cvpdnTunnelRemoteTunnelId(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class cvpdnTunnelLocalName(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class cvpdnTunnelRemoteName(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class cvpdnTunnelRemoteEndpointName(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class cvpdnTunnelLocalInitConnection(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class cvpdnTunnelOrigCause(ColumnObject):
	status = 2
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'domain'), Enum(2, 'dnis'), Enum(3, 'stack')]


class cvpdnTunnelState(ColumnObject):
	status = 2
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'unknown'), Enum(2, 'opening'), Enum(3, 'open'), Enum(4, 'closing')]


class cvpdnTunnelActiveSessions(ColumnObject):
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32
	access = 4
	units = 'sessions'


class cvpdnTunnelDeniedUsers(ColumnObject):
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'calls'


class cvpdnTunnelSoftshut(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 1, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class cvpdnTunnelNetworkServiceType(ColumnObject):
	status = 2
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 1, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'ip')]


class cvpdnTunnelLocalIpAddress(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 1, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class cvpdnTunnelSourceIpAddress(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 1, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class cvpdnTunnelRemoteIpAddress(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 1, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class cvpdnTunnelAttrTunnelId(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class cvpdnTunnelAttrRemoteTunnelId(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class cvpdnTunnelAttrLocalName(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class cvpdnTunnelAttrRemoteName(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class cvpdnTunnelAttrRemoteEndpointName(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class cvpdnTunnelAttrLocalInitConnection(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class cvpdnTunnelAttrOrigCause(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 2, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'domain'), Enum(2, 'dnis'), Enum(3, 'stack')]


class cvpdnTunnelAttrState(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 2, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'unknown'), Enum(2, 'l2fOpening'), Enum(3, 'l2fOpenWait'), Enum(4, 'l2fOpen'), Enum(5, 'l2fClosing'), Enum(6, 'l2fCloseWait'), Enum(7, 'l2tpIdle'), Enum(8, 'l2tpWaitCtlReply'), Enum(9, 'l2tpEstablished'), Enum(10, 'l2tpShuttingDown'), Enum(11, 'l2tpNoSessionLeft')]


class cvpdnTunnelAttrActiveSessions(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 2, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32
	access = 4
	units = 'sessions'


class cvpdnTunnelAttrDeniedUsers(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 2, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'calls'


class cvpdnTunnelAttrSoftshut(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 2, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class cvpdnTunnelAttrNetworkServiceType(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 2, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'ip')]


class cvpdnTunnelAttrLocalIpAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 2, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class cvpdnTunnelAttrSourceIpAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 2, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class cvpdnTunnelAttrRemoteIpAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 2, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class cvpdnTunnelSessionId(ColumnObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class cvpdnTunnelSessionUserName(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class cvpdnTunnelSessionState(ColumnObject):
	status = 2
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'unknown'), Enum(2, 'opening'), Enum(3, 'open'), Enum(4, 'closing'), Enum(5, 'waitingForTunnel')]


class cvpdnTunnelSessionCallDuration(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class cvpdnTunnelSessionPacketsOut(ColumnObject):
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'packets'


class cvpdnTunnelSessionBytesOut(ColumnObject):
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'bytes'


class cvpdnTunnelSessionPacketsIn(ColumnObject):
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'packets'


class cvpdnTunnelSessionBytesIn(ColumnObject):
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'bytes'


class cvpdnTunnelSessionDeviceType(ColumnObject):
	status = 2
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'asyncInternalModem'), Enum(3, 'async'), Enum(4, 'bchan'), Enum(5, 'sync'), Enum(6, 'virtualAccess'), Enum(7, 'xdsl'), Enum(8, 'cable')]


class cvpdnTunnelSessionDeviceCallerId(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class cvpdnTunnelSessionDevicePhyId(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 1, 1, 11])
	syntaxobject = InterfaceIndexOrZero


class cvpdnTunnelSessionMultilink(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 1, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class cvpdnTunnelSessionModemSlotIndex(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 1, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class cvpdnTunnelSessionModemPortIndex(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 1, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class cvpdnTunnelSessionDS1SlotIndex(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 1, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class cvpdnTunnelSessionDS1PortIndex(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 1, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class cvpdnTunnelSessionDS1ChannelIndex(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 1, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class cvpdnTunnelSessionModemCallStartTime(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 1, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class cvpdnTunnelSessionModemCallStartIndex(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 1, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class cvpdnSessionAttrSessionId(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class cvpdnSessionAttrUserName(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class cvpdnSessionAttrState(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'unknown'), Enum(2, 'l2fOpening'), Enum(3, 'l2fOpen'), Enum(4, 'l2fCloseWait'), Enum(5, 'l2fWaitingForTunnel'), Enum(6, 'l2tpIdle'), Enum(7, 'l2tpWaitingTunnel'), Enum(8, 'l2tpWaitReply'), Enum(9, 'l2tpWaitConnect'), Enum(10, 'l2tpEstablished'), Enum(11, 'l2tpShuttingDown')]


class cvpdnSessionAttrCallDuration(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class cvpdnSessionAttrPacketsOut(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'packets'


class cvpdnSessionAttrBytesOut(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'bytes'


class cvpdnSessionAttrPacketsIn(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'packets'


class cvpdnSessionAttrBytesIn(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'bytes'


class cvpdnSessionAttrDeviceType(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'asyncInternalModem'), Enum(3, 'async'), Enum(4, 'bchan'), Enum(5, 'sync'), Enum(6, 'virtualAccess'), Enum(7, 'xdsl'), Enum(8, 'cable')]


class cvpdnSessionAttrDeviceCallerId(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class cvpdnSessionAttrDevicePhyId(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 11])
	syntaxobject = InterfaceIndexOrZero


class cvpdnSessionAttrMultilink(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class cvpdnSessionAttrModemSlotIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class cvpdnSessionAttrModemPortIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class cvpdnSessionAttrDS1SlotIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class cvpdnSessionAttrDS1PortIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class cvpdnSessionAttrDS1ChannelIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class cvpdnSessionAttrModemCallStartTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class cvpdnSessionAttrModemCallStartIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class cvpdnUnameToFailHistUname(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 4, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class cvpdnUnameToFailHistTunnelId(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 4, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class cvpdnUnameToFailHistUserId(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 4, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class cvpdnUnameToFailHistLocalInitConn(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 4, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class cvpdnUnameToFailHistLocalName(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 4, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class cvpdnUnameToFailHistRemoteName(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 4, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class cvpdnUnameToFailHistSourceIp(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 4, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class cvpdnUnameToFailHistDestIp(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 4, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class cvpdnUnameToFailHistCount(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 4, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'failures'


class cvpdnUnameToFailHistFailTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 4, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class cvpdnUnameToFailHistFailType(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 4, 1, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class cvpdnUnameToFailHistFailReason(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 4, 1, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


# rows 
class cvpdnSystemEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([cvpdnSystemTunnelType], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 1, 4, 1])
	access = 2
	columns = {'cvpdnSystemTunnelType': cvpdnSystemTunnelType, 'cvpdnSystemTunnelTotal': cvpdnSystemTunnelTotal, 'cvpdnSystemSessionTotal': cvpdnSystemSessionTotal, 'cvpdnSystemDeniedUsersTotal': cvpdnSystemDeniedUsersTotal}


class cvpdnTunnelEntry(RowObject):
	status = 2
	index = pycopia.SMI.Objects.IndexObjects([cvpdnTunnelTunnelId], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 1, 1])
	access = 2
	columns = {'cvpdnTunnelTunnelId': cvpdnTunnelTunnelId, 'cvpdnTunnelRemoteTunnelId': cvpdnTunnelRemoteTunnelId, 'cvpdnTunnelLocalName': cvpdnTunnelLocalName, 'cvpdnTunnelRemoteName': cvpdnTunnelRemoteName, 'cvpdnTunnelRemoteEndpointName': cvpdnTunnelRemoteEndpointName, 'cvpdnTunnelLocalInitConnection': cvpdnTunnelLocalInitConnection, 'cvpdnTunnelOrigCause': cvpdnTunnelOrigCause, 'cvpdnTunnelState': cvpdnTunnelState, 'cvpdnTunnelActiveSessions': cvpdnTunnelActiveSessions, 'cvpdnTunnelDeniedUsers': cvpdnTunnelDeniedUsers, 'cvpdnTunnelSoftshut': cvpdnTunnelSoftshut, 'cvpdnTunnelNetworkServiceType': cvpdnTunnelNetworkServiceType, 'cvpdnTunnelLocalIpAddress': cvpdnTunnelLocalIpAddress, 'cvpdnTunnelSourceIpAddress': cvpdnTunnelSourceIpAddress, 'cvpdnTunnelRemoteIpAddress': cvpdnTunnelRemoteIpAddress}


class cvpdnTunnelAttrEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([cvpdnSystemTunnelType, cvpdnTunnelAttrTunnelId], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 2, 1])
	access = 2
	columns = {'cvpdnTunnelAttrTunnelId': cvpdnTunnelAttrTunnelId, 'cvpdnTunnelAttrRemoteTunnelId': cvpdnTunnelAttrRemoteTunnelId, 'cvpdnTunnelAttrLocalName': cvpdnTunnelAttrLocalName, 'cvpdnTunnelAttrRemoteName': cvpdnTunnelAttrRemoteName, 'cvpdnTunnelAttrRemoteEndpointName': cvpdnTunnelAttrRemoteEndpointName, 'cvpdnTunnelAttrLocalInitConnection': cvpdnTunnelAttrLocalInitConnection, 'cvpdnTunnelAttrOrigCause': cvpdnTunnelAttrOrigCause, 'cvpdnTunnelAttrState': cvpdnTunnelAttrState, 'cvpdnTunnelAttrActiveSessions': cvpdnTunnelAttrActiveSessions, 'cvpdnTunnelAttrDeniedUsers': cvpdnTunnelAttrDeniedUsers, 'cvpdnTunnelAttrSoftshut': cvpdnTunnelAttrSoftshut, 'cvpdnTunnelAttrNetworkServiceType': cvpdnTunnelAttrNetworkServiceType, 'cvpdnTunnelAttrLocalIpAddress': cvpdnTunnelAttrLocalIpAddress, 'cvpdnTunnelAttrSourceIpAddress': cvpdnTunnelAttrSourceIpAddress, 'cvpdnTunnelAttrRemoteIpAddress': cvpdnTunnelAttrRemoteIpAddress}


class cvpdnTunnelSessionEntry(RowObject):
	status = 2
	index = pycopia.SMI.Objects.IndexObjects([cvpdnTunnelTunnelId, cvpdnTunnelSessionId], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 1, 1])
	access = 2
	columns = {'cvpdnTunnelSessionId': cvpdnTunnelSessionId, 'cvpdnTunnelSessionUserName': cvpdnTunnelSessionUserName, 'cvpdnTunnelSessionState': cvpdnTunnelSessionState, 'cvpdnTunnelSessionCallDuration': cvpdnTunnelSessionCallDuration, 'cvpdnTunnelSessionPacketsOut': cvpdnTunnelSessionPacketsOut, 'cvpdnTunnelSessionBytesOut': cvpdnTunnelSessionBytesOut, 'cvpdnTunnelSessionPacketsIn': cvpdnTunnelSessionPacketsIn, 'cvpdnTunnelSessionBytesIn': cvpdnTunnelSessionBytesIn, 'cvpdnTunnelSessionDeviceType': cvpdnTunnelSessionDeviceType, 'cvpdnTunnelSessionDeviceCallerId': cvpdnTunnelSessionDeviceCallerId, 'cvpdnTunnelSessionDevicePhyId': cvpdnTunnelSessionDevicePhyId, 'cvpdnTunnelSessionMultilink': cvpdnTunnelSessionMultilink, 'cvpdnTunnelSessionModemSlotIndex': cvpdnTunnelSessionModemSlotIndex, 'cvpdnTunnelSessionModemPortIndex': cvpdnTunnelSessionModemPortIndex, 'cvpdnTunnelSessionDS1SlotIndex': cvpdnTunnelSessionDS1SlotIndex, 'cvpdnTunnelSessionDS1PortIndex': cvpdnTunnelSessionDS1PortIndex, 'cvpdnTunnelSessionDS1ChannelIndex': cvpdnTunnelSessionDS1ChannelIndex, 'cvpdnTunnelSessionModemCallStartTime': cvpdnTunnelSessionModemCallStartTime, 'cvpdnTunnelSessionModemCallStartIndex': cvpdnTunnelSessionModemCallStartIndex}


class cvpdnSessionAttrEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([cvpdnSystemTunnelType, cvpdnTunnelAttrTunnelId, cvpdnSessionAttrSessionId], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1])
	access = 2
	columns = {'cvpdnSessionAttrSessionId': cvpdnSessionAttrSessionId, 'cvpdnSessionAttrUserName': cvpdnSessionAttrUserName, 'cvpdnSessionAttrState': cvpdnSessionAttrState, 'cvpdnSessionAttrCallDuration': cvpdnSessionAttrCallDuration, 'cvpdnSessionAttrPacketsOut': cvpdnSessionAttrPacketsOut, 'cvpdnSessionAttrBytesOut': cvpdnSessionAttrBytesOut, 'cvpdnSessionAttrPacketsIn': cvpdnSessionAttrPacketsIn, 'cvpdnSessionAttrBytesIn': cvpdnSessionAttrBytesIn, 'cvpdnSessionAttrDeviceType': cvpdnSessionAttrDeviceType, 'cvpdnSessionAttrDeviceCallerId': cvpdnSessionAttrDeviceCallerId, 'cvpdnSessionAttrDevicePhyId': cvpdnSessionAttrDevicePhyId, 'cvpdnSessionAttrMultilink': cvpdnSessionAttrMultilink, 'cvpdnSessionAttrModemSlotIndex': cvpdnSessionAttrModemSlotIndex, 'cvpdnSessionAttrModemPortIndex': cvpdnSessionAttrModemPortIndex, 'cvpdnSessionAttrDS1SlotIndex': cvpdnSessionAttrDS1SlotIndex, 'cvpdnSessionAttrDS1PortIndex': cvpdnSessionAttrDS1PortIndex, 'cvpdnSessionAttrDS1ChannelIndex': cvpdnSessionAttrDS1ChannelIndex, 'cvpdnSessionAttrModemCallStartTime': cvpdnSessionAttrModemCallStartTime, 'cvpdnSessionAttrModemCallStartIndex': cvpdnSessionAttrModemCallStartIndex}


class cvpdnUserToFailHistInfoEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([cvpdnUnameToFailHistUname, cvpdnUnameToFailHistTunnelId], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 4, 1, 1])
	access = 2
	columns = {'cvpdnUnameToFailHistUname': cvpdnUnameToFailHistUname, 'cvpdnUnameToFailHistTunnelId': cvpdnUnameToFailHistTunnelId, 'cvpdnUnameToFailHistUserId': cvpdnUnameToFailHistUserId, 'cvpdnUnameToFailHistLocalInitConn': cvpdnUnameToFailHistLocalInitConn, 'cvpdnUnameToFailHistLocalName': cvpdnUnameToFailHistLocalName, 'cvpdnUnameToFailHistRemoteName': cvpdnUnameToFailHistRemoteName, 'cvpdnUnameToFailHistSourceIp': cvpdnUnameToFailHistSourceIp, 'cvpdnUnameToFailHistDestIp': cvpdnUnameToFailHistDestIp, 'cvpdnUnameToFailHistCount': cvpdnUnameToFailHistCount, 'cvpdnUnameToFailHistFailTime': cvpdnUnameToFailHistFailTime, 'cvpdnUnameToFailHistFailType': cvpdnUnameToFailHistFailType, 'cvpdnUnameToFailHistFailReason': cvpdnUnameToFailHistFailReason}


# notifications (traps) 
# groups 
class cvpdnSystemInfoGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 3, 2, 1])
	group = [cvpdnTunnelTotal, cvpdnSessionTotal, cvpdnDeniedUsersTotal]

class cvpdnTunnelInfoGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 3, 2, 2])
	group = [cvpdnTunnelRemoteTunnelId, cvpdnTunnelLocalName, cvpdnTunnelRemoteName, cvpdnTunnelRemoteEndpointName, cvpdnTunnelLocalInitConnection, cvpdnTunnelOrigCause, cvpdnTunnelState, cvpdnTunnelActiveSessions, cvpdnTunnelDeniedUsers, cvpdnTunnelSoftshut, cvpdnTunnelNetworkServiceType, cvpdnTunnelLocalIpAddress, cvpdnTunnelSourceIpAddress, cvpdnTunnelRemoteIpAddress]

class cvpdnTunnelSessionInfoGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 3, 2, 3])
	group = [cvpdnTunnelSessionUserName, cvpdnTunnelSessionState, cvpdnTunnelSessionCallDuration, cvpdnTunnelSessionPacketsOut, cvpdnTunnelSessionBytesOut, cvpdnTunnelSessionPacketsIn, cvpdnTunnelSessionBytesIn, cvpdnTunnelSessionDeviceType, cvpdnTunnelSessionDeviceCallerId, cvpdnTunnelSessionDevicePhyId, cvpdnTunnelSessionMultilink, cvpdnTunnelSessionModemSlotIndex, cvpdnTunnelSessionModemPortIndex, cvpdnTunnelSessionDS1SlotIndex, cvpdnTunnelSessionDS1PortIndex, cvpdnTunnelSessionDS1ChannelIndex, cvpdnTunnelSessionModemCallStartTime, cvpdnTunnelSessionModemCallStartIndex]

class cvpdnUserToFailHistInfoGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 3, 2, 4])
	group = [cvpdnUnameToFailHistUserId, cvpdnUnameToFailHistLocalInitConn, cvpdnUnameToFailHistLocalName, cvpdnUnameToFailHistRemoteName, cvpdnUnameToFailHistSourceIp, cvpdnUnameToFailHistDestIp, cvpdnUnameToFailHistCount, cvpdnUnameToFailHistFailTime, cvpdnUnameToFailHistFailType, cvpdnUnameToFailHistFailReason]

class cvpdnSystemGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 3, 2, 5])
	group = [cvpdnSystemTunnelTotal, cvpdnSystemSessionTotal, cvpdnSystemDeniedUsersTotal]

class cvpdnTunnelAttrGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 3, 2, 6])
	group = [cvpdnTunnelAttrRemoteTunnelId, cvpdnTunnelAttrLocalName, cvpdnTunnelAttrRemoteName, cvpdnTunnelAttrRemoteEndpointName, cvpdnTunnelAttrLocalInitConnection, cvpdnTunnelAttrOrigCause, cvpdnTunnelAttrState, cvpdnTunnelAttrActiveSessions, cvpdnTunnelAttrDeniedUsers, cvpdnTunnelAttrSoftshut, cvpdnTunnelAttrNetworkServiceType, cvpdnTunnelAttrLocalIpAddress, cvpdnTunnelAttrSourceIpAddress, cvpdnTunnelAttrRemoteIpAddress]

class cvpdnSessionAttrGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 24, 3, 2, 7])
	group = [cvpdnSessionAttrUserName, cvpdnSessionAttrState, cvpdnSessionAttrCallDuration, cvpdnSessionAttrPacketsOut, cvpdnSessionAttrBytesOut, cvpdnSessionAttrPacketsIn, cvpdnSessionAttrBytesIn, cvpdnSessionAttrDeviceType, cvpdnSessionAttrDeviceCallerId, cvpdnSessionAttrDevicePhyId, cvpdnSessionAttrMultilink, cvpdnSessionAttrModemSlotIndex, cvpdnSessionAttrModemPortIndex, cvpdnSessionAttrDS1SlotIndex, cvpdnSessionAttrDS1PortIndex, cvpdnSessionAttrDS1ChannelIndex, cvpdnSessionAttrModemCallStartTime, cvpdnSessionAttrModemCallStartIndex]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
