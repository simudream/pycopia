# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, NOTIFICATION_TYPE, Gauge32, Integer32
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from CISCO_SMI import ciscoMgmt
from SNMPv2_TC import TEXTUAL_CONVENTION, DisplayString, TruthValue

class CISCO_ENVMON_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/site/CISCO-ENVMON-MIB'
	conformance = 2
	name = 'CISCO-ENVMON-MIB'
	language = 2
	description = 'The MIB module to describe the status of the Environmental\nMonitor on those devices which support one.'

# nodes
class ciscoEnvMonMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13])
	name = 'ciscoEnvMonMIB'

class ciscoEnvMonObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 1])
	name = 'ciscoEnvMonObjects'

class ciscoEnvMonMIBNotificationEnables(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 2])
	name = 'ciscoEnvMonMIBNotificationEnables'

class ciscoEnvMonMIBNotificationPrefix(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 3])
	name = 'ciscoEnvMonMIBNotificationPrefix'

class ciscoEnvMonMIBNotifications(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 3, 0])
	name = 'ciscoEnvMonMIBNotifications'

class ciscoEnvMonMIBConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 4])
	name = 'ciscoEnvMonMIBConformance'

class ciscoEnvMonMIBCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 4, 1])
	name = 'ciscoEnvMonMIBCompliances'

class ciscoEnvMonMIBGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 4, 2])
	name = 'ciscoEnvMonMIBGroups'


# macros
# types 

class CiscoEnvMonState(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'normal'), Enum(2, 'warning'), Enum(3, 'critical'), Enum(4, 'shutdown'), Enum(5, 'notPresent')]


class CiscoSignedGauge(pycopia.SMI.Basetypes.Integer32):
	status = 1

# scalars 
class ciscoEnvMonPresent(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'oldAgs'), Enum(2, 'ags'), Enum(3, 'c7000'), Enum(4, 'ci'), Enum(6, 'cAccessMon')]


class ciscoEnvMonEnableShutdownNotification(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 2, 1])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class ciscoEnvMonEnableVoltageNotification(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 2, 2])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class ciscoEnvMonEnableTemperatureNotification(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 2, 3])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class ciscoEnvMonEnableFanNotification(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 2, 4])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class ciscoEnvMonEnableRedundantSupplyNotification(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 2, 5])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


# columns
class ciscoEnvMonVoltageStatusIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoEnvMonVoltageStatusDescr(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class ciscoEnvMonVoltageStatusValue(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 2, 1, 3])
	syntaxobject = CiscoSignedGauge
	access = 4
	units = 'millivolts'


class ciscoEnvMonVoltageThresholdLow(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = 'millivolts'


class ciscoEnvMonVoltageThresholdHigh(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = 'millivolts'


class ciscoEnvMonVoltageLastShutdown(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = 'millivolts'


class ciscoEnvMonVoltageState(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 2, 1, 7])
	syntaxobject = CiscoEnvMonState


class ciscoEnvMonTemperatureStatusIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 3, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoEnvMonTemperatureStatusDescr(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 3, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class ciscoEnvMonTemperatureStatusValue(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 3, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32
	access = 4
	units = 'degrees Celsius'


class ciscoEnvMonTemperatureThreshold(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 3, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = 'degrees Celsius'


class ciscoEnvMonTemperatureLastShutdown(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 3, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = 'degrees Celsius'


class ciscoEnvMonTemperatureState(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 3, 1, 6])
	syntaxobject = CiscoEnvMonState


class ciscoEnvMonFanStatusIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 4, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoEnvMonFanStatusDescr(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 4, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class ciscoEnvMonFanState(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 4, 1, 3])
	syntaxobject = CiscoEnvMonState


class ciscoEnvMonSupplyStatusIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 5, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoEnvMonSupplyStatusDescr(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 5, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class ciscoEnvMonSupplyState(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 5, 1, 3])
	syntaxobject = CiscoEnvMonState


class ciscoEnvMonSupplySource(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 5, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'unknown'), Enum(2, 'ac'), Enum(3, 'dc'), Enum(4, 'externalPowerSupply'), Enum(5, 'internalRedundant')]


# rows 
class ciscoEnvMonVoltageStatusEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ciscoEnvMonVoltageStatusIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 2, 1])
	access = 2
	columns = {'ciscoEnvMonVoltageStatusIndex': ciscoEnvMonVoltageStatusIndex, 'ciscoEnvMonVoltageStatusDescr': ciscoEnvMonVoltageStatusDescr, 'ciscoEnvMonVoltageStatusValue': ciscoEnvMonVoltageStatusValue, 'ciscoEnvMonVoltageThresholdLow': ciscoEnvMonVoltageThresholdLow, 'ciscoEnvMonVoltageThresholdHigh': ciscoEnvMonVoltageThresholdHigh, 'ciscoEnvMonVoltageLastShutdown': ciscoEnvMonVoltageLastShutdown, 'ciscoEnvMonVoltageState': ciscoEnvMonVoltageState}


class ciscoEnvMonTemperatureStatusEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ciscoEnvMonTemperatureStatusIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 3, 1])
	access = 2
	columns = {'ciscoEnvMonTemperatureStatusIndex': ciscoEnvMonTemperatureStatusIndex, 'ciscoEnvMonTemperatureStatusDescr': ciscoEnvMonTemperatureStatusDescr, 'ciscoEnvMonTemperatureStatusValue': ciscoEnvMonTemperatureStatusValue, 'ciscoEnvMonTemperatureThreshold': ciscoEnvMonTemperatureThreshold, 'ciscoEnvMonTemperatureLastShutdown': ciscoEnvMonTemperatureLastShutdown, 'ciscoEnvMonTemperatureState': ciscoEnvMonTemperatureState}


class ciscoEnvMonFanStatusEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ciscoEnvMonFanStatusIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 4, 1])
	access = 2
	columns = {'ciscoEnvMonFanStatusIndex': ciscoEnvMonFanStatusIndex, 'ciscoEnvMonFanStatusDescr': ciscoEnvMonFanStatusDescr, 'ciscoEnvMonFanState': ciscoEnvMonFanState}


class ciscoEnvMonSupplyStatusEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ciscoEnvMonSupplyStatusIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 5, 1])
	access = 2
	columns = {'ciscoEnvMonSupplyStatusIndex': ciscoEnvMonSupplyStatusIndex, 'ciscoEnvMonSupplyStatusDescr': ciscoEnvMonSupplyStatusDescr, 'ciscoEnvMonSupplyState': ciscoEnvMonSupplyState, 'ciscoEnvMonSupplySource': ciscoEnvMonSupplySource}


# notifications (traps) 
class ciscoEnvMonShutdownNotification(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 3, 0, 1])

class ciscoEnvMonVoltageNotification(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 3, 0, 2])

class ciscoEnvMonTemperatureNotification(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 3, 0, 3])

class ciscoEnvMonFanNotification(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 3, 0, 4])

class ciscoEnvMonRedundantSupplyNotification(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 3, 0, 5])

# groups 
class ciscoEnvMonMIBGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 13, 4, 2, 1])
	group = [ciscoEnvMonPresent, ciscoEnvMonVoltageStatusDescr, ciscoEnvMonVoltageStatusValue, ciscoEnvMonVoltageThresholdLow, ciscoEnvMonVoltageThresholdHigh, ciscoEnvMonVoltageLastShutdown, ciscoEnvMonVoltageState, ciscoEnvMonTemperatureStatusDescr, ciscoEnvMonTemperatureStatusValue, ciscoEnvMonTemperatureThreshold, ciscoEnvMonTemperatureLastShutdown, ciscoEnvMonTemperatureState, ciscoEnvMonFanStatusDescr, ciscoEnvMonFanState, ciscoEnvMonSupplyStatusDescr, ciscoEnvMonSupplyState, ciscoEnvMonSupplySource, ciscoEnvMonEnableShutdownNotification, ciscoEnvMonEnableVoltageNotification, ciscoEnvMonEnableTemperatureNotification, ciscoEnvMonEnableFanNotification, ciscoEnvMonEnableRedundantSupplyNotification]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
