# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_CONF import OBJECT_GROUP, MODULE_COMPLIANCE
from IF_MIB import ifIndex, InterfaceIndex
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, NOTIFICATION_TYPE, Integer32, Counter32, IpAddress
from CISCO_SMI import ciscoMgmt
from DOCS_IF_MIB import docsIfCmtsServiceEntry, docsIfCmtsCmStatusEntry, docsIfCmtsMacEntry, docsIfCmtsCmStatusMacAddress, docsIfCmtsCmStatusIpAddress, docsIfCmtsCmStatusDownChannelIfIndex, docsIfCmtsCmStatusUpChannelIfIndex
from SNMPv2_TC import TruthValue, DisplayString, MacAddress

class CISCO_DOCS_EXT_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/site/CISCO-DOCS-EXT-MIB'
	conformance = 3
	name = 'CISCO-DOCS-EXT-MIB'
	language = 2
	description = "This is the MIB module for the Cisco specific extension \nobjects of Data Over Cable Service, Radio Frequency \ninterface.  There is a standard MIB for Data-Over-Cable \nService Interface Specifications (DOCSIS) and in Cisco,\nit called DOCS-IF-MIB. Besides the objects in \nDOCS-IF-MIB, this MIB module contains the extension \nobjects to manage the Cable Modem Termination Systems (CMTS).\n\nThis MIB module includes objects for the scheduler \nthat supports Quality of Service (QoS) of MCNS/DOCSIS \ncompliant Radio Frequency (RF) interfaces in Cable Modem \nTermination Systems (CMTS). And the purpose is to let \nusers configure attributes of the schedulers in \norder to ensure the Quality of Service and fairness for \nmodems' requests according to users' business needs. \nAlso this MIB shows various states of the schedulers \nfor users to monitor of the schedulers' current status. \n\nThis MIB module also includes connection status objects\nfor cable modems and Customer Premise Equipment (CPE) \nand the purpose is to let users easily get the connection \nstatus and manage access group information about cable \nmodems and CPE. "

# nodes
class ciscoDocsExtMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116])
	name = 'ciscoDocsExtMIB'

class ciscoDocsExtMIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 1])
	name = 'ciscoDocsExtMIBObjects'

class cdxQosCtrlObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 1, 1])
	name = 'cdxQosCtrlObjects'

class cdxQosQueueObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 1, 2])
	name = 'cdxQosQueueObjects'

class cdxCmtsCmCpeObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 1, 3])
	name = 'cdxCmtsCmCpeObjects'

class ciscoDocsExtNotificationsPrefix(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 2])
	name = 'ciscoDocsExtNotificationsPrefix'

class ciscoDocsExtNotifications(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 2, 0])
	name = 'ciscoDocsExtNotifications'

class ciscoDocsExtConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 3])
	name = 'ciscoDocsExtConformance'

class cdxDocsExtCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 3, 1])
	name = 'cdxDocsExtCompliances'

class cdxDocsExtGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 3, 2])
	name = 'cdxDocsExtGroups'


# macros
# types 
# scalars 
# columns
class cdxQosCtrlUpAdmissionCtrl(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 1, 1, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class cdxQosCtrlUpMaxRsvdBWPercent(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 1, 1, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'percent'


class cdxQosCtrlUpAdmissionRejects(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 1, 1, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cdxQosCtrlUpReservedBW(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 1, 1, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = 'bits/second'


class cdxQosCtrlUpMaxVirtualBW(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 1, 1, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = 'bits/second'


class cdxQosIfRateLimitAlgm(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 1, 1, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'noRateLimit'), Enum(2, 'oneSecBurst'), Enum(3, 'carLike'), Enum(4, 'wtExPacketDiscard')]


class cdxQosIfRateLimitExpWt(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 1, 1, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class cdxIfCmtsServiceOutOctets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 1, 1, 3, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cdxIfCmtsServiceOutPackets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 1, 1, 3, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cdxQosMaxUpBWExcessCount(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 1, 1, 3, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cdxQosMaxDownBWExcessCount(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 1, 1, 3, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cdxBWQueueNameCode(ColumnObject):
	status = 1
	access = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 1, 2, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'cirQ'), Enum(2, 'tbeQ')]


class cdxBWQueueOrder(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 1, 2, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class cdxBWQueueNumServedBeforeYield(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 1, 2, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class cdxBWQueueType(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 1, 2, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'unknown'), Enum(2, 'other'), Enum(3, 'fifo'), Enum(4, 'priority')]


class cdxBWQueueMaxDepth(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 1, 2, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class cdxBWQueueDepth(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 1, 2, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class cdxBWQueueDiscards(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 1, 2, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cdxCmCpeMacAddress(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 1, 3, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.MacAddress


class cdxCmCpeType(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 1, 3, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'cm'), Enum(2, 'cpe')]


class cdxCmCpeIpAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 1, 3, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class cdxCmCpeIfIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 1, 3, 1, 1, 4])
	syntaxobject = InterfaceIndex


class cdxCmCpeCmtsServiceId(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 1, 3, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class cdxCmCpeCmStatusIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 1, 3, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class cdxCmCpeAccessGroup(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 1, 3, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class cdxCmtsCmStatusValue(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 1, 3, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'others'), Enum(2, 'offline'), Enum(3, 'initRangingRcvd'), Enum(4, 'initDhcpReqRcvd'), Enum(5, 'online'), Enum(6, 'onlineNetAccessDisabled'), Enum(7, 'onlineKekAssigned'), Enum(8, 'onlineTekAssigned'), Enum(9, 'rejectBadMic'), Enum(10, 'rejectBadCos'), Enum(11, 'kekRejected'), Enum(12, 'tekRejected')]


class cdxCmtsCmOnOffTrapEnable(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 1, 3, 3, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class cdxCmtsCmOnOffTrapInterval(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 1, 3, 3, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


# rows 
class cdxQosCtrlUpEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 1, 1, 1, 1])
	access = 2
	columns = {'cdxQosCtrlUpAdmissionCtrl': cdxQosCtrlUpAdmissionCtrl, 'cdxQosCtrlUpMaxRsvdBWPercent': cdxQosCtrlUpMaxRsvdBWPercent, 'cdxQosCtrlUpAdmissionRejects': cdxQosCtrlUpAdmissionRejects, 'cdxQosCtrlUpReservedBW': cdxQosCtrlUpReservedBW, 'cdxQosCtrlUpMaxVirtualBW': cdxQosCtrlUpMaxVirtualBW}


class cdxQosIfRateLimitEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 1, 1, 2, 1])
	access = 2
	columns = {'cdxQosIfRateLimitAlgm': cdxQosIfRateLimitAlgm, 'cdxQosIfRateLimitExpWt': cdxQosIfRateLimitExpWt}


from IF_MIB import ifIndex
from DOCS_IF_MIB import docsIfCmtsServiceId
class cdxCmtsServiceExtEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, docsIfCmtsServiceId], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 1, 1, 3, 1])
	access = 2
	columns = {'cdxIfCmtsServiceOutOctets': cdxIfCmtsServiceOutOctets, 'cdxIfCmtsServiceOutPackets': cdxIfCmtsServiceOutPackets, 'cdxQosMaxUpBWExcessCount': cdxQosMaxUpBWExcessCount, 'cdxQosMaxDownBWExcessCount': cdxQosMaxDownBWExcessCount}


class cdxBWQueueEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, cdxBWQueueNameCode], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 1, 2, 1, 1])
	access = 2
	columns = {'cdxBWQueueNameCode': cdxBWQueueNameCode, 'cdxBWQueueOrder': cdxBWQueueOrder, 'cdxBWQueueNumServedBeforeYield': cdxBWQueueNumServedBeforeYield, 'cdxBWQueueType': cdxBWQueueType, 'cdxBWQueueMaxDepth': cdxBWQueueMaxDepth, 'cdxBWQueueDepth': cdxBWQueueDepth, 'cdxBWQueueDiscards': cdxBWQueueDiscards}


class cdxCmCpeEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([cdxCmCpeMacAddress], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 1, 3, 1, 1])
	access = 2
	columns = {'cdxCmCpeMacAddress': cdxCmCpeMacAddress, 'cdxCmCpeType': cdxCmCpeType, 'cdxCmCpeIpAddress': cdxCmCpeIpAddress, 'cdxCmCpeIfIndex': cdxCmCpeIfIndex, 'cdxCmCpeCmtsServiceId': cdxCmCpeCmtsServiceId, 'cdxCmCpeCmStatusIndex': cdxCmCpeCmStatusIndex, 'cdxCmCpeAccessGroup': cdxCmCpeAccessGroup}


from DOCS_IF_MIB import docsIfCmtsCmStatusIndex
class cdxCmtsCmStatusExtEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([docsIfCmtsCmStatusIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 1, 3, 2, 1])
	access = 2
	columns = {'cdxCmtsCmStatusValue': cdxCmtsCmStatusValue}


from IF_MIB import ifIndex
class cdxCmtsMacExtEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 1, 3, 3, 1])
	access = 2
	columns = {'cdxCmtsCmOnOffTrapEnable': cdxCmtsCmOnOffTrapEnable, 'cdxCmtsCmOnOffTrapInterval': cdxCmtsCmOnOffTrapInterval}


# notifications (traps) 
class cdxCmtsCmOnOffNotification(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 2, 0, 1])

# groups 
class cdxQosCtrlGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 3, 2, 1])
	group = [cdxQosCtrlUpAdmissionCtrl, cdxQosCtrlUpMaxRsvdBWPercent, cdxQosCtrlUpAdmissionRejects, cdxQosCtrlUpReservedBW, cdxQosCtrlUpMaxVirtualBW, cdxQosIfRateLimitAlgm, cdxQosIfRateLimitExpWt, cdxIfCmtsServiceOutOctets, cdxIfCmtsServiceOutPackets, cdxQosMaxUpBWExcessCount, cdxQosMaxDownBWExcessCount]

class cdxQosQueueGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 3, 2, 2])
	group = [cdxBWQueueOrder, cdxBWQueueNumServedBeforeYield, cdxBWQueueType, cdxBWQueueMaxDepth, cdxBWQueueDepth, cdxBWQueueDiscards]

class cdxCmtsCmCpeGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 116, 3, 2, 3])
	group = [cdxCmCpeType, cdxCmCpeIpAddress, cdxCmCpeIfIndex, cdxCmCpeCmtsServiceId, cdxCmCpeCmStatusIndex, cdxCmCpeAccessGroup, cdxCmtsCmStatusValue, cdxCmtsCmOnOffTrapEnable, cdxCmtsCmOnOffTrapInterval]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
