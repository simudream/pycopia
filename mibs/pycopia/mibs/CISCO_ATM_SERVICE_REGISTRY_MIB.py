# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, Integer32
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from CISCO_SMI import ciscoMgmt
from SNMPv2_TC import TEXTUAL_CONVENTION, RowStatus

class CISCO_ATM_SERVICE_REGISTRY_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/site/CISCO-ATM-SERVICE-REGISTRY-MIB'
	conformance = 2
	name = 'CISCO-ATM-SERVICE-REGISTRY-MIB'
	language = 2
	description = "A MIB module to allow an NMS to monitor and\nconfigure the information which an ATM switch\nmakes available via the ILMI's Service Registry\nTable."

# nodes
class ciscoAtmServiceRegistryMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 50])
	name = 'ciscoAtmServiceRegistryMIB'

class ciscoAtmServiceRegistryMIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 50, 1])
	name = 'ciscoAtmServiceRegistryMIBObjects'

class asrSrvcRegMIBConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 50, 3])
	name = 'asrSrvcRegMIBConformance'

class asrSrvcRegMIBCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 50, 3, 1])
	name = 'asrSrvcRegMIBCompliances'

class asrSrvcRegMIBGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 50, 3, 2])
	name = 'asrSrvcRegMIBGroups'


# macros
# types 

class AtmAddr(pycopia.SMI.Basetypes.OctetString):
	status = 1
	ranges = Ranges(Range(0, 0), Range(8, 8), Range(13, 13), Range(20, 20))


class InterfaceIndexOrZero(pycopia.SMI.Basetypes.Integer32):
	status = 1
	ranges = Ranges(Range(0, 2147483647))
	format = 'd'

# scalars 
# columns
class asrSrvcRegPort(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 50, 1, 1, 1, 1])
	syntaxobject = InterfaceIndexOrZero


class asrSrvcRegServiceID(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 50, 1, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.ObjectIdentifier


class asrSrvcRegATMAddress(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 50, 1, 1, 1, 3])
	syntaxobject = AtmAddr


class asrSrvcRegAddressIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 50, 1, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class asrSrvcRegParm1(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 50, 1, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class asrSrvcRegRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 50, 1, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


# rows 
class asrSrvcRegEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([asrSrvcRegPort, asrSrvcRegServiceID, asrSrvcRegAddressIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 50, 1, 1, 1])
	access = 2
	rowstatus = asrSrvcRegRowStatus
	columns = {'asrSrvcRegPort': asrSrvcRegPort, 'asrSrvcRegServiceID': asrSrvcRegServiceID, 'asrSrvcRegATMAddress': asrSrvcRegATMAddress, 'asrSrvcRegAddressIndex': asrSrvcRegAddressIndex, 'asrSrvcRegParm1': asrSrvcRegParm1, 'asrSrvcRegRowStatus': asrSrvcRegRowStatus}


# notifications (traps) 
# groups 
class asrSrvcRegMIBGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 50, 3, 2, 1])
	group = [asrSrvcRegATMAddress, asrSrvcRegParm1, asrSrvcRegRowStatus]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
