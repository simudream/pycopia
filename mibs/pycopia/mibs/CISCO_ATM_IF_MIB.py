# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, Counter32, Gauge32, Integer32, OBJECT_TYPE
from ATM_MIB import atmInterfaceConfEntry
from CISCO_SMI import ciscoExperiment
from SNMPv2_TC import TEXTUAL_CONVENTION, TruthValue
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP

class CISCO_ATM_IF_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/site/CISCO-ATM-IF-MIB'
	conformance = 3
	name = 'CISCO-ATM-IF-MIB'
	language = 2
	description = 'A MIB module for an ATM interface configuration.'

# nodes
class ciscoAtmIfMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14])
	name = 'ciscoAtmIfMIB'

class ciscoAtmIfMIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 1])
	name = 'ciscoAtmIfMIBObjects'

class ciscoAtmIfMIBConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 3])
	name = 'ciscoAtmIfMIBConformance'

class ciscoAtmIfMIBCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 3, 1])
	name = 'ciscoAtmIfMIBCompliances'

class ciscoAtmIfMIBGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 3, 2])
	name = 'ciscoAtmIfMIBGroups'


# macros
# types 

class NsapAtmAddr(pycopia.SMI.Basetypes.OctetString):
	status = 1
	ranges = Ranges(Range(20, 20))


class AtmAddr(pycopia.SMI.Basetypes.OctetString):
	status = 1
	ranges = Ranges(Range(0, 0), Range(8, 8), Range(13, 13), Range(20, 20))

# scalars 
class ciscoAtmIfIlmiAccessGlobalDefaultFilter(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'permitAll'), Enum(2, 'permitPrefix'), Enum(3, 'permitPrefixAndWellknownGroups'), Enum(4, 'permitPrefixAndAllGroups')]


# columns
class ciscoAtmIfType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 1, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'uni'), Enum(3, 'pnni'), Enum(4, 'iisp'), Enum(5, 'nniPvcOnly')]


class ciscoAtmIfSide(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 1, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'user'), Enum(2, 'network'), Enum(3, 'notApplicable')]


class ciscoAtmIfUniType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 1, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'public'), Enum(2, 'private')]


class ciscoAtmIfPVPs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 1, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoAtmIfPVCs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 1, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoAtmIfActiveSVPs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 1, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class ciscoAtmIfActiveSVCs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 1, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class ciscoAtmIfTotalConnections(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 1, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class ciscoAtmIfConfVplIf(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 1, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoAtmIfPortType(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 1, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'cpu'), Enum(3, 'ethernet'), Enum(4, 'oc3Utp'), Enum(5, 'oc3SingleModeFiber'), Enum(6, 'oc3MultiModeFiber'), Enum(7, 'oc12SingleModeFiber'), Enum(8, 'ds3'), Enum(9, 'e3'), Enum(10, 'ds1'), Enum(11, 'e1'), Enum(12, 'oc3Utp3'), Enum(13, 'oc3Utp5'), Enum(14, 'oc3SmIr'), Enum(15, 'oc3SmIrPlus'), Enum(16, 'oc3SmLr'), Enum(17, 'oc3Pof'), Enum(18, 'oc12MultiModeFiber'), Enum(19, 'oc12SmIr'), Enum(20, 'oc12SmIrPlus'), Enum(21, 'oc12SmLr'), Enum(22, 'oc12Pof'), Enum(23, 'oc12SmLr2'), Enum(24, 'oc12SmLr3'), Enum(25, 'atm25')]


class ciscoAtmIfXmitLed(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 1, 1, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'off'), Enum(2, 'steadyGreen'), Enum(3, 'steadyYellow'), Enum(4, 'steadyRed'), Enum(5, 'flashGreen'), Enum(6, 'flashYellow'), Enum(7, 'flashRed')]


class ciscoAtmIfRecvLed(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 1, 1, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'off'), Enum(2, 'steadyGreen'), Enum(3, 'steadyYellow'), Enum(4, 'steadyRed'), Enum(5, 'flashGreen'), Enum(6, 'flashYellow'), Enum(7, 'flashRed')]


class ciscoAtmIfXmitCells(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 1, 1, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmIfRecvCells(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 1, 1, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmIfSvcMinVci(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 1, 1, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoAtmIfIlmiConfiguration(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 1, 1, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class ciscoAtmIfIlmiAddressRegistration(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 1, 1, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class ciscoAtmIfIlmiAutoConfiguration(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 1, 1, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class ciscoAtmIfIlmiKeepAlive(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 1, 1, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class ciscoAtmIfSoftVcDestAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 1, 1, 1, 20])
	syntaxobject = NsapAtmAddr


class ciscoAtmIfUniSignallingVersion(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 1, 1, 1, 21])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'notApplicable'), Enum(2, 'atmfUni3Dot0'), Enum(3, 'atmfUni3Dot1'), Enum(4, 'atmfUni4Dot0')]


class ciscoAtmIfSvcUpcIntent(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 1, 1, 1, 22])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'passing'), Enum(2, 'tagging'), Enum(3, 'dropping')]


class ciscoAtmIfAddressType(ColumnObject):
	status = 2
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 1, 1, 1, 23])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'nsap'), Enum(2, 'esi'), Enum(3, 'e164'), Enum(4, 'null')]


class ciscoAtmIfAddress(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 1, 1, 1, 24])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class ciscoAtmIfWellKnownVcMode(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 1, 1, 1, 31])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'automatic'), Enum(2, 'manual'), Enum(3, 'manualDeleteUponEntry')]


class ciscoAtmIfSignallingAdminStatus(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 1, 1, 1, 32])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class ciscoAtmIfCdLed(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 1, 1, 1, 33])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'off'), Enum(2, 'steadyGreen')]


class ciscoAtmIfIlmiAccessFilter(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 1, 1, 1, 34])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'permitAll'), Enum(2, 'permitPrefix'), Enum(3, 'permitPrefixAndWellknownGroups'), Enum(4, 'permitPrefixAndAllGroups'), Enum(5, 'useGlobalDefaultFilter')]


class ciscoAtmIfConfigAESA(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 1, 1, 1, 35])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class ciscoAtmIfDerivedAESA(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 1, 1, 1, 36])
	syntaxobject = AtmAddr


class ciscoAtmIfE164Address(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 1, 1, 1, 37])
	syntaxobject = AtmAddr


class ciscoAtmIfE164AutoConversionOnly(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 1, 1, 1, 38])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


# rows 
from IF_MIB import ifIndex
class ciscoAtmIfEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 1, 1, 1])
	access = 2
	columns = {'ciscoAtmIfType': ciscoAtmIfType, 'ciscoAtmIfSide': ciscoAtmIfSide, 'ciscoAtmIfUniType': ciscoAtmIfUniType, 'ciscoAtmIfPVPs': ciscoAtmIfPVPs, 'ciscoAtmIfPVCs': ciscoAtmIfPVCs, 'ciscoAtmIfActiveSVPs': ciscoAtmIfActiveSVPs, 'ciscoAtmIfActiveSVCs': ciscoAtmIfActiveSVCs, 'ciscoAtmIfTotalConnections': ciscoAtmIfTotalConnections, 'ciscoAtmIfConfVplIf': ciscoAtmIfConfVplIf, 'ciscoAtmIfPortType': ciscoAtmIfPortType, 'ciscoAtmIfXmitLed': ciscoAtmIfXmitLed, 'ciscoAtmIfRecvLed': ciscoAtmIfRecvLed, 'ciscoAtmIfXmitCells': ciscoAtmIfXmitCells, 'ciscoAtmIfRecvCells': ciscoAtmIfRecvCells, 'ciscoAtmIfSvcMinVci': ciscoAtmIfSvcMinVci, 'ciscoAtmIfIlmiConfiguration': ciscoAtmIfIlmiConfiguration, 'ciscoAtmIfIlmiAddressRegistration': ciscoAtmIfIlmiAddressRegistration, 'ciscoAtmIfIlmiAutoConfiguration': ciscoAtmIfIlmiAutoConfiguration, 'ciscoAtmIfIlmiKeepAlive': ciscoAtmIfIlmiKeepAlive, 'ciscoAtmIfSoftVcDestAddress': ciscoAtmIfSoftVcDestAddress, 'ciscoAtmIfUniSignallingVersion': ciscoAtmIfUniSignallingVersion, 'ciscoAtmIfSvcUpcIntent': ciscoAtmIfSvcUpcIntent, 'ciscoAtmIfAddressType': ciscoAtmIfAddressType, 'ciscoAtmIfAddress': ciscoAtmIfAddress, 'ciscoAtmIfWellKnownVcMode': ciscoAtmIfWellKnownVcMode, 'ciscoAtmIfSignallingAdminStatus': ciscoAtmIfSignallingAdminStatus, 'ciscoAtmIfCdLed': ciscoAtmIfCdLed, 'ciscoAtmIfIlmiAccessFilter': ciscoAtmIfIlmiAccessFilter, 'ciscoAtmIfConfigAESA': ciscoAtmIfConfigAESA, 'ciscoAtmIfDerivedAESA': ciscoAtmIfDerivedAESA, 'ciscoAtmIfE164Address': ciscoAtmIfE164Address, 'ciscoAtmIfE164AutoConversionOnly': ciscoAtmIfE164AutoConversionOnly}


# notifications (traps) 
# groups 
class ciscoAtmIfMIBGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 3, 2, 1])
	group = [ciscoAtmIfType, ciscoAtmIfSide, ciscoAtmIfUniType, ciscoAtmIfPVPs, ciscoAtmIfPVCs, ciscoAtmIfActiveSVPs, ciscoAtmIfActiveSVCs, ciscoAtmIfTotalConnections, ciscoAtmIfConfVplIf, ciscoAtmIfPortType, ciscoAtmIfXmitLed, ciscoAtmIfRecvLed, ciscoAtmIfXmitCells, ciscoAtmIfRecvCells, ciscoAtmIfSvcMinVci, ciscoAtmIfIlmiConfiguration, ciscoAtmIfIlmiAddressRegistration, ciscoAtmIfIlmiAutoConfiguration, ciscoAtmIfIlmiKeepAlive, ciscoAtmIfSoftVcDestAddress, ciscoAtmIfCdLed]

class ciscoAtmIfMIBGroup2(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 3, 2, 2])
	group = [ciscoAtmIfUniSignallingVersion, ciscoAtmIfSvcUpcIntent]

class ciscoAtmIfMIBGroup4(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 3, 2, 4])
	group = [ciscoAtmIfIlmiAccessGlobalDefaultFilter, ciscoAtmIfIlmiAccessFilter]

class ciscoAtmIfMIBGroup5(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 3, 2, 5])
	group = [ciscoAtmIfConfigAESA, ciscoAtmIfDerivedAESA, ciscoAtmIfE164Address, ciscoAtmIfE164AutoConversionOnly]

class ciscoAtmIfMIBGroup6(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 14, 3, 2, 6])
	group = [ciscoAtmIfWellKnownVcMode, ciscoAtmIfSignallingAdminStatus]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
