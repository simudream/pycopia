# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from RFC_1212 import OBJECT_TYPE
from RFC1213_MIB import DisplayString, mib_2
from RFC1155_SMI import Counter, IpAddress, TimeTicks

class APPLETALK_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/APPLETALK-MIB'
	conformance = 2
	name = 'APPLETALK-MIB'
	language = 1

# nodes
class appletalk(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13])
	name = 'appletalk'

class llap(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 1])
	name = 'llap'

class aarp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 2])
	name = 'aarp'

class atport(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 3])
	name = 'atport'

class ddp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 4])
	name = 'ddp'

class ddpForwProtoOids(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 4, 17])
	name = 'ddpForwProtoOids'

class rtmpRoutingProto(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 4, 17, 1])
	name = 'rtmpRoutingProto'

class kipRoutingProto(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 4, 17, 2])
	name = 'kipRoutingProto'

class rtmp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 5])
	name = 'rtmp'

class kip(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 6])
	name = 'kip'

class zipRouter(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 7])
	name = 'zipRouter'

class nbp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 8])
	name = 'nbp'

class atecho(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 9])
	name = 'atecho'

class atp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 10])
	name = 'atp'

class pap(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 11])
	name = 'pap'

class asp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 12])
	name = 'asp'

class adsp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 13])
	name = 'adsp'

class atportptop(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 14])
	name = 'atportptop'

class atportPtoPProtoOids(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 14, 2])
	name = 'atportPtoPProtoOids'

class pToPProtoOther(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 14, 2, 1])
	name = 'pToPProtoOther'

class pToPProtoAurp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 14, 2, 2])
	name = 'pToPProtoAurp'

class pToPProtoCaymanUdp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 14, 2, 3])
	name = 'pToPProtoCaymanUdp'

class pToPProtoAtkvmsDecnetIV(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 14, 2, 4])
	name = 'pToPProtoAtkvmsDecnetIV'

class pToPProtoLiaisonUdp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 14, 2, 5])
	name = 'pToPProtoLiaisonUdp'

class pToPProtoIpx(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 14, 2, 6])
	name = 'pToPProtoIpx'

class pToPProtoShivaIp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 14, 2, 7])
	name = 'pToPProtoShivaIp'

class rtmpStub(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 16])
	name = 'rtmpStub'

class zipEndNode(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 17])
	name = 'zipEndNode'

class perPort(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 18])
	name = 'perPort'


# macros
# types 

class ATNetworkNumber(pycopia.SMI.Basetypes.OctetString):
	ranges = Ranges(Range(2, 2))


class DdpNodeAddress(pycopia.SMI.Basetypes.OctetString):
	ranges = Ranges(Range(3, 3))


class DdpSocketAddress(pycopia.SMI.Basetypes.OctetString):
	ranges = Ranges(Range(4, 4))


class ATName(pycopia.SMI.Basetypes.OctetString):
	ranges = Ranges(Range(0, 32))

# scalars 
class aarpLookups(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 2, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class aarpHits(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 2, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ddpOutRequests(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 4, 1])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ddpOutShorts(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 4, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ddpOutLongs(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 4, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ddpInReceives(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 4, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ddpForwRequests(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 4, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ddpInLocalDatagrams(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 4, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ddpNoProtocolHandlers(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 4, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ddpOutNoRoutes(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 4, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ddpTooShortErrors(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 4, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ddpTooLongErrors(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 4, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ddpBroadcastErrors(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 4, 11])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ddpShortDDPErrors(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 4, 12])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ddpHopCountErrors(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 4, 13])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ddpChecksumErrors(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 4, 14])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ddpForwardingTableOverflows(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 4, 18])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rtmpInDataPkts(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 5, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rtmpOutDataPkts(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 5, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rtmpInRequestPkts(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 5, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rtmpNextIREqualChanges(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 5, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rtmpNextIRLessChanges(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 5, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rtmpRouteDeletes(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 5, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rtmpRoutingTableOverflows(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 5, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class zipInZipQueries(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 7, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class zipInZipReplies(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 7, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class zipInZipExtendedReplies(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 7, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class zipZoneConflictErrors(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 7, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class zipInObsoletes(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 7, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class nbpInLookUpRequests(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 8, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class nbpInLookUpReplies(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 8, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class nbpInBroadcastRequests(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 8, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class nbpInForwardRequests(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 8, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class nbpOutLookUpReplies(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 8, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class nbpRegistrationFailures(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 8, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class nbpInErrors(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 8, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class atechoRequests(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 9, 1])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class atechoReplies(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 9, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class atechoOutRequests(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 9, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class atechoInReplies(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 9, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class atpInPkts(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 10, 1])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class atpOutPkts(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 10, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class atpTRequestRetransmissions(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 10, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class atpTResponseRetransmissions(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 10, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class atpReleaseTimerExpiredCounts(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 10, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class atpRetryCountExceededs(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 10, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class papInOpenConns(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 11, 1])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class papOutOpenConns(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 11, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class papInDatas(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 11, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class papOutDatas(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 11, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class papInCloseConns(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 11, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class papOutCloseConns(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 11, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class papTickleTimeoutCloses(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 11, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class aspInputTransactions(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 12, 1])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class aspOutputTransactions(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 12, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class aspInOpenSessions(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 12, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class aspOutOpenSessions(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 12, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class aspInCloseSessions(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 12, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class aspOutCloseSessions(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 12, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class aspNoMoreSessionsErrors(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 12, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class aspTickleTimeOutCloses(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 12, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class adspInPkts(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 13, 1])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class adspOutPkts(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 13, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class adspInOctets(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 13, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class adspOutOctets(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 13, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class adspInDataPkts(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 13, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class adspOutDataPkts(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 13, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class adspTimeoutErrors(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 13, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class adspTimeoutCloseErrors(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 13, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rtmpOutRequestPkts(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 16, 1])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rtmpInVersionMismatches(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 16, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rtmpInErrors(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 16, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class zipInErrors(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 17, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


# columns
class llapIfIndex(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class llapInPkts(ColumnObject):
	access = 4
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class llapOutPkts(ColumnObject):
	access = 4
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class llapInNoHandlers(ColumnObject):
	access = 4
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class llapInLengthErrors(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class llapInErrors(ColumnObject):
	access = 4
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class llapCollisions(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class llapDefers(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class llapNoDataErrors(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class llapRandomCTSErrors(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class llapFCSErrors(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 1, 1, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class aarpIfIndex(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 2, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class aarpPhysAddress(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 2, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class aarpNetAddress(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 2, 1, 1, 3])
	syntaxobject = DdpNodeAddress


class aarpStatus(ColumnObject):
	status = 3
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 2, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'valid'), Enum(2, 'invalid')]


class atportIndex(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class atportDescr(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class atportType(ColumnObject):
	status = 3
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'localtalk'), Enum(3, 'ethertalk1'), Enum(4, 'ethertalk2'), Enum(5, 'tokentalk'), Enum(6, 'iptalk'), Enum(7, 'serialPPP'), Enum(8, 'serialNonstandard'), Enum(9, 'virtual'), Enum(10, 'fdditalk'), Enum(11, 'arctalk'), Enum(12, 'smdstalk'), Enum(13, 'aurp'), Enum(14, 'frameRelay'), Enum(15, 'x25'), Enum(16, 'ip'), Enum(17, 'osi'), Enum(18, 'decnetIV'), Enum(19, 'arap'), Enum(20, 'isdnInThePacketMode'), Enum(21, 'nonAppleTalk3Com'), Enum(22, 'ipx'), Enum(23, 'arns'), Enum(24, 'hdlc')]


class atportNetStart(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 4])
	syntaxobject = ATNetworkNumber


class atportNetEnd(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 5])
	syntaxobject = ATNetworkNumber


class atportNetAddress(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 6])
	syntaxobject = DdpNodeAddress


class atportStatus(ColumnObject):
	status = 3
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'routing'), Enum(2, 'unconfigured'), Enum(3, 'off'), Enum(4, 'invalid'), Enum(5, 'endNode'), Enum(6, 'offDueToConflict'), Enum(7, 'other')]


class atportNetConfig(ColumnObject):
	status = 3
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'conflictOrientedSeed'), Enum(2, 'garnered'), Enum(3, 'guessed'), Enum(4, 'unconfigured'), Enum(5, 'conflictAverseSeed'), Enum(6, 'softSeed')]


class atportZoneConfig(ColumnObject):
	status = 3
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'conflictOrientedSeed'), Enum(2, 'garnered'), Enum(3, 'guessed'), Enum(4, 'unconfigured'), Enum(5, 'conflictAverseSeed'), Enum(6, 'softSeed')]


class atportZoneDefault(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 10])
	syntaxobject = ATName


class atportIfIndex(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class atportNetFrom(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 12])
	syntaxobject = DdpNodeAddress


class atportZoneFrom(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 13])
	syntaxobject = DdpNodeAddress


class atportInPkts(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class atportOutPkts(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class atportHome(ColumnObject):
	status = 3
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'home'), Enum(2, 'notHome')]


class atportCurrentZone(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 17])
	syntaxobject = ATName


class atportConflictPhysAddr(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 3, 1, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class atportZonePort(ColumnObject):
	access = 2
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 3, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class atportZoneName(ColumnObject):
	access = 2
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 3, 2, 1, 2])
	syntaxobject = ATName


class atportZoneStatus(ColumnObject):
	status = 3
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 3, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'valid'), Enum(2, 'invalid')]


class ddpListenerAddress(ColumnObject):
	access = 2
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 4, 15, 1, 1])
	syntaxobject = DdpSocketAddress


class ddpListenerInPkts(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 4, 15, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ddpListenerStatus(ColumnObject):
	status = 3
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 4, 15, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'valid'), Enum(2, 'invalid')]


class ddpForwardingNetEnd(ColumnObject):
	access = 2
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 4, 16, 1, 1])
	syntaxobject = ATNetworkNumber


class ddpForwardingNetStart(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 4, 16, 1, 2])
	syntaxobject = ATNetworkNumber


class ddpForwardingNextHop(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 4, 16, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class ddpForwardingProto(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 4, 16, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.ObjectIdentifier


class ddpForwardingModifiedTime(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 4, 16, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class ddpForwardingUseCounts(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 4, 16, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ddpForwardingPort(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 4, 16, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rtmpRangeStart(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 5, 1, 1, 1])
	syntaxobject = ATNetworkNumber


class rtmpRangeEnd(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 5, 1, 1, 2])
	syntaxobject = ATNetworkNumber


class rtmpNextHop(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 5, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class rtmpType(ColumnObject):
	status = 3
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 5, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'appletalk'), Enum(3, 'serialPPP'), Enum(4, 'serialNonstandard')]


class rtmpPort(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 5, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rtmpHops(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 5, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rtmpState(ColumnObject):
	status = 3
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 5, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'good'), Enum(2, 'suspect'), Enum(3, 'badZero'), Enum(4, 'badOne'), Enum(5, 'invalid')]


class kipNetStart(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 1])
	syntaxobject = ATNetworkNumber


class kipNetEnd(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 2])
	syntaxobject = ATNetworkNumber


class kipNextHop(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class kipHopCount(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class kipBCastAddr(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class kipCore(ColumnObject):
	status = 3
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'core'), Enum(2, 'notcore')]


class kipType(ColumnObject):
	status = 3
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'kipRouter'), Enum(2, 'net'), Enum(3, 'host'), Enum(4, 'other'), Enum(5, 'async')]


class kipState(ColumnObject):
	status = 3
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'configured'), Enum(2, 'learned'), Enum(3, 'invalid')]


class kipShare(ColumnObject):
	status = 3
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'shared'), Enum(2, 'private')]


class kipFrom(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 6, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class zipZoneName(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 7, 1, 1, 1])
	syntaxobject = ATName


class zipZoneIndex(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 7, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class zipZoneNetStart(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 7, 1, 1, 3])
	syntaxobject = ATNetworkNumber


class zipZoneNetEnd(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 7, 1, 1, 4])
	syntaxobject = ATNetworkNumber


class zipZoneState(ColumnObject):
	status = 3
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 7, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'valid'), Enum(2, 'invalid')]


class zipZoneFrom(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 7, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class zipZonePort(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 7, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class zipInGetNetInfos(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 7, 7, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class zipOutGetNetInfoReplies(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 7, 7, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class zipZoneOutInvalids(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 7, 7, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class zipAddressInvalids(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 7, 7, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class nbpIndex(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 8, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class nbpObject(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 8, 1, 1, 2])
	syntaxobject = ATName


class nbpType(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 8, 1, 1, 3])
	syntaxobject = ATName


class nbpZone(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 8, 1, 1, 4])
	syntaxobject = ATName


class nbpState(ColumnObject):
	status = 3
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 8, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'valid'), Enum(2, 'registering'), Enum(3, 'registrationFailed'), Enum(4, 'invalid')]


class nbpAddress(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 8, 1, 1, 6])
	syntaxobject = DdpSocketAddress


class nbpEnumerator(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 8, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class atpListenerAddress(ColumnObject):
	access = 2
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 10, 7, 1, 1])
	syntaxobject = DdpSocketAddress


class atpListenerStatus(ColumnObject):
	status = 3
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 10, 7, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'valid'), Enum(2, 'invalid')]


class papServerIndex(ColumnObject):
	access = 2
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class papServerListeningSocket(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 2])
	syntaxobject = DdpSocketAddress


class papServerStatus(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class papServerCompletedJobs(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class papServerBusyJobs(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class papServerFreeJobs(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class papServerAuthenticationFailures(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class papServerAccountingFailures(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class papServerGeneralFailures(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class papServerState(ColumnObject):
	status = 3
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'valid'), Enum(2, 'invalid')]


class papServerLastStatusMsg(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 11, 8, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class aspConnLocalAddress(ColumnObject):
	access = 2
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 12, 9, 1, 1])
	syntaxobject = DdpSocketAddress


class aspConnRemoteAddress(ColumnObject):
	access = 2
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 12, 9, 1, 2])
	syntaxobject = DdpSocketAddress


class aspConnID(ColumnObject):
	access = 2
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 12, 9, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class aspConnLastReqNum(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 12, 9, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class aspConnServerEnd(ColumnObject):
	status = 3
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 12, 9, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'sss'), Enum(2, 'wss'), Enum(3, 'sls')]


class aspConnState(ColumnObject):
	status = 3
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 12, 9, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'open'), Enum(2, 'closed'), Enum(3, 'invalid')]


class adspConnLocalAddress(ColumnObject):
	access = 2
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 13, 9, 1, 1])
	syntaxobject = DdpSocketAddress


class adspConnLocalConnID(ColumnObject):
	access = 2
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 13, 9, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class adspConnRemoteAddress(ColumnObject):
	access = 2
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 13, 9, 1, 3])
	syntaxobject = DdpSocketAddress


class adspConnRemoteConnID(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 13, 9, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class adspConnState(ColumnObject):
	status = 3
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 13, 9, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'open'), Enum(2, 'localHalfOpen'), Enum(3, 'remoteHalfOpen'), Enum(4, 'listening'), Enum(5, 'closed'), Enum(6, 'invalid')]


class atportPtoPIndex(ColumnObject):
	access = 2
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 14, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class atportPtoPProtocol(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 14, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.ObjectIdentifier


class atportPtoPRemoteName(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 14, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class atportPtoPRemoteAddress(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 14, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class atportPtoPPortIndex(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 14, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class atportPtoPStatus(ColumnObject):
	status = 3
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 14, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'valid'), Enum(2, 'invalid')]


class zipOutGetNetInfos(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 17, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class zipInGetNetInfoReplies(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 17, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class zipZoneInInvalids(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 17, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class perPortAarpInProbes(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class perPortAarpOutProbes(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class perPortAarpInReqs(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class perPortAarpOutReqs(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class perPortAarpInRsps(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class perPortAarpOutRsps(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class perPortDdpInReceives(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class perPortDdpInLocalDatagrams(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class perPortDdpNoProtocolHandlers(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class perPortDdpTooShortErrors(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class perPortDdpTooLongErrors(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class perPortDdpChecksumErrors(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class perPortDdpForwRequests(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class perPortRtmpInDataPkts(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class perPortRtmpOutDataPkts(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class perPortRtmpInRequestPkts(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class perPortRtmpRouteDeletes(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class perPortZipInZipQueries(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class perPortZipInZipReplies(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class perPortZipInZipExtendedReplies(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 20])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class perPortZipZoneConflictErrors(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 21])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class perPortZipInErrors(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 22])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class perPortNbpInLookUpRequests(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 23])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class perPortNbpInLookUpReplies(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 24])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class perPortNbpInBroadcastRequests(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 25])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class perPortNbpInForwardRequests(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 26])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class perPortNbpOutLookUpReplies(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 27])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class perPortNbpRegistrationFailures(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 28])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class perPortNbpInErrors(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 29])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class perPortEchoRequests(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 30])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class perPortEchoReplies(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 18, 1, 1, 31])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


# rows 
class llapEntry(RowObject):
	status = 3
	index = pycopia.SMI.Objects.IndexObjects([llapIfIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 1, 1, 1])
	access = 2
	columns = {'llapIfIndex': llapIfIndex, 'llapInPkts': llapInPkts, 'llapOutPkts': llapOutPkts, 'llapInNoHandlers': llapInNoHandlers, 'llapInLengthErrors': llapInLengthErrors, 'llapInErrors': llapInErrors, 'llapCollisions': llapCollisions, 'llapDefers': llapDefers, 'llapNoDataErrors': llapNoDataErrors, 'llapRandomCTSErrors': llapRandomCTSErrors, 'llapFCSErrors': llapFCSErrors}


class aarpEntry(RowObject):
	status = 3
	index = pycopia.SMI.Objects.IndexObjects([aarpIfIndex, aarpNetAddress], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 2, 1, 1])
	access = 2
	columns = {'aarpIfIndex': aarpIfIndex, 'aarpPhysAddress': aarpPhysAddress, 'aarpNetAddress': aarpNetAddress, 'aarpStatus': aarpStatus}


class atportEntry(RowObject):
	status = 3
	index = pycopia.SMI.Objects.IndexObjects([atportIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 3, 1, 1])
	access = 2
	columns = {'atportIndex': atportIndex, 'atportDescr': atportDescr, 'atportType': atportType, 'atportNetStart': atportNetStart, 'atportNetEnd': atportNetEnd, 'atportNetAddress': atportNetAddress, 'atportStatus': atportStatus, 'atportNetConfig': atportNetConfig, 'atportZoneConfig': atportZoneConfig, 'atportZoneDefault': atportZoneDefault, 'atportIfIndex': atportIfIndex, 'atportNetFrom': atportNetFrom, 'atportZoneFrom': atportZoneFrom, 'atportInPkts': atportInPkts, 'atportOutPkts': atportOutPkts, 'atportHome': atportHome, 'atportCurrentZone': atportCurrentZone, 'atportConflictPhysAddr': atportConflictPhysAddr}


class atportZoneEntry(RowObject):
	status = 3
	index = pycopia.SMI.Objects.IndexObjects([atportZonePort, atportZoneName], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 3, 2, 1])
	access = 2
	columns = {'atportZonePort': atportZonePort, 'atportZoneName': atportZoneName, 'atportZoneStatus': atportZoneStatus}


class ddpListenerEntry(RowObject):
	status = 3
	index = pycopia.SMI.Objects.IndexObjects([ddpListenerAddress], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 4, 15, 1])
	access = 2
	columns = {'ddpListenerAddress': ddpListenerAddress, 'ddpListenerInPkts': ddpListenerInPkts, 'ddpListenerStatus': ddpListenerStatus}


class ddpForwardingEntry(RowObject):
	status = 3
	index = pycopia.SMI.Objects.IndexObjects([ddpForwardingNetEnd], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 4, 16, 1])
	access = 2
	columns = {'ddpForwardingNetEnd': ddpForwardingNetEnd, 'ddpForwardingNetStart': ddpForwardingNetStart, 'ddpForwardingNextHop': ddpForwardingNextHop, 'ddpForwardingProto': ddpForwardingProto, 'ddpForwardingModifiedTime': ddpForwardingModifiedTime, 'ddpForwardingUseCounts': ddpForwardingUseCounts, 'ddpForwardingPort': ddpForwardingPort}


class rtmpEntry(RowObject):
	status = 3
	index = pycopia.SMI.Objects.IndexObjects([rtmpRangeStart], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 5, 1, 1])
	access = 2
	columns = {'rtmpRangeStart': rtmpRangeStart, 'rtmpRangeEnd': rtmpRangeEnd, 'rtmpNextHop': rtmpNextHop, 'rtmpType': rtmpType, 'rtmpPort': rtmpPort, 'rtmpHops': rtmpHops, 'rtmpState': rtmpState}


class kipEntry(RowObject):
	status = 3
	index = pycopia.SMI.Objects.IndexObjects([kipNetStart], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 6, 1, 1])
	access = 2
	columns = {'kipNetStart': kipNetStart, 'kipNetEnd': kipNetEnd, 'kipNextHop': kipNextHop, 'kipHopCount': kipHopCount, 'kipBCastAddr': kipBCastAddr, 'kipCore': kipCore, 'kipType': kipType, 'kipState': kipState, 'kipShare': kipShare, 'kipFrom': kipFrom}


class zipEntry(RowObject):
	status = 3
	index = pycopia.SMI.Objects.IndexObjects([zipZoneNetStart, zipZoneIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 7, 1, 1])
	access = 2
	columns = {'zipZoneName': zipZoneName, 'zipZoneIndex': zipZoneIndex, 'zipZoneNetStart': zipZoneNetStart, 'zipZoneNetEnd': zipZoneNetEnd, 'zipZoneState': zipZoneState, 'zipZoneFrom': zipZoneFrom, 'zipZonePort': zipZonePort}


class zipRouterNetInfoEntry(RowObject):
	status = 3
	index = pycopia.SMI.Objects.IndexObjects([atportIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 7, 7, 1])
	access = 2
	columns = {'zipInGetNetInfos': zipInGetNetInfos, 'zipOutGetNetInfoReplies': zipOutGetNetInfoReplies, 'zipZoneOutInvalids': zipZoneOutInvalids, 'zipAddressInvalids': zipAddressInvalids}


class nbpEntry(RowObject):
	status = 3
	index = pycopia.SMI.Objects.IndexObjects([nbpIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 8, 1, 1])
	access = 2
	columns = {'nbpIndex': nbpIndex, 'nbpObject': nbpObject, 'nbpType': nbpType, 'nbpZone': nbpZone, 'nbpState': nbpState, 'nbpAddress': nbpAddress, 'nbpEnumerator': nbpEnumerator}


class atpListenerEntry(RowObject):
	status = 3
	index = pycopia.SMI.Objects.IndexObjects([atpListenerAddress], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 10, 7, 1])
	access = 2
	columns = {'atpListenerAddress': atpListenerAddress, 'atpListenerStatus': atpListenerStatus}


class papServerEntry(RowObject):
	status = 3
	index = pycopia.SMI.Objects.IndexObjects([papServerIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 11, 8, 1])
	access = 2
	columns = {'papServerIndex': papServerIndex, 'papServerListeningSocket': papServerListeningSocket, 'papServerStatus': papServerStatus, 'papServerCompletedJobs': papServerCompletedJobs, 'papServerBusyJobs': papServerBusyJobs, 'papServerFreeJobs': papServerFreeJobs, 'papServerAuthenticationFailures': papServerAuthenticationFailures, 'papServerAccountingFailures': papServerAccountingFailures, 'papServerGeneralFailures': papServerGeneralFailures, 'papServerState': papServerState, 'papServerLastStatusMsg': papServerLastStatusMsg}


class aspConnEntry(RowObject):
	status = 3
	index = pycopia.SMI.Objects.IndexObjects([aspConnLocalAddress, aspConnRemoteAddress, aspConnID], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 12, 9, 1])
	access = 2
	columns = {'aspConnLocalAddress': aspConnLocalAddress, 'aspConnRemoteAddress': aspConnRemoteAddress, 'aspConnID': aspConnID, 'aspConnLastReqNum': aspConnLastReqNum, 'aspConnServerEnd': aspConnServerEnd, 'aspConnState': aspConnState}


class adspConnEntry(RowObject):
	status = 3
	index = pycopia.SMI.Objects.IndexObjects([adspConnLocalAddress, adspConnRemoteAddress, adspConnLocalConnID], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 13, 9, 1])
	access = 2
	columns = {'adspConnLocalAddress': adspConnLocalAddress, 'adspConnLocalConnID': adspConnLocalConnID, 'adspConnRemoteAddress': adspConnRemoteAddress, 'adspConnRemoteConnID': adspConnRemoteConnID, 'adspConnState': adspConnState}


class atportPtoPEntry(RowObject):
	status = 3
	index = pycopia.SMI.Objects.IndexObjects([atportPtoPIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 14, 1, 1])
	access = 2
	columns = {'atportPtoPIndex': atportPtoPIndex, 'atportPtoPProtocol': atportPtoPProtocol, 'atportPtoPRemoteName': atportPtoPRemoteName, 'atportPtoPRemoteAddress': atportPtoPRemoteAddress, 'atportPtoPPortIndex': atportPtoPPortIndex, 'atportPtoPStatus': atportPtoPStatus}


class zipNetInfoEntry(RowObject):
	status = 3
	index = pycopia.SMI.Objects.IndexObjects([atportIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 17, 1, 1])
	access = 2
	columns = {'zipOutGetNetInfos': zipOutGetNetInfos, 'zipInGetNetInfoReplies': zipInGetNetInfoReplies, 'zipZoneInInvalids': zipZoneInInvalids}


class perPortEntry(RowObject):
	status = 3
	index = pycopia.SMI.Objects.IndexObjects([atportIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 13, 18, 1, 1])
	access = 2
	columns = {'perPortAarpInProbes': perPortAarpInProbes, 'perPortAarpOutProbes': perPortAarpOutProbes, 'perPortAarpInReqs': perPortAarpInReqs, 'perPortAarpOutReqs': perPortAarpOutReqs, 'perPortAarpInRsps': perPortAarpInRsps, 'perPortAarpOutRsps': perPortAarpOutRsps, 'perPortDdpInReceives': perPortDdpInReceives, 'perPortDdpInLocalDatagrams': perPortDdpInLocalDatagrams, 'perPortDdpNoProtocolHandlers': perPortDdpNoProtocolHandlers, 'perPortDdpTooShortErrors': perPortDdpTooShortErrors, 'perPortDdpTooLongErrors': perPortDdpTooLongErrors, 'perPortDdpChecksumErrors': perPortDdpChecksumErrors, 'perPortDdpForwRequests': perPortDdpForwRequests, 'perPortRtmpInDataPkts': perPortRtmpInDataPkts, 'perPortRtmpOutDataPkts': perPortRtmpOutDataPkts, 'perPortRtmpInRequestPkts': perPortRtmpInRequestPkts, 'perPortRtmpRouteDeletes': perPortRtmpRouteDeletes, 'perPortZipInZipQueries': perPortZipInZipQueries, 'perPortZipInZipReplies': perPortZipInZipReplies, 'perPortZipInZipExtendedReplies': perPortZipInZipExtendedReplies, 'perPortZipZoneConflictErrors': perPortZipZoneConflictErrors, 'perPortZipInErrors': perPortZipInErrors, 'perPortNbpInLookUpRequests': perPortNbpInLookUpRequests, 'perPortNbpInLookUpReplies': perPortNbpInLookUpReplies, 'perPortNbpInBroadcastRequests': perPortNbpInBroadcastRequests, 'perPortNbpInForwardRequests': perPortNbpInForwardRequests, 'perPortNbpOutLookUpReplies': perPortNbpOutLookUpReplies, 'perPortNbpRegistrationFailures': perPortNbpRegistrationFailures, 'perPortNbpInErrors': perPortNbpInErrors, 'perPortEchoRequests': perPortEchoRequests, 'perPortEchoReplies': perPortEchoReplies}


# notifications (traps) 
# groups 
# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
