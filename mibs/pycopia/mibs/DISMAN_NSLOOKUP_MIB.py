# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, Unsigned32, mib_2, Integer32
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from INET_ADDRESS_MIB import InetAddressType, InetAddress
from SNMPv2_TC import RowStatus
from SNMP_FRAMEWORK_MIB import SnmpAdminString

class DISMAN_NSLOOKUP_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/DISMAN-NSLOOKUP-MIB'
	name = 'DISMAN-NSLOOKUP-MIB'
	language = 2
	description = 'The Lookup MIB (DISMAN-NSLOOKUP-MIB) enables determination\nof either the name(s) corresponding to a host address or of\nthe address(es) associated with a host name at a remote\nhost.\n\nCopyright (C) The Internet Society (2006).  This version of\nthis MIB module is part of RFC 4560; see the RFC itself for\nfull legal notices.'

# nodes
class lookupMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 82])
	name = 'lookupMIB'

class lookupObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 82, 1])
	name = 'lookupObjects'

class lookupConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 82, 2])
	name = 'lookupConformance'

class lookupCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 82, 2, 1])
	name = 'lookupCompliances'

class lookupGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 82, 2, 2])
	name = 'lookupGroups'


# macros
# types 
# scalars 
class lookupMaxConcurrentRequests(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 82, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32
	access = 5
	units = 'requests'


class lookupPurgeTime(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 82, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32
	access = 5
	units = 'seconds'


# columns
class lookupCtlOwnerIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 82, 1, 3, 1, 1])
	syntaxobject = SnmpAdminString


class lookupCtlOperationName(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 82, 1, 3, 1, 2])
	syntaxobject = SnmpAdminString


class lookupCtlTargetAddressType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 82, 1, 3, 1, 3])
	syntaxobject = InetAddressType


class lookupCtlTargetAddress(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 82, 1, 3, 1, 4])
	syntaxobject = InetAddress


class lookupCtlOperStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 82, 1, 3, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'notStarted'), Enum(3, 'completed')]


class lookupCtlTime(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 82, 1, 3, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32
	access = 4
	units = 'milliseconds'


class lookupCtlRc(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 82, 1, 3, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class lookupCtlRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 82, 1, 3, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class lookupResultsIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 82, 1, 4, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class lookupResultsAddressType(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 82, 1, 4, 1, 2])
	syntaxobject = InetAddressType


class lookupResultsAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 82, 1, 4, 1, 3])
	syntaxobject = InetAddress


# rows 
class lookupCtlEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([lookupCtlOwnerIndex, lookupCtlOperationName], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 82, 1, 3, 1])
	access = 2
	rowstatus = lookupCtlRowStatus
	columns = {'lookupCtlOwnerIndex': lookupCtlOwnerIndex, 'lookupCtlOperationName': lookupCtlOperationName, 'lookupCtlTargetAddressType': lookupCtlTargetAddressType, 'lookupCtlTargetAddress': lookupCtlTargetAddress, 'lookupCtlOperStatus': lookupCtlOperStatus, 'lookupCtlTime': lookupCtlTime, 'lookupCtlRc': lookupCtlRc, 'lookupCtlRowStatus': lookupCtlRowStatus}


class lookupResultsEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([lookupCtlOwnerIndex, lookupCtlOperationName, lookupResultsIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 82, 1, 4, 1])
	access = 2
	columns = {'lookupResultsIndex': lookupResultsIndex, 'lookupResultsAddressType': lookupResultsAddressType, 'lookupResultsAddress': lookupResultsAddress}


# notifications (traps) 
# groups 
class lookupGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 82, 2, 2, 1])
	group = [lookupMaxConcurrentRequests, lookupPurgeTime, lookupCtlOperStatus, lookupCtlTargetAddressType, lookupCtlTargetAddress, lookupCtlTime, lookupCtlRc, lookupCtlRowStatus, lookupResultsAddressType, lookupResultsAddress]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
