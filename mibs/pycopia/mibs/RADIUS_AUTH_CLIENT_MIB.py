# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, OBJECT_IDENTITY, Counter32, Integer32, Gauge32, IpAddress, TimeTicks, mib_2
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from INET_ADDRESS_MIB import InetAddressType, InetAddress, InetPortNumber
from SNMP_FRAMEWORK_MIB import SnmpAdminString

class RADIUS_AUTH_CLIENT_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/RADIUS-AUTH-CLIENT-MIB'
	conformance = 4
	name = 'RADIUS-AUTH-CLIENT-MIB'
	language = 2
	description = 'The MIB module for entities implementing the client\nside of the Remote Authentication Dial-In User Service\n(RADIUS) authentication protocol.  Copyright (C) The\nInternet Society (2006).  This version of this MIB\nmodule is part of RFC 4668; see the RFC itself for\nfull legal notices.'

# nodes
class radiusMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67])
	name = 'radiusMIB'

class radiusAuthentication(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1])
	name = 'radiusAuthentication'

class radiusAuthClientMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2])
	name = 'radiusAuthClientMIB'

class radiusAuthClientMIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 1])
	name = 'radiusAuthClientMIBObjects'

class radiusAuthClient(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1])
	name = 'radiusAuthClient'

class radiusAuthClientMIBConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 2])
	name = 'radiusAuthClientMIBConformance'

class radiusAuthClientMIBCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 2, 1])
	name = 'radiusAuthClientMIBCompliances'

class radiusAuthClientMIBGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 2, 2])
	name = 'radiusAuthClientMIBGroups'


# macros
# types 
# scalars 
class radiusAuthClientInvalidServerAddresses(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'packets'


class radiusAuthClientIdentifier(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 2])
	syntaxobject = SnmpAdminString


# columns
class radiusAuthServerIndex(ColumnObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 3, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class radiusAuthServerAddress(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 3, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class radiusAuthClientServerPortNumber(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 3, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class radiusAuthClientRoundTripTime(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 3, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class radiusAuthClientAccessRequests(ColumnObject):
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 3, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'packets'


class radiusAuthClientAccessRetransmissions(ColumnObject):
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 3, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'packets'


class radiusAuthClientAccessAccepts(ColumnObject):
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 3, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'packets'


class radiusAuthClientAccessRejects(ColumnObject):
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 3, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'packets'


class radiusAuthClientAccessChallenges(ColumnObject):
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 3, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'packets'


class radiusAuthClientMalformedAccessResponses(ColumnObject):
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 3, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'packets'


class radiusAuthClientBadAuthenticators(ColumnObject):
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 3, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'packets'


class radiusAuthClientPendingRequests(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 3, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class radiusAuthClientTimeouts(ColumnObject):
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 3, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'timeouts'


class radiusAuthClientUnknownTypes(ColumnObject):
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 3, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'packets'


class radiusAuthClientPacketsDropped(ColumnObject):
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 3, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'packets'


class radiusAuthServerExtIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 4, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class radiusAuthServerInetAddressType(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 4, 1, 2])
	syntaxobject = InetAddressType


class radiusAuthServerInetAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 4, 1, 3])
	syntaxobject = InetAddress


class radiusAuthClientServerInetPortNumber(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 4, 1, 4])
	syntaxobject = InetPortNumber


class radiusAuthClientExtRoundTripTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 4, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class radiusAuthClientExtAccessRequests(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 4, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'packets'


class radiusAuthClientExtAccessRetransmissions(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 4, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'packets'


class radiusAuthClientExtAccessAccepts(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 4, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'packets'


class radiusAuthClientExtAccessRejects(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 4, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'packets'


class radiusAuthClientExtAccessChallenges(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 4, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'packets'


class radiusAuthClientExtMalformedAccessResponses(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 4, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'packets'


class radiusAuthClientExtBadAuthenticators(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 4, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'packets'


class radiusAuthClientExtPendingRequests(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 4, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32
	access = 4
	units = 'packets'


class radiusAuthClientExtTimeouts(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 4, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'timeouts'


class radiusAuthClientExtUnknownTypes(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 4, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'packets'


class radiusAuthClientExtPacketsDropped(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 4, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'packets'


class radiusAuthClientCounterDiscontinuity(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 4, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks
	access = 4
	units = 'centiseconds'


# rows 
class radiusAuthServerEntry(RowObject):
	status = 2
	index = pycopia.SMI.Objects.IndexObjects([radiusAuthServerIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 3, 1])
	access = 2
	columns = {'radiusAuthServerIndex': radiusAuthServerIndex, 'radiusAuthServerAddress': radiusAuthServerAddress, 'radiusAuthClientServerPortNumber': radiusAuthClientServerPortNumber, 'radiusAuthClientRoundTripTime': radiusAuthClientRoundTripTime, 'radiusAuthClientAccessRequests': radiusAuthClientAccessRequests, 'radiusAuthClientAccessRetransmissions': radiusAuthClientAccessRetransmissions, 'radiusAuthClientAccessAccepts': radiusAuthClientAccessAccepts, 'radiusAuthClientAccessRejects': radiusAuthClientAccessRejects, 'radiusAuthClientAccessChallenges': radiusAuthClientAccessChallenges, 'radiusAuthClientMalformedAccessResponses': radiusAuthClientMalformedAccessResponses, 'radiusAuthClientBadAuthenticators': radiusAuthClientBadAuthenticators, 'radiusAuthClientPendingRequests': radiusAuthClientPendingRequests, 'radiusAuthClientTimeouts': radiusAuthClientTimeouts, 'radiusAuthClientUnknownTypes': radiusAuthClientUnknownTypes, 'radiusAuthClientPacketsDropped': radiusAuthClientPacketsDropped}


class radiusAuthServerExtEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([radiusAuthServerExtIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 4, 1])
	access = 2
	columns = {'radiusAuthServerExtIndex': radiusAuthServerExtIndex, 'radiusAuthServerInetAddressType': radiusAuthServerInetAddressType, 'radiusAuthServerInetAddress': radiusAuthServerInetAddress, 'radiusAuthClientServerInetPortNumber': radiusAuthClientServerInetPortNumber, 'radiusAuthClientExtRoundTripTime': radiusAuthClientExtRoundTripTime, 'radiusAuthClientExtAccessRequests': radiusAuthClientExtAccessRequests, 'radiusAuthClientExtAccessRetransmissions': radiusAuthClientExtAccessRetransmissions, 'radiusAuthClientExtAccessAccepts': radiusAuthClientExtAccessAccepts, 'radiusAuthClientExtAccessRejects': radiusAuthClientExtAccessRejects, 'radiusAuthClientExtAccessChallenges': radiusAuthClientExtAccessChallenges, 'radiusAuthClientExtMalformedAccessResponses': radiusAuthClientExtMalformedAccessResponses, 'radiusAuthClientExtBadAuthenticators': radiusAuthClientExtBadAuthenticators, 'radiusAuthClientExtPendingRequests': radiusAuthClientExtPendingRequests, 'radiusAuthClientExtTimeouts': radiusAuthClientExtTimeouts, 'radiusAuthClientExtUnknownTypes': radiusAuthClientExtUnknownTypes, 'radiusAuthClientExtPacketsDropped': radiusAuthClientExtPacketsDropped, 'radiusAuthClientCounterDiscontinuity': radiusAuthClientCounterDiscontinuity}


# notifications (traps) 
# groups 
class radiusAuthClientMIBGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 2, 2, 1])
	group = [radiusAuthClientIdentifier, radiusAuthClientInvalidServerAddresses, radiusAuthServerAddress, radiusAuthClientServerPortNumber, radiusAuthClientRoundTripTime, radiusAuthClientAccessRequests, radiusAuthClientAccessRetransmissions, radiusAuthClientAccessAccepts, radiusAuthClientAccessRejects, radiusAuthClientAccessChallenges, radiusAuthClientMalformedAccessResponses, radiusAuthClientBadAuthenticators, radiusAuthClientPendingRequests, radiusAuthClientTimeouts, radiusAuthClientUnknownTypes, radiusAuthClientPacketsDropped]

class radiusAuthClientExtMIBGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 67, 1, 2, 2, 2, 2])
	group = [radiusAuthClientIdentifier, radiusAuthClientInvalidServerAddresses, radiusAuthServerInetAddressType, radiusAuthServerInetAddress, radiusAuthClientServerInetPortNumber, radiusAuthClientExtRoundTripTime, radiusAuthClientExtAccessRequests, radiusAuthClientExtAccessRetransmissions, radiusAuthClientExtAccessAccepts, radiusAuthClientExtAccessRejects, radiusAuthClientExtAccessChallenges, radiusAuthClientExtMalformedAccessResponses, radiusAuthClientExtBadAuthenticators, radiusAuthClientExtPendingRequests, radiusAuthClientExtTimeouts, radiusAuthClientExtUnknownTypes, radiusAuthClientExtPacketsDropped, radiusAuthClientCounterDiscontinuity]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
