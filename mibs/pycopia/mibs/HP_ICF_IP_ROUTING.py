# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from IP_FORWARD_MIB import ipCidrRouteEntry
from IF_MIB import ifIndex, InterfaceIndex, InterfaceIndexOrZero
from SNMPv2_SMI import OBJECT_TYPE, MODULE_IDENTITY, Integer32
from INET_ADDRESS_MIB import InetAddressType, InetAddress, InetAddressPrefixLength
from HP_ICF_OID import hpSwitch
from SNMPv2_TC import PhysAddress, RowStatus

class HP_ICF_IP_ROUTING(ModuleObject):
	path = '/usr/share/snmp/mibs/site/HP-ICF-IP-ROUTING'
	conformance = 1
	name = 'HP-ICF-IP-ROUTING'
	language = 2
	description = 'This MIB module contains HP proprietary\nobjects for managing IP Routing.'

# nodes
class hpicfIpRouting(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15])
	name = 'hpicfIpRouting'

class hpicfIpRoutingObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1])
	name = 'hpicfIpRoutingObjects'

class hpicfIcmpRdisc(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 1])
	name = 'hpicfIcmpRdisc'

class hpicfIcmpRateLimits(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 2])
	name = 'hpicfIcmpRateLimits'

class hpicfIcmpBoxLimits(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 2, 1])
	name = 'hpicfIcmpBoxLimits'

class hpicfGlobalIpConfig(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 3])
	name = 'hpicfGlobalIpConfig'

class hpicfIpStaticRouteConfig(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4])
	name = 'hpicfIpStaticRouteConfig'

class hpicfIpRouteStats(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 5])
	name = 'hpicfIpRouteStats'

class hpicfIpRoutingConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2])
	name = 'hpicfIpRoutingConformance'

class hpicfIpRoutingGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1])
	name = 'hpicfIpRoutingGroups'

class hpicfIpRoutingCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 2])
	name = 'hpicfIpRoutingCompliances'


# macros
# types 
# scalars 
class hpicfRdiscAdminStatus(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enable'), Enum(2, 'disable')]


class hpicfIcmpReplyLimitEnable(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enable'), Enum(2, 'disable')]


class hpicfIcmpReplyLimit(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpicfIcmpRedirectEnable(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enable'), Enum(2, 'disable')]


class hpicfIcmpDestUnreachEnable(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enable'), Enum(2, 'disable')]


class hpicfIcmpAddrMaskReplyEnable(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enable'), Enum(2, 'disable')]


class hpicfIcmpEchoBroadcastReplyEnable(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enable'), Enum(2, 'disable')]


class hpicfDBroadcastFwdEnable(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 3, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enable'), Enum(2, 'disable')]


class hpicfSourceRouteEnable(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 3, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enable'), Enum(2, 'disable')]


# columns
class hpicfRdiscIfAdminStatus(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 1, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enable'), Enum(2, 'disable')]


class hpicfRdiscIfAdvertAddress(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 1, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'multicast'), Enum(2, 'broadcast')]


class hpicfRdiscIfMaxAdvertInterval(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 1, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class hpicfRdiscIfMinAdvertInterval(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 1, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class hpicfRdiscIfAdvertLifetime(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 1, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class hpicfRdiscIfPreference(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 1, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpicfIpStaticRoutePrefixType(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1, 1, 1])
	syntaxobject = InetAddressType


class hpicfIpStaticRoutePrefix(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1, 1, 2])
	syntaxobject = InetAddress


class hpicfIpStaticRoutePrefixLength(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1, 1, 3])
	syntaxobject = InetAddressPrefixLength


class hpicfIpStaticRouteFwdAddrType(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1, 1, 4])
	syntaxobject = InetAddressType


class hpicfIpStaticRouteFwdAddr(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1, 1, 5])
	syntaxobject = InetAddress


class hpicfIpStaticRouteFwdIfIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1, 1, 6])
	syntaxobject = InterfaceIndexOrZero


class hpicfIpStaticRouteType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'reject'), Enum(3, 'local'), Enum(4, 'remote'), Enum(5, 'blackhole')]


class hpicfIpStaticRouteDistance(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpicfIpStaticRouteTag(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class hpicfIpStaticRouteStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class hpicfIpStaticNeighborIfIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 2, 1, 1])
	syntaxobject = InterfaceIndex


class hpicfIpStaticNeighborNetAddrType(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 2, 1, 2])
	syntaxobject = InetAddressType


class hpicfIpStaticNeighborNetAddress(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 2, 1, 3])
	syntaxobject = InetAddress


class hpicfIpStaticNeighborPhysAddress(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.PhysAddress


class hpicfIpStaticNeighborStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class hpicfIpCidrRouteDistance(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 5, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


# rows 
class hpicfRdiscIfCfgEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 1, 2, 1])
	access = 2
	columns = {'hpicfRdiscIfAdminStatus': hpicfRdiscIfAdminStatus, 'hpicfRdiscIfAdvertAddress': hpicfRdiscIfAdvertAddress, 'hpicfRdiscIfMaxAdvertInterval': hpicfRdiscIfMaxAdvertInterval, 'hpicfRdiscIfMinAdvertInterval': hpicfRdiscIfMinAdvertInterval, 'hpicfRdiscIfAdvertLifetime': hpicfRdiscIfAdvertLifetime, 'hpicfRdiscIfPreference': hpicfRdiscIfPreference}


class hpicfIpStaticRouteEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([hpicfIpStaticRoutePrefixType, hpicfIpStaticRoutePrefix, hpicfIpStaticRoutePrefixLength, hpicfIpStaticRouteFwdAddrType, hpicfIpStaticRouteFwdAddr, hpicfIpStaticRouteFwdIfIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 1, 1])
	access = 2
	rowstatus = hpicfIpStaticRouteStatus
	columns = {'hpicfIpStaticRoutePrefixType': hpicfIpStaticRoutePrefixType, 'hpicfIpStaticRoutePrefix': hpicfIpStaticRoutePrefix, 'hpicfIpStaticRoutePrefixLength': hpicfIpStaticRoutePrefixLength, 'hpicfIpStaticRouteFwdAddrType': hpicfIpStaticRouteFwdAddrType, 'hpicfIpStaticRouteFwdAddr': hpicfIpStaticRouteFwdAddr, 'hpicfIpStaticRouteFwdIfIndex': hpicfIpStaticRouteFwdIfIndex, 'hpicfIpStaticRouteType': hpicfIpStaticRouteType, 'hpicfIpStaticRouteDistance': hpicfIpStaticRouteDistance, 'hpicfIpStaticRouteTag': hpicfIpStaticRouteTag, 'hpicfIpStaticRouteStatus': hpicfIpStaticRouteStatus}


class hpicfIpStaticNeighborEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([hpicfIpStaticNeighborIfIndex, hpicfIpStaticNeighborNetAddrType, hpicfIpStaticNeighborNetAddress], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 4, 2, 1])
	access = 2
	rowstatus = hpicfIpStaticNeighborStatus
	columns = {'hpicfIpStaticNeighborIfIndex': hpicfIpStaticNeighborIfIndex, 'hpicfIpStaticNeighborNetAddrType': hpicfIpStaticNeighborNetAddrType, 'hpicfIpStaticNeighborNetAddress': hpicfIpStaticNeighborNetAddress, 'hpicfIpStaticNeighborPhysAddress': hpicfIpStaticNeighborPhysAddress, 'hpicfIpStaticNeighborStatus': hpicfIpStaticNeighborStatus}


from IP_FORWARD_MIB import ipCidrRouteDest
from IP_FORWARD_MIB import ipCidrRouteMask
from IP_FORWARD_MIB import ipCidrRouteTos
from IP_FORWARD_MIB import ipCidrRouteNextHop
class hpicfIpCidrRouteEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ipCidrRouteDest, ipCidrRouteMask, ipCidrRouteTos, ipCidrRouteNextHop], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 1, 5, 1, 1])
	access = 2
	columns = {'hpicfIpCidrRouteDistance': hpicfIpCidrRouteDistance}


# notifications (traps) 
# groups 
class hpicfRdiscBaseGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 1])
	group = [hpicfRdiscAdminStatus]

class hpicfRdiscIfCfgGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 2])
	group = [hpicfRdiscIfAdminStatus, hpicfRdiscIfAdvertAddress, hpicfRdiscIfMaxAdvertInterval, hpicfRdiscIfMinAdvertInterval, hpicfRdiscIfAdvertLifetime, hpicfRdiscIfPreference]

class hpicfIcmpReplyBaseGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 3])
	group = [hpicfIcmpRedirectEnable, hpicfIcmpDestUnreachEnable, hpicfIcmpAddrMaskReplyEnable, hpicfIcmpEchoBroadcastReplyEnable]

class hpicfIcmpReplyLimitGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 4])
	group = [hpicfIcmpReplyLimitEnable, hpicfIcmpReplyLimit]

class hpicfIpRouteCfgGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 5])
	group = [hpicfDBroadcastFwdEnable, hpicfSourceRouteEnable]

class hpicfIpStaticRouteGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 6])
	group = [hpicfIpStaticRouteType, hpicfIpStaticRouteDistance, hpicfIpStaticRouteTag, hpicfIpStaticRouteStatus]

class hpicfIpStaticNeighborGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 7])
	group = [hpicfIpStaticNeighborPhysAddress, hpicfIpStaticNeighborStatus]

class hpicfIpCidrRouteGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 15, 2, 1, 8])
	group = [hpicfIpCidrRouteDistance]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
