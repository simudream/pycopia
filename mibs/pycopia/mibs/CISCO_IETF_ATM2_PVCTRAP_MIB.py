# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from IF_MIB import ifIndex
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, NOTIFICATION_TYPE, Gauge32, Counter32
from CISCO_SMI import ciscoExperiment
from ATM_MIB import atmInterfaceConfEntry, atmVclVpi, atmVclVci
from SNMPv2_TC import TruthValue, TimeStamp

class CISCO_IETF_ATM2_PVCTRAP_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/site/CISCO-IETF-ATM2-PVCTRAP-MIB'
	conformance = 3
	name = 'CISCO-IETF-ATM2-PVCTRAP-MIB'
	language = 2
	description = 'This MIB Module is a supplement to the\nATM-MIB.'

# nodes
class ciscoIetfAtm2PvctrapMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 29])
	name = 'ciscoIetfAtm2PvctrapMIB'

class atm2MIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 29, 1])
	name = 'atm2MIBObjects'

class atm2MIBTraps(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 29, 2])
	name = 'atm2MIBTraps'

class atmPvcTraps(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 29, 2, 1])
	name = 'atmPvcTraps'

class atmPvcTrapsPrefix(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 29, 2, 1, 0])
	name = 'atmPvcTrapsPrefix'

class atm2MIBConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 29, 3])
	name = 'atm2MIBConformance'

class atm2MIBGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 29, 3, 1])
	name = 'atm2MIBGroups'

class atm2MIBCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 29, 3, 2])
	name = 'atm2MIBCompliances'


# macros
# types 
# scalars 
# columns
class atmIntfPvcFailures(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 29, 1, 14, 1, 20])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class atmIntfCurrentlyFailingPVcls(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 29, 1, 14, 1, 22])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class atmIntfPvcFailuresTrapEnable(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 29, 1, 14, 1, 23])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class atmIntfPvcNotificationInterval(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 29, 1, 14, 1, 24])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class atmPreviouslyFailedPVclInterval(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 29, 1, 14, 1, 25])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class atmCurrentlyFailingPVclTimeStamp(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 29, 1, 21, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class atmPreviouslyFailedPVclTimeStamp(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 29, 1, 21, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


# rows 
from IF_MIB import ifIndex
class atmInterfaceExtEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 29, 1, 14, 1])
	access = 2
	columns = {'atmIntfPvcFailures': atmIntfPvcFailures, 'atmIntfCurrentlyFailingPVcls': atmIntfCurrentlyFailingPVcls, 'atmIntfPvcFailuresTrapEnable': atmIntfPvcFailuresTrapEnable, 'atmIntfPvcNotificationInterval': atmIntfPvcNotificationInterval, 'atmPreviouslyFailedPVclInterval': atmPreviouslyFailedPVclInterval}


class atmCurrentlyFailingPVclEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, atmVclVpi, atmVclVci], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 29, 1, 21, 1])
	access = 2
	columns = {'atmCurrentlyFailingPVclTimeStamp': atmCurrentlyFailingPVclTimeStamp, 'atmPreviouslyFailedPVclTimeStamp': atmPreviouslyFailedPVclTimeStamp}


# notifications (traps) 
class atmIntfPvcFailuresTrap(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 29, 2, 1, 0, 1])

# groups 
class atmSwitchServcHostGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 29, 3, 1, 1])
	group = [atmIntfPvcFailures, atmIntfCurrentlyFailingPVcls, atmIntfPvcFailuresTrapEnable, atmIntfPvcNotificationInterval, atmPreviouslyFailedPVclInterval, atmCurrentlyFailingPVclTimeStamp, atmPreviouslyFailedPVclTimeStamp]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
