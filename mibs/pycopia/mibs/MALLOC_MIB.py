# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from SNMP_FRAMEWORK_MIB import SnmpAdminString
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, OBJECT_IDENTITY, mib_2, Unsigned32, Gauge32, Counter32
from IPMROUTE_STD_MIB import LanguageTag
from INET_ADDRESS_MIB import InetAddress, InetAddressType
from IANA_MALLOC_MIB import IANAscopeSource, IANAmallocRangeSource
from SNMPv2_TC import RowStatus, TruthValue, StorageType

class MALLOC_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/MALLOC-MIB'
	conformance = 132
	name = 'MALLOC-MIB'
	language = 2
	description = 'The MIB module for management of multicast address\nallocation.\n\nCopyright (C) The Internet Society (2003).  This version of\nthis MIB module is part of RFC 3559; see the RFC itself for\nfull legal notices.'

# nodes
class mallocMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101])
	name = 'mallocMIB'

class mallocMIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1])
	name = 'mallocMIBObjects'

class malloc(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1])
	name = 'malloc'

class madcap(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 2])
	name = 'madcap'

class madcapConfig(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 2, 1])
	name = 'madcapConfig'

class madcapCounters(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 2, 2])
	name = 'madcapCounters'

class mallocConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 2])
	name = 'mallocConformance'

class mallocCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 2, 1])
	name = 'mallocCompliances'

class mallocGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 2, 2])
	name = 'mallocGroups'


# macros
# types 
# scalars 
class mallocCapabilities(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.BITS


class madcapConfigExtraAllocationTime(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32
	access = 5
	units = 'seconds'


class madcapConfigNoResponseDelay(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32
	access = 5
	units = 'seconds'


class madcapConfigOfferHold(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32
	access = 5
	units = 'seconds'


class madcapConfigResponseCacheInterval(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32
	access = 5
	units = 'seconds'


class madcapConfigClockSkewAllowance(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32
	access = 5
	units = 'seconds'


class madcapTotalErrors(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 2, 2, 1])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class madcapRequestsDenied(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 2, 2, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class madcapInvalidRequests(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 2, 2, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class madcapExcessiveClockSkews(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 2, 2, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class madcapBadLeaseIds(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 2, 2, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class madcapDiscovers(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 2, 2, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class madcapInforms(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 2, 2, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class madcapRequests(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 2, 2, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class madcapRenews(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 2, 2, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class madcapReleases(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 2, 2, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


# columns
class mallocScopeAddressType(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 2, 1, 1])
	syntaxobject = InetAddressType


class mallocScopeFirstAddress(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 2, 1, 2])
	syntaxobject = InetAddress


class mallocScopeLastAddress(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 2, 1, 3])
	syntaxobject = InetAddress


class mallocScopeHopLimit(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class mallocScopeStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class mallocScopeSource(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 2, 1, 6])
	syntaxobject = IANAscopeSource


class mallocScopeDivisible(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 2, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class mallocScopeServerAddressType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 2, 1, 8])
	syntaxobject = InetAddressType


class mallocScopeServerAddress(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 2, 1, 9])
	syntaxobject = InetAddress


class mallocScopeSSM(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 2, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class mallocScopeStorage(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 2, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


class mallocScopeNameLangName(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 3, 1, 1])
	syntaxobject = LanguageTag


class mallocScopeNameScopeName(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 3, 1, 2])
	syntaxobject = SnmpAdminString


class mallocScopeNameDefault(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 3, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class mallocScopeNameStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 3, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class mallocScopeNameStorage(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 3, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


class mallocAllocRangeFirstAddress(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 1])
	syntaxobject = InetAddress


class mallocAllocRangeLastAddress(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 2])
	syntaxobject = InetAddress


class mallocAllocRangeStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class mallocAllocRangeSource(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 4])
	syntaxobject = IANAmallocRangeSource


class mallocAllocRangeLifetime(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32
	access = 5
	units = 'seconds'


class mallocAllocRangeMaxLeaseAddrs(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class mallocAllocRangeMaxLeaseTime(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32
	access = 5
	units = 'seconds'


class mallocAllocRangeNumAllocatedAddrs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class mallocAllocRangeNumOfferedAddrs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class mallocAllocRangeNumWaitingAddrs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class mallocAllocRangeNumTryingAddrs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class mallocAllocRangeAdvertisable(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class mallocAllocRangeTotalAllocatedAddrs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class mallocAllocRangeTotalRequestedAddrs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class mallocAllocRangeStorage(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


class mallocRequestId(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 5, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class mallocRequestScopeAddressType(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 5, 1, 2])
	syntaxobject = InetAddressType


class mallocRequestScopeFirstAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 5, 1, 3])
	syntaxobject = InetAddress


class mallocRequestStartTime(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 5, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32
	access = 4
	units = 'seconds'


class mallocRequestEndTime(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 5, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32
	access = 4
	units = 'seconds'


class mallocRequestNumAddrs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 5, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class mallocRequestState(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 5, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'allocated'), Enum(2, 'offered'), Enum(3, 'waiting'), Enum(4, 'trying')]


class mallocRequestClientAddressType(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 5, 1, 8])
	syntaxobject = InetAddressType


class mallocRequestClientAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 5, 1, 9])
	syntaxobject = InetAddress


class mallocRequestServerAddressType(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 5, 1, 10])
	syntaxobject = InetAddressType


class mallocRequestServerAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 5, 1, 11])
	syntaxobject = InetAddress


class mallocRequestLeaseIdentifier(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 5, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class mallocAddressAddressType(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 6, 1, 1])
	syntaxobject = InetAddressType


class mallocAddressFirstAddress(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 6, 1, 2])
	syntaxobject = InetAddress


class mallocAddressNumAddrs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 6, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class mallocAddressRequestId(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 6, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


# rows 
class mallocScopeEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([mallocScopeAddressType, mallocScopeFirstAddress], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 2, 1])
	access = 2
	rowstatus = mallocScopeStatus
	columns = {'mallocScopeAddressType': mallocScopeAddressType, 'mallocScopeFirstAddress': mallocScopeFirstAddress, 'mallocScopeLastAddress': mallocScopeLastAddress, 'mallocScopeHopLimit': mallocScopeHopLimit, 'mallocScopeStatus': mallocScopeStatus, 'mallocScopeSource': mallocScopeSource, 'mallocScopeDivisible': mallocScopeDivisible, 'mallocScopeServerAddressType': mallocScopeServerAddressType, 'mallocScopeServerAddress': mallocScopeServerAddress, 'mallocScopeSSM': mallocScopeSSM, 'mallocScopeStorage': mallocScopeStorage}


class mallocScopeNameEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([mallocScopeAddressType, mallocScopeFirstAddress, mallocScopeNameLangName], True)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 3, 1])
	access = 2
	rowstatus = mallocScopeNameStatus
	columns = {'mallocScopeNameLangName': mallocScopeNameLangName, 'mallocScopeNameScopeName': mallocScopeNameScopeName, 'mallocScopeNameDefault': mallocScopeNameDefault, 'mallocScopeNameStatus': mallocScopeNameStatus, 'mallocScopeNameStorage': mallocScopeNameStorage}


class mallocAllocRangeEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([mallocScopeAddressType, mallocScopeFirstAddress, mallocAllocRangeFirstAddress], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1])
	access = 2
	rowstatus = mallocAllocRangeStatus
	columns = {'mallocAllocRangeFirstAddress': mallocAllocRangeFirstAddress, 'mallocAllocRangeLastAddress': mallocAllocRangeLastAddress, 'mallocAllocRangeStatus': mallocAllocRangeStatus, 'mallocAllocRangeSource': mallocAllocRangeSource, 'mallocAllocRangeLifetime': mallocAllocRangeLifetime, 'mallocAllocRangeMaxLeaseAddrs': mallocAllocRangeMaxLeaseAddrs, 'mallocAllocRangeMaxLeaseTime': mallocAllocRangeMaxLeaseTime, 'mallocAllocRangeNumAllocatedAddrs': mallocAllocRangeNumAllocatedAddrs, 'mallocAllocRangeNumOfferedAddrs': mallocAllocRangeNumOfferedAddrs, 'mallocAllocRangeNumWaitingAddrs': mallocAllocRangeNumWaitingAddrs, 'mallocAllocRangeNumTryingAddrs': mallocAllocRangeNumTryingAddrs, 'mallocAllocRangeAdvertisable': mallocAllocRangeAdvertisable, 'mallocAllocRangeTotalAllocatedAddrs': mallocAllocRangeTotalAllocatedAddrs, 'mallocAllocRangeTotalRequestedAddrs': mallocAllocRangeTotalRequestedAddrs, 'mallocAllocRangeStorage': mallocAllocRangeStorage}


class mallocRequestEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([mallocRequestId], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 5, 1])
	access = 2
	columns = {'mallocRequestId': mallocRequestId, 'mallocRequestScopeAddressType': mallocRequestScopeAddressType, 'mallocRequestScopeFirstAddress': mallocRequestScopeFirstAddress, 'mallocRequestStartTime': mallocRequestStartTime, 'mallocRequestEndTime': mallocRequestEndTime, 'mallocRequestNumAddrs': mallocRequestNumAddrs, 'mallocRequestState': mallocRequestState, 'mallocRequestClientAddressType': mallocRequestClientAddressType, 'mallocRequestClientAddress': mallocRequestClientAddress, 'mallocRequestServerAddressType': mallocRequestServerAddressType, 'mallocRequestServerAddress': mallocRequestServerAddress, 'mallocRequestLeaseIdentifier': mallocRequestLeaseIdentifier}


class mallocAddressEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([mallocAddressAddressType, mallocAddressFirstAddress], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 1, 1, 6, 1])
	access = 2
	columns = {'mallocAddressAddressType': mallocAddressAddressType, 'mallocAddressFirstAddress': mallocAddressFirstAddress, 'mallocAddressNumAddrs': mallocAddressNumAddrs, 'mallocAddressRequestId': mallocAddressRequestId}


# notifications (traps) 
# groups 
class mallocBasicGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 2, 2, 1])
	group = [mallocCapabilities, mallocRequestScopeAddressType, mallocRequestScopeFirstAddress, mallocRequestStartTime, mallocRequestEndTime, mallocRequestNumAddrs, mallocRequestState, mallocAddressNumAddrs, mallocAddressRequestId]

class mallocServerGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 2, 2, 2])
	group = [mallocScopeLastAddress, mallocScopeHopLimit, mallocScopeSSM, mallocScopeStatus, mallocScopeStorage, mallocAllocRangeLastAddress, mallocAllocRangeLifetime, mallocAllocRangeNumAllocatedAddrs, mallocAllocRangeNumOfferedAddrs, mallocAllocRangeNumWaitingAddrs, mallocAllocRangeNumTryingAddrs, mallocAllocRangeMaxLeaseAddrs, mallocAllocRangeMaxLeaseTime, mallocAllocRangeSource, mallocAllocRangeStatus, mallocAllocRangeStorage, mallocScopeDivisible, mallocScopeSource, mallocScopeNameScopeName, mallocScopeNameDefault, mallocScopeNameStatus, mallocScopeNameStorage, mallocRequestClientAddressType, mallocRequestClientAddress]

class mallocClientGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 2, 2, 3])
	group = [mallocRequestServerAddressType, mallocRequestServerAddress]

class madcapServerGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 2, 2, 4])
	group = [madcapConfigClockSkewAllowance, madcapConfigExtraAllocationTime, madcapConfigOfferHold, madcapConfigResponseCacheInterval, madcapTotalErrors, madcapRequestsDenied, madcapInvalidRequests, madcapBadLeaseIds, madcapExcessiveClockSkews, madcapDiscovers, madcapInforms, madcapRequests, madcapRenews, madcapReleases]

class madcapClientGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 2, 2, 5])
	group = [mallocRequestLeaseIdentifier, madcapConfigNoResponseDelay]

class mallocClientScopeGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 2, 2, 6])
	group = [mallocScopeLastAddress, mallocScopeHopLimit, mallocScopeStatus, mallocScopeStorage, mallocScopeSource, mallocScopeServerAddressType, mallocScopeServerAddress, mallocScopeSSM, mallocScopeNameScopeName, mallocScopeNameDefault, mallocScopeNameStatus, mallocScopeNameStorage]

class mallocPrefixCoordinatorGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 101, 2, 2, 7])
	group = [mallocAllocRangeLastAddress, mallocAllocRangeLifetime, mallocAllocRangeStatus, mallocAllocRangeStorage, mallocAllocRangeSource, mallocAllocRangeTotalAllocatedAddrs, mallocAllocRangeTotalRequestedAddrs, mallocAllocRangeAdvertisable, mallocScopeLastAddress, mallocScopeDivisible, mallocScopeSource]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
