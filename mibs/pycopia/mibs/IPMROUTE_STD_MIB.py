# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from IF_MIB import InterfaceIndexOrZero, InterfaceIndex
from SNMP_FRAMEWORK_MIB import SnmpAdminString
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, mib_2, Integer32, Counter32, Counter64, Gauge32, IpAddress, TimeTicks
from IANA_RTPROTO_MIB import IANAipRouteProtocol, IANAipMRouteProtocol
from SNMPv2_TC import RowStatus, TEXTUAL_CONVENTION, TruthValue

class IPMROUTE_STD_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/IPMROUTE-STD-MIB'
	conformance = 5
	name = 'IPMROUTE-STD-MIB'
	language = 2
	description = 'The MIB module for management of IP Multicast routing, but\nindependent of the specific multicast routing protocol in\nuse.'

# nodes
class ipMRouteStdMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83])
	name = 'ipMRouteStdMIB'

class ipMRouteMIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1])
	name = 'ipMRouteMIBObjects'

class ipMRoute(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1])
	name = 'ipMRoute'

class ipMRouteMIBConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 2])
	name = 'ipMRouteMIBConformance'

class ipMRouteMIBCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 2, 1])
	name = 'ipMRouteMIBCompliances'

class ipMRouteMIBGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 2, 2])
	name = 'ipMRouteMIBGroups'


# macros
# types 

class LanguageTag(pycopia.SMI.Basetypes.OctetString):
	status = 1
	ranges = Ranges(Range(1, 100))
	format = '100a'

# scalars 
class ipMRouteEnable(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class ipMRouteEntryCount(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


# columns
class ipMRouteGroup(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ipMRouteSource(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ipMRouteSourceMask(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ipMRouteUpstreamNeighbor(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ipMRouteInIfIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 2, 1, 5])
	syntaxobject = InterfaceIndexOrZero


class ipMRouteUpTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class ipMRouteExpiryTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 2, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class ipMRoutePkts(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 2, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ipMRouteDifferentInIfPackets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 2, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ipMRouteOctets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 2, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ipMRouteProtocol(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 2, 1, 11])
	syntaxobject = IANAipMRouteProtocol


class ipMRouteRtProto(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 2, 1, 12])
	syntaxobject = IANAipRouteProtocol


class ipMRouteRtAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 2, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ipMRouteRtMask(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 2, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ipMRouteRtType(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 2, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'unicast'), Enum(2, 'multicast')]


class ipMRouteHCOctets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 2, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class ipMRouteNextHopGroup(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 3, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ipMRouteNextHopSource(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 3, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ipMRouteNextHopSourceMask(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 3, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ipMRouteNextHopIfIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 3, 1, 4])
	syntaxobject = InterfaceIndex


class ipMRouteNextHopAddress(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 3, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ipMRouteNextHopState(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 3, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'pruned'), Enum(2, 'forwarding')]


class ipMRouteNextHopUpTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 3, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class ipMRouteNextHopExpiryTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 3, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class ipMRouteNextHopClosestMemberHops(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 3, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ipMRouteNextHopProtocol(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 3, 1, 10])
	syntaxobject = IANAipMRouteProtocol


class ipMRouteNextHopPkts(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 3, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ipMRouteInterfaceIfIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 4, 1, 1])
	syntaxobject = InterfaceIndex


class ipMRouteInterfaceTtl(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 4, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ipMRouteInterfaceProtocol(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 4, 1, 3])
	syntaxobject = IANAipMRouteProtocol


class ipMRouteInterfaceRateLimit(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 4, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ipMRouteInterfaceInMcastOctets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 4, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ipMRouteInterfaceOutMcastOctets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 4, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ipMRouteInterfaceHCInMcastOctets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 4, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class ipMRouteInterfaceHCOutMcastOctets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 4, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class ipMRouteBoundaryIfIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 5, 1, 1])
	syntaxobject = InterfaceIndex


class ipMRouteBoundaryAddress(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 5, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ipMRouteBoundaryAddressMask(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 5, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ipMRouteBoundaryStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 5, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class ipMRouteScopeNameAddress(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 6, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ipMRouteScopeNameAddressMask(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 6, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ipMRouteScopeNameLanguage(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 6, 1, 3])
	syntaxobject = LanguageTag


class ipMRouteScopeNameString(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 6, 1, 4])
	syntaxobject = SnmpAdminString


class ipMRouteScopeNameDefault(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 6, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class ipMRouteScopeNameStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 6, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


# rows 
class ipMRouteEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ipMRouteGroup, ipMRouteSource, ipMRouteSourceMask], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 2, 1])
	access = 2
	columns = {'ipMRouteGroup': ipMRouteGroup, 'ipMRouteSource': ipMRouteSource, 'ipMRouteSourceMask': ipMRouteSourceMask, 'ipMRouteUpstreamNeighbor': ipMRouteUpstreamNeighbor, 'ipMRouteInIfIndex': ipMRouteInIfIndex, 'ipMRouteUpTime': ipMRouteUpTime, 'ipMRouteExpiryTime': ipMRouteExpiryTime, 'ipMRoutePkts': ipMRoutePkts, 'ipMRouteDifferentInIfPackets': ipMRouteDifferentInIfPackets, 'ipMRouteOctets': ipMRouteOctets, 'ipMRouteProtocol': ipMRouteProtocol, 'ipMRouteRtProto': ipMRouteRtProto, 'ipMRouteRtAddress': ipMRouteRtAddress, 'ipMRouteRtMask': ipMRouteRtMask, 'ipMRouteRtType': ipMRouteRtType, 'ipMRouteHCOctets': ipMRouteHCOctets}


class ipMRouteNextHopEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ipMRouteNextHopGroup, ipMRouteNextHopSource, ipMRouteNextHopSourceMask, ipMRouteNextHopIfIndex, ipMRouteNextHopAddress], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 3, 1])
	access = 2
	columns = {'ipMRouteNextHopGroup': ipMRouteNextHopGroup, 'ipMRouteNextHopSource': ipMRouteNextHopSource, 'ipMRouteNextHopSourceMask': ipMRouteNextHopSourceMask, 'ipMRouteNextHopIfIndex': ipMRouteNextHopIfIndex, 'ipMRouteNextHopAddress': ipMRouteNextHopAddress, 'ipMRouteNextHopState': ipMRouteNextHopState, 'ipMRouteNextHopUpTime': ipMRouteNextHopUpTime, 'ipMRouteNextHopExpiryTime': ipMRouteNextHopExpiryTime, 'ipMRouteNextHopClosestMemberHops': ipMRouteNextHopClosestMemberHops, 'ipMRouteNextHopProtocol': ipMRouteNextHopProtocol, 'ipMRouteNextHopPkts': ipMRouteNextHopPkts}


class ipMRouteInterfaceEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ipMRouteInterfaceIfIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 4, 1])
	access = 2
	columns = {'ipMRouteInterfaceIfIndex': ipMRouteInterfaceIfIndex, 'ipMRouteInterfaceTtl': ipMRouteInterfaceTtl, 'ipMRouteInterfaceProtocol': ipMRouteInterfaceProtocol, 'ipMRouteInterfaceRateLimit': ipMRouteInterfaceRateLimit, 'ipMRouteInterfaceInMcastOctets': ipMRouteInterfaceInMcastOctets, 'ipMRouteInterfaceOutMcastOctets': ipMRouteInterfaceOutMcastOctets, 'ipMRouteInterfaceHCInMcastOctets': ipMRouteInterfaceHCInMcastOctets, 'ipMRouteInterfaceHCOutMcastOctets': ipMRouteInterfaceHCOutMcastOctets}


class ipMRouteBoundaryEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ipMRouteBoundaryIfIndex, ipMRouteBoundaryAddress, ipMRouteBoundaryAddressMask], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 5, 1])
	access = 2
	rowstatus = ipMRouteBoundaryStatus
	columns = {'ipMRouteBoundaryIfIndex': ipMRouteBoundaryIfIndex, 'ipMRouteBoundaryAddress': ipMRouteBoundaryAddress, 'ipMRouteBoundaryAddressMask': ipMRouteBoundaryAddressMask, 'ipMRouteBoundaryStatus': ipMRouteBoundaryStatus}


class ipMRouteScopeNameEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ipMRouteScopeNameAddress, ipMRouteScopeNameAddressMask, ipMRouteScopeNameLanguage], True)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 1, 1, 6, 1])
	access = 2
	rowstatus = ipMRouteScopeNameStatus
	columns = {'ipMRouteScopeNameAddress': ipMRouteScopeNameAddress, 'ipMRouteScopeNameAddressMask': ipMRouteScopeNameAddressMask, 'ipMRouteScopeNameLanguage': ipMRouteScopeNameLanguage, 'ipMRouteScopeNameString': ipMRouteScopeNameString, 'ipMRouteScopeNameDefault': ipMRouteScopeNameDefault, 'ipMRouteScopeNameStatus': ipMRouteScopeNameStatus}


# notifications (traps) 
# groups 
class ipMRouteMIBBasicGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 2, 2, 1])
	group = [ipMRouteEnable, ipMRouteEntryCount, ipMRouteUpstreamNeighbor, ipMRouteInIfIndex, ipMRouteUpTime, ipMRouteExpiryTime, ipMRouteNextHopState, ipMRouteNextHopUpTime, ipMRouteNextHopExpiryTime, ipMRouteNextHopProtocol, ipMRouteNextHopPkts, ipMRouteInterfaceTtl, ipMRouteInterfaceProtocol, ipMRouteInterfaceRateLimit, ipMRouteInterfaceInMcastOctets, ipMRouteInterfaceOutMcastOctets, ipMRouteProtocol]

class ipMRouteMIBHopCountGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 2, 2, 2])
	group = [ipMRouteNextHopClosestMemberHops]

class ipMRouteMIBBoundaryGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 2, 2, 3])
	group = [ipMRouteBoundaryStatus, ipMRouteScopeNameString, ipMRouteScopeNameDefault, ipMRouteScopeNameStatus]

class ipMRouteMIBPktsOutGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 2, 2, 4])
	group = [ipMRouteNextHopPkts]

class ipMRouteMIBHCInterfaceGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 2, 2, 5])
	group = [ipMRouteInterfaceHCInMcastOctets, ipMRouteInterfaceHCOutMcastOctets, ipMRouteHCOctets]

class ipMRouteMIBRouteGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 2, 2, 6])
	group = [ipMRouteRtProto, ipMRouteRtAddress, ipMRouteRtMask, ipMRouteRtType]

class ipMRouteMIBPktsGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 83, 2, 2, 7])
	group = [ipMRoutePkts, ipMRouteDifferentInIfPackets, ipMRouteOctets]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
