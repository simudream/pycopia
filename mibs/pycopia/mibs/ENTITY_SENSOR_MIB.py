# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, Integer32, Unsigned32, mib_2
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from SNMPv2_TC import TEXTUAL_CONVENTION, TimeStamp
from ENTITY_MIB import entPhysicalIndex, entityPhysicalGroup
from SNMP_FRAMEWORK_MIB import SnmpAdminString

class ENTITY_SENSOR_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/ENTITY-SENSOR-MIB'
	conformance = 5
	name = 'ENTITY-SENSOR-MIB'
	language = 2
	description = 'This module defines Entity MIB extensions for physical\nsensors.\n\nCopyright (C) The Internet Society (2002). This version\nof this MIB module is part of RFC 3433; see the RFC\nitself for full legal notices.'

# nodes
class entitySensorMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 99])
	name = 'entitySensorMIB'

class entitySensorObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 99, 1])
	name = 'entitySensorObjects'

class entitySensorConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 99, 3])
	name = 'entitySensorConformance'

class entitySensorCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 99, 3, 1])
	name = 'entitySensorCompliances'

class entitySensorGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 99, 3, 2])
	name = 'entitySensorGroups'


# macros
# types 

class EntitySensorDataType(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'other'), Enum(2, 'unknown'), Enum(3, 'voltsAC'), Enum(4, 'voltsDC'), Enum(5, 'amperes'), Enum(6, 'watts'), Enum(7, 'hertz'), Enum(8, 'celsius'), Enum(9, 'percentRH'), Enum(10, 'rpm'), Enum(11, 'cmm'), Enum(12, 'truthvalue')]


class EntitySensorDataScale(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'yocto'), Enum(2, 'zepto'), Enum(3, 'atto'), Enum(4, 'femto'), Enum(5, 'pico'), Enum(6, 'nano'), Enum(7, 'micro'), Enum(8, 'milli'), Enum(9, 'units'), Enum(10, 'kilo'), Enum(11, 'mega'), Enum(12, 'giga'), Enum(13, 'tera'), Enum(14, 'exa'), Enum(15, 'peta'), Enum(16, 'zetta'), Enum(17, 'yotta')]


class EntitySensorPrecision(pycopia.SMI.Basetypes.Integer32):
	status = 1
	ranges = Ranges(Range(-8, 9))


class EntitySensorValue(pycopia.SMI.Basetypes.Integer32):
	status = 1
	ranges = Ranges(Range(-1000000000, 1000000000))


class EntitySensorStatus(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'ok'), Enum(2, 'unavailable'), Enum(3, 'nonoperational')]

# scalars 
# columns
class entPhySensorType(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 99, 1, 1, 1, 1])
	syntaxobject = EntitySensorDataType


class entPhySensorScale(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 99, 1, 1, 1, 2])
	syntaxobject = EntitySensorDataScale


class entPhySensorPrecision(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 99, 1, 1, 1, 3])
	syntaxobject = EntitySensorPrecision


class entPhySensorValue(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 99, 1, 1, 1, 4])
	syntaxobject = EntitySensorValue


class entPhySensorOperStatus(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 99, 1, 1, 1, 5])
	syntaxobject = EntitySensorStatus


class entPhySensorUnitsDisplay(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 99, 1, 1, 1, 6])
	syntaxobject = SnmpAdminString


class entPhySensorValueTimeStamp(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 99, 1, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class entPhySensorValueUpdateRate(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 99, 1, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32
	access = 4
	units = 'milliseconds'


# rows 
class entPhySensorEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([entPhysicalIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 99, 1, 1, 1])
	access = 2
	columns = {'entPhySensorType': entPhySensorType, 'entPhySensorScale': entPhySensorScale, 'entPhySensorPrecision': entPhySensorPrecision, 'entPhySensorValue': entPhySensorValue, 'entPhySensorOperStatus': entPhySensorOperStatus, 'entPhySensorUnitsDisplay': entPhySensorUnitsDisplay, 'entPhySensorValueTimeStamp': entPhySensorValueTimeStamp, 'entPhySensorValueUpdateRate': entPhySensorValueUpdateRate}


# notifications (traps) 
# groups 
class entitySensorValueGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 99, 3, 2, 1])
	group = [entPhySensorType, entPhySensorScale, entPhySensorPrecision, entPhySensorValue, entPhySensorOperStatus, entPhySensorUnitsDisplay, entPhySensorValueTimeStamp, entPhySensorValueUpdateRate]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
