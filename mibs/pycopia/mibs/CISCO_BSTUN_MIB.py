# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, NOTIFICATION_TYPE, Counter32, Integer32, IpAddress
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from CISCO_SMI import ciscoMgmt
from SNMPv2_TC import TruthValue
from IF_MIB import ifIndex, InterfaceIndex

class CISCO_BSTUN_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/site/CISCO-BSTUN-MIB'
	conformance = 4
	name = 'CISCO-BSTUN-MIB'
	language = 2
	description = "The MIB module for Block Serial Tunneling.\n\nOverview of BSTUN MIB\n\nMIB description\n\nThe BSTUN MIB provides the configuration and operational information \non Cisco's blocked serial tunnelling implementation.  The following \nentities are managed:\n 1) Global BSTUN information\n 2) BSTUN groups\n 3) BSTUN ports\n 4) BSTUN routes\n\nThe following example configuration shows how the BSTUN MIB returns\nBSTUN information, from either CISCO A or CISCO B.\n\n HOST == BSC  == Cisco A == IP Network == Cisco B == BSC   == BSC\n         line                                        line     device\n\n1) The BSTUN global entry identifies the IP address by which the\n   router is known to other BSTUN peers, a configurable SAP value\n   on which to listen to LLC2 peers, and keepalive values to maintain\n   a session between TCP/IP peers.\n2) The BSTUN group table identifies the BSTUN group number and protocol\n   type that Cisco A and Cisco B use to route BSC traffic over the \n   IP network.  The table contains an entry for each BSTUN group\n   defined on the router. (The group number must be the same in Cisco A \n   and Cisco B, for traffic to flow from one router to the other.)\n3) The BSTUN port table identifies the serial interface to the BSC \n   line for which the router is doing serial tunnelling.  The MIB also\n   identifies the BSTUN group this interface is defined for, and\n   identifies the default routing for unrecognized BSC addresses.\n   There is a port entry for each BSTUN-enabled interface on the router.\n4) The BSTUN route table has an entry for each address defined for\n   routing within the BSTUN group, and an entry for the default routing\n   if the 'bstun route all' command is configured.  The route entry\n   includes identification of the BSTUN peer, priority, state, and \n   packet and byte counters.\n         \n         "

# nodes
class ciscoBstunMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35])
	name = 'ciscoBstunMIB'

class bstunObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 1])
	name = 'bstunObjects'

class bstunGlobal(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 1])
	name = 'bstunGlobal'

class bstunGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 2])
	name = 'bstunGroups'

class bstunPorts(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 3])
	name = 'bstunPorts'

class bstunRoutes(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 4])
	name = 'bstunRoutes'

class bstunNotificationPrefix(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 2])
	name = 'bstunNotificationPrefix'

class bstunNotifications(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 2, 0])
	name = 'bstunNotifications'

class bstunMibConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 3])
	name = 'bstunMibConformance'

class bstunMibCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 3, 1])
	name = 'bstunMibCompliances'

class bstunMibGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 3, 2])
	name = 'bstunMibGroups'


# macros
# types 
# scalars 
class bstunIPAddr(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class bstunLisnSap(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class bstunPeerKeepaliveInterval(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = 'deciseconds'


class bstunPeerKeepaliveLimit(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


# columns
class bstunGroupIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 2, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class bstunProtocolType(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 2, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'bsc'), Enum(2, 'adtVariPoll'), Enum(3, 'adtPollSelect'), Enum(4, 'adplex'), Enum(5, 'diebold'), Enum(6, 'asyncGeneric'), Enum(7, 'mdi')]


class bstunLocalAck(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 2, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class bstunGroupUnroutableTransmit(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 2, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class bstunGroupUnroutableReceive(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 2, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class bstunPortGroupNumber(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 3, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class bstunPortDefaultPeerType(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 3, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'none'), Enum(2, 'ip'), Enum(3, 'serial'), Enum(4, 'serialDirect'), Enum(5, 'serialFrameRelay'), Enum(6, 'serialLLC2')]


class bstunPortDefaultPeerIP(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 3, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class bstunPortDefaultPeerSerial(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 3, 1, 1, 4])
	syntaxobject = InterfaceIndex


class bstunRouteGroupIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 4, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class bstunRouteStationAddress(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 4, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class bstunRouteType(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 4, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'none'), Enum(2, 'ip'), Enum(3, 'serial'), Enum(4, 'serialDirect'), Enum(5, 'serialFrameRelay'), Enum(6, 'serialLLC2')]


class bstunRouteIP(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 4, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class bstunRouteSerial(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 4, 1, 1, 5])
	syntaxobject = InterfaceIndex


class bstunRoutePriority(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 4, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'low'), Enum(2, 'normal'), Enum(3, 'medium'), Enum(4, 'high')]


class bstunRoutePeerState(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 4, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'dead'), Enum(2, 'closed'), Enum(3, 'opening'), Enum(4, 'openWait'), Enum(5, 'connected'), Enum(6, 'direct')]


class bstunRouteRxPackets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 4, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class bstunRouteTxPackets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 4, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class bstunRouteRxBytes(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 4, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class bstunRouteTxBytes(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 4, 1, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class bstunRouteDLCI(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 4, 1, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class bstunRouteRSAP(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 4, 1, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class bstunLLC2Priority(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 4, 1, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


# rows 
class bstunGroupEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([bstunGroupIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 2, 1, 1])
	access = 2
	columns = {'bstunGroupIndex': bstunGroupIndex, 'bstunProtocolType': bstunProtocolType, 'bstunLocalAck': bstunLocalAck, 'bstunGroupUnroutableTransmit': bstunGroupUnroutableTransmit, 'bstunGroupUnroutableReceive': bstunGroupUnroutableReceive}


class bstunPortEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 3, 1, 1])
	access = 2
	columns = {'bstunPortGroupNumber': bstunPortGroupNumber, 'bstunPortDefaultPeerType': bstunPortDefaultPeerType, 'bstunPortDefaultPeerIP': bstunPortDefaultPeerIP, 'bstunPortDefaultPeerSerial': bstunPortDefaultPeerSerial}


class bstunRouteEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([bstunRouteGroupIndex, bstunRouteStationAddress], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 4, 1, 1])
	access = 2
	columns = {'bstunRouteGroupIndex': bstunRouteGroupIndex, 'bstunRouteStationAddress': bstunRouteStationAddress, 'bstunRouteType': bstunRouteType, 'bstunRouteIP': bstunRouteIP, 'bstunRouteSerial': bstunRouteSerial, 'bstunRoutePriority': bstunRoutePriority, 'bstunRoutePeerState': bstunRoutePeerState, 'bstunRouteRxPackets': bstunRouteRxPackets, 'bstunRouteTxPackets': bstunRouteTxPackets, 'bstunRouteRxBytes': bstunRouteRxBytes, 'bstunRouteTxBytes': bstunRouteTxBytes, 'bstunRouteDLCI': bstunRouteDLCI, 'bstunRouteRSAP': bstunRouteRSAP, 'bstunLLC2Priority': bstunLLC2Priority}


# notifications (traps) 
class bstunPeerStateChangeNotification(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 2, 0, 1])

# groups 
class bstunGroupGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 3, 2, 2])
	group = [bstunProtocolType, bstunLocalAck, bstunGroupUnroutableTransmit, bstunGroupUnroutableReceive]

class bstunPortGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 3, 2, 3])
	group = [bstunPortGroupNumber, bstunPortDefaultPeerType, bstunPortDefaultPeerIP, bstunPortDefaultPeerSerial]

class bstunGlobalGroupRev1(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 3, 2, 5])
	group = [bstunIPAddr, bstunLisnSap, bstunPeerKeepaliveInterval, bstunPeerKeepaliveLimit]

class bstunRouteGroupRev1(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 35, 3, 2, 6])
	group = [bstunRouteType, bstunRouteIP, bstunRouteSerial, bstunRoutePriority, bstunRoutePeerState, bstunRouteRxPackets, bstunRouteTxPackets, bstunRouteRxBytes, bstunRouteTxBytes, bstunRouteDLCI, bstunRouteRSAP, bstunLLC2Priority]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
