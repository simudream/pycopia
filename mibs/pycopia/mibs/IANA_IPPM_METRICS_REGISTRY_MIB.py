# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import OBJECT_IDENTITY, MODULE_IDENTITY, mib_2

class IANA_IPPM_METRICS_REGISTRY_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/iana/IANA-IPPM-METRICS-REGISTRY-MIB'
	name = 'IANA-IPPM-METRICS-REGISTRY-MIB'
	language = 2
	description = "This module defines a registry for IP Performance Metrics.\n\nRegistrations are done sequentially by IANA in the ianaIppmMetrics\nsubtree on the bases of 'Specification Required' as defined in\n[RFC2434].\n\nThe reference of the specification must point to a stable document\nincluding a title, a revision and a date.\n\nThe name always starts with the name of the organization and must\nrespect the SMIv2 rules for descriptors defined in the section 3.1\nof [RFC2578];\n\nA document that creates new metrics would have an IANA\nconsiderations section in which it would describe new metrics to\nregister.\n\nAn OBJECT IDENTITY assigned to a metric is definitive and cannot\nbe reused.  If a new version of a metric is produced then it is\nassigned with a new name and a new identifier.\n\nCopyright (C) The Internet Society (2005).  The initial version of\nthis MIB module was published in RFC 4148; for full legal notices\nsee the RFC itself or see:\nhttp://www.ietf.org/copyrights/ianamib.html.  "

# nodes
class ianaIppmMetricsRegistry(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128])
	name = 'ianaIppmMetricsRegistry'

class ianaIppmMetrics(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1])
	name = 'ianaIppmMetrics'

class ietfInstantUnidirConnectivity(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 1])
	name = 'ietfInstantUnidirConnectivity'

class ietfInstantBidirConnectivity(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 2])
	name = 'ietfInstantBidirConnectivity'

class ietfIntervalUnidirConnectivity(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 3])
	name = 'ietfIntervalUnidirConnectivity'

class ietfIntervalBidirConnectivity(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 4])
	name = 'ietfIntervalBidirConnectivity'

class ietfIntervalTemporalConnectivity(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 5])
	name = 'ietfIntervalTemporalConnectivity'

class ietfOneWayDelay(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 6])
	name = 'ietfOneWayDelay'

class ietfOneWayDelayPoissonStream(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 7])
	name = 'ietfOneWayDelayPoissonStream'

class ietfOneWayDelayPercentile(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 8])
	name = 'ietfOneWayDelayPercentile'

class ietfOneWayDelayMedian(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 9])
	name = 'ietfOneWayDelayMedian'

class ietfOneWayDelayMinimum(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 10])
	name = 'ietfOneWayDelayMinimum'

class ietfOneWayDelayInversePercentile(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 11])
	name = 'ietfOneWayDelayInversePercentile'

class ietfOneWayPktLoss(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 12])
	name = 'ietfOneWayPktLoss'

class ietfOneWayPktLossPoissonStream(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 13])
	name = 'ietfOneWayPktLossPoissonStream'

class ietfOneWayPktLossAverage(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 14])
	name = 'ietfOneWayPktLossAverage'

class ietfRoundTripDelay(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 15])
	name = 'ietfRoundTripDelay'

class ietfRoundTripDelayPoissonStream(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 16])
	name = 'ietfRoundTripDelayPoissonStream'

class ietfRoundTripDelayPercentile(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 17])
	name = 'ietfRoundTripDelayPercentile'

class ietfRoundTripDelayMedian(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 18])
	name = 'ietfRoundTripDelayMedian'

class ietfRoundTripDelayMinimum(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 19])
	name = 'ietfRoundTripDelayMinimum'

class ietfRoundTripDelayInvPercentile(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 20])
	name = 'ietfRoundTripDelayInvPercentile'

class ietfOneWayLossDistanceStream(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 21])
	name = 'ietfOneWayLossDistanceStream'

class ietfOneWayLossPeriodStream(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 22])
	name = 'ietfOneWayLossPeriodStream'

class ietfOneWayLossNoticeableRate(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 23])
	name = 'ietfOneWayLossNoticeableRate'

class ietfOneWayLossPeriodTotal(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 24])
	name = 'ietfOneWayLossPeriodTotal'

class ietfOneWayLossPeriodLengths(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 25])
	name = 'ietfOneWayLossPeriodLengths'

class ietfOneWayInterLossPeriodLengths(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 26])
	name = 'ietfOneWayInterLossPeriodLengths'

class ietfOneWayIpdv(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 27])
	name = 'ietfOneWayIpdv'

class ietfOneWayIpdvPoissonStream(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 28])
	name = 'ietfOneWayIpdvPoissonStream'

class ietfOneWayIpdvPercentile(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 29])
	name = 'ietfOneWayIpdvPercentile'

class ietfOneWayIpdvInversePercentile(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 30])
	name = 'ietfOneWayIpdvInversePercentile'

class ietfOneWayIpdvJitter(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 31])
	name = 'ietfOneWayIpdvJitter'

class ietfOneWayPeakToPeakIpdv(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 32])
	name = 'ietfOneWayPeakToPeakIpdv'

class ietfOneWayDelayPeriodicStream(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 33])
	name = 'ietfOneWayDelayPeriodicStream'

class ietfReorderedSingleton(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 34])
	name = 'ietfReorderedSingleton'

class ietfReorderedPacketRatio(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 35])
	name = 'ietfReorderedPacketRatio'

class ietfReorderingExtent(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 36])
	name = 'ietfReorderingExtent'

class ietfReorderingLateTimeOffset(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 37])
	name = 'ietfReorderingLateTimeOffset'

class ietfReorderingByteOffset(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 38])
	name = 'ietfReorderingByteOffset'

class ietfReorderingGap(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 39])
	name = 'ietfReorderingGap'

class ietfReorderingGapTime(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 40])
	name = 'ietfReorderingGapTime'

class ietfReorderingFreeRunx(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 41])
	name = 'ietfReorderingFreeRunx'

class ietfReorderingFreeRunq(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 42])
	name = 'ietfReorderingFreeRunq'

class ietfReorderingFreeRunp(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 43])
	name = 'ietfReorderingFreeRunp'

class ietfReorderingFreeRuna(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 44])
	name = 'ietfReorderingFreeRuna'

class ietfnReordering(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 128, 1, 45])
	name = 'ietfnReordering'


# macros
# types 
# scalars 
# columns
# rows 
# notifications (traps) 
# groups 
# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
