# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, Integer32, Counter32, Counter64, Unsigned32, IpAddress, mib_2
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from INET_ADDRESS_MIB import InetAddress, InetAddressType, InetPortNumber

class UDP_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/UDP-MIB'
	conformance = 5
	name = 'UDP-MIB'
	language = 2
	description = 'The MIB module for managing UDP implementations.\nCopyright (C) The Internet Society (2005).  This\nversion of this MIB module is part of RFC 4113;\nsee the RFC itself for full legal notices.'

# nodes
class udp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 7])
	name = 'udp'

class udpMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 50])
	name = 'udpMIB'

class udpMIBConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 50, 2])
	name = 'udpMIBConformance'

class udpMIBCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 50, 2, 1])
	name = 'udpMIBCompliances'

class udpMIBGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 50, 2, 2])
	name = 'udpMIBGroups'


# macros
# types 
# scalars 
class udpInDatagrams(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 7, 1])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class udpNoPorts(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 7, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class udpInErrors(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 7, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class udpOutDatagrams(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 7, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class udpHCInDatagrams(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 7, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class udpHCOutDatagrams(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 7, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


# columns
class udpLocalAddress(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 7, 5, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class udpLocalPort(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 7, 5, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class udpEndpointLocalAddressType(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 7, 7, 1, 1])
	syntaxobject = InetAddressType


class udpEndpointLocalAddress(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 7, 7, 1, 2])
	syntaxobject = InetAddress


class udpEndpointLocalPort(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 7, 7, 1, 3])
	syntaxobject = InetPortNumber


class udpEndpointRemoteAddressType(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 7, 7, 1, 4])
	syntaxobject = InetAddressType


class udpEndpointRemoteAddress(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 7, 7, 1, 5])
	syntaxobject = InetAddress


class udpEndpointRemotePort(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 7, 7, 1, 6])
	syntaxobject = InetPortNumber


class udpEndpointInstance(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 7, 7, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class udpEndpointProcess(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 7, 7, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


# rows 
class udpEntry(RowObject):
	status = 2
	index = pycopia.SMI.Objects.IndexObjects([udpLocalAddress, udpLocalPort], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 7, 5, 1])
	access = 2
	columns = {'udpLocalAddress': udpLocalAddress, 'udpLocalPort': udpLocalPort}


class udpEndpointEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([udpEndpointLocalAddressType, udpEndpointLocalAddress, udpEndpointLocalPort, udpEndpointRemoteAddressType, udpEndpointRemoteAddress, udpEndpointRemotePort, udpEndpointInstance], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 7, 7, 1])
	access = 2
	columns = {'udpEndpointLocalAddressType': udpEndpointLocalAddressType, 'udpEndpointLocalAddress': udpEndpointLocalAddress, 'udpEndpointLocalPort': udpEndpointLocalPort, 'udpEndpointRemoteAddressType': udpEndpointRemoteAddressType, 'udpEndpointRemoteAddress': udpEndpointRemoteAddress, 'udpEndpointRemotePort': udpEndpointRemotePort, 'udpEndpointInstance': udpEndpointInstance, 'udpEndpointProcess': udpEndpointProcess}


# notifications (traps) 
# groups 
class udpGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 50, 2, 2, 1])
	group = [udpInDatagrams, udpNoPorts, udpInErrors, udpOutDatagrams, udpLocalAddress, udpLocalPort]

class udpBaseGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 50, 2, 2, 2])
	group = [udpInDatagrams, udpNoPorts, udpInErrors, udpOutDatagrams]

class udpHCGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 50, 2, 2, 3])
	group = [udpHCInDatagrams, udpHCOutDatagrams]

class udpEndpointGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 50, 2, 2, 4])
	group = [udpEndpointProcess]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
