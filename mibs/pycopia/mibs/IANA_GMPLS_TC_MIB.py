# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, mib_2
from SNMPv2_TC import TEXTUAL_CONVENTION

class IANA_GMPLS_TC_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/iana/IANA-GMPLS-TC-MIB'
	conformance = 5
	name = 'IANA-GMPLS-TC-MIB'
	language = 2
	description = 'Copyright (C) The IETF Trust (2007).  The initial version\nof this MIB module was published in RFC 4802.  For full legal\nnotices see the RFC itself.  Supplementary information\nmay be available on:\nhttp://www.ietf.org/copyrights/ianamib.html'

# nodes
class ianaGmpls(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 152])
	name = 'ianaGmpls'


# macros
# types 

class IANAGmplsLSPEncodingTypeTC(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(0, 'tunnelLspNotGmpls'), Enum(1, 'tunnelLspPacket'), Enum(2, 'tunnelLspEthernet'), Enum(3, 'tunnelLspAnsiEtsiPdh'), Enum(5, 'tunnelLspSdhSonet'), Enum(7, 'tunnelLspDigitalWrapper'), Enum(8, 'tunnelLspLambda'), Enum(9, 'tunnelLspFiber'), Enum(11, 'tunnelLspFiberChannel'), Enum(12, 'tunnelDigitalPath'), Enum(13, 'tunnelOpticalChannel')]


class IANAGmplsSwitchingTypeTC(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(0, 'unknown'), Enum(1, 'psc1'), Enum(2, 'psc2'), Enum(3, 'psc3'), Enum(4, 'psc4'), Enum(51, 'l2sc'), Enum(100, 'tdm'), Enum(150, 'lsc'), Enum(200, 'fsc')]


class IANAGmplsGeneralizedPidTC(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(0, 'unknown'), Enum(5, 'asynchE4'), Enum(6, 'asynchDS3T3'), Enum(7, 'asynchE3'), Enum(8, 'bitsynchE3'), Enum(9, 'bytesynchE3'), Enum(10, 'asynchDS2T2'), Enum(11, 'bitsynchDS2T2'), Enum(12, 'reservedByRFC3471first'), Enum(13, 'asynchE1'), Enum(14, 'bytesynchE1'), Enum(15, 'bytesynch31ByDS0'), Enum(16, 'asynchDS1T1'), Enum(17, 'bitsynchDS1T1'), Enum(18, 'bytesynchDS1T1'), Enum(19, 'vc1vc12'), Enum(20, 'reservedByRFC3471second'), Enum(21, 'reservedByRFC3471third'), Enum(22, 'ds1SFAsynch'), Enum(23, 'ds1ESFAsynch'), Enum(24, 'ds3M23Asynch'), Enum(25, 'ds3CBitParityAsynch'), Enum(26, 'vtLovc'), Enum(27, 'stsSpeHovc'), Enum(28, 'posNoScramble16BitCrc'), Enum(29, 'posNoScramble32BitCrc'), Enum(30, 'posScramble16BitCrc'), Enum(31, 'posScramble32BitCrc'), Enum(32, 'atm'), Enum(33, 'ethernet'), Enum(34, 'sdhSonet'), Enum(36, 'digitalwrapper'), Enum(37, 'lambda'), Enum(38, 'ansiEtsiPdh'), Enum(40, 'lapsSdh'), Enum(41, 'fddi'), Enum(42, 'dqdb'), Enum(43, 'fiberChannel3'), Enum(44, 'hdlc'), Enum(45, 'ethernetV2DixOnly'), Enum(46, 'ethernet802dot3Only'), Enum(47, 'g709ODUj'), Enum(48, 'g709OTUk'), Enum(49, 'g709CBRorCBRa'), Enum(50, 'g709CBRb'), Enum(51, 'g709BSOT'), Enum(52, 'g709BSNT'), Enum(53, 'gfpIPorPPP'), Enum(54, 'gfpEthernetMAC'), Enum(55, 'gfpEthernetPHY'), Enum(56, 'g709ESCON'), Enum(57, 'g709FICON'), Enum(58, 'g709FiberChannel')]


class IANAGmplsAdminStatusInformationTC(pycopia.SMI.Basetypes.BITS):
	status = 1
	enumerations = [Enum(0, 'reflect'), Enum(1, 'reserved1'), Enum(2, 'reserved2'), Enum(3, 'reserved3'), Enum(4, 'reserved4'), Enum(5, 'reserved5'), Enum(6, 'reserved6'), Enum(7, 'reserved7'), Enum(8, 'reserved8'), Enum(9, 'reserved9'), Enum(10, 'reserved10'), Enum(11, 'reserved11'), Enum(12, 'reserved12'), Enum(13, 'reserved13'), Enum(14, 'reserved14'), Enum(15, 'reserved15'), Enum(16, 'reserved16'), Enum(17, 'reserved17'), Enum(18, 'reserved18'), Enum(19, 'reserved19'), Enum(20, 'reserved20'), Enum(21, 'reserved21'), Enum(22, 'reserved22'), Enum(23, 'reserved23'), Enum(24, 'reserved24'), Enum(25, 'reserved25'), Enum(26, 'reserved26'), Enum(27, 'reserved27'), Enum(28, 'reserved28'), Enum(29, 'testing'), Enum(30, 'administrativelyDown'), Enum(31, 'deleteInProgress')]

# scalars 
# columns
# rows 
# notifications (traps) 
# groups 
# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
