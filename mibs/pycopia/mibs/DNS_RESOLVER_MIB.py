# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, IpAddress, Counter32, Integer32
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from DNS_SERVER_MIB import dns, DnsName, DnsNameAsIndex, DnsClass, DnsType, DnsQClass, DnsQType, DnsTime, DnsOpCode, DnsRespCode
from SNMPv2_TC import TEXTUAL_CONVENTION, RowStatus, DisplayString

class DNS_RESOLVER_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/DNS-RESOLVER-MIB'
	conformance = 2
	name = 'DNS-RESOLVER-MIB'
	language = 2
	description = 'The MIB module for entities implementing the client\n(resolver) side of the Domain Name System (DNS)\nprotocol.'

# nodes
class dnsResMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2])
	name = 'dnsResMIB'

class dnsResMIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1])
	name = 'dnsResMIBObjects'

class dnsResConfig(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 1])
	name = 'dnsResConfig'

class dnsResCounter(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 2])
	name = 'dnsResCounter'

class dnsResLameDelegation(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 3])
	name = 'dnsResLameDelegation'

class dnsResCache(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 4])
	name = 'dnsResCache'

class dnsResNCache(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 5])
	name = 'dnsResNCache'

class dnsResOptCounter(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 6])
	name = 'dnsResOptCounter'

class dnsResMIBGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 2])
	name = 'dnsResMIBGroups'

class dnsResMIBCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 3])
	name = 'dnsResMIBCompliances'


# macros
# types 
# scalars 
class dnsResConfigImplementIdent(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class dnsResConfigService(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'recursiveOnly'), Enum(2, 'iterativeOnly'), Enum(3, 'recursiveAndIterative')]


class dnsResConfigMaxCnames(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dnsResConfigUpTime(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 1, 5])
	syntaxobject = DnsTime


class dnsResConfigResetTime(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 1, 6])
	syntaxobject = DnsTime


class dnsResConfigReset(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'reset'), Enum(3, 'initializing'), Enum(4, 'running')]


class dnsResCounterNonAuthDataResps(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 2, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dnsResCounterNonAuthNoDataResps(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 2, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dnsResCounterMartians(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 2, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dnsResCounterRecdResponses(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 2, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dnsResCounterUnparseResps(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 2, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dnsResCounterFallbacks(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 2, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dnsResLameDelegationOverflows(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 3, 1])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dnsResCacheStatus(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 4, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled'), Enum(3, 'clear')]


class dnsResCacheMaxTTL(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 4, 2])
	syntaxobject = DnsTime


class dnsResCacheGoodCaches(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 4, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dnsResCacheBadCaches(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 4, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dnsResNCacheStatus(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 5, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled'), Enum(3, 'clear')]


class dnsResNCacheMaxTTL(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 5, 2])
	syntaxobject = DnsTime


class dnsResNCacheGoodNCaches(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 5, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dnsResNCacheBadNCaches(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 5, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dnsResOptCounterReferals(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 6, 1])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dnsResOptCounterRetrans(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 6, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dnsResOptCounterNoResponses(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 6, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dnsResOptCounterRootRetrans(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 6, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dnsResOptCounterInternals(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 6, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dnsResOptCounterInternalTimeOuts(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 6, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


# columns
class dnsResConfigSbeltAddr(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 1, 4, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class dnsResConfigSbeltName(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 1, 4, 1, 2])
	syntaxobject = DnsName


class dnsResConfigSbeltRecursion(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 1, 4, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'iterative'), Enum(2, 'recursive'), Enum(3, 'recursiveAndIterative')]


class dnsResConfigSbeltPref(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 1, 4, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dnsResConfigSbeltSubTree(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 1, 4, 1, 5])
	syntaxobject = DnsNameAsIndex


class dnsResConfigSbeltClass(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 1, 4, 1, 6])
	syntaxobject = DnsClass


class dnsResConfigSbeltStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 1, 4, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class dnsResCounterByOpcodeCode(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 2, 3, 1, 1])
	syntaxobject = DnsOpCode


class dnsResCounterByOpcodeQueries(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 2, 3, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dnsResCounterByOpcodeResponses(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 2, 3, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dnsResCounterByRcodeCode(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 2, 4, 1, 1])
	syntaxobject = DnsRespCode


class dnsResCounterByRcodeResponses(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 2, 4, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dnsResLameDelegationSource(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 3, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class dnsResLameDelegationName(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 3, 2, 1, 2])
	syntaxobject = DnsNameAsIndex


class dnsResLameDelegationClass(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 3, 2, 1, 3])
	syntaxobject = DnsClass


class dnsResLameDelegationCounts(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 3, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dnsResLameDelegationStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 3, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class dnsResCacheRRName(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 4, 5, 1, 1])
	syntaxobject = DnsNameAsIndex


class dnsResCacheRRClass(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 4, 5, 1, 2])
	syntaxobject = DnsClass


class dnsResCacheRRType(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 4, 5, 1, 3])
	syntaxobject = DnsType


class dnsResCacheRRTTL(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 4, 5, 1, 4])
	syntaxobject = DnsTime


class dnsResCacheRRElapsedTTL(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 4, 5, 1, 5])
	syntaxobject = DnsTime


class dnsResCacheRRSource(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 4, 5, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class dnsResCacheRRData(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 4, 5, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class dnsResCacheRRStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 4, 5, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class dnsResCacheRRIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 4, 5, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dnsResCacheRRPrettyName(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 4, 5, 1, 10])
	syntaxobject = DnsName


class dnsResNCacheErrQName(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 5, 5, 1, 1])
	syntaxobject = DnsNameAsIndex


class dnsResNCacheErrQClass(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 5, 5, 1, 2])
	syntaxobject = DnsQClass


class dnsResNCacheErrQType(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 5, 5, 1, 3])
	syntaxobject = DnsQType


class dnsResNCacheErrTTL(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 5, 5, 1, 4])
	syntaxobject = DnsTime


class dnsResNCacheErrElapsedTTL(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 5, 5, 1, 5])
	syntaxobject = DnsTime


class dnsResNCacheErrSource(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 5, 5, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class dnsResNCacheErrCode(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 5, 5, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'nonexistantName'), Enum(2, 'noData'), Enum(3, 'other')]


class dnsResNCacheErrStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 5, 5, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class dnsResNCacheErrIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 5, 5, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dnsResNCacheErrPrettyName(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 5, 5, 1, 10])
	syntaxobject = DnsName


# rows 
class dnsResConfigSbeltEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([dnsResConfigSbeltAddr, dnsResConfigSbeltSubTree, dnsResConfigSbeltClass], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 1, 4, 1])
	access = 2
	rowstatus = dnsResConfigSbeltStatus
	columns = {'dnsResConfigSbeltAddr': dnsResConfigSbeltAddr, 'dnsResConfigSbeltName': dnsResConfigSbeltName, 'dnsResConfigSbeltRecursion': dnsResConfigSbeltRecursion, 'dnsResConfigSbeltPref': dnsResConfigSbeltPref, 'dnsResConfigSbeltSubTree': dnsResConfigSbeltSubTree, 'dnsResConfigSbeltClass': dnsResConfigSbeltClass, 'dnsResConfigSbeltStatus': dnsResConfigSbeltStatus}


class dnsResCounterByOpcodeEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([dnsResCounterByOpcodeCode], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 2, 3, 1])
	access = 2
	columns = {'dnsResCounterByOpcodeCode': dnsResCounterByOpcodeCode, 'dnsResCounterByOpcodeQueries': dnsResCounterByOpcodeQueries, 'dnsResCounterByOpcodeResponses': dnsResCounterByOpcodeResponses}


class dnsResCounterByRcodeEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([dnsResCounterByRcodeCode], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 2, 4, 1])
	access = 2
	columns = {'dnsResCounterByRcodeCode': dnsResCounterByRcodeCode, 'dnsResCounterByRcodeResponses': dnsResCounterByRcodeResponses}


class dnsResLameDelegationEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([dnsResLameDelegationSource, dnsResLameDelegationName, dnsResLameDelegationClass], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 3, 2, 1])
	access = 2
	rowstatus = dnsResLameDelegationStatus
	columns = {'dnsResLameDelegationSource': dnsResLameDelegationSource, 'dnsResLameDelegationName': dnsResLameDelegationName, 'dnsResLameDelegationClass': dnsResLameDelegationClass, 'dnsResLameDelegationCounts': dnsResLameDelegationCounts, 'dnsResLameDelegationStatus': dnsResLameDelegationStatus}


class dnsResCacheRREntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([dnsResCacheRRName, dnsResCacheRRClass, dnsResCacheRRType, dnsResCacheRRIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 4, 5, 1])
	access = 2
	rowstatus = dnsResCacheRRStatus
	columns = {'dnsResCacheRRName': dnsResCacheRRName, 'dnsResCacheRRClass': dnsResCacheRRClass, 'dnsResCacheRRType': dnsResCacheRRType, 'dnsResCacheRRTTL': dnsResCacheRRTTL, 'dnsResCacheRRElapsedTTL': dnsResCacheRRElapsedTTL, 'dnsResCacheRRSource': dnsResCacheRRSource, 'dnsResCacheRRData': dnsResCacheRRData, 'dnsResCacheRRStatus': dnsResCacheRRStatus, 'dnsResCacheRRIndex': dnsResCacheRRIndex, 'dnsResCacheRRPrettyName': dnsResCacheRRPrettyName}


class dnsResNCacheErrEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([dnsResNCacheErrQName, dnsResNCacheErrQClass, dnsResNCacheErrQType, dnsResNCacheErrIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 1, 5, 5, 1])
	access = 2
	rowstatus = dnsResNCacheErrStatus
	columns = {'dnsResNCacheErrQName': dnsResNCacheErrQName, 'dnsResNCacheErrQClass': dnsResNCacheErrQClass, 'dnsResNCacheErrQType': dnsResNCacheErrQType, 'dnsResNCacheErrTTL': dnsResNCacheErrTTL, 'dnsResNCacheErrElapsedTTL': dnsResNCacheErrElapsedTTL, 'dnsResNCacheErrSource': dnsResNCacheErrSource, 'dnsResNCacheErrCode': dnsResNCacheErrCode, 'dnsResNCacheErrStatus': dnsResNCacheErrStatus, 'dnsResNCacheErrIndex': dnsResNCacheErrIndex, 'dnsResNCacheErrPrettyName': dnsResNCacheErrPrettyName}


# notifications (traps) 
# groups 
class dnsResConfigGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 2, 1])
	group = [dnsResConfigImplementIdent, dnsResConfigService, dnsResConfigMaxCnames, dnsResConfigSbeltAddr, dnsResConfigSbeltName, dnsResConfigSbeltRecursion, dnsResConfigSbeltPref, dnsResConfigSbeltSubTree, dnsResConfigSbeltClass, dnsResConfigSbeltStatus, dnsResConfigUpTime, dnsResConfigResetTime]

class dnsResCounterGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 2, 2])
	group = [dnsResCounterByOpcodeCode, dnsResCounterByOpcodeQueries, dnsResCounterByOpcodeResponses, dnsResCounterByRcodeCode, dnsResCounterByRcodeResponses, dnsResCounterNonAuthDataResps, dnsResCounterNonAuthNoDataResps, dnsResCounterMartians, dnsResCounterRecdResponses, dnsResCounterUnparseResps, dnsResCounterFallbacks]

class dnsResLameDelegationGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 2, 3])
	group = [dnsResLameDelegationOverflows, dnsResLameDelegationSource, dnsResLameDelegationName, dnsResLameDelegationClass, dnsResLameDelegationCounts, dnsResLameDelegationStatus]

class dnsResCacheGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 2, 4])
	group = [dnsResCacheStatus, dnsResCacheMaxTTL, dnsResCacheGoodCaches, dnsResCacheBadCaches, dnsResCacheRRName, dnsResCacheRRClass, dnsResCacheRRType, dnsResCacheRRTTL, dnsResCacheRRElapsedTTL, dnsResCacheRRSource, dnsResCacheRRData, dnsResCacheRRStatus, dnsResCacheRRIndex, dnsResCacheRRPrettyName]

class dnsResNCacheGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 2, 5])
	group = [dnsResNCacheStatus, dnsResNCacheMaxTTL, dnsResNCacheGoodNCaches, dnsResNCacheBadNCaches, dnsResNCacheErrQName, dnsResNCacheErrQClass, dnsResNCacheErrQType, dnsResNCacheErrTTL, dnsResNCacheErrElapsedTTL, dnsResNCacheErrSource, dnsResNCacheErrCode, dnsResNCacheErrStatus, dnsResNCacheErrIndex, dnsResNCacheErrPrettyName]

class dnsResOptCounterGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 32, 2, 2, 6])
	group = [dnsResOptCounterReferals, dnsResOptCounterRetrans, dnsResOptCounterNoResponses, dnsResOptCounterRootRetrans, dnsResOptCounterInternals, dnsResOptCounterInternalTimeOuts]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
