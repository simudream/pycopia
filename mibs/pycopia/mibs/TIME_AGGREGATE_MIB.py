# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, experimental, OBJECT_TYPE, Opaque, Integer32
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from RMON_MIB import OwnerString
from SNMP_FRAMEWORK_MIB import SnmpAdminString
from SNMPv2_TC import RowStatus, StorageType, TEXTUAL_CONVENTION

class TIME_AGGREGATE_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/TIME-AGGREGATE-MIB'
	conformance = 4
	name = 'TIME-AGGREGATE-MIB'
	language = 2
	description = 'The MIB for servicing Time-Based aggregate\nobjects.\n\nCopyright (C) The Internet Society (2006).  This\nversion of this MIB module is part of RFC 4498;\nsee the RFC itself for full legal notices.'

# nodes
class tAggrMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 124])
	name = 'tAggrMIB'

class tAggrConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 124, 3])
	name = 'tAggrConformance'

class tAggrGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 124, 3, 1])
	name = 'tAggrGroups'

class tAggrCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 124, 3, 2])
	name = 'tAggrCompliances'


# macros
# types 

class TAggrMOErrorStatus(pycopia.SMI.Basetypes.Opaque):
	status = 1
	ranges = Ranges(Range(0, 1024))


class TimeAggrMOValue(pycopia.SMI.Basetypes.Opaque):
	status = 1
	ranges = Ranges(Range(0, 1024))


class CompressedTimeAggrMOValue(pycopia.SMI.Basetypes.Opaque):
	status = 1
	ranges = Ranges(Range(0, 1024))

# scalars 
# columns
class tAggrCtlEntryID(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 124, 1, 1, 1])
	syntaxobject = SnmpAdminString


class tAggrCtlMOInstance(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 124, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.ObjectIdentifier


class tAggrCtlAgMODescr(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 124, 1, 1, 3])
	syntaxobject = SnmpAdminString


class tAggrCtlInterval(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 124, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'micro seconds'


class tAggrCtlSamples(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 124, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class tAggrCtlCompressionAlgorithm(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 124, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'none'), Enum(2, 'deflate')]


class tAggrCtlEntryOwner(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 124, 1, 1, 7])
	syntaxobject = OwnerString


class tAggrCtlEntryStorageType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 124, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


class tAggrCtlEntryStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 124, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class tAggrDataRecord(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 124, 2, 1, 1])
	syntaxobject = TimeAggrMOValue


class tAggrDataRecordCompressed(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 124, 2, 1, 2])
	syntaxobject = CompressedTimeAggrMOValue


class tAggrDataErrorRecord(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 124, 2, 1, 3])
	syntaxobject = TAggrMOErrorStatus


# rows 
class tAggrCtlEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([tAggrCtlEntryID], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 124, 1, 1])
	access = 2
	rowstatus = tAggrCtlEntryStatus
	columns = {'tAggrCtlEntryID': tAggrCtlEntryID, 'tAggrCtlMOInstance': tAggrCtlMOInstance, 'tAggrCtlAgMODescr': tAggrCtlAgMODescr, 'tAggrCtlInterval': tAggrCtlInterval, 'tAggrCtlSamples': tAggrCtlSamples, 'tAggrCtlCompressionAlgorithm': tAggrCtlCompressionAlgorithm, 'tAggrCtlEntryOwner': tAggrCtlEntryOwner, 'tAggrCtlEntryStorageType': tAggrCtlEntryStorageType, 'tAggrCtlEntryStatus': tAggrCtlEntryStatus}


class tAggrDataEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([tAggrCtlEntryID], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 124, 2, 1])
	access = 2
	columns = {'tAggrDataRecord': tAggrDataRecord, 'tAggrDataRecordCompressed': tAggrDataRecordCompressed, 'tAggrDataErrorRecord': tAggrDataErrorRecord}


# notifications (traps) 
# groups 
class tAggrMibBasicGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 124, 3, 1, 1])
	group = [tAggrCtlMOInstance, tAggrCtlAgMODescr, tAggrCtlInterval, tAggrCtlSamples, tAggrCtlCompressionAlgorithm, tAggrCtlEntryOwner, tAggrCtlEntryStorageType, tAggrCtlEntryStatus, tAggrDataRecord, tAggrDataRecordCompressed, tAggrDataErrorRecord]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
