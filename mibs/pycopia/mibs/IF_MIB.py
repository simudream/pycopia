# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, Counter32, Gauge32, Counter64, Integer32, TimeTicks, mib_2, NOTIFICATION_TYPE
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP, NOTIFICATION_GROUP
from SNMPv2_TC import TEXTUAL_CONVENTION, DisplayString, PhysAddress, TruthValue, RowStatus, TimeStamp, AutonomousType, TestAndIncr
from SNMPv2_MIB import snmpTraps
from IANAifType_MIB import IANAifType

class IF_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/IF-MIB'
	conformance = 3
	name = 'IF-MIB'
	language = 2
	description = "The MIB module to describe generic objects for network\ninterface sub-layers.  This MIB is an updated version of\nMIB-II's ifTable, and incorporates the extensions defined in\nRFC 1229."

# nodes
class interfaces(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 2])
	name = 'interfaces'

class ifMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31])
	name = 'ifMIB'

class ifMIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 1])
	name = 'ifMIBObjects'

class ifConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 2])
	name = 'ifConformance'

class ifGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 2, 1])
	name = 'ifGroups'

class ifCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 2, 2])
	name = 'ifCompliances'


# macros
# types 

class OwnerString(pycopia.SMI.Basetypes.OctetString):
	status = 2
	ranges = Ranges(Range(0, 255))
	format = '255a'


class InterfaceIndex(pycopia.SMI.Basetypes.Integer32):
	status = 1
	ranges = Ranges(Range(1, 2147483647))
	format = 'd'


class InterfaceIndexOrZero(pycopia.SMI.Basetypes.Integer32):
	status = 1
	ranges = Ranges(Range(0, 2147483647))
	format = 'd'

# scalars 
class ifNumber(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 2, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ifTableLastChange(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class ifStackLastChange(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


# columns
class ifIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 2, 2, 1, 1])
	syntaxobject = InterfaceIndex


class ifDescr(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 2, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class ifType(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 2, 2, 1, 3])
	syntaxobject = IANAifType


class ifMtu(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 2, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ifSpeed(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 2, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class ifPhysAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 2, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.PhysAddress


class ifAdminStatus(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 2, 2, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'up'), Enum(2, 'down'), Enum(3, 'testing')]


class ifOperStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 2, 2, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'up'), Enum(2, 'down'), Enum(3, 'testing'), Enum(4, 'unknown'), Enum(5, 'dormant'), Enum(6, 'notPresent'), Enum(7, 'lowerLayerDown')]


class ifLastChange(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 2, 2, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class ifInOctets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 2, 2, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ifInUcastPkts(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 2, 2, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ifInNUcastPkts(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 2, 2, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ifInDiscards(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 2, 2, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ifInErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 2, 2, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ifInUnknownProtos(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 2, 2, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ifOutOctets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 2, 2, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ifOutUcastPkts(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 2, 2, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ifOutNUcastPkts(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 2, 2, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ifOutDiscards(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 2, 2, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ifOutErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 2, 2, 1, 20])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ifOutQLen(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 2, 2, 1, 21])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class ifSpecific(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 2, 2, 1, 22])
	syntaxobject = pycopia.SMI.Basetypes.ObjectIdentifier


class ifName(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 1, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class ifInMulticastPkts(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 1, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ifInBroadcastPkts(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 1, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ifOutMulticastPkts(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 1, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ifOutBroadcastPkts(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 1, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ifHCInOctets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 1, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class ifHCInUcastPkts(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 1, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class ifHCInMulticastPkts(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 1, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class ifHCInBroadcastPkts(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 1, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class ifHCOutOctets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 1, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class ifHCOutUcastPkts(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 1, 1, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class ifHCOutMulticastPkts(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 1, 1, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class ifHCOutBroadcastPkts(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 1, 1, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class ifLinkUpDownTrapEnable(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 1, 1, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class ifHighSpeed(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 1, 1, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class ifPromiscuousMode(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 1, 1, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class ifConnectorPresent(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 1, 1, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class ifAlias(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 1, 1, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class ifCounterDiscontinuityTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 1, 1, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class ifStackHigherLayer(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 1, 2, 1, 1])
	syntaxobject = InterfaceIndexOrZero


class ifStackLowerLayer(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 1, 2, 1, 2])
	syntaxobject = InterfaceIndexOrZero


class ifStackStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 1, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class ifTestId(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 1, 3, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.TestAndIncr


class ifTestStatus(ColumnObject):
	status = 2
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 1, 3, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'notInUse'), Enum(2, 'inUse')]


class ifTestType(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 1, 3, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.AutonomousType


class ifTestResult(ColumnObject):
	status = 2
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 1, 3, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'none'), Enum(2, 'success'), Enum(3, 'inProgress'), Enum(4, 'notSupported'), Enum(5, 'unAbleToRun'), Enum(6, 'aborted'), Enum(7, 'failed')]


class ifTestCode(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 1, 3, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.ObjectIdentifier


class ifTestOwner(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 1, 3, 1, 6])
	syntaxobject = OwnerString


class ifRcvAddressAddress(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 1, 4, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.PhysAddress


class ifRcvAddressStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 1, 4, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class ifRcvAddressType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 1, 4, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'volatile'), Enum(3, 'nonVolatile')]


# rows 
class ifEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 2, 2, 1])
	access = 2
	columns = {'ifIndex': ifIndex, 'ifDescr': ifDescr, 'ifType': ifType, 'ifMtu': ifMtu, 'ifSpeed': ifSpeed, 'ifPhysAddress': ifPhysAddress, 'ifAdminStatus': ifAdminStatus, 'ifOperStatus': ifOperStatus, 'ifLastChange': ifLastChange, 'ifInOctets': ifInOctets, 'ifInUcastPkts': ifInUcastPkts, 'ifInNUcastPkts': ifInNUcastPkts, 'ifInDiscards': ifInDiscards, 'ifInErrors': ifInErrors, 'ifInUnknownProtos': ifInUnknownProtos, 'ifOutOctets': ifOutOctets, 'ifOutUcastPkts': ifOutUcastPkts, 'ifOutNUcastPkts': ifOutNUcastPkts, 'ifOutDiscards': ifOutDiscards, 'ifOutErrors': ifOutErrors, 'ifOutQLen': ifOutQLen, 'ifSpecific': ifSpecific}


from IF_MIB import ifIndex
class ifXEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 1, 1, 1])
	access = 2
	columns = {'ifName': ifName, 'ifInMulticastPkts': ifInMulticastPkts, 'ifInBroadcastPkts': ifInBroadcastPkts, 'ifOutMulticastPkts': ifOutMulticastPkts, 'ifOutBroadcastPkts': ifOutBroadcastPkts, 'ifHCInOctets': ifHCInOctets, 'ifHCInUcastPkts': ifHCInUcastPkts, 'ifHCInMulticastPkts': ifHCInMulticastPkts, 'ifHCInBroadcastPkts': ifHCInBroadcastPkts, 'ifHCOutOctets': ifHCOutOctets, 'ifHCOutUcastPkts': ifHCOutUcastPkts, 'ifHCOutMulticastPkts': ifHCOutMulticastPkts, 'ifHCOutBroadcastPkts': ifHCOutBroadcastPkts, 'ifLinkUpDownTrapEnable': ifLinkUpDownTrapEnable, 'ifHighSpeed': ifHighSpeed, 'ifPromiscuousMode': ifPromiscuousMode, 'ifConnectorPresent': ifConnectorPresent, 'ifAlias': ifAlias, 'ifCounterDiscontinuityTime': ifCounterDiscontinuityTime}


class ifStackEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifStackHigherLayer, ifStackLowerLayer], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 1, 2, 1])
	access = 2
	rowstatus = ifStackStatus
	columns = {'ifStackHigherLayer': ifStackHigherLayer, 'ifStackLowerLayer': ifStackLowerLayer, 'ifStackStatus': ifStackStatus}


from IF_MIB import ifIndex
class ifTestEntry(RowObject):
	status = 2
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 1, 3, 1])
	access = 2
	columns = {'ifTestId': ifTestId, 'ifTestStatus': ifTestStatus, 'ifTestType': ifTestType, 'ifTestResult': ifTestResult, 'ifTestCode': ifTestCode, 'ifTestOwner': ifTestOwner}


class ifRcvAddressEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, ifRcvAddressAddress], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 1, 4, 1])
	access = 2
	rowstatus = ifRcvAddressStatus
	columns = {'ifRcvAddressAddress': ifRcvAddressAddress, 'ifRcvAddressStatus': ifRcvAddressStatus, 'ifRcvAddressType': ifRcvAddressType}


# notifications (traps) 
class linkDown(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 6, 3, 1, 1, 5, 3])

class linkUp(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 6, 3, 1, 1, 5, 4])

# groups 
class ifGeneralGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 2, 1, 1])
	group = [ifDescr, ifType, ifSpeed, ifPhysAddress, ifAdminStatus, ifOperStatus, ifLastChange, ifLinkUpDownTrapEnable, ifConnectorPresent, ifHighSpeed, ifName]

class ifFixedLengthGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 2, 1, 2])
	group = [ifInOctets, ifOutOctets, ifInUnknownProtos, ifInErrors, ifOutErrors]

class ifHCFixedLengthGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 2, 1, 3])
	group = [ifHCInOctets, ifHCOutOctets, ifInOctets, ifOutOctets, ifInUnknownProtos, ifInErrors, ifOutErrors]

class ifPacketGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 2, 1, 4])
	group = [ifInOctets, ifOutOctets, ifInUnknownProtos, ifInErrors, ifOutErrors, ifMtu, ifInUcastPkts, ifInMulticastPkts, ifInBroadcastPkts, ifInDiscards, ifOutUcastPkts, ifOutMulticastPkts, ifOutBroadcastPkts, ifOutDiscards, ifPromiscuousMode]

class ifHCPacketGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 2, 1, 5])
	group = [ifHCInOctets, ifHCOutOctets, ifInOctets, ifOutOctets, ifInUnknownProtos, ifInErrors, ifOutErrors, ifMtu, ifInUcastPkts, ifInMulticastPkts, ifInBroadcastPkts, ifInDiscards, ifOutUcastPkts, ifOutMulticastPkts, ifOutBroadcastPkts, ifOutDiscards, ifPromiscuousMode]

class ifVHCPacketGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 2, 1, 6])
	group = [ifHCInUcastPkts, ifHCInMulticastPkts, ifHCInBroadcastPkts, ifHCOutUcastPkts, ifHCOutMulticastPkts, ifHCOutBroadcastPkts, ifHCInOctets, ifHCOutOctets, ifInOctets, ifOutOctets, ifInUnknownProtos, ifInErrors, ifOutErrors, ifMtu, ifInUcastPkts, ifInMulticastPkts, ifInBroadcastPkts, ifInDiscards, ifOutUcastPkts, ifOutMulticastPkts, ifOutBroadcastPkts, ifOutDiscards, ifPromiscuousMode]

class ifRcvAddressGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 2, 1, 7])
	group = [ifRcvAddressStatus, ifRcvAddressType]

class ifTestGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 2, 1, 8])
	group = [ifTestId, ifTestStatus, ifTestType, ifTestResult, ifTestCode, ifTestOwner]

class ifStackGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 2, 1, 9])
	group = [ifStackStatus]

class ifGeneralInformationGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 2, 1, 10])
	group = [ifIndex, ifDescr, ifType, ifSpeed, ifPhysAddress, ifAdminStatus, ifOperStatus, ifLastChange, ifLinkUpDownTrapEnable, ifConnectorPresent, ifHighSpeed, ifName, ifNumber, ifAlias, ifTableLastChange]

class ifStackGroup2(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 2, 1, 11])
	group = [ifStackStatus, ifStackLastChange]

class ifOldObjectsGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 2, 1, 12])
	group = [ifInNUcastPkts, ifOutNUcastPkts, ifOutQLen, ifSpecific]

class ifCounterDiscontinuityGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 2, 1, 13])
	group = [ifCounterDiscontinuityTime]

class linkUpDownNotificationsGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 31, 2, 1, 14])
	group = [linkUp, linkDown]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
