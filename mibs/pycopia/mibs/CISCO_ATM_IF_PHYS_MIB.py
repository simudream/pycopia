# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, Counter32, OBJECT_TYPE
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from RFC1213_MIB import ifIndex
from CISCO_SMI import ciscoMgmt

class CISCO_ATM_IF_PHYS_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/site/CISCO-ATM-IF-PHYS-MIB'
	conformance = 2
	name = 'CISCO-ATM-IF-PHYS-MIB'
	language = 2
	description = 'A minimal set of managed objects for tracking\nthe status of DS3/E3/DS1/E1 and SONET interfaces.'

# nodes
class ciscoAtmIfPhysMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 45])
	name = 'ciscoAtmIfPhysMIB'

class ciscoAtmIfPhysMIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 45, 1])
	name = 'ciscoAtmIfPhysMIBObjects'

class ciscoAtmIfPhysMIBConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 45, 3])
	name = 'ciscoAtmIfPhysMIBConformance'

class ciscoAtmIfPhysMIBCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 45, 3, 1])
	name = 'ciscoAtmIfPhysMIBCompliances'

class ciscoAtmIfPhysMIBGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 45, 3, 2])
	name = 'ciscoAtmIfPhysMIBGroups'


# macros
# types 
# scalars 
# columns
class ciscoAtmIfPhysStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'normal'), Enum(2, 'los'), Enum(3, 'lof'), Enum(4, 'loc'), Enum(5, 'ais'), Enum(6, 'yellowLine'), Enum(7, 'yellowPath'), Enum(8, 'lop'), Enum(9, 'idle'), Enum(10, 'yellowAlarm'), Enum(11, 'plcpLOF'), Enum(12, 'plcpYellow'), Enum(13, 'maFERF'), Enum(14, 'pathAis'), Enum(15, 'ocd')]


class ciscoAtmIfPhysSectionParityErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmIfPhysLineParityErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmIfPhysPathParityErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmIfPhysLcvErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmIfPhysCBitParityErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmIfPhysPBitParityErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmIfPhysPlcpBipViolations(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmIfPhysLineFebeErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmIfPhysPathFebeErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmIfPhysCellPayloadScrambling(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'off'), Enum(2, 'on')]


class ciscoAtmIfPhysStsStreamScrambling(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'off'), Enum(2, 'on')]


class ciscoAtmIfPhysFramingMode(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'sonet'), Enum(2, 'sdh'), Enum(3, 'ds3m23adm'), Enum(4, 'ds3m23plcp'), Enum(5, 'ds3cbitadm'), Enum(6, 'ds3cbitplcp'), Enum(7, 'e3g832adm'), Enum(8, 'e3g751adm'), Enum(9, 'e3g751plcp'), Enum(10, 'ds1sfadm'), Enum(11, 'ds1esfadm'), Enum(12, 'ds1sfplcp'), Enum(13, 'ds1esfplcp'), Enum(14, 'e1adm'), Enum(15, 'e1plcp'), Enum(16, 'e1crcadm'), Enum(17, 'e1crcplcp')]


class ciscoAtmIfPhysLoopbackConfig(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'noLoop'), Enum(2, 'diagnosticLoop'), Enum(3, 'lineLoop'), Enum(4, 'otherLoop')]


class ciscoAtmIfPhysLineBuildOut(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'e3AllCables'), Enum(2, 'ds3CablesUnder225'), Enum(3, 'ds3CablesOver225'), Enum(4, 'ds1Cables0To110'), Enum(5, 'ds1Cables110To220'), Enum(6, 'ds1Cables220To330'), Enum(7, 'ds1Cables330To440'), Enum(8, 'ds1Cables440To550'), Enum(9, 'ds1Cables550To660'), Enum(10, 'ds1CablesOver600'), Enum(11, 'e1AllCables')]


class ciscoAtmIfPhysTransmitClockSource(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'loopTiming'), Enum(2, 'freeRunning'), Enum(3, 'networkDerived')]


class ciscoAtmIfPhysClockSourcePriority(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'notConfigured'), Enum(2, 'priority1'), Enum(3, 'priority2'), Enum(4, 'priority3'), Enum(5, 'priority4')]


class ciscoAtmIfPhysClockSourceStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'notSelected'), Enum(2, 'selected')]


class ciscoAtmIfPhysDS1BitErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmIfPhysE1CrcErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1, 20])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmIfPhysLineCode(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1, 21])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'ami'), Enum(2, 'b8zs'), Enum(3, 'hdb3')]


# rows 
class ciscoAtmIfPhysEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 45, 1, 1, 1])
	access = 2
	columns = {'ciscoAtmIfPhysStatus': ciscoAtmIfPhysStatus, 'ciscoAtmIfPhysSectionParityErrors': ciscoAtmIfPhysSectionParityErrors, 'ciscoAtmIfPhysLineParityErrors': ciscoAtmIfPhysLineParityErrors, 'ciscoAtmIfPhysPathParityErrors': ciscoAtmIfPhysPathParityErrors, 'ciscoAtmIfPhysLcvErrors': ciscoAtmIfPhysLcvErrors, 'ciscoAtmIfPhysCBitParityErrors': ciscoAtmIfPhysCBitParityErrors, 'ciscoAtmIfPhysPBitParityErrors': ciscoAtmIfPhysPBitParityErrors, 'ciscoAtmIfPhysPlcpBipViolations': ciscoAtmIfPhysPlcpBipViolations, 'ciscoAtmIfPhysLineFebeErrors': ciscoAtmIfPhysLineFebeErrors, 'ciscoAtmIfPhysPathFebeErrors': ciscoAtmIfPhysPathFebeErrors, 'ciscoAtmIfPhysCellPayloadScrambling': ciscoAtmIfPhysCellPayloadScrambling, 'ciscoAtmIfPhysStsStreamScrambling': ciscoAtmIfPhysStsStreamScrambling, 'ciscoAtmIfPhysFramingMode': ciscoAtmIfPhysFramingMode, 'ciscoAtmIfPhysLoopbackConfig': ciscoAtmIfPhysLoopbackConfig, 'ciscoAtmIfPhysLineBuildOut': ciscoAtmIfPhysLineBuildOut, 'ciscoAtmIfPhysTransmitClockSource': ciscoAtmIfPhysTransmitClockSource, 'ciscoAtmIfPhysClockSourcePriority': ciscoAtmIfPhysClockSourcePriority, 'ciscoAtmIfPhysClockSourceStatus': ciscoAtmIfPhysClockSourceStatus, 'ciscoAtmIfPhysDS1BitErrors': ciscoAtmIfPhysDS1BitErrors, 'ciscoAtmIfPhysE1CrcErrors': ciscoAtmIfPhysE1CrcErrors, 'ciscoAtmIfPhysLineCode': ciscoAtmIfPhysLineCode}


# notifications (traps) 
# groups 
class ciscoAtmIfPhysMIBCommonGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 45, 3, 2, 1])
	group = [ciscoAtmIfPhysStatus]

class ciscoAtmIfPhysMIBSonetGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 45, 3, 2, 2])
	group = [ciscoAtmIfPhysSectionParityErrors, ciscoAtmIfPhysLineParityErrors, ciscoAtmIfPhysPathParityErrors]

class ciscoAtmIfPhysMIBDs3E3Group(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 45, 3, 2, 3])
	group = [ciscoAtmIfPhysLcvErrors, ciscoAtmIfPhysCBitParityErrors, ciscoAtmIfPhysPBitParityErrors, ciscoAtmIfPhysPlcpBipViolations]

class ciscoAtmIfPhysMIBCommonGroup2(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 45, 3, 2, 4])
	group = [ciscoAtmIfPhysCellPayloadScrambling, ciscoAtmIfPhysFramingMode, ciscoAtmIfPhysLoopbackConfig, ciscoAtmIfPhysTransmitClockSource, ciscoAtmIfPhysClockSourcePriority, ciscoAtmIfPhysClockSourceStatus]

class ciscoAtmIfPhysMIBSonetGroup2(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 45, 3, 2, 5])
	group = [ciscoAtmIfPhysLineFebeErrors, ciscoAtmIfPhysPathFebeErrors, ciscoAtmIfPhysStsStreamScrambling]

class ciscoAtmIfPhysMIBDs3Group(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 45, 3, 2, 6])
	group = [ciscoAtmIfPhysLineBuildOut]

class ciscoAtmIfPhysMIBDs1E1Group(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 45, 3, 2, 7])
	group = [ciscoAtmIfPhysLcvErrors, ciscoAtmIfPhysPlcpBipViolations, ciscoAtmIfPhysLineCode]

class ciscoAtmIfPhysMIBDs1Group(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 45, 3, 2, 8])
	group = [ciscoAtmIfPhysDS1BitErrors]

class ciscoAtmIfPhysMIBE1Group(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 45, 3, 2, 9])
	group = [ciscoAtmIfPhysE1CrcErrors]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
