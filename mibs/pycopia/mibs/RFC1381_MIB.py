# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from RFC_1212 import OBJECT_TYPE
from RFC1213_MIB import transmission
from RFC1155_SMI import Counter

class RFC1381_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/RFC1381-MIB'
	conformance = 5
	name = 'RFC1381-MIB'
	language = 1

# nodes
class lapb(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16])
	name = 'lapb'

class lapbProtocolVersion(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 5])
	name = 'lapbProtocolVersion'

class lapbProtocolIso7776v1986(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 5, 1])
	name = 'lapbProtocolIso7776v1986'

class lapbProtocolCcittV1980(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 5, 2])
	name = 'lapbProtocolCcittV1980'

class lapbProtocolCcittV1984(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 5, 3])
	name = 'lapbProtocolCcittV1984'


# macros
# types 

class PositiveInteger(pycopia.SMI.Basetypes.Integer32):
	ranges = Ranges(Range(0, 2147483647))


class IfIndexType(pycopia.SMI.Basetypes.Integer32):
	ranges = Ranges(Range(1, 2147483647))

# scalars 
# columns
class lapbAdmnIndex(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 1, 1, 1])
	syntaxobject = IfIndexType


class lapbAdmnStationType(ColumnObject):
	status = 3
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'dte'), Enum(2, 'dce'), Enum(3, 'dxe')]


class lapbAdmnControlField(ColumnObject):
	status = 3
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'modulo8'), Enum(2, 'modulo128')]


class lapbAdmnTransmitN1FrameSize(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 1, 1, 4])
	syntaxobject = PositiveInteger


class lapbAdmnReceiveN1FrameSize(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 1, 1, 5])
	syntaxobject = PositiveInteger


class lapbAdmnTransmitKWindowSize(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class lapbAdmnReceiveKWindowSize(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class lapbAdmnN2RxmitCount(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class lapbAdmnT1AckTimer(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 1, 1, 9])
	syntaxobject = PositiveInteger


class lapbAdmnT2AckDelayTimer(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 1, 1, 10])
	syntaxobject = PositiveInteger


class lapbAdmnT3DisconnectTimer(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 1, 1, 11])
	syntaxobject = PositiveInteger


class lapbAdmnT4IdleTimer(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 1, 1, 12])
	syntaxobject = PositiveInteger


class lapbAdmnActionInitiate(ColumnObject):
	status = 3
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 1, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'sendSABM'), Enum(2, 'sendDISC'), Enum(3, 'sendDM'), Enum(4, 'none'), Enum(5, 'other')]


class lapbAdmnActionRecvDM(ColumnObject):
	status = 3
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 1, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'sendSABM'), Enum(2, 'sendDISC'), Enum(3, 'other')]


class lapbOperIndex(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 2, 1, 1])
	syntaxobject = IfIndexType


class lapbOperStationType(ColumnObject):
	status = 3
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'dte'), Enum(2, 'dce'), Enum(3, 'dxe')]


class lapbOperControlField(ColumnObject):
	status = 3
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'modulo8'), Enum(2, 'modulo128')]


class lapbOperTransmitN1FrameSize(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 2, 1, 4])
	syntaxobject = PositiveInteger


class lapbOperReceiveN1FrameSize(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 2, 1, 5])
	syntaxobject = PositiveInteger


class lapbOperTransmitKWindowSize(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class lapbOperReceiveKWindowSize(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 2, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class lapbOperN2RxmitCount(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 2, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class lapbOperT1AckTimer(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 2, 1, 9])
	syntaxobject = PositiveInteger


class lapbOperT2AckDelayTimer(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 2, 1, 10])
	syntaxobject = PositiveInteger


class lapbOperT3DisconnectTimer(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 2, 1, 11])
	syntaxobject = PositiveInteger


class lapbOperT4IdleTimer(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 2, 1, 12])
	syntaxobject = PositiveInteger


class lapbOperPortId(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 2, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.ObjectIdentifier


class lapbOperProtocolVersionId(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 2, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.ObjectIdentifier


class lapbFlowIfIndex(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 3, 1, 1])
	syntaxobject = IfIndexType


class lapbFlowStateChanges(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 3, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lapbFlowChangeReason(ColumnObject):
	status = 3
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 3, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'notStarted'), Enum(2, 'abmEntered'), Enum(3, 'abmeEntered'), Enum(4, 'abmReset'), Enum(5, 'abmeReset'), Enum(6, 'dmReceived'), Enum(7, 'dmSent'), Enum(8, 'discReceived'), Enum(9, 'discSent'), Enum(10, 'frmrReceived'), Enum(11, 'frmrSent'), Enum(12, 'n2Timeout'), Enum(13, 'other')]


class lapbFlowCurrentMode(ColumnObject):
	status = 3
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 3, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'disconnected'), Enum(2, 'linkSetup'), Enum(3, 'frameReject'), Enum(4, 'disconnectRequest'), Enum(5, 'informationTransfer'), Enum(6, 'rejFrameSent'), Enum(7, 'waitingAcknowledgement'), Enum(8, 'stationBusy'), Enum(9, 'remoteStationBusy'), Enum(10, 'bothStationsBusy'), Enum(11, 'waitingAckStationBusy'), Enum(12, 'waitingAckRemoteBusy'), Enum(13, 'waitingAckBothBusy'), Enum(14, 'rejFrameSentRemoteBusy'), Enum(15, 'xidFrameSent'), Enum(16, 'error'), Enum(17, 'other')]


class lapbFlowBusyDefers(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 3, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lapbFlowRejOutPkts(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 3, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lapbFlowRejInPkts(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 3, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lapbFlowT1Timeouts(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 3, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lapbFlowFrmrSent(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 3, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class lapbFlowFrmrReceived(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 3, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class lapbFlowXidReceived(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 3, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class lapbXidIndex(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 4, 1, 1])
	syntaxobject = IfIndexType


class lapbXidAdRIdentifier(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 4, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class lapbXidAdRAddress(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 4, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class lapbXidParameterUniqueIdentifier(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 4, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class lapbXidGroupAddress(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 4, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class lapbXidPortNumber(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 4, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class lapbXidUserDataSubfield(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 4, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


# rows 
class lapbAdmnEntry(RowObject):
	status = 3
	index = pycopia.SMI.Objects.IndexObjects([lapbAdmnIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 1, 1])
	access = 2
	columns = {'lapbAdmnIndex': lapbAdmnIndex, 'lapbAdmnStationType': lapbAdmnStationType, 'lapbAdmnControlField': lapbAdmnControlField, 'lapbAdmnTransmitN1FrameSize': lapbAdmnTransmitN1FrameSize, 'lapbAdmnReceiveN1FrameSize': lapbAdmnReceiveN1FrameSize, 'lapbAdmnTransmitKWindowSize': lapbAdmnTransmitKWindowSize, 'lapbAdmnReceiveKWindowSize': lapbAdmnReceiveKWindowSize, 'lapbAdmnN2RxmitCount': lapbAdmnN2RxmitCount, 'lapbAdmnT1AckTimer': lapbAdmnT1AckTimer, 'lapbAdmnT2AckDelayTimer': lapbAdmnT2AckDelayTimer, 'lapbAdmnT3DisconnectTimer': lapbAdmnT3DisconnectTimer, 'lapbAdmnT4IdleTimer': lapbAdmnT4IdleTimer, 'lapbAdmnActionInitiate': lapbAdmnActionInitiate, 'lapbAdmnActionRecvDM': lapbAdmnActionRecvDM}


class lapbOperEntry(RowObject):
	status = 3
	index = pycopia.SMI.Objects.IndexObjects([lapbOperIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 2, 1])
	access = 2
	columns = {'lapbOperIndex': lapbOperIndex, 'lapbOperStationType': lapbOperStationType, 'lapbOperControlField': lapbOperControlField, 'lapbOperTransmitN1FrameSize': lapbOperTransmitN1FrameSize, 'lapbOperReceiveN1FrameSize': lapbOperReceiveN1FrameSize, 'lapbOperTransmitKWindowSize': lapbOperTransmitKWindowSize, 'lapbOperReceiveKWindowSize': lapbOperReceiveKWindowSize, 'lapbOperN2RxmitCount': lapbOperN2RxmitCount, 'lapbOperT1AckTimer': lapbOperT1AckTimer, 'lapbOperT2AckDelayTimer': lapbOperT2AckDelayTimer, 'lapbOperT3DisconnectTimer': lapbOperT3DisconnectTimer, 'lapbOperT4IdleTimer': lapbOperT4IdleTimer, 'lapbOperPortId': lapbOperPortId, 'lapbOperProtocolVersionId': lapbOperProtocolVersionId}


class lapbFlowEntry(RowObject):
	status = 3
	index = pycopia.SMI.Objects.IndexObjects([lapbFlowIfIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 3, 1])
	access = 2
	columns = {'lapbFlowIfIndex': lapbFlowIfIndex, 'lapbFlowStateChanges': lapbFlowStateChanges, 'lapbFlowChangeReason': lapbFlowChangeReason, 'lapbFlowCurrentMode': lapbFlowCurrentMode, 'lapbFlowBusyDefers': lapbFlowBusyDefers, 'lapbFlowRejOutPkts': lapbFlowRejOutPkts, 'lapbFlowRejInPkts': lapbFlowRejInPkts, 'lapbFlowT1Timeouts': lapbFlowT1Timeouts, 'lapbFlowFrmrSent': lapbFlowFrmrSent, 'lapbFlowFrmrReceived': lapbFlowFrmrReceived, 'lapbFlowXidReceived': lapbFlowXidReceived}


class lapbXidEntry(RowObject):
	status = 3
	index = pycopia.SMI.Objects.IndexObjects([lapbXidIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 16, 4, 1])
	access = 2
	columns = {'lapbXidIndex': lapbXidIndex, 'lapbXidAdRIdentifier': lapbXidAdRIdentifier, 'lapbXidAdRAddress': lapbXidAdRAddress, 'lapbXidParameterUniqueIdentifier': lapbXidParameterUniqueIdentifier, 'lapbXidGroupAddress': lapbXidGroupAddress, 'lapbXidPortNumber': lapbXidPortNumber, 'lapbXidUserDataSubfield': lapbXidUserDataSubfield}


# notifications (traps) 
# groups 
# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
