# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, Counter32, Gauge32
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from CISCO_SMI import ciscoMgmt
from SNMPv2_TC import TimeStamp, DisplayString
from CISCO_TC import Unsigned32, EntPhysicalIndexOrZero

class CISCO_PROCESS_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/site/CISCO-PROCESS-MIB'
	conformance = 3
	name = 'CISCO-PROCESS-MIB'
	language = 2
	description = 'The MIB module to describe active system processes.'

# nodes
class ciscoProcessMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 109])
	name = 'ciscoProcessMIB'

class ciscoProcessMIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 109, 1])
	name = 'ciscoProcessMIBObjects'

class cpmCPU(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1])
	name = 'cpmCPU'

class cpmProcess(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2])
	name = 'cpmProcess'

class ciscoProcessMIBNotifications(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 109, 2])
	name = 'ciscoProcessMIBNotifications'

class ciscoProcessMIBConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 109, 3])
	name = 'ciscoProcessMIBConformance'

class cpmCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 1])
	name = 'cpmCompliances'

class cpmGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2])
	name = 'cpmGroups'


# macros
# types 
# scalars 
# columns
class cpmCPUTotalIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class cpmCPUTotalPhysicalIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 2])
	syntaxobject = EntPhysicalIndexOrZero


class cpmCPUTotal5sec(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class cpmCPUTotal1min(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class cpmCPUTotal5min(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class cpmProcessPID(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class cpmProcessName(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class cpmProcessuSecs(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32
	access = 4
	units = 'microseconds'


class cpmProcessTimeCreated(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class cpmProcExtMemAllocated(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32
	access = 4
	units = 'bytes'


class cpmProcExtMemFreed(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32
	access = 4
	units = 'bytes'


class cpmProcExtInvoked(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cpmProcExtRuntime(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'microseconds'


class cpmProcExtUtil5Sec(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class cpmProcExtUtil1Min(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class cpmProcExtUtil5Min(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 2, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class cpmProcExtPriority(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 2, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'critical'), Enum(2, 'high'), Enum(3, 'normal'), Enum(4, 'low'), Enum(5, 'notAssigned')]


# rows 
class cpmCPUTotalEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([cpmCPUTotalIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1])
	access = 2
	columns = {'cpmCPUTotalIndex': cpmCPUTotalIndex, 'cpmCPUTotalPhysicalIndex': cpmCPUTotalPhysicalIndex, 'cpmCPUTotal5sec': cpmCPUTotal5sec, 'cpmCPUTotal1min': cpmCPUTotal1min, 'cpmCPUTotal5min': cpmCPUTotal5min}


class cpmProcessEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([cpmCPUTotalIndex, cpmProcessPID], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 1, 1])
	access = 2
	columns = {'cpmProcessPID': cpmProcessPID, 'cpmProcessName': cpmProcessName, 'cpmProcessuSecs': cpmProcessuSecs, 'cpmProcessTimeCreated': cpmProcessTimeCreated}


from CISCO_PROCESS_MIB import cpmCPUTotalIndex
from CISCO_PROCESS_MIB import cpmProcessPID
class cpmProcessExtEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([cpmCPUTotalIndex, cpmProcessPID], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 2, 1])
	access = 2
	columns = {'cpmProcExtMemAllocated': cpmProcExtMemAllocated, 'cpmProcExtMemFreed': cpmProcExtMemFreed, 'cpmProcExtInvoked': cpmProcExtInvoked, 'cpmProcExtRuntime': cpmProcExtRuntime, 'cpmProcExtUtil5Sec': cpmProcExtUtil5Sec, 'cpmProcExtUtil1Min': cpmProcExtUtil1Min, 'cpmProcExtUtil5Min': cpmProcExtUtil5Min, 'cpmProcExtPriority': cpmProcExtPriority}


# notifications (traps) 
# groups 
class cpmCPUTotalGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 1])
	group = [cpmCPUTotalPhysicalIndex, cpmCPUTotal5sec, cpmCPUTotal1min, cpmCPUTotal5min]

class cpmProcessGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 2])
	group = [cpmProcessPID, cpmProcessName, cpmProcessuSecs, cpmProcessTimeCreated]

class cpmProcessExtGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 3])
	group = [cpmProcExtMemAllocated, cpmProcExtMemFreed, cpmProcExtInvoked, cpmProcExtRuntime, cpmProcExtUtil5Sec, cpmProcExtUtil1Min, cpmProcExtUtil5Min, cpmProcExtPriority]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
