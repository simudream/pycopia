# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from CISCO_CIPCSNA_MIB import ChannelPath, ChannelDevice
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, NOTIFICATION_TYPE, Counter32, Integer32
from CISCO_CHANNEL_MIB import cipCardEntryIndex, cipCardDtrBrdIndex, cipCardSubChannelIndex
from CISCO_SMI import ciscoMgmt
from RFC1213_MIB import ifIndex
from SNMPv2_TC import RowStatus, TDomain, TimeStamp
from CISCO_CIPTG_MIB import ChannelTgName

class CISCO_CIPCMPC_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/site/CISCO-CIPCMPC-MIB'
	conformance = 2
	name = 'CISCO-CIPCMPC-MIB'
	language = 2
	description = 'This is the Management Information Base (MIB) \nmodule for objects used to manage the Cisco Multi-Path \nChannel (MPC) support on Cisco Mainframe Channel\nConnection (CMCC) cards, also called the CMPC feature.\n\n-------------------------------------------------\n| Acronym Definitions:                          |\n| CIP      =   Channel Interface Processor      |\n| CMPC     =   Cisco Multi-Path Channel         |\n| HPR      =   High Performance Routing         |\n| HPDT     =   High Performance Data Transfer   |\n| ISR      =   Intermediate Session Routing     |\n| MPC      =   Multi-Path Channel                |\n| MPC+     =   HPDT MPC                         |\n| SNA      =   Systems Network Architecture     |\n| TG       =   Transmission Group               |\n-------------------------------------------------\n\n\nThis MIB consists of the following tables:\n1) CMPC Subchannel Administration \n2) CMPC Subchannel Operational\n3) CMPC TG Statistics\n\nRefer to the following MIBs for an understanding of Cisco \nchannel terminology and Cisco CMCC terminology:\n  CISCO-CHANNEL-MIB\n  CISCO-CIPCSNA-MIB\n  CISCO-CIPLAN-MIB\n  CISCO-CIPTG-MIB'

# nodes
class ciscoCipCmpcMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 72])
	name = 'ciscoCipCmpcMIB'

class cipCmpcObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 72, 1])
	name = 'cipCmpcObjects'

class cipCmpcSubChannel(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 1])
	name = 'cipCmpcSubChannel'

class cipCmpcTg(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 2])
	name = 'cipCmpcTg'

class cipCmpcNotificationPrefix(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 72, 2])
	name = 'cipCmpcNotificationPrefix'

class cipCmpcNotifications(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 72, 2, 0])
	name = 'cipCmpcNotifications'

class ciscoCipCmpcMibConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 72, 3])
	name = 'ciscoCipCmpcMibConformance'

class ciscoCipCmpcMibCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 72, 3, 1])
	name = 'ciscoCipCmpcMibCompliances'

class ciscoCipCmpcMibGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 72, 3, 2])
	name = 'ciscoCipCmpcMibGroups'


# macros
# types 
# scalars 
# columns
class cipCmpcSubChannelAdminPath(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 1, 1, 1, 1])
	syntaxobject = ChannelPath


class cipCmpcSubChannelAdminDevice(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 1, 1, 1, 2])
	syntaxobject = ChannelDevice


class cipCmpcSubChannelAdminTgName(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 1, 1, 1, 3])
	syntaxobject = ChannelTgName


class cipCmpcSubChannelAdminDirection(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 1, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'read'), Enum(2, 'write'), Enum(3, 'readOrWrite')]


class cipCmpcSubChannelAdminTgTransport(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 1, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.TDomain


class cipCmpcSubChannelAdminRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 1, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class cipCmpcSubChannelOperState(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 1, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'shutdown'), Enum(2, 'inactive'), Enum(3, 'xid2Pending'), Enum(4, 'active'), Enum(5, 'activePlus')]


class cipCmpcSubChannelOperMaxbfru(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 1, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class cipCmpcTgOperName(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 2, 1, 1, 1])
	syntaxobject = ChannelTgName


class cipCmpcTgOperLastSeqNumFailureCause(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 2, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'none'), Enum(2, 'blockSeqError'), Enum(3, 'sweepSeqError')]


class cipCmpcTgOperLastSeqNumFailureTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 2, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class cipCmpcTgOperExpectedReceiveSeqNum(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 2, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class cipCmpcTgOperLastSeqNumReceived(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 2, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class cipCmpcTgOperLastSeqNumSent(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 2, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class cipCmpcTgStatsConnectReqs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 2, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipCmpcTgStatsConnectInds(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 2, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipCmpcTgStatsConnectRsps(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 2, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipCmpcTgStatsConnectCnfms(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 2, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipCmpcTgStatsDiscReqs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 2, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipCmpcTgStatsDiscInds(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 2, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipCmpcTgStatsSweepReqsIn(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 2, 2, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipCmpcTgStatsSweepReqsOut(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 2, 2, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipCmpcTgStatsSweepRspsIn(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 2, 2, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipCmpcTgStatsSweepRspsOut(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 2, 2, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipCmpcTgStatsWraps(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 2, 2, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


# rows 
class cipCmpcSubChannelAdminEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([cipCardEntryIndex, cipCardDtrBrdIndex, cipCardSubChannelIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 1, 1, 1])
	access = 2
	rowstatus = cipCmpcSubChannelAdminRowStatus
	columns = {'cipCmpcSubChannelAdminPath': cipCmpcSubChannelAdminPath, 'cipCmpcSubChannelAdminDevice': cipCmpcSubChannelAdminDevice, 'cipCmpcSubChannelAdminTgName': cipCmpcSubChannelAdminTgName, 'cipCmpcSubChannelAdminDirection': cipCmpcSubChannelAdminDirection, 'cipCmpcSubChannelAdminTgTransport': cipCmpcSubChannelAdminTgTransport, 'cipCmpcSubChannelAdminRowStatus': cipCmpcSubChannelAdminRowStatus}


from CISCO_CHANNEL_MIB import cipCardEntryIndex
from CISCO_CHANNEL_MIB import cipCardDtrBrdIndex
from CISCO_CHANNEL_MIB import cipCardSubChannelIndex
class cipCmpcSubChannelOperEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([cipCardEntryIndex, cipCardDtrBrdIndex, cipCardSubChannelIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 1, 2, 1])
	access = 2
	columns = {'cipCmpcSubChannelOperState': cipCmpcSubChannelOperState, 'cipCmpcSubChannelOperMaxbfru': cipCmpcSubChannelOperMaxbfru}


class cipCmpcTgOperEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, cipCmpcTgOperName], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 2, 1, 1])
	access = 2
	columns = {'cipCmpcTgOperName': cipCmpcTgOperName, 'cipCmpcTgOperLastSeqNumFailureCause': cipCmpcTgOperLastSeqNumFailureCause, 'cipCmpcTgOperLastSeqNumFailureTime': cipCmpcTgOperLastSeqNumFailureTime, 'cipCmpcTgOperExpectedReceiveSeqNum': cipCmpcTgOperExpectedReceiveSeqNum, 'cipCmpcTgOperLastSeqNumReceived': cipCmpcTgOperLastSeqNumReceived, 'cipCmpcTgOperLastSeqNumSent': cipCmpcTgOperLastSeqNumSent}


from RFC1213_MIB import ifIndex
from CISCO_CIPCMPC_MIB import cipCmpcTgOperName
class cipCmpcTgStatsEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, cipCmpcTgOperName], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 2, 2, 1])
	access = 2
	columns = {'cipCmpcTgStatsConnectReqs': cipCmpcTgStatsConnectReqs, 'cipCmpcTgStatsConnectInds': cipCmpcTgStatsConnectInds, 'cipCmpcTgStatsConnectRsps': cipCmpcTgStatsConnectRsps, 'cipCmpcTgStatsConnectCnfms': cipCmpcTgStatsConnectCnfms, 'cipCmpcTgStatsDiscReqs': cipCmpcTgStatsDiscReqs, 'cipCmpcTgStatsDiscInds': cipCmpcTgStatsDiscInds, 'cipCmpcTgStatsSweepReqsIn': cipCmpcTgStatsSweepReqsIn, 'cipCmpcTgStatsSweepReqsOut': cipCmpcTgStatsSweepReqsOut, 'cipCmpcTgStatsSweepRspsIn': cipCmpcTgStatsSweepRspsIn, 'cipCmpcTgStatsSweepRspsOut': cipCmpcTgStatsSweepRspsOut, 'cipCmpcTgStatsWraps': cipCmpcTgStatsWraps}


# notifications (traps) 
class cipCmpcDirectionMismatch(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 72, 2, 0, 1])

class cipCmpcSeqNumError(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 72, 2, 0, 2])

# groups 
class ciscoCipCmpcSubChannelGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 72, 3, 2, 1])
	group = [cipCmpcSubChannelAdminPath, cipCmpcSubChannelAdminDevice, cipCmpcSubChannelAdminTgName, cipCmpcSubChannelAdminDirection, cipCmpcSubChannelAdminTgTransport, cipCmpcSubChannelAdminRowStatus, cipCmpcSubChannelOperState, cipCmpcSubChannelOperMaxbfru]

class ciscoCipCmpcTgGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 72, 3, 2, 2])
	group = [cipCmpcTgOperLastSeqNumFailureCause, cipCmpcTgOperLastSeqNumFailureTime, cipCmpcTgOperExpectedReceiveSeqNum, cipCmpcTgOperLastSeqNumReceived, cipCmpcTgOperLastSeqNumSent, cipCmpcTgStatsConnectReqs, cipCmpcTgStatsConnectInds, cipCmpcTgStatsConnectRsps, cipCmpcTgStatsConnectCnfms, cipCmpcTgStatsDiscReqs, cipCmpcTgStatsDiscInds, cipCmpcTgStatsSweepReqsIn, cipCmpcTgStatsSweepReqsOut, cipCmpcTgStatsSweepRspsIn, cipCmpcTgStatsSweepRspsOut, cipCmpcTgStatsWraps]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
