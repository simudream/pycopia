# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from IF_MIB import ifIndex
from FRAME_RELAY_DTE_MIB import DLCI
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, Counter32, Gauge32, Integer32, Counter64, TimeTicks, mib_2
from HCNUM_TC import CounterBasedGauge64
from SNMPv2_TC import TEXTUAL_CONVENTION, RowStatus, TimeStamp

class FRSLD_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/FRSLD-MIB'
	name = 'FRSLD-MIB'
	language = 2
	description = 'The MIB module to describe generic objects for\nFRF.13 Frame Relay Service Level Definitions.'

# nodes
class frsldMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95])
	name = 'frsldMIB'

class frsldObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1])
	name = 'frsldObjects'

class frsldCapabilities(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 2])
	name = 'frsldCapabilities'

class frsldConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 3])
	name = 'frsldConformance'

class frsldMIBGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 3, 1])
	name = 'frsldMIBGroups'

class frsldMIBCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 3, 2])
	name = 'frsldMIBCompliances'


# macros
# types 

class FrsldTxRP(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'srcLocalRP'), Enum(2, 'ingTxLocalRP'), Enum(3, 'tpTxLocalRP'), Enum(4, 'eqiTxLocalRP'), Enum(5, 'eqoTxLocalRP'), Enum(6, 'otherTxLocalRP'), Enum(7, 'srcRemoteRP'), Enum(8, 'ingTxRemoteRP'), Enum(9, 'tpTxRemoteRP'), Enum(10, 'eqiTxRemoteRP'), Enum(11, 'eqoTxRemoteRP'), Enum(12, 'otherTxRemoteRP')]


class FrsldRxRP(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'desLocalRP'), Enum(2, 'ingRxLocalRP'), Enum(3, 'tpRxLocalRP'), Enum(4, 'eqiRxLocalRP'), Enum(5, 'eqoRxLocalRP'), Enum(6, 'otherRxLocalRP'), Enum(7, 'desRemoteRP'), Enum(8, 'ingRxRemoteRP'), Enum(9, 'tpRxRemoteRP'), Enum(10, 'eqiRxRemoteRP'), Enum(11, 'eqoRxRemoteRP'), Enum(12, 'otherRxRemoteRP')]

# scalars 
class frsldPvcCtrlWriteCaps(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 2, 1])
	syntaxobject = pycopia.SMI.Basetypes.BITS


class frsldSmplCtrlWriteCaps(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 2, 2])
	syntaxobject = pycopia.SMI.Basetypes.BITS


class frsldRPCaps(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 2, 3])
	syntaxobject = pycopia.SMI.Basetypes.BITS


class frsldMaxPvcCtrls(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 2, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class frsldNumPvcCtrls(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 2, 5])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class frsldMaxSmplCtrls(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 2, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class frsldNumSmplCtrls(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 2, 7])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


# columns
class frsldPvcCtrlDlci(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 1, 1, 1])
	syntaxobject = DLCI


class frsldPvcCtrlTransmitRP(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 1, 1, 2])
	syntaxobject = FrsldTxRP


class frsldPvcCtrlReceiveRP(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 1, 1, 3])
	syntaxobject = FrsldRxRP


class frsldPvcCtrlStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class frsldPvcCtrlPacketFreq(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class frsldPvcCtrlDelayFrSize(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'octets'


class frsldPvcCtrlDelayType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'oneWay'), Enum(2, 'roundTrip')]


class frsldPvcCtrlDelayTimeOut(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class frsldPvcCtrlPurge(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class frsldPvcCtrlDeleteOnPurge(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'none'), Enum(2, 'sampleContols'), Enum(3, 'all')]


class frsldPvcCtrlLastPurgeTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 1, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class frsldSmplCtrlIdx(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class frsldSmplCtrlStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class frsldSmplCtrlColPeriod(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class frsldSmplCtrlBuckets(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class frsldSmplCtrlBucketsGranted(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class frsldPvcDataMissedPolls(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 3, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class frsldPvcDataFrDeliveredC(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 3, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class frsldPvcDataFrDeliveredE(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 3, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class frsldPvcDataFrOfferedC(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 3, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class frsldPvcDataFrOfferedE(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 3, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class frsldPvcDataDataDeliveredC(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 3, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class frsldPvcDataDataDeliveredE(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 3, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class frsldPvcDataDataOfferedC(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 3, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class frsldPvcDataDataOfferedE(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 3, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class frsldPvcDataHCFrDeliveredC(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 3, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class frsldPvcDataHCFrDeliveredE(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 3, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class frsldPvcDataHCFrOfferedC(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 3, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class frsldPvcDataHCFrOfferedE(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 3, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class frsldPvcDataHCDataDeliveredC(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 3, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class frsldPvcDataHCDataDeliveredE(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 3, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class frsldPvcDataHCDataOfferedC(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 3, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class frsldPvcDataHCDataOfferedE(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 3, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class frsldPvcDataUnavailableTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 3, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class frsldPvcDataUnavailables(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 3, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class frsldPvcSmplIdx(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class frsldPvcSmplDelayMin(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32
	access = 4
	units = 'microseconds'


class frsldPvcSmplDelayMax(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32
	access = 4
	units = 'microseconds'


class frsldPvcSmplDelayAvg(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32
	access = 4
	units = 'microseconds'


class frsldPvcSmplMissedPolls(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class frsldPvcSmplFrDeliveredC(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class frsldPvcSmplFrDeliveredE(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class frsldPvcSmplFrOfferedC(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class frsldPvcSmplFrOfferedE(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class frsldPvcSmplDataDeliveredC(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class frsldPvcSmplDataDeliveredE(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class frsldPvcSmplDataOfferedC(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class frsldPvcSmplDataOfferedE(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class frsldPvcSmplHCFrDeliveredC(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 14])
	syntaxobject = CounterBasedGauge64


class frsldPvcSmplHCFrDeliveredE(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 15])
	syntaxobject = CounterBasedGauge64


class frsldPvcSmplHCFrOfferedC(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 16])
	syntaxobject = CounterBasedGauge64


class frsldPvcSmplHCFrOfferedE(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 17])
	syntaxobject = CounterBasedGauge64


class frsldPvcSmplHCDataDeliveredC(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 18])
	syntaxobject = CounterBasedGauge64


class frsldPvcSmplHCDataDeliveredE(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 19])
	syntaxobject = CounterBasedGauge64


class frsldPvcSmplHCDataOfferedC(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 20])
	syntaxobject = CounterBasedGauge64


class frsldPvcSmplHCDataOfferedE(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 21])
	syntaxobject = CounterBasedGauge64


class frsldPvcSmplUnavailableTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 22])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class frsldPvcSmplUnavailables(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 23])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class frsldPvcSmplStartTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 24])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class frsldPvcSmplEndTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 25])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


# rows 
class frsldPvcCtrlEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, frsldPvcCtrlDlci, frsldPvcCtrlTransmitRP, frsldPvcCtrlReceiveRP], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 1, 1])
	access = 2
	rowstatus = frsldPvcCtrlStatus
	columns = {'frsldPvcCtrlDlci': frsldPvcCtrlDlci, 'frsldPvcCtrlTransmitRP': frsldPvcCtrlTransmitRP, 'frsldPvcCtrlReceiveRP': frsldPvcCtrlReceiveRP, 'frsldPvcCtrlStatus': frsldPvcCtrlStatus, 'frsldPvcCtrlPacketFreq': frsldPvcCtrlPacketFreq, 'frsldPvcCtrlDelayFrSize': frsldPvcCtrlDelayFrSize, 'frsldPvcCtrlDelayType': frsldPvcCtrlDelayType, 'frsldPvcCtrlDelayTimeOut': frsldPvcCtrlDelayTimeOut, 'frsldPvcCtrlPurge': frsldPvcCtrlPurge, 'frsldPvcCtrlDeleteOnPurge': frsldPvcCtrlDeleteOnPurge, 'frsldPvcCtrlLastPurgeTime': frsldPvcCtrlLastPurgeTime}


class frsldSmplCtrlEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, frsldPvcCtrlDlci, frsldPvcCtrlTransmitRP, frsldPvcCtrlReceiveRP, frsldSmplCtrlIdx], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 2, 1])
	access = 2
	rowstatus = frsldSmplCtrlStatus
	columns = {'frsldSmplCtrlIdx': frsldSmplCtrlIdx, 'frsldSmplCtrlStatus': frsldSmplCtrlStatus, 'frsldSmplCtrlColPeriod': frsldSmplCtrlColPeriod, 'frsldSmplCtrlBuckets': frsldSmplCtrlBuckets, 'frsldSmplCtrlBucketsGranted': frsldSmplCtrlBucketsGranted}


class frsldPvcDataEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, frsldPvcCtrlDlci, frsldPvcCtrlTransmitRP, frsldPvcCtrlReceiveRP], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 3, 1])
	access = 2
	columns = {'frsldPvcDataMissedPolls': frsldPvcDataMissedPolls, 'frsldPvcDataFrDeliveredC': frsldPvcDataFrDeliveredC, 'frsldPvcDataFrDeliveredE': frsldPvcDataFrDeliveredE, 'frsldPvcDataFrOfferedC': frsldPvcDataFrOfferedC, 'frsldPvcDataFrOfferedE': frsldPvcDataFrOfferedE, 'frsldPvcDataDataDeliveredC': frsldPvcDataDataDeliveredC, 'frsldPvcDataDataDeliveredE': frsldPvcDataDataDeliveredE, 'frsldPvcDataDataOfferedC': frsldPvcDataDataOfferedC, 'frsldPvcDataDataOfferedE': frsldPvcDataDataOfferedE, 'frsldPvcDataHCFrDeliveredC': frsldPvcDataHCFrDeliveredC, 'frsldPvcDataHCFrDeliveredE': frsldPvcDataHCFrDeliveredE, 'frsldPvcDataHCFrOfferedC': frsldPvcDataHCFrOfferedC, 'frsldPvcDataHCFrOfferedE': frsldPvcDataHCFrOfferedE, 'frsldPvcDataHCDataDeliveredC': frsldPvcDataHCDataDeliveredC, 'frsldPvcDataHCDataDeliveredE': frsldPvcDataHCDataDeliveredE, 'frsldPvcDataHCDataOfferedC': frsldPvcDataHCDataOfferedC, 'frsldPvcDataHCDataOfferedE': frsldPvcDataHCDataOfferedE, 'frsldPvcDataUnavailableTime': frsldPvcDataUnavailableTime, 'frsldPvcDataUnavailables': frsldPvcDataUnavailables}


class frsldPvcSampleEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, frsldPvcCtrlDlci, frsldPvcCtrlTransmitRP, frsldPvcCtrlReceiveRP, frsldSmplCtrlIdx, frsldPvcSmplIdx], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 1, 4, 1])
	access = 2
	columns = {'frsldPvcSmplIdx': frsldPvcSmplIdx, 'frsldPvcSmplDelayMin': frsldPvcSmplDelayMin, 'frsldPvcSmplDelayMax': frsldPvcSmplDelayMax, 'frsldPvcSmplDelayAvg': frsldPvcSmplDelayAvg, 'frsldPvcSmplMissedPolls': frsldPvcSmplMissedPolls, 'frsldPvcSmplFrDeliveredC': frsldPvcSmplFrDeliveredC, 'frsldPvcSmplFrDeliveredE': frsldPvcSmplFrDeliveredE, 'frsldPvcSmplFrOfferedC': frsldPvcSmplFrOfferedC, 'frsldPvcSmplFrOfferedE': frsldPvcSmplFrOfferedE, 'frsldPvcSmplDataDeliveredC': frsldPvcSmplDataDeliveredC, 'frsldPvcSmplDataDeliveredE': frsldPvcSmplDataDeliveredE, 'frsldPvcSmplDataOfferedC': frsldPvcSmplDataOfferedC, 'frsldPvcSmplDataOfferedE': frsldPvcSmplDataOfferedE, 'frsldPvcSmplHCFrDeliveredC': frsldPvcSmplHCFrDeliveredC, 'frsldPvcSmplHCFrDeliveredE': frsldPvcSmplHCFrDeliveredE, 'frsldPvcSmplHCFrOfferedC': frsldPvcSmplHCFrOfferedC, 'frsldPvcSmplHCFrOfferedE': frsldPvcSmplHCFrOfferedE, 'frsldPvcSmplHCDataDeliveredC': frsldPvcSmplHCDataDeliveredC, 'frsldPvcSmplHCDataDeliveredE': frsldPvcSmplHCDataDeliveredE, 'frsldPvcSmplHCDataOfferedC': frsldPvcSmplHCDataOfferedC, 'frsldPvcSmplHCDataOfferedE': frsldPvcSmplHCDataOfferedE, 'frsldPvcSmplUnavailableTime': frsldPvcSmplUnavailableTime, 'frsldPvcSmplUnavailables': frsldPvcSmplUnavailables, 'frsldPvcSmplStartTime': frsldPvcSmplStartTime, 'frsldPvcSmplEndTime': frsldPvcSmplEndTime}


# notifications (traps) 
# groups 
class frsldPvcReqCtrlGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 3, 1, 1])
	group = [frsldPvcCtrlStatus, frsldPvcCtrlPurge, frsldPvcCtrlDeleteOnPurge, frsldPvcCtrlLastPurgeTime]

class frsldPvcPacketGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 3, 1, 2])
	group = [frsldPvcCtrlPacketFreq]

class frsldPvcDelayCtrlGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 3, 1, 3])
	group = [frsldPvcCtrlDelayFrSize, frsldPvcCtrlDelayType, frsldPvcCtrlDelayTimeOut]

class frsldPvcSampleCtrlGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 3, 1, 4])
	group = [frsldSmplCtrlStatus, frsldSmplCtrlColPeriod, frsldSmplCtrlBuckets, frsldSmplCtrlBucketsGranted]

class frsldPvcReqDataGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 3, 1, 5])
	group = [frsldPvcDataFrDeliveredC, frsldPvcDataFrDeliveredE, frsldPvcDataFrOfferedC, frsldPvcDataFrOfferedE, frsldPvcDataDataDeliveredC, frsldPvcDataDataDeliveredE, frsldPvcDataDataOfferedC, frsldPvcDataDataOfferedE, frsldPvcDataUnavailableTime, frsldPvcDataUnavailables]

class frsldPvcDelayDataGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 3, 1, 6])
	group = [frsldPvcDataMissedPolls]

class frsldPvcHCFrameDataGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 3, 1, 7])
	group = [frsldPvcDataHCFrDeliveredC, frsldPvcDataHCFrDeliveredE, frsldPvcDataHCFrOfferedC, frsldPvcDataHCFrOfferedE]

class frsldPvcHCOctetDataGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 3, 1, 8])
	group = [frsldPvcDataHCDataDeliveredC, frsldPvcDataHCDataDeliveredE, frsldPvcDataHCDataOfferedC, frsldPvcDataHCDataOfferedE]

class frsldPvcSampleDelayGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 3, 1, 9])
	group = [frsldPvcSmplDelayMin, frsldPvcSmplDelayMax, frsldPvcSmplDelayAvg, frsldPvcSmplMissedPolls]

class frsldPvcSampleDataGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 3, 1, 10])
	group = [frsldPvcSmplFrDeliveredC, frsldPvcSmplFrDeliveredE, frsldPvcSmplFrOfferedC, frsldPvcSmplFrOfferedE, frsldPvcSmplDataDeliveredC, frsldPvcSmplDataDeliveredE, frsldPvcSmplDataOfferedC, frsldPvcSmplDataOfferedE]

class frsldPvcSampleHCFrameGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 3, 1, 11])
	group = [frsldPvcSmplHCFrDeliveredC, frsldPvcSmplHCFrDeliveredE, frsldPvcSmplHCFrOfferedC, frsldPvcSmplHCFrOfferedE]

class frsldPvcSampleHCDataGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 3, 1, 12])
	group = [frsldPvcSmplHCDataDeliveredC, frsldPvcSmplHCDataDeliveredE, frsldPvcSmplHCDataOfferedC, frsldPvcSmplHCDataOfferedE]

class frsldPvcSampleAvailGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 3, 1, 13])
	group = [frsldPvcSmplUnavailableTime, frsldPvcSmplUnavailables]

class frsldPvcSampleGeneralGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 3, 1, 14])
	group = [frsldPvcSmplStartTime, frsldPvcSmplEndTime]

class frsldCapabilitiesGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 95, 3, 1, 15])
	group = [frsldPvcCtrlWriteCaps, frsldSmplCtrlWriteCaps, frsldRPCaps, frsldMaxPvcCtrls, frsldNumPvcCtrls, frsldMaxSmplCtrls, frsldNumSmplCtrls]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
