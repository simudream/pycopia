# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from IF_MIB import ifAdminStatus
from SNMPv2_SMI import IpAddress, Integer32, Counter32, TimeTicks, OBJECT_TYPE, MODULE_IDENTITY, NOTIFICATION_TYPE
from HP_ICF_GENERIC_RPTR import hubIntruderAddress, hubIntruderPort
from SNMP_REPEATER_MIB import rptrPortAdminStatus, rptrAddrTrackLastSourceAddress
from HP_ICF_OID import icfCommon, icfHub, icfBridge, icfConfig, bridge1010, bridgeRemote, etherTwist12, etherTwist48, etherTwist24S, fiberOptic, thinLAN, advStack12, advStack24, advStack48, advStackU8, advStackU16, repeaterAgent, hpicfEnetSMM
from SNMPv2_TC import DisplayString, MacAddress

class ICF_ETWIST(ModuleObject):
	path = '/usr/share/snmp/mibs/site/ICF-ETWIST'
	conformance = 1
	name = 'ICF-ETWIST'
	language = 2
	description = 'This MIB module describes devices in the HP \nIntegrated Communication Facility product \nline.'

# nodes
class bridge1010TrapPrefix(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 1, 1, 0])
	name = 'bridge1010TrapPrefix'

class bridgeRemoteTrapPrefix(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 1, 2, 0])
	name = 'bridgeRemoteTrapPrefix'

class etherTwist12TrapPrefix(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 1, 0])
	name = 'etherTwist12TrapPrefix'

class fiberOpticTrapPrefix(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 3, 0])
	name = 'fiberOpticTrapPrefix'

class etherTwist48TrapPrefix(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 4, 0])
	name = 'etherTwist48TrapPrefix'

class thinLANTrapPrefix(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 5, 0])
	name = 'thinLANTrapPrefix'

class etherTwist24STrapPrefix(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 6, 0])
	name = 'etherTwist24STrapPrefix'

class advStack12TrapPrefix(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 7, 0])
	name = 'advStack12TrapPrefix'

class advStack24TrapPrefix(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 8, 0])
	name = 'advStack24TrapPrefix'

class advStack48TrapPrefix(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 9, 0])
	name = 'advStack48TrapPrefix'

class advStackU8TrapPrefix(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 11, 0])
	name = 'advStackU8TrapPrefix'

class advStackU16TrapPrefix(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 12, 0])
	name = 'advStackU16TrapPrefix'

class repeaterAgentTrapPrefix(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 1, 0])
	name = 'repeaterAgentTrapPrefix'

class hpicfEnetSMMTrapPrefix(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 2, 4, 0])
	name = 'hpicfEnetSMMTrapPrefix'

class discovery(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 6])
	name = 'discovery'

class icfEvent(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 7])
	name = 'icfEvent'

class eventNotificationNode(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 7, 1])
	name = 'eventNotificationNode'

class linkTest(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 8])
	name = 'linkTest'

class linkTestAddress(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 8, 1])
	name = 'linkTestAddress'

class icfDownload(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 10])
	name = 'icfDownload'

class icfDownloadAddress(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 10, 1])
	name = 'icfDownloadAddress'

class icfCommonAdmin(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11])
	name = 'icfCommonAdmin'

class icfEtwistMib(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 1])
	name = 'icfEtwistMib'

class icfETwistConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2])
	name = 'icfETwistConformance'

class icfETCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 1])
	name = 'icfETCompliances'

class icfETGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2])
	name = 'icfETGroups'

class hubGlobal(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 2])
	name = 'hubGlobal'

class hubBitmaps(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 4])
	name = 'hubBitmaps'

class stp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6])
	name = 'stp'


# macros
# types 
# scalars 
# columns
class hubAddrMoveIndex(ColumnObject):
	access = 4
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 11, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hubAddrMoveAddress(ColumnObject):
	access = 4
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 11, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.MacAddress


class hubAddrMoveOldGroup(ColumnObject):
	access = 4
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 11, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hubAddrMoveOldPort(ColumnObject):
	access = 4
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 11, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hubAddrMoveNewGroup(ColumnObject):
	access = 4
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 11, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hubAddrMoveNewPort(ColumnObject):
	access = 4
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 11, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class icfConfigIfIndex(ColumnObject):
	access = 4
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 5, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class icfConfigIfIpAddress(ColumnObject):
	access = 5
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 5, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class icfConfigIfNetMask(ColumnObject):
	access = 5
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 5, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class icfConfigIfDefaultGate(ColumnObject):
	access = 5
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 5, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


# rows 
# notifications (traps) 
class thresholdTrap1010(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 1, 1, 0, 0])

class stpTrap1010(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 1, 1, 0, 3])

class temperatureTrap1010(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 1, 1, 0, 4])

class thresholdTrapRem(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 1, 2, 0, 0])

class stpTrapRem(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 1, 2, 0, 3])

class temperatureTrapRem(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 1, 2, 0, 4])

class thresholdTrapET12(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 1, 0, 0])

class linkBeatTrapET12(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 1, 0, 3])

class segmentationTrapET12(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 1, 0, 4])

class backupLinkTrapET12(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 1, 0, 5])

class thresholdTrapFiber(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 3, 0, 0])

class linkBeatTrapFiber(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 3, 0, 3])

class segmentationTrapFiber(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 3, 0, 4])

class backupLinkTrapFiber(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 3, 0, 5])

class thresholdTrapET48(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 4, 0, 0])

class linkBeatTrapET48(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 4, 0, 3])

class segmentationTrapET48(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 4, 0, 4])

class backupLinkTrapET48(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 4, 0, 5])

class thresholdTrapTLAN(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 5, 0, 0])

class linkBeatTrapTLAN(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 5, 0, 3])

class segmentationTrapTLAN(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 5, 0, 4])

class backupLinkTrapTLAN(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 5, 0, 5])

class thresholdTrapET24S(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 6, 0, 0])

class linkBeatTrapET24S(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 6, 0, 3])

class segmentationTrapET24S(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 6, 0, 4])

class backupLinkTrapET24S(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 6, 0, 5])

class intrusionTrapET24S(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 6, 0, 6])

class addressMovedTrapET24S(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 6, 0, 7])

class newAddressTrapET24S(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 6, 0, 8])

class thresholdTrapAS12(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 7, 0, 0])

class thresholdTrapAS24(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 8, 0, 0])

class thresholdTrapAS48(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 9, 0, 0])

class thresholdTrapASU8(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 11, 0, 0])

class thresholdTrapASU16(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 12, 0, 0])

class thresholdTrapASEN(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 1, 0, 0])

class linkBeatTrapASEN(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 1, 0, 3])

class segmentationTrapASEN(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 1, 0, 4])

class backupLinkTrapASEN(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 1, 0, 5])

class intrusionTrapASEN(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 1, 0, 6])

class addressMovedTrapASEN(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 1, 0, 7])

class newAddressTrapASEN(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 1, 0, 8])

class thresholdTrapSMM(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 2, 4, 0, 0])

class linkBeatTrapSMM(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 2, 4, 0, 3])

class segmentationTrapSMM(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 2, 4, 0, 4])

class backupLinkTrapSMM(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 2, 4, 0, 5])

class intrusionTrapSMM(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 2, 4, 0, 6])

class addressMovedTrapSMM(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 2, 4, 0, 7])

class newAddressTrapSMM(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 2, 4, 0, 8])

# groups 
# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
