# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import Integer32, Counter32, OBJECT_TYPE, MODULE_IDENTITY, NOTIFICATION_TYPE
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP, NOTIFICATION_GROUP
from SNMPv2_TC import DisplayString, TimeStamp
from HP_ICF_OID import hpicfObjectModules, hpicfCommon, hpicfCommonTrapsPrefix

class HP_ICF_CHASSIS(ModuleObject):
	path = '/usr/share/snmp/mibs/site/HP-ICF-CHASSIS'
	conformance = 5
	name = 'HP-ICF-CHASSIS'
	language = 2
	description = 'This MIB module describes chassis devices in the\nHP Integrated Communication Facility product \nline.  Note that most of this module will be\nsuperceded by the standard Entity MIB.  However,\nthe hpicfSensorTable will still be valid.'

# nodes
class hpicfChassisMib(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 3])
	name = 'hpicfChassisMib'

class hpicfChassisConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 3, 1])
	name = 'hpicfChassisConformance'

class hpicfChassisCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 3, 1, 1])
	name = 'hpicfChassisCompliances'

class hpicfChassisGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 3, 1, 2])
	name = 'hpicfChassisGroups'

class hpicfChassis(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2])
	name = 'hpicfChassis'


# macros
# types 
# scalars 
class hpicfChassisId(ScalarObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 1])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class hpicfChassisNumSlots(ScalarObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


# columns
class hpicfSlotIndex(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 3, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpicfSlotObjectId(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 3, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.ObjectIdentifier


class hpicfSlotLastChange(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 3, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class hpicfSlotDescr(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 3, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class hpicfEntityIndex(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 4, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpicfEntityFunction(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 4, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpicfEntityObjectId(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 4, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.ObjectIdentifier


class hpicfEntityDescr(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 4, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class hpicfEntityTimestamp(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 4, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class hpicfSlotMapSlot(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 5, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpicfSlotMapEntity(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 5, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpicfSensorIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 6, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpicfSensorObjectId(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 6, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.ObjectIdentifier


class hpicfSensorNumber(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 6, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpicfSensorStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 6, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'unknown'), Enum(2, 'bad'), Enum(3, 'warning'), Enum(4, 'good'), Enum(5, 'notPresent')]


class hpicfSensorWarnings(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 6, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class hpicfSensorFailures(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 6, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class hpicfSensorDescr(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 6, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class hpicfChasAddrType(ColumnObject):
	status = 2
	access = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 7, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'ipAddr'), Enum(2, 'ipxAddr'), Enum(3, 'macAddr')]


class hpicfChasAddrAddress(ColumnObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 7, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class hpicfChasAddrEntity(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 7, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


# rows 
class hpicfSlotEntry(RowObject):
	status = 2
	index = pycopia.SMI.Objects.IndexObjects([hpicfSlotIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 3, 1])
	access = 2
	columns = {'hpicfSlotIndex': hpicfSlotIndex, 'hpicfSlotObjectId': hpicfSlotObjectId, 'hpicfSlotLastChange': hpicfSlotLastChange, 'hpicfSlotDescr': hpicfSlotDescr}


class hpicfEntityEntry(RowObject):
	status = 2
	index = pycopia.SMI.Objects.IndexObjects([hpicfEntityIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 4, 1])
	access = 2
	columns = {'hpicfEntityIndex': hpicfEntityIndex, 'hpicfEntityFunction': hpicfEntityFunction, 'hpicfEntityObjectId': hpicfEntityObjectId, 'hpicfEntityDescr': hpicfEntityDescr, 'hpicfEntityTimestamp': hpicfEntityTimestamp}


class hpicfSlotMapEntry(RowObject):
	status = 2
	index = pycopia.SMI.Objects.IndexObjects([hpicfSlotMapSlot, hpicfSlotMapEntity], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 5, 1])
	access = 2
	columns = {'hpicfSlotMapSlot': hpicfSlotMapSlot, 'hpicfSlotMapEntity': hpicfSlotMapEntity}


class hpicfSensorEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([hpicfSensorIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 6, 1])
	access = 2
	columns = {'hpicfSensorIndex': hpicfSensorIndex, 'hpicfSensorObjectId': hpicfSensorObjectId, 'hpicfSensorNumber': hpicfSensorNumber, 'hpicfSensorStatus': hpicfSensorStatus, 'hpicfSensorWarnings': hpicfSensorWarnings, 'hpicfSensorFailures': hpicfSensorFailures, 'hpicfSensorDescr': hpicfSensorDescr}


class hpicfChassisAddrEntry(RowObject):
	status = 2
	index = pycopia.SMI.Objects.IndexObjects([hpicfChasAddrType, hpicfChasAddrAddress], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 2, 7, 1])
	access = 2
	columns = {'hpicfChasAddrType': hpicfChasAddrType, 'hpicfChasAddrAddress': hpicfChasAddrAddress, 'hpicfChasAddrEntity': hpicfChasAddrEntity}


# notifications (traps) 
class hpicfSensorTrap(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 12, 1, 0, 3])

# groups 
class hpicfChassisBasicGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 3, 1, 2, 1])
	group = [hpicfChassisId, hpicfChassisNumSlots, hpicfSlotIndex, hpicfSlotObjectId, hpicfSlotLastChange, hpicfSlotDescr, hpicfEntityIndex, hpicfEntityFunction, hpicfEntityObjectId, hpicfEntityDescr, hpicfEntityTimestamp, hpicfSlotMapSlot, hpicfSlotMapEntity]

class hpicfSensorGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 3, 1, 2, 2])
	group = [hpicfSensorIndex, hpicfSensorObjectId, hpicfSensorNumber, hpicfSensorStatus, hpicfSensorWarnings, hpicfSensorFailures, hpicfSensorDescr]

class hpicfChassisAddrGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 3, 1, 2, 3])
	group = [hpicfChasAddrEntity]

class hpicfSensorNotifyGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 3, 1, 2, 4])
	group = [hpicfSensorTrap]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
