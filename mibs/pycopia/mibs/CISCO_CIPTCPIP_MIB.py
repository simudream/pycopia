# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, Counter32, Counter64, Integer32, Gauge32, IpAddress
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from CISCO_SMI import ciscoMgmt
from IF_MIB import ifIndex

class CISCO_CIPTCPIP_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/site/CISCO-CIPTCPIP-MIB'
	conformance = 3
	name = 'CISCO-CIPTCPIP-MIB'
	language = 2
	description = 'This is the MIB module for objects used to manage\nthe cisco TCP/IP stack running on the Cisco Mainframe\nChannel Connection (CMCC) board.\n\nThe First application to use this stack is the IBM\nTCP-Offload feature. The main idea with this application \nis to replace the TCP/IP stack on the IBM host with a \nprotocol requiring lower host CPU utilization, and have \nthe TCP/IP processing done on the router.\n\nThere are multiple sets of MIB-II statistics stored by the \nTCP/IP implementation. Each instance of the MIB-II objects\ncorresponds to an instantiation of the TCP/IP stack which is \nbased on the IP address of the stack.\n\nThe IP routing table is not supported here.'

# nodes
class ciscoCipTcpIpMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32])
	name = 'ciscoCipTcpIpMIB'

class cipTcpIpObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1])
	name = 'cipTcpIpObjects'

class cipIpObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 1])
	name = 'cipIpObjects'

class cipTcpObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 2])
	name = 'cipTcpObjects'

class cipIcmpObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 3])
	name = 'cipIcmpObjects'

class cipUdpObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 4])
	name = 'cipUdpObjects'

class ciscoCipTcpIpMibConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 2])
	name = 'ciscoCipTcpIpMibConformance'

class ciscoCipTcpIpMibCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 2, 1])
	name = 'ciscoCipTcpIpMibCompliances'

class ciscoCipTcpIpMibGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 2, 2])
	name = 'ciscoCipTcpIpMibGroups'


# macros
# types 
# scalars 
# columns
class cipIpAddress(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 1, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class cipIpForwarding(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 1, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'forwarding'), Enum(2, 'notForwarding')]


class cipIpDefaultTTL(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 1, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class cipIpInReceives(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 1, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipIpInHdrErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 1, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipIpInAddrErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 1, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipIpForwDatagrams(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 1, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipIpInUnknownProtos(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 1, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipIpInDiscards(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 1, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipIpInDelivers(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 1, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipIpOutRequests(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 1, 1, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipIpOutDiscards(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 1, 1, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipIpOutNoRoutes(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 1, 1, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipIpReasmTimeout(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 1, 1, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class cipIpReasmReqds(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 1, 1, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipIpReasmOKs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 1, 1, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipIpReasmFails(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 1, 1, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipIpFragOKs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 1, 1, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipIpFragFails(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 1, 1, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipIpFragCreates(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 1, 1, 1, 20])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipIpRoutingDiscards(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 1, 1, 1, 21])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipTcpRtoAlgorithm(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 2, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'constant'), Enum(3, 'rsre'), Enum(4, 'vanj')]


class cipTcpRtoMin(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 2, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = 'milliseconds'


class cipTcpRtoMax(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 2, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = 'milliseconds'


class cipTcpMaxConn(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 2, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class cipTcpActiveOpens(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 2, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipTcpPassiveOpens(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 2, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipTcpAttemptFails(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 2, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipTcpEstabResets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 2, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipTcpCurrEstab(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 2, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class cipTcpInSegs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 2, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipTcpOutSegs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 2, 1, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipTcpRetransSegs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 2, 1, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipTcpInErrs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 2, 1, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipTcpOutRsts(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 2, 1, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipTcpConnLocalPort(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 2, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class cipTcpConnRemAddress(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 2, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class cipTcpConnRemPort(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 2, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class cipTcpConnState(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 2, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'closed'), Enum(2, 'listen'), Enum(3, 'synSent'), Enum(4, 'synReceived'), Enum(5, 'established'), Enum(6, 'finWait1'), Enum(7, 'finWait2'), Enum(8, 'closeWait'), Enum(9, 'lastAck'), Enum(10, 'closing'), Enum(11, 'timeWait'), Enum(12, 'deleteTCB')]


class cipTcpConnInHCBytes(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 2, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter64
	access = 4
	units = 'octets'


class cipTcpConnInBytes(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 2, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'octets'


class cipTcpConnOutHCBytes(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 2, 2, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter64
	access = 4
	units = 'octets'


class cipTcpConnOutBytes(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 2, 2, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'octets'


class cipIcmpInMsgs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 3, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipIcmpInErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 3, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipIcmpInDestUnreachs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 3, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipIcmpInTimeExcds(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 3, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipIcmpInParmProbs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 3, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipIcmpInSrcQuenchs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 3, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipIcmpInRedirects(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 3, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipIcmpInEchos(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 3, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipIcmpInAddrMaskReps(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 3, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipIcmpOutMsgs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 3, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipIcmpOutErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 3, 1, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipIcmpOutDestUnreachs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 3, 1, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipIcmpOutEchos(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 3, 1, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipIcmpOutEchoReps(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 3, 1, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipIcmpOutTimestamps(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 3, 1, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipIcmpOutTimestampReps(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 3, 1, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipIcmpOutAddrMasks(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 3, 1, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipIcmpOutAddrMaskReps(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 3, 1, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipUdpInDatagrams(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 4, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipUdpNoPorts(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 4, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipUdpInErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 4, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipUdpOutDatagrams(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 4, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cipUdpLocalPort(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 4, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


# rows 
class cipIpEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, cipIpAddress], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 1, 1, 1])
	access = 2
	columns = {'cipIpAddress': cipIpAddress, 'cipIpForwarding': cipIpForwarding, 'cipIpDefaultTTL': cipIpDefaultTTL, 'cipIpInReceives': cipIpInReceives, 'cipIpInHdrErrors': cipIpInHdrErrors, 'cipIpInAddrErrors': cipIpInAddrErrors, 'cipIpForwDatagrams': cipIpForwDatagrams, 'cipIpInUnknownProtos': cipIpInUnknownProtos, 'cipIpInDiscards': cipIpInDiscards, 'cipIpInDelivers': cipIpInDelivers, 'cipIpOutRequests': cipIpOutRequests, 'cipIpOutDiscards': cipIpOutDiscards, 'cipIpOutNoRoutes': cipIpOutNoRoutes, 'cipIpReasmTimeout': cipIpReasmTimeout, 'cipIpReasmReqds': cipIpReasmReqds, 'cipIpReasmOKs': cipIpReasmOKs, 'cipIpReasmFails': cipIpReasmFails, 'cipIpFragOKs': cipIpFragOKs, 'cipIpFragFails': cipIpFragFails, 'cipIpFragCreates': cipIpFragCreates, 'cipIpRoutingDiscards': cipIpRoutingDiscards}


class cipTcpStackEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, cipIpAddress], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 2, 1, 1])
	access = 2
	columns = {'cipTcpRtoAlgorithm': cipTcpRtoAlgorithm, 'cipTcpRtoMin': cipTcpRtoMin, 'cipTcpRtoMax': cipTcpRtoMax, 'cipTcpMaxConn': cipTcpMaxConn, 'cipTcpActiveOpens': cipTcpActiveOpens, 'cipTcpPassiveOpens': cipTcpPassiveOpens, 'cipTcpAttemptFails': cipTcpAttemptFails, 'cipTcpEstabResets': cipTcpEstabResets, 'cipTcpCurrEstab': cipTcpCurrEstab, 'cipTcpInSegs': cipTcpInSegs, 'cipTcpOutSegs': cipTcpOutSegs, 'cipTcpRetransSegs': cipTcpRetransSegs, 'cipTcpInErrs': cipTcpInErrs, 'cipTcpOutRsts': cipTcpOutRsts}


class cipTcpConnEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, cipIpAddress, cipTcpConnLocalPort, cipTcpConnRemAddress, cipTcpConnRemPort], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 2, 2, 1])
	access = 2
	columns = {'cipTcpConnLocalPort': cipTcpConnLocalPort, 'cipTcpConnRemAddress': cipTcpConnRemAddress, 'cipTcpConnRemPort': cipTcpConnRemPort, 'cipTcpConnState': cipTcpConnState, 'cipTcpConnInHCBytes': cipTcpConnInHCBytes, 'cipTcpConnInBytes': cipTcpConnInBytes, 'cipTcpConnOutHCBytes': cipTcpConnOutHCBytes, 'cipTcpConnOutBytes': cipTcpConnOutBytes}


class cipIcmpEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, cipIpAddress], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 3, 1, 1])
	access = 2
	columns = {'cipIcmpInMsgs': cipIcmpInMsgs, 'cipIcmpInErrors': cipIcmpInErrors, 'cipIcmpInDestUnreachs': cipIcmpInDestUnreachs, 'cipIcmpInTimeExcds': cipIcmpInTimeExcds, 'cipIcmpInParmProbs': cipIcmpInParmProbs, 'cipIcmpInSrcQuenchs': cipIcmpInSrcQuenchs, 'cipIcmpInRedirects': cipIcmpInRedirects, 'cipIcmpInEchos': cipIcmpInEchos, 'cipIcmpInAddrMaskReps': cipIcmpInAddrMaskReps, 'cipIcmpOutMsgs': cipIcmpOutMsgs, 'cipIcmpOutErrors': cipIcmpOutErrors, 'cipIcmpOutDestUnreachs': cipIcmpOutDestUnreachs, 'cipIcmpOutEchos': cipIcmpOutEchos, 'cipIcmpOutEchoReps': cipIcmpOutEchoReps, 'cipIcmpOutTimestamps': cipIcmpOutTimestamps, 'cipIcmpOutTimestampReps': cipIcmpOutTimestampReps, 'cipIcmpOutAddrMasks': cipIcmpOutAddrMasks, 'cipIcmpOutAddrMaskReps': cipIcmpOutAddrMaskReps}


class cipUdpEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, cipIpAddress], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 4, 1, 1])
	access = 2
	columns = {'cipUdpInDatagrams': cipUdpInDatagrams, 'cipUdpNoPorts': cipUdpNoPorts, 'cipUdpInErrors': cipUdpInErrors, 'cipUdpOutDatagrams': cipUdpOutDatagrams}


class cipUdpListenersEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, cipIpAddress, cipUdpLocalPort], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 1, 4, 2, 1])
	access = 2
	columns = {'cipUdpLocalPort': cipUdpLocalPort}


# notifications (traps) 
# groups 
class ciscoCipTcpIpGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 32, 2, 2, 1])
	group = [cipIpForwarding, cipIpDefaultTTL, cipIpInReceives, cipIpInHdrErrors, cipIpInAddrErrors, cipIpForwDatagrams, cipIpInUnknownProtos, cipIpInDiscards, cipIpInDelivers, cipIpOutRequests, cipIpOutDiscards, cipIpOutNoRoutes, cipIpReasmTimeout, cipIpReasmReqds, cipIpReasmOKs, cipIpReasmFails, cipIpFragOKs, cipIpFragFails, cipIpFragCreates, cipIpRoutingDiscards, cipTcpRtoAlgorithm, cipTcpRtoMin, cipTcpRtoMax, cipTcpMaxConn, cipTcpActiveOpens, cipTcpPassiveOpens, cipTcpAttemptFails, cipTcpEstabResets, cipTcpCurrEstab, cipTcpInSegs, cipTcpOutSegs, cipTcpRetransSegs, cipTcpInErrs, cipTcpOutRsts, cipTcpConnState, cipTcpConnInBytes, cipTcpConnInHCBytes, cipTcpConnOutBytes, cipTcpConnOutHCBytes, cipIcmpInMsgs, cipIcmpInErrors, cipIcmpInDestUnreachs, cipIcmpInTimeExcds, cipIcmpInParmProbs, cipIcmpInSrcQuenchs, cipIcmpInRedirects, cipIcmpInEchos, cipIcmpInAddrMaskReps, cipIcmpOutMsgs, cipIcmpOutErrors, cipIcmpOutDestUnreachs, cipIcmpOutEchos, cipIcmpOutEchoReps, cipIcmpOutTimestamps, cipIcmpOutTimestampReps, cipIcmpOutAddrMasks, cipIcmpOutAddrMaskReps, cipUdpInDatagrams, cipUdpNoPorts, cipUdpInErrors, cipUdpOutDatagrams, cipUdpLocalPort]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
