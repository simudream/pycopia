# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, Integer32, Gauge32, Counter32
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from CISCO_SMI import ciscoMgmt
from SNMPv2_TC import MacAddress, TEXTUAL_CONVENTION
from IF_MIB import ifIndex

class CISCO_IP_STAT_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/site/CISCO-IP-STAT-MIB'
	name = 'CISCO-IP-STAT-MIB'
	language = 2
	description = ' Cisco IP Statistics MIB - Overview\n\nThis MIB incorporates objects to provide support for the Cisco IP statistics\nas implemented in command interfaces\n\nip accounting [ mac-address {input | ouput } |\n\t\t   precedence { input | ouput } ]\n\nThe above CLI provides additional IP statistics categorized by\nprecedence of IP packets, as well as the MAC address associated\nwith IP packets.  This is a supplement to those defined in\nOLD-CISCO-IP-MIB.my.'

# nodes
class ciscoIpStatMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 84])
	name = 'ciscoIpStatMIB'

class ciscoIpStatMIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 84, 1])
	name = 'ciscoIpStatMIBObjects'

class cipPrecedence(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 84, 1, 1])
	name = 'cipPrecedence'

class cipMacIf(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 84, 1, 2])
	name = 'cipMacIf'

class ciscoIpStatMIBConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 84, 3])
	name = 'ciscoIpStatMIBConformance'

class ciscoIpStatMIBCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 84, 3, 1])
	name = 'ciscoIpStatMIBCompliances'

class ciscoIpStatMIBGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 84, 3, 2])
	name = 'ciscoIpStatMIBGroups'


# macros
# types 

class PacketSource(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'input'), Enum(2, 'output')]

# scalars 
# columns
class cipPrecedenceDirection(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 84, 1, 1, 1, 1, 1])
	syntaxobject = PacketSource


class cipPrecedenceIpPrecedence(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 84, 1, 1, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class cipPrecedenceSwitchedPkts(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 84, 1, 1, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'packets'


class cipPrecedenceSwitchedBytes(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 84, 1, 1, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'bytes'


class cipMacDirection(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 84, 1, 2, 1, 1, 1])
	syntaxobject = PacketSource


class cipMacAddress(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 84, 1, 2, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.MacAddress


class cipMacSwitchedPkts(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 84, 1, 2, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'packets'


class cipMacSwitchedBytes(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 84, 1, 2, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'bytes'


class cipMacFreeDirection(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 84, 1, 2, 2, 1, 1])
	syntaxobject = PacketSource


class cipMacFreeCount(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 84, 1, 2, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


# rows 
class cipPrecedenceEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, cipPrecedenceDirection, cipPrecedenceIpPrecedence], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 84, 1, 1, 1, 1])
	access = 2
	columns = {'cipPrecedenceDirection': cipPrecedenceDirection, 'cipPrecedenceIpPrecedence': cipPrecedenceIpPrecedence, 'cipPrecedenceSwitchedPkts': cipPrecedenceSwitchedPkts, 'cipPrecedenceSwitchedBytes': cipPrecedenceSwitchedBytes}


class cipMacEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, cipMacDirection, cipMacAddress], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 84, 1, 2, 1, 1])
	access = 2
	columns = {'cipMacDirection': cipMacDirection, 'cipMacAddress': cipMacAddress, 'cipMacSwitchedPkts': cipMacSwitchedPkts, 'cipMacSwitchedBytes': cipMacSwitchedBytes}


class cipMacFreeEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, cipMacFreeDirection], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 84, 1, 2, 2, 1])
	access = 2
	columns = {'cipMacFreeDirection': cipMacFreeDirection, 'cipMacFreeCount': cipMacFreeCount}


# notifications (traps) 
# groups 
class ciscoIpStatMIBGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 84, 3, 2, 1])
	group = [cipPrecedenceSwitchedPkts, cipPrecedenceSwitchedBytes, cipMacSwitchedPkts, cipMacSwitchedBytes, cipMacFreeCount]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
