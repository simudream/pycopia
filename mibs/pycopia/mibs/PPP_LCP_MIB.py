# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from RFC_1212 import OBJECT_TYPE
from RFC1213_MIB import ifIndex, transmission
from RFC1155_SMI import Counter

class PPP_LCP_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/PPP-LCP-MIB'
	conformance = 2
	name = 'PPP-LCP-MIB'
	language = 1

# nodes
class ppp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23])
	name = 'ppp'

class pppLcp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 1])
	name = 'pppLcp'

class pppLink(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 1, 1])
	name = 'pppLink'

class pppLqr(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 1, 2])
	name = 'pppLqr'

class pppTests(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 1, 3])
	name = 'pppTests'

class pppEchoTest(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 1, 3, 1])
	name = 'pppEchoTest'

class pppDiscardTest(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 1, 3, 2])
	name = 'pppDiscardTest'


# macros
# types 
# scalars 
# columns
class pppLinkStatusPhysicalIndex(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class pppLinkStatusBadAddresses(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class pppLinkStatusBadControls(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class pppLinkStatusPacketTooLongs(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class pppLinkStatusBadFCSs(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class pppLinkStatusLocalMRU(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class pppLinkStatusRemoteMRU(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class pppLinkStatusLocalToPeerACCMap(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class pppLinkStatusPeerToLocalACCMap(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class pppLinkStatusLocalToRemoteProtocolCompression(ColumnObject):
	status = 3
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class pppLinkStatusRemoteToLocalProtocolCompression(ColumnObject):
	status = 3
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class pppLinkStatusLocalToRemoteACCompression(ColumnObject):
	status = 3
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class pppLinkStatusRemoteToLocalACCompression(ColumnObject):
	status = 3
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class pppLinkStatusTransmitFcsSize(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class pppLinkStatusReceiveFcsSize(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class pppLinkConfigInitialMRU(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class pppLinkConfigReceiveACCMap(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class pppLinkConfigTransmitACCMap(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class pppLinkConfigMagicNumber(ColumnObject):
	status = 3
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'false'), Enum(2, 'true')]


class pppLinkConfigFcsSize(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class pppLqrQuality(ColumnObject):
	status = 3
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 1, 2, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'good'), Enum(2, 'bad'), Enum(3, 'not-determined')]


class pppLqrInGoodOctets(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 1, 2, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class pppLqrLocalPeriod(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 1, 2, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class pppLqrRemotePeriod(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 1, 2, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class pppLqrOutLQRs(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 1, 2, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class pppLqrInLQRs(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 1, 2, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class pppLqrConfigPeriod(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 1, 2, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class pppLqrConfigStatus(ColumnObject):
	status = 3
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 1, 2, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'disabled'), Enum(2, 'enabled')]


class pppLqrExtnsLastReceivedLqrPacket(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 1, 2, 3, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


# rows 
class pppLinkStatusEntry(RowObject):
	status = 3
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1])
	access = 2
	columns = {'pppLinkStatusPhysicalIndex': pppLinkStatusPhysicalIndex, 'pppLinkStatusBadAddresses': pppLinkStatusBadAddresses, 'pppLinkStatusBadControls': pppLinkStatusBadControls, 'pppLinkStatusPacketTooLongs': pppLinkStatusPacketTooLongs, 'pppLinkStatusBadFCSs': pppLinkStatusBadFCSs, 'pppLinkStatusLocalMRU': pppLinkStatusLocalMRU, 'pppLinkStatusRemoteMRU': pppLinkStatusRemoteMRU, 'pppLinkStatusLocalToPeerACCMap': pppLinkStatusLocalToPeerACCMap, 'pppLinkStatusPeerToLocalACCMap': pppLinkStatusPeerToLocalACCMap, 'pppLinkStatusLocalToRemoteProtocolCompression': pppLinkStatusLocalToRemoteProtocolCompression, 'pppLinkStatusRemoteToLocalProtocolCompression': pppLinkStatusRemoteToLocalProtocolCompression, 'pppLinkStatusLocalToRemoteACCompression': pppLinkStatusLocalToRemoteACCompression, 'pppLinkStatusRemoteToLocalACCompression': pppLinkStatusRemoteToLocalACCompression, 'pppLinkStatusTransmitFcsSize': pppLinkStatusTransmitFcsSize, 'pppLinkStatusReceiveFcsSize': pppLinkStatusReceiveFcsSize}


class pppLinkConfigEntry(RowObject):
	status = 3
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 2, 1])
	access = 2
	columns = {'pppLinkConfigInitialMRU': pppLinkConfigInitialMRU, 'pppLinkConfigReceiveACCMap': pppLinkConfigReceiveACCMap, 'pppLinkConfigTransmitACCMap': pppLinkConfigTransmitACCMap, 'pppLinkConfigMagicNumber': pppLinkConfigMagicNumber, 'pppLinkConfigFcsSize': pppLinkConfigFcsSize}


class pppLqrEntry(RowObject):
	status = 3
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 1, 2, 1, 1])
	access = 2
	columns = {'pppLqrQuality': pppLqrQuality, 'pppLqrInGoodOctets': pppLqrInGoodOctets, 'pppLqrLocalPeriod': pppLqrLocalPeriod, 'pppLqrRemotePeriod': pppLqrRemotePeriod, 'pppLqrOutLQRs': pppLqrOutLQRs, 'pppLqrInLQRs': pppLqrInLQRs}


class pppLqrConfigEntry(RowObject):
	status = 3
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 1, 2, 2, 1])
	access = 2
	columns = {'pppLqrConfigPeriod': pppLqrConfigPeriod, 'pppLqrConfigStatus': pppLqrConfigStatus}


class pppLqrExtnsEntry(RowObject):
	status = 3
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 1, 2, 3, 1])
	access = 2
	columns = {'pppLqrExtnsLastReceivedLqrPacket': pppLqrExtnsLastReceivedLqrPacket}


# notifications (traps) 
# groups 
# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
