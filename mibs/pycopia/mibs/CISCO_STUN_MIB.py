# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, NOTIFICATION_TYPE, Counter32, IpAddress
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from CISCO_SMI import ciscoMgmt
from SNMPv2_TC import TruthValue
from IF_MIB import ifIndex, InterfaceIndex

class CISCO_STUN_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/site/CISCO-STUN-MIB'
	conformance = 4
	name = 'CISCO-STUN-MIB'
	language = 2
	description = "The MIB module for serial Tunneling.\n\nOverview of STUN MIB\n\nMIB description\n\nThe STUN MIB provides the configuration and operational information \non Cisco's serial tunnelling implementation.  The following entities\nare managed:\n 1) Global STUN information\n 2) STUN groups\n 3) STUN ports\n 4) STUN routes\n\nThe following example configuration shows how the STUN MIB returns\nSTUN information, from either CISCO A or CISCO B.\n\n HOST == SDLC == Cisco A == IP Network == Cisco B == SDLC  == SDLC\n         line                                        line     device\n\n1) The STUN global entry identifies the IP address by which the\n   router is known to other STUN peers.\n2) The STUN group table identifies the STUN group number and protocol\n   type that Cisco A and Cisco B use to route SDLC traffic over the \n   IP network.  The table contains an entry for each STUN group\n   defined on the router.\n3) The STUN port table identifies the serial interface to the SDLC \n   line for which the router is doing serial tunnelling.  The MIB also\n   identifies the STUN group this interface is defined for, and\n   identifies the default routing for unrecognized SDLC addresses.\n   There is a port entry for each STUN-enabled interface on the router.\n4) The STUN route table has an entry for each address defined for\n   routing within the STUN group, and an entry for the default routing\n   if the 'stun route all' command is configured.  The route entry\n   includes identification of the STUN peer, priority, state, whether\n   local acknowledgment is enabled, and packet and byte counters."

# nodes
class ciscoStunMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 30])
	name = 'ciscoStunMIB'

class stunObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 30, 1])
	name = 'stunObjects'

class stunGlobal(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 30, 1, 1])
	name = 'stunGlobal'

class stunGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 30, 1, 2])
	name = 'stunGroups'

class stunPorts(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 30, 1, 3])
	name = 'stunPorts'

class stunRoutes(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 30, 1, 4])
	name = 'stunRoutes'

class stunNotificationPrefix(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 30, 2])
	name = 'stunNotificationPrefix'

class stunNotifications(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 30, 2, 0])
	name = 'stunNotifications'

class stunMibConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 30, 3])
	name = 'stunMibConformance'

class stunMibCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 30, 3, 1])
	name = 'stunMibCompliances'

class stunMibGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 30, 3, 2])
	name = 'stunMibGroups'


# macros
# types 
# scalars 
class stunIPAddr(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 30, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


# columns
class stunGroupIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 30, 1, 2, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class stunProtocolType(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 30, 1, 2, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'basic'), Enum(2, 'sdlc'), Enum(3, 'sdlctg'), Enum(4, 'custom')]


class stunPortGroupIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 30, 1, 3, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class stunPortDefaultPeerType(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 30, 1, 3, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'ip'), Enum(3, 'direct'), Enum(4, 'frameRelay')]


class stunPortDefaultPeerIP(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 30, 1, 3, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class stunPortDefaultPeerSerialInterface(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 30, 1, 3, 1, 1, 4])
	syntaxobject = InterfaceIndex


class stunRouteStationAddress(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 30, 1, 4, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class stunRouteType(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 30, 1, 4, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'ip'), Enum(3, 'direct'), Enum(4, 'frameRelay')]


class stunRouteRemoteIP(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 30, 1, 4, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class stunRouteSerialInterface(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 30, 1, 4, 1, 1, 4])
	syntaxobject = InterfaceIndex


class stunRoutePriority(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 30, 1, 4, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'low'), Enum(2, 'normal'), Enum(3, 'medium'), Enum(4, 'high')]


class stunRoutePeerState(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 30, 1, 4, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'dead'), Enum(2, 'closed'), Enum(3, 'opening'), Enum(4, 'openWait'), Enum(5, 'connected'), Enum(6, 'direct')]


class stunRouteLocalAck(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 30, 1, 4, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class stunRouteRxPackets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 30, 1, 4, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class stunRouteTxPackets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 30, 1, 4, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class stunRouteRxBytes(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 30, 1, 4, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class stunRouteTxBytes(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 30, 1, 4, 1, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


# rows 
class stunGroupEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([stunGroupIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 30, 1, 2, 1, 1])
	access = 2
	columns = {'stunGroupIndex': stunGroupIndex, 'stunProtocolType': stunProtocolType}


class stunPortEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 30, 1, 3, 1, 1])
	access = 2
	columns = {'stunPortGroupIndex': stunPortGroupIndex, 'stunPortDefaultPeerType': stunPortDefaultPeerType, 'stunPortDefaultPeerIP': stunPortDefaultPeerIP, 'stunPortDefaultPeerSerialInterface': stunPortDefaultPeerSerialInterface}


class stunRouteEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([stunGroupIndex, stunRouteStationAddress], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 30, 1, 4, 1, 1])
	access = 2
	columns = {'stunRouteStationAddress': stunRouteStationAddress, 'stunRouteType': stunRouteType, 'stunRouteRemoteIP': stunRouteRemoteIP, 'stunRouteSerialInterface': stunRouteSerialInterface, 'stunRoutePriority': stunRoutePriority, 'stunRoutePeerState': stunRoutePeerState, 'stunRouteLocalAck': stunRouteLocalAck, 'stunRouteRxPackets': stunRouteRxPackets, 'stunRouteTxPackets': stunRouteTxPackets, 'stunRouteRxBytes': stunRouteRxBytes, 'stunRouteTxBytes': stunRouteTxBytes}


# notifications (traps) 
class stunPeerStateChangeNotification(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 30, 2, 0, 1])

# groups 
class stunGlobalGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 30, 3, 2, 1])
	group = [stunIPAddr]

class stunGroupGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 30, 3, 2, 2])
	group = [stunProtocolType]

class stunPortGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 30, 3, 2, 3])
	group = [stunPortGroupIndex, stunPortDefaultPeerType, stunPortDefaultPeerIP, stunPortDefaultPeerSerialInterface]

class stunRouteGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 30, 3, 2, 4])
	group = [stunRouteType, stunRouteRemoteIP, stunRouteSerialInterface, stunRoutePriority, stunRoutePeerState, stunRouteLocalAck, stunRouteRxPackets, stunRouteTxPackets, stunRouteRxBytes, stunRouteTxBytes]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
