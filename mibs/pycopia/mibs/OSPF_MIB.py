# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, Counter32, Gauge32, Integer32, Unsigned32, IpAddress, mib_2
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from SNMPv2_TC import TEXTUAL_CONVENTION, TruthValue, RowStatus, TimeStamp
from IF_MIB import InterfaceIndexOrZero

class OSPF_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/OSPF-MIB'
	conformance = 5
	name = 'OSPF-MIB'
	language = 2
	description = 'The MIB module to describe the OSPF Version 2\nProtocol.  Note that some objects in this MIB\nmodule may pose a significant security risk.\nRefer to the Security Considerations section\nin RFC 4750 for more information.\n\n\n\nCopyright (C) The IETF Trust (2006).\nThis version of this MIB module is part of\nRFC 4750;  see the RFC itself for full legal\nnotices.'

# nodes
class ospf(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14])
	name = 'ospf'

class ospfGeneralGroup(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 1])
	name = 'ospfGeneralGroup'

class ospfRouteGroup(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 13])
	name = 'ospfRouteGroup'

class ospfIntraArea(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 13, 1])
	name = 'ospfIntraArea'

class ospfInterArea(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 13, 2])
	name = 'ospfInterArea'

class ospfExternalType1(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 13, 3])
	name = 'ospfExternalType1'

class ospfExternalType2(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 13, 4])
	name = 'ospfExternalType2'

class ospfConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 15])
	name = 'ospfConformance'

class ospfGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 15, 1])
	name = 'ospfGroups'

class ospfCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 15, 2])
	name = 'ospfCompliances'


# macros
# types 

class AreaID(pycopia.SMI.Basetypes.IpAddress):
	status = 1


class RouterID(pycopia.SMI.Basetypes.IpAddress):
	status = 1


class Metric(pycopia.SMI.Basetypes.Integer32):
	status = 1
	ranges = Ranges(Range(0, 65535))
	format = 'd-0'


class BigMetric(pycopia.SMI.Basetypes.Integer32):
	status = 1
	ranges = Ranges(Range(0, 16777215))
	format = 'd-0'


class Status(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class PositiveInteger(pycopia.SMI.Basetypes.Integer32):
	status = 1
	ranges = Ranges(Range(0, 2147483647))
	format = 'd-0'


class HelloRange(pycopia.SMI.Basetypes.Integer32):
	status = 1
	ranges = Ranges(Range(1, 65535))
	format = 'd-0'


class UpToMaxAge(pycopia.SMI.Basetypes.Integer32):
	status = 1
	ranges = Ranges(Range(0, 3600))
	format = 'd-0'


class DesignatedRouterPriority(pycopia.SMI.Basetypes.Integer32):
	status = 1
	ranges = Ranges(Range(0, 255))
	format = 'd-0'


class TOSType(pycopia.SMI.Basetypes.Integer32):
	status = 1
	ranges = Ranges(Range(0, 30))
	format = 'd-0'


class OspfAuthenticationType(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(0, 'none'), Enum(1, 'simplePassword'), Enum(2, 'md5')]

# scalars 
class ospfRouterId(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 1, 1])
	syntaxobject = RouterID


class ospfAdminStat(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 1, 2])
	syntaxobject = Status


class ospfVersionNumber(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(2, 'version2')]


class ospfAreaBdrRtrStatus(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class ospfASBdrRtrStatus(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class ospfExternLsaCount(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class ospfExternLsaCksumSum(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ospfTOSSupport(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class ospfOriginateNewLsas(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ospfRxNewLsas(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ospfExtLsdbLimit(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ospfMulticastExtensions(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ospfExitOverflowInterval(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 1, 13])
	syntaxobject = PositiveInteger


class ospfDemandExtensions(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class ospfRFC1583Compatibility(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class ospfOpaqueLsaSupport(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class ospfReferenceBandwidth(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32
	access = 5
	units = 'kilobits per second'


class ospfRestartSupport(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'none'), Enum(2, 'plannedOnly'), Enum(3, 'plannedAndUnplanned')]


class ospfRestartInterval(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class ospfRestartStrictLsaChecking(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 1, 20])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class ospfRestartStatus(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 1, 21])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'notRestarting'), Enum(2, 'plannedRestart'), Enum(3, 'unplannedRestart')]


class ospfRestartAge(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 1, 22])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32
	access = 4
	units = 'seconds'


class ospfRestartExitReason(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 1, 23])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'none'), Enum(2, 'inProgress'), Enum(3, 'completed'), Enum(4, 'timedOut'), Enum(5, 'topologyChanged')]


class ospfAsLsaCount(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 1, 24])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class ospfAsLsaCksumSum(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 1, 25])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class ospfStubRouterSupport(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 1, 26])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class ospfStubRouterAdvertisement(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 1, 27])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'doNotAdvertise'), Enum(2, 'advertise')]


class ospfDiscontinuityTime(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 1, 28])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


# columns
class ospfAreaId(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 2, 1, 1])
	syntaxobject = AreaID


class ospfAuthType(ColumnObject):
	access = 5
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 2, 1, 2])
	syntaxobject = OspfAuthenticationType


class ospfImportAsExtern(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'importExternal'), Enum(2, 'importNoExternal'), Enum(3, 'importNssa')]


class ospfSpfRuns(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ospfAreaBdrRtrCount(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class ospfAsBdrRtrCount(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class ospfAreaLsaCount(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 2, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class ospfAreaLsaCksumSum(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 2, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ospfAreaSummary(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 2, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'noAreaSummary'), Enum(2, 'sendAreaSummary')]


class ospfAreaStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 2, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class ospfAreaNssaTranslatorRole(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 2, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'always'), Enum(2, 'candidate')]


class ospfAreaNssaTranslatorState(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 2, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'elected'), Enum(3, 'disabled')]


class ospfAreaNssaTranslatorStabilityInterval(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 2, 1, 13])
	syntaxobject = PositiveInteger
	access = 5
	units = 'seconds'


class ospfAreaNssaTranslatorEvents(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 2, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ospfStubAreaId(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 3, 1, 1])
	syntaxobject = AreaID


class ospfStubTOS(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 3, 1, 2])
	syntaxobject = TOSType


class ospfStubMetric(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 3, 1, 3])
	syntaxobject = BigMetric


class ospfStubStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 3, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class ospfStubMetricType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 3, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'ospfMetric'), Enum(2, 'comparableCost'), Enum(3, 'nonComparable')]


class ospfLsdbAreaId(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 4, 1, 1])
	syntaxobject = AreaID


class ospfLsdbType(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 4, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'routerLink'), Enum(2, 'networkLink'), Enum(3, 'summaryLink'), Enum(4, 'asSummaryLink'), Enum(5, 'asExternalLink'), Enum(6, 'multicastLink'), Enum(7, 'nssaExternalLink'), Enum(10, 'areaOpaqueLink')]


class ospfLsdbLsid(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 4, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ospfLsdbRouterId(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 4, 1, 4])
	syntaxobject = RouterID


class ospfLsdbSequence(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 4, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ospfLsdbAge(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 4, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = 'seconds'


class ospfLsdbChecksum(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 4, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ospfLsdbAdvertisement(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 4, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class ospfAreaRangeAreaId(ColumnObject):
	access = 4
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 5, 1, 1])
	syntaxobject = AreaID


class ospfAreaRangeNet(ColumnObject):
	access = 4
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 5, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ospfAreaRangeMask(ColumnObject):
	access = 5
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 5, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ospfAreaRangeStatus(ColumnObject):
	access = 5
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 5, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class ospfAreaRangeEffect(ColumnObject):
	status = 5
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 5, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'advertiseMatching'), Enum(2, 'doNotAdvertiseMatching')]


class ospfHostIpAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 6, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ospfHostTOS(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 6, 1, 2])
	syntaxobject = TOSType


class ospfHostMetric(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 6, 1, 3])
	syntaxobject = Metric


class ospfHostStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 6, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class ospfHostAreaID(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 6, 1, 5])
	syntaxobject = AreaID


class ospfHostCfgAreaID(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 6, 1, 6])
	syntaxobject = AreaID


class ospfIfIpAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 7, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ospfAddressLessIf(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 7, 1, 2])
	syntaxobject = InterfaceIndexOrZero


class ospfIfAreaId(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 7, 1, 3])
	syntaxobject = AreaID


class ospfIfType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 7, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'broadcast'), Enum(2, 'nbma'), Enum(3, 'pointToPoint'), Enum(5, 'pointToMultipoint')]


class ospfIfAdminStat(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 7, 1, 5])
	syntaxobject = Status


class ospfIfRtrPriority(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 7, 1, 6])
	syntaxobject = DesignatedRouterPriority


class ospfIfTransitDelay(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 7, 1, 7])
	syntaxobject = UpToMaxAge
	access = 5
	units = 'seconds'


class ospfIfRetransInterval(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 7, 1, 8])
	syntaxobject = UpToMaxAge
	access = 5
	units = 'seconds'


class ospfIfHelloInterval(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 7, 1, 9])
	syntaxobject = HelloRange
	access = 5
	units = 'seconds'


class ospfIfRtrDeadInterval(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 7, 1, 10])
	syntaxobject = PositiveInteger
	access = 5
	units = 'seconds'


class ospfIfPollInterval(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 7, 1, 11])
	syntaxobject = PositiveInteger
	access = 5
	units = 'seconds'


class ospfIfState(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 7, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'down'), Enum(2, 'loopback'), Enum(3, 'waiting'), Enum(4, 'pointToPoint'), Enum(5, 'designatedRouter'), Enum(6, 'backupDesignatedRouter'), Enum(7, 'otherDesignatedRouter')]


class ospfIfDesignatedRouter(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 7, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ospfIfBackupDesignatedRouter(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 7, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ospfIfEvents(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 7, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ospfIfAuthKey(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 7, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class ospfIfStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 7, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class ospfIfMulticastForwarding(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 7, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'blocked'), Enum(2, 'multicast'), Enum(3, 'unicast')]


class ospfIfDemand(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 7, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class ospfIfAuthType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 7, 1, 20])
	syntaxobject = OspfAuthenticationType


class ospfIfLsaCount(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 7, 1, 21])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class ospfIfLsaCksumSum(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 7, 1, 22])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class ospfIfDesignatedRouterId(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 7, 1, 23])
	syntaxobject = RouterID


class ospfIfBackupDesignatedRouterId(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 7, 1, 24])
	syntaxobject = RouterID


class ospfIfMetricIpAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 8, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ospfIfMetricAddressLessIf(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 8, 1, 2])
	syntaxobject = InterfaceIndexOrZero


class ospfIfMetricTOS(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 8, 1, 3])
	syntaxobject = TOSType


class ospfIfMetricValue(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 8, 1, 4])
	syntaxobject = Metric


class ospfIfMetricStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 8, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class ospfVirtIfAreaId(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 9, 1, 1])
	syntaxobject = AreaID


class ospfVirtIfNeighbor(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 9, 1, 2])
	syntaxobject = RouterID


class ospfVirtIfTransitDelay(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 9, 1, 3])
	syntaxobject = UpToMaxAge
	access = 5
	units = 'seconds'


class ospfVirtIfRetransInterval(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 9, 1, 4])
	syntaxobject = UpToMaxAge
	access = 5
	units = 'seconds'


class ospfVirtIfHelloInterval(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 9, 1, 5])
	syntaxobject = HelloRange
	access = 5
	units = 'seconds'


class ospfVirtIfRtrDeadInterval(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 9, 1, 6])
	syntaxobject = PositiveInteger
	access = 5
	units = 'seconds'


class ospfVirtIfState(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 9, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'down'), Enum(4, 'pointToPoint')]


class ospfVirtIfEvents(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 9, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ospfVirtIfAuthKey(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 9, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class ospfVirtIfStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 9, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class ospfVirtIfAuthType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 9, 1, 11])
	syntaxobject = OspfAuthenticationType


class ospfVirtIfLsaCount(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 9, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class ospfVirtIfLsaCksumSum(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 9, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class ospfNbrIpAddr(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 10, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ospfNbrAddressLessIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 10, 1, 2])
	syntaxobject = InterfaceIndexOrZero


class ospfNbrRtrId(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 10, 1, 3])
	syntaxobject = RouterID


class ospfNbrOptions(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 10, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ospfNbrPriority(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 10, 1, 5])
	syntaxobject = DesignatedRouterPriority


class ospfNbrState(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 10, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'down'), Enum(2, 'attempt'), Enum(3, 'init'), Enum(4, 'twoWay'), Enum(5, 'exchangeStart'), Enum(6, 'exchange'), Enum(7, 'loading'), Enum(8, 'full')]


class ospfNbrEvents(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 10, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ospfNbrLsRetransQLen(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 10, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class ospfNbmaNbrStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 10, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class ospfNbmaNbrPermanence(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 10, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'dynamic'), Enum(2, 'permanent')]


class ospfNbrHelloSuppressed(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 10, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class ospfNbrRestartHelperStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 10, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'notHelping'), Enum(2, 'helping')]


class ospfNbrRestartHelperAge(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 10, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32
	access = 4
	units = 'seconds'


class ospfNbrRestartHelperExitReason(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 10, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'none'), Enum(2, 'inProgress'), Enum(3, 'completed'), Enum(4, 'timedOut'), Enum(5, 'topologyChanged')]


class ospfVirtNbrArea(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 11, 1, 1])
	syntaxobject = AreaID


class ospfVirtNbrRtrId(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 11, 1, 2])
	syntaxobject = RouterID


class ospfVirtNbrIpAddr(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 11, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ospfVirtNbrOptions(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 11, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ospfVirtNbrState(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 11, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'down'), Enum(2, 'attempt'), Enum(3, 'init'), Enum(4, 'twoWay'), Enum(5, 'exchangeStart'), Enum(6, 'exchange'), Enum(7, 'loading'), Enum(8, 'full')]


class ospfVirtNbrEvents(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 11, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ospfVirtNbrLsRetransQLen(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 11, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class ospfVirtNbrHelloSuppressed(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 11, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class ospfVirtNbrRestartHelperStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 11, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'notHelping'), Enum(2, 'helping')]


class ospfVirtNbrRestartHelperAge(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 11, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32
	access = 4
	units = 'seconds'


class ospfVirtNbrRestartHelperExitReason(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 11, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'none'), Enum(2, 'inProgress'), Enum(3, 'completed'), Enum(4, 'timedOut'), Enum(5, 'topologyChanged')]


class ospfExtLsdbType(ColumnObject):
	status = 2
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 12, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(5, 'asExternalLink')]


class ospfExtLsdbLsid(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 12, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ospfExtLsdbRouterId(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 12, 1, 3])
	syntaxobject = RouterID


class ospfExtLsdbSequence(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 12, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ospfExtLsdbAge(ColumnObject):
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 12, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = 'seconds'


class ospfExtLsdbChecksum(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 12, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ospfExtLsdbAdvertisement(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 12, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class ospfAreaAggregateAreaID(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 14, 1, 1])
	syntaxobject = AreaID


class ospfAreaAggregateLsdbType(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 14, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(3, 'summaryLink'), Enum(7, 'nssaExternalLink')]


class ospfAreaAggregateNet(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 14, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ospfAreaAggregateMask(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 14, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ospfAreaAggregateStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 14, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class ospfAreaAggregateEffect(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 14, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'advertiseMatching'), Enum(2, 'doNotAdvertiseMatching')]


class ospfAreaAggregateExtRouteTag(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 14, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class ospfLocalLsdbIpAddress(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 17, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ospfLocalLsdbAddressLessIf(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 17, 1, 2])
	syntaxobject = InterfaceIndexOrZero


class ospfLocalLsdbType(ColumnObject):
	status = 1
	access = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 17, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(9, 'localOpaqueLink')]


class ospfLocalLsdbLsid(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 17, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ospfLocalLsdbRouterId(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 17, 1, 5])
	syntaxobject = RouterID


class ospfLocalLsdbSequence(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 17, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ospfLocalLsdbAge(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 17, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = 'seconds'


class ospfLocalLsdbChecksum(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 17, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ospfLocalLsdbAdvertisement(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 17, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class ospfVirtLocalLsdbTransitArea(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 18, 1, 1])
	syntaxobject = AreaID


class ospfVirtLocalLsdbNeighbor(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 18, 1, 2])
	syntaxobject = RouterID


class ospfVirtLocalLsdbType(ColumnObject):
	status = 1
	access = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 18, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(9, 'localOpaqueLink')]


class ospfVirtLocalLsdbLsid(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 18, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ospfVirtLocalLsdbRouterId(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 18, 1, 5])
	syntaxobject = RouterID


class ospfVirtLocalLsdbSequence(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 18, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ospfVirtLocalLsdbAge(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 18, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = 'seconds'


class ospfVirtLocalLsdbChecksum(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 18, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ospfVirtLocalLsdbAdvertisement(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 18, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class ospfAsLsdbType(ColumnObject):
	status = 1
	access = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 19, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(5, 'asExternalLink'), Enum(11, 'asOpaqueLink')]


class ospfAsLsdbLsid(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 19, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ospfAsLsdbRouterId(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 19, 1, 3])
	syntaxobject = RouterID


class ospfAsLsdbSequence(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 19, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ospfAsLsdbAge(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 19, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = 'seconds'


class ospfAsLsdbChecksum(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 19, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ospfAsLsdbAdvertisement(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 19, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class ospfAreaLsaCountAreaId(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 20, 1, 1])
	syntaxobject = AreaID


class ospfAreaLsaCountLsaType(ColumnObject):
	status = 1
	access = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 20, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'routerLink'), Enum(2, 'networkLink'), Enum(3, 'summaryLink'), Enum(4, 'asSummaryLink'), Enum(6, 'multicastLink'), Enum(7, 'nssaExternalLink'), Enum(10, 'areaOpaqueLink')]


class ospfAreaLsaCountNumber(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 20, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


# rows 
class ospfAreaEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ospfAreaId], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 2, 1])
	access = 2
	rowstatus = ospfAreaStatus
	columns = {'ospfAreaId': ospfAreaId, 'ospfAuthType': ospfAuthType, 'ospfImportAsExtern': ospfImportAsExtern, 'ospfSpfRuns': ospfSpfRuns, 'ospfAreaBdrRtrCount': ospfAreaBdrRtrCount, 'ospfAsBdrRtrCount': ospfAsBdrRtrCount, 'ospfAreaLsaCount': ospfAreaLsaCount, 'ospfAreaLsaCksumSum': ospfAreaLsaCksumSum, 'ospfAreaSummary': ospfAreaSummary, 'ospfAreaStatus': ospfAreaStatus, 'ospfAreaNssaTranslatorRole': ospfAreaNssaTranslatorRole, 'ospfAreaNssaTranslatorState': ospfAreaNssaTranslatorState, 'ospfAreaNssaTranslatorStabilityInterval': ospfAreaNssaTranslatorStabilityInterval, 'ospfAreaNssaTranslatorEvents': ospfAreaNssaTranslatorEvents}


class ospfStubAreaEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ospfStubAreaId, ospfStubTOS], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 3, 1])
	access = 2
	rowstatus = ospfStubStatus
	columns = {'ospfStubAreaId': ospfStubAreaId, 'ospfStubTOS': ospfStubTOS, 'ospfStubMetric': ospfStubMetric, 'ospfStubStatus': ospfStubStatus, 'ospfStubMetricType': ospfStubMetricType}


class ospfLsdbEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ospfLsdbAreaId, ospfLsdbType, ospfLsdbLsid, ospfLsdbRouterId], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 4, 1])
	access = 2
	columns = {'ospfLsdbAreaId': ospfLsdbAreaId, 'ospfLsdbType': ospfLsdbType, 'ospfLsdbLsid': ospfLsdbLsid, 'ospfLsdbRouterId': ospfLsdbRouterId, 'ospfLsdbSequence': ospfLsdbSequence, 'ospfLsdbAge': ospfLsdbAge, 'ospfLsdbChecksum': ospfLsdbChecksum, 'ospfLsdbAdvertisement': ospfLsdbAdvertisement}


class ospfHostEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ospfHostIpAddress, ospfHostTOS], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 6, 1])
	access = 2
	rowstatus = ospfHostStatus
	columns = {'ospfHostIpAddress': ospfHostIpAddress, 'ospfHostTOS': ospfHostTOS, 'ospfHostMetric': ospfHostMetric, 'ospfHostStatus': ospfHostStatus, 'ospfHostAreaID': ospfHostAreaID, 'ospfHostCfgAreaID': ospfHostCfgAreaID}


class ospfIfEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ospfIfIpAddress, ospfAddressLessIf], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 7, 1])
	access = 2
	rowstatus = ospfIfStatus
	columns = {'ospfIfIpAddress': ospfIfIpAddress, 'ospfAddressLessIf': ospfAddressLessIf, 'ospfIfAreaId': ospfIfAreaId, 'ospfIfType': ospfIfType, 'ospfIfAdminStat': ospfIfAdminStat, 'ospfIfRtrPriority': ospfIfRtrPriority, 'ospfIfTransitDelay': ospfIfTransitDelay, 'ospfIfRetransInterval': ospfIfRetransInterval, 'ospfIfHelloInterval': ospfIfHelloInterval, 'ospfIfRtrDeadInterval': ospfIfRtrDeadInterval, 'ospfIfPollInterval': ospfIfPollInterval, 'ospfIfState': ospfIfState, 'ospfIfDesignatedRouter': ospfIfDesignatedRouter, 'ospfIfBackupDesignatedRouter': ospfIfBackupDesignatedRouter, 'ospfIfEvents': ospfIfEvents, 'ospfIfAuthKey': ospfIfAuthKey, 'ospfIfStatus': ospfIfStatus, 'ospfIfMulticastForwarding': ospfIfMulticastForwarding, 'ospfIfDemand': ospfIfDemand, 'ospfIfAuthType': ospfIfAuthType, 'ospfIfLsaCount': ospfIfLsaCount, 'ospfIfLsaCksumSum': ospfIfLsaCksumSum, 'ospfIfDesignatedRouterId': ospfIfDesignatedRouterId, 'ospfIfBackupDesignatedRouterId': ospfIfBackupDesignatedRouterId}


class ospfIfMetricEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ospfIfMetricIpAddress, ospfIfMetricAddressLessIf, ospfIfMetricTOS], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 8, 1])
	access = 2
	rowstatus = ospfIfMetricStatus
	columns = {'ospfIfMetricIpAddress': ospfIfMetricIpAddress, 'ospfIfMetricAddressLessIf': ospfIfMetricAddressLessIf, 'ospfIfMetricTOS': ospfIfMetricTOS, 'ospfIfMetricValue': ospfIfMetricValue, 'ospfIfMetricStatus': ospfIfMetricStatus}


class ospfVirtIfEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ospfVirtIfAreaId, ospfVirtIfNeighbor], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 9, 1])
	access = 2
	rowstatus = ospfVirtIfStatus
	columns = {'ospfVirtIfAreaId': ospfVirtIfAreaId, 'ospfVirtIfNeighbor': ospfVirtIfNeighbor, 'ospfVirtIfTransitDelay': ospfVirtIfTransitDelay, 'ospfVirtIfRetransInterval': ospfVirtIfRetransInterval, 'ospfVirtIfHelloInterval': ospfVirtIfHelloInterval, 'ospfVirtIfRtrDeadInterval': ospfVirtIfRtrDeadInterval, 'ospfVirtIfState': ospfVirtIfState, 'ospfVirtIfEvents': ospfVirtIfEvents, 'ospfVirtIfAuthKey': ospfVirtIfAuthKey, 'ospfVirtIfStatus': ospfVirtIfStatus, 'ospfVirtIfAuthType': ospfVirtIfAuthType, 'ospfVirtIfLsaCount': ospfVirtIfLsaCount, 'ospfVirtIfLsaCksumSum': ospfVirtIfLsaCksumSum}


class ospfNbrEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ospfNbrIpAddr, ospfNbrAddressLessIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 10, 1])
	access = 2
	rowstatus = ospfNbmaNbrStatus
	columns = {'ospfNbrIpAddr': ospfNbrIpAddr, 'ospfNbrAddressLessIndex': ospfNbrAddressLessIndex, 'ospfNbrRtrId': ospfNbrRtrId, 'ospfNbrOptions': ospfNbrOptions, 'ospfNbrPriority': ospfNbrPriority, 'ospfNbrState': ospfNbrState, 'ospfNbrEvents': ospfNbrEvents, 'ospfNbrLsRetransQLen': ospfNbrLsRetransQLen, 'ospfNbmaNbrStatus': ospfNbmaNbrStatus, 'ospfNbmaNbrPermanence': ospfNbmaNbrPermanence, 'ospfNbrHelloSuppressed': ospfNbrHelloSuppressed, 'ospfNbrRestartHelperStatus': ospfNbrRestartHelperStatus, 'ospfNbrRestartHelperAge': ospfNbrRestartHelperAge, 'ospfNbrRestartHelperExitReason': ospfNbrRestartHelperExitReason}


class ospfVirtNbrEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ospfVirtNbrArea, ospfVirtNbrRtrId], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 11, 1])
	access = 2
	columns = {'ospfVirtNbrArea': ospfVirtNbrArea, 'ospfVirtNbrRtrId': ospfVirtNbrRtrId, 'ospfVirtNbrIpAddr': ospfVirtNbrIpAddr, 'ospfVirtNbrOptions': ospfVirtNbrOptions, 'ospfVirtNbrState': ospfVirtNbrState, 'ospfVirtNbrEvents': ospfVirtNbrEvents, 'ospfVirtNbrLsRetransQLen': ospfVirtNbrLsRetransQLen, 'ospfVirtNbrHelloSuppressed': ospfVirtNbrHelloSuppressed, 'ospfVirtNbrRestartHelperStatus': ospfVirtNbrRestartHelperStatus, 'ospfVirtNbrRestartHelperAge': ospfVirtNbrRestartHelperAge, 'ospfVirtNbrRestartHelperExitReason': ospfVirtNbrRestartHelperExitReason}


class ospfExtLsdbEntry(RowObject):
	status = 2
	index = pycopia.SMI.Objects.IndexObjects([ospfExtLsdbType, ospfExtLsdbLsid, ospfExtLsdbRouterId], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 12, 1])
	access = 2
	columns = {'ospfExtLsdbType': ospfExtLsdbType, 'ospfExtLsdbLsid': ospfExtLsdbLsid, 'ospfExtLsdbRouterId': ospfExtLsdbRouterId, 'ospfExtLsdbSequence': ospfExtLsdbSequence, 'ospfExtLsdbAge': ospfExtLsdbAge, 'ospfExtLsdbChecksum': ospfExtLsdbChecksum, 'ospfExtLsdbAdvertisement': ospfExtLsdbAdvertisement}


class ospfAreaAggregateEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ospfAreaAggregateAreaID, ospfAreaAggregateLsdbType, ospfAreaAggregateNet, ospfAreaAggregateMask], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 14, 1])
	access = 2
	rowstatus = ospfAreaAggregateStatus
	columns = {'ospfAreaAggregateAreaID': ospfAreaAggregateAreaID, 'ospfAreaAggregateLsdbType': ospfAreaAggregateLsdbType, 'ospfAreaAggregateNet': ospfAreaAggregateNet, 'ospfAreaAggregateMask': ospfAreaAggregateMask, 'ospfAreaAggregateStatus': ospfAreaAggregateStatus, 'ospfAreaAggregateEffect': ospfAreaAggregateEffect, 'ospfAreaAggregateExtRouteTag': ospfAreaAggregateExtRouteTag}


class ospfLocalLsdbEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ospfLocalLsdbIpAddress, ospfLocalLsdbAddressLessIf, ospfLocalLsdbType, ospfLocalLsdbLsid, ospfLocalLsdbRouterId], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 17, 1])
	access = 2
	columns = {'ospfLocalLsdbIpAddress': ospfLocalLsdbIpAddress, 'ospfLocalLsdbAddressLessIf': ospfLocalLsdbAddressLessIf, 'ospfLocalLsdbType': ospfLocalLsdbType, 'ospfLocalLsdbLsid': ospfLocalLsdbLsid, 'ospfLocalLsdbRouterId': ospfLocalLsdbRouterId, 'ospfLocalLsdbSequence': ospfLocalLsdbSequence, 'ospfLocalLsdbAge': ospfLocalLsdbAge, 'ospfLocalLsdbChecksum': ospfLocalLsdbChecksum, 'ospfLocalLsdbAdvertisement': ospfLocalLsdbAdvertisement}


class ospfVirtLocalLsdbEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ospfVirtLocalLsdbTransitArea, ospfVirtLocalLsdbNeighbor, ospfVirtLocalLsdbType, ospfVirtLocalLsdbLsid, ospfVirtLocalLsdbRouterId], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 18, 1])
	access = 2
	columns = {'ospfVirtLocalLsdbTransitArea': ospfVirtLocalLsdbTransitArea, 'ospfVirtLocalLsdbNeighbor': ospfVirtLocalLsdbNeighbor, 'ospfVirtLocalLsdbType': ospfVirtLocalLsdbType, 'ospfVirtLocalLsdbLsid': ospfVirtLocalLsdbLsid, 'ospfVirtLocalLsdbRouterId': ospfVirtLocalLsdbRouterId, 'ospfVirtLocalLsdbSequence': ospfVirtLocalLsdbSequence, 'ospfVirtLocalLsdbAge': ospfVirtLocalLsdbAge, 'ospfVirtLocalLsdbChecksum': ospfVirtLocalLsdbChecksum, 'ospfVirtLocalLsdbAdvertisement': ospfVirtLocalLsdbAdvertisement}


class ospfAsLsdbEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ospfAsLsdbType, ospfAsLsdbLsid, ospfAsLsdbRouterId], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 19, 1])
	access = 2
	columns = {'ospfAsLsdbType': ospfAsLsdbType, 'ospfAsLsdbLsid': ospfAsLsdbLsid, 'ospfAsLsdbRouterId': ospfAsLsdbRouterId, 'ospfAsLsdbSequence': ospfAsLsdbSequence, 'ospfAsLsdbAge': ospfAsLsdbAge, 'ospfAsLsdbChecksum': ospfAsLsdbChecksum, 'ospfAsLsdbAdvertisement': ospfAsLsdbAdvertisement}


class ospfAreaLsaCountEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ospfAreaLsaCountAreaId, ospfAreaLsaCountLsaType], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 20, 1])
	access = 2
	columns = {'ospfAreaLsaCountAreaId': ospfAreaLsaCountAreaId, 'ospfAreaLsaCountLsaType': ospfAreaLsaCountLsaType, 'ospfAreaLsaCountNumber': ospfAreaLsaCountNumber}


# notifications (traps) 
# groups 
class ospfBasicGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 15, 1, 1])
	group = [ospfRouterId, ospfAdminStat, ospfVersionNumber, ospfAreaBdrRtrStatus, ospfASBdrRtrStatus, ospfExternLsaCount, ospfExternLsaCksumSum, ospfTOSSupport, ospfOriginateNewLsas, ospfRxNewLsas, ospfExtLsdbLimit, ospfMulticastExtensions, ospfExitOverflowInterval, ospfDemandExtensions]

class ospfAreaGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 15, 1, 2])
	group = [ospfAreaId, ospfImportAsExtern, ospfSpfRuns, ospfAreaBdrRtrCount, ospfAsBdrRtrCount, ospfAreaLsaCount, ospfAreaLsaCksumSum, ospfAreaSummary, ospfAreaStatus]

class ospfStubAreaGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 15, 1, 3])
	group = [ospfStubAreaId, ospfStubTOS, ospfStubMetric, ospfStubStatus, ospfStubMetricType]

class ospfLsdbGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 15, 1, 4])
	group = [ospfLsdbAreaId, ospfLsdbType, ospfLsdbLsid, ospfLsdbRouterId, ospfLsdbSequence, ospfLsdbAge, ospfLsdbChecksum, ospfLsdbAdvertisement]

class ospfHostGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 15, 1, 6])
	group = [ospfHostIpAddress, ospfHostTOS, ospfHostMetric, ospfHostStatus, ospfHostAreaID]

class ospfIfGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 15, 1, 7])
	group = [ospfIfIpAddress, ospfAddressLessIf, ospfIfAreaId, ospfIfType, ospfIfAdminStat, ospfIfRtrPriority, ospfIfTransitDelay, ospfIfRetransInterval, ospfIfHelloInterval, ospfIfRtrDeadInterval, ospfIfPollInterval, ospfIfState, ospfIfDesignatedRouter, ospfIfBackupDesignatedRouter, ospfIfEvents, ospfIfAuthType, ospfIfAuthKey, ospfIfStatus, ospfIfMulticastForwarding, ospfIfDemand]

class ospfIfMetricGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 15, 1, 8])
	group = [ospfIfMetricIpAddress, ospfIfMetricAddressLessIf, ospfIfMetricTOS, ospfIfMetricValue, ospfIfMetricStatus]

class ospfVirtIfGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 15, 1, 9])
	group = [ospfVirtIfAreaId, ospfVirtIfNeighbor, ospfVirtIfTransitDelay, ospfVirtIfRetransInterval, ospfVirtIfHelloInterval, ospfVirtIfRtrDeadInterval, ospfVirtIfState, ospfVirtIfEvents, ospfVirtIfAuthType, ospfVirtIfAuthKey, ospfVirtIfStatus]

class ospfNbrGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 15, 1, 10])
	group = [ospfNbrIpAddr, ospfNbrAddressLessIndex, ospfNbrRtrId, ospfNbrOptions, ospfNbrPriority, ospfNbrState, ospfNbrEvents, ospfNbrLsRetransQLen, ospfNbmaNbrStatus, ospfNbmaNbrPermanence, ospfNbrHelloSuppressed]

class ospfVirtNbrGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 15, 1, 11])
	group = [ospfVirtNbrArea, ospfVirtNbrRtrId, ospfVirtNbrIpAddr, ospfVirtNbrOptions, ospfVirtNbrState, ospfVirtNbrEvents, ospfVirtNbrLsRetransQLen, ospfVirtNbrHelloSuppressed]

class ospfExtLsdbGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 15, 1, 12])
	group = [ospfExtLsdbType, ospfExtLsdbLsid, ospfExtLsdbRouterId, ospfExtLsdbSequence, ospfExtLsdbAge, ospfExtLsdbChecksum, ospfExtLsdbAdvertisement]

class ospfAreaAggregateGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 15, 1, 13])
	group = [ospfAreaAggregateAreaID, ospfAreaAggregateLsdbType, ospfAreaAggregateNet, ospfAreaAggregateMask, ospfAreaAggregateStatus, ospfAreaAggregateEffect]

class ospfLocalLsdbGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 15, 1, 14])
	group = [ospfLocalLsdbSequence, ospfLocalLsdbAge, ospfLocalLsdbChecksum, ospfLocalLsdbAdvertisement]

class ospfVirtLocalLsdbGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 15, 1, 15])
	group = [ospfVirtLocalLsdbSequence, ospfVirtLocalLsdbAge, ospfVirtLocalLsdbChecksum, ospfVirtLocalLsdbAdvertisement]

class ospfAsLsdbGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 15, 1, 16])
	group = [ospfAsLsdbSequence, ospfAsLsdbAge, ospfAsLsdbChecksum, ospfAsLsdbAdvertisement]

class ospfBasicGroup2(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 15, 1, 17])
	group = [ospfRouterId, ospfAdminStat, ospfVersionNumber, ospfAreaBdrRtrStatus, ospfASBdrRtrStatus, ospfExternLsaCount, ospfExternLsaCksumSum, ospfTOSSupport, ospfOriginateNewLsas, ospfRxNewLsas, ospfExtLsdbLimit, ospfMulticastExtensions, ospfExitOverflowInterval, ospfDemandExtensions, ospfRFC1583Compatibility, ospfOpaqueLsaSupport, ospfReferenceBandwidth, ospfRestartSupport, ospfRestartInterval, ospfRestartStrictLsaChecking, ospfRestartStatus, ospfRestartAge, ospfRestartExitReason, ospfAsLsaCount, ospfAsLsaCksumSum, ospfStubRouterSupport, ospfStubRouterAdvertisement, ospfDiscontinuityTime]

class ospfAreaGroup2(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 15, 1, 18])
	group = [ospfAreaId, ospfImportAsExtern, ospfSpfRuns, ospfAreaBdrRtrCount, ospfAsBdrRtrCount, ospfAreaLsaCount, ospfAreaLsaCksumSum, ospfAreaSummary, ospfAreaStatus, ospfAreaNssaTranslatorRole, ospfAreaNssaTranslatorState, ospfAreaNssaTranslatorStabilityInterval, ospfAreaNssaTranslatorEvents]

class ospfIfGroup2(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 15, 1, 19])
	group = [ospfIfIpAddress, ospfAddressLessIf, ospfIfAreaId, ospfIfType, ospfIfAdminStat, ospfIfRtrPriority, ospfIfTransitDelay, ospfIfRetransInterval, ospfIfHelloInterval, ospfIfRtrDeadInterval, ospfIfPollInterval, ospfIfState, ospfIfDesignatedRouter, ospfIfBackupDesignatedRouter, ospfIfEvents, ospfIfAuthType, ospfIfAuthKey, ospfIfStatus, ospfIfMulticastForwarding, ospfIfDemand, ospfIfLsaCount, ospfIfLsaCksumSum]

class ospfVirtIfGroup2(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 15, 1, 20])
	group = [ospfVirtIfAreaId, ospfVirtIfNeighbor, ospfVirtIfTransitDelay, ospfVirtIfRetransInterval, ospfVirtIfHelloInterval, ospfVirtIfRtrDeadInterval, ospfVirtIfState, ospfVirtIfEvents, ospfVirtIfAuthType, ospfVirtIfAuthKey, ospfVirtIfStatus, ospfVirtIfLsaCount, ospfVirtIfLsaCksumSum, ospfIfDesignatedRouterId, ospfIfBackupDesignatedRouterId]

class ospfNbrGroup2(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 15, 1, 21])
	group = [ospfNbrIpAddr, ospfNbrAddressLessIndex, ospfNbrRtrId, ospfNbrOptions, ospfNbrPriority, ospfNbrState, ospfNbrEvents, ospfNbrLsRetransQLen, ospfNbmaNbrStatus, ospfNbmaNbrPermanence, ospfNbrHelloSuppressed, ospfNbrRestartHelperStatus, ospfNbrRestartHelperAge, ospfNbrRestartHelperExitReason]

class ospfVirtNbrGroup2(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 15, 1, 22])
	group = [ospfVirtNbrArea, ospfVirtNbrRtrId, ospfVirtNbrIpAddr, ospfVirtNbrOptions, ospfVirtNbrState, ospfVirtNbrEvents, ospfVirtNbrLsRetransQLen, ospfVirtNbrHelloSuppressed, ospfVirtNbrRestartHelperStatus, ospfVirtNbrRestartHelperAge, ospfVirtNbrRestartHelperExitReason]

class ospfAreaAggregateGroup2(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 15, 1, 23])
	group = [ospfAreaAggregateAreaID, ospfAreaAggregateLsdbType, ospfAreaAggregateNet, ospfAreaAggregateMask, ospfAreaAggregateStatus, ospfAreaAggregateEffect, ospfAreaAggregateExtRouteTag]

class ospfAreaLsaCountGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 15, 1, 24])
	group = [ospfAreaLsaCountNumber]

class ospfHostGroup2(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 15, 1, 25])
	group = [ospfHostIpAddress, ospfHostTOS, ospfHostMetric, ospfHostStatus, ospfHostCfgAreaID]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
