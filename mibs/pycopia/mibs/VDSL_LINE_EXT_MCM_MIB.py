# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, transmission, Unsigned32
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from SNMPv2_TC import RowStatus
from VDSL_LINE_MIB import vdslLineConfProfileName

class VDSL_LINE_EXT_MCM_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/VDSL-LINE-EXT-MCM-MIB'
	conformance = 132
	name = 'VDSL-LINE-EXT-MCM-MIB'
	language = 2
	description = 'The VDSL-LINE-MIB found in RFC 3728 defines objects for\nthe management of a pair of VDSL transceivers at each end of\nthe VDSL line.  The VDSL-LINE-MIB configures and monitors the\nline code independent parameters (TC layer) of the VDSL line.\nThis MIB module is an optional extension of the VDSL-LINE-MIB\nand defines objects for configuration and monitoring of the\nline code specific (LCS) elements (PMD layer) for VDSL lines\nusing MCM coding.  The objects in this extension MIB MUST NOT\nbe used for VDSL lines using Single Carrier Modulation (SCM)\nline coding.  If an object in this extension MIB is referenced\nby a line which does not use MCM, it has no effect on the\noperation of that line.\n\nNaming Conventions:\n    Vtuc -- (VTUC) transceiver at near (Central) end of line\n    Vtur -- (VTUR) transceiver at Remote end of line\n    Vtu  -- One of either Vtuc or Vtur\n    Curr -- Current\n    LCS  -- Line Code Specific\n    Max  -- Maximum\n    PSD  -- Power Spectral Density\n    Rx   -- Receive\n    Tx   -- Transmit\n\nCopyright (C) The Internet Society (2005).  This version\nof this MIB module is part of RFC 4070: see the RFC\nitself for full legal notices.'

# nodes
class vdslExtMCMMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 229])
	name = 'vdslExtMCMMIB'

class vdslLineExtMCMMib(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 229, 1])
	name = 'vdslLineExtMCMMib'

class vdslLineExtMCMMibObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 229, 1, 1])
	name = 'vdslLineExtMCMMibObjects'

class vdslLineExtMCMConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 229, 1, 2])
	name = 'vdslLineExtMCMConformance'

class vdslLineExtMCMGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 229, 1, 2, 1])
	name = 'vdslLineExtMCMGroups'

class vdslLineExtMCMCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 229, 1, 2, 2])
	name = 'vdslLineExtMCMCompliances'


# macros
# types 
# scalars 
# columns
class vdslLineMCMConfProfileTxWindowLength(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32
	access = 5
	units = 'samples'


class vdslLineMCMConfProfileRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class vdslLineMCMConfProfileTxBandNumber(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class vdslLineMCMConfProfileTxBandStart(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class vdslLineMCMConfProfileTxBandStop(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class vdslLineMCMConfProfileTxBandRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class vdslLineMCMConfProfileRxBandNumber(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 3, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class vdslLineMCMConfProfileRxBandStart(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 3, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class vdslLineMCMConfProfileRxBandStop(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 3, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class vdslLineMCMConfProfileRxBandRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 3, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class vdslLineMCMConfProfileTxPSDNumber(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 4, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class vdslLineMCMConfProfileTxPSDTone(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 4, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class vdslLineMCMConfProfileTxPSDPSD(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 4, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32
	access = 5
	units = '0.5dBm/Hz'


class vdslLineMCMConfProfileTxPSDRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 4, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class vdslLineMCMConfProfileMaxTxPSDNumber(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 5, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class vdslLineMCMConfProfileMaxTxPSDTone(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 5, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class vdslLineMCMConfProfileMaxTxPSDPSD(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 5, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32
	access = 5
	units = '0.5dBm/Hz'


class vdslLineMCMConfProfileMaxTxPSDRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 5, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class vdslLineMCMConfProfileMaxRxPSDNumber(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 6, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class vdslLineMCMConfProfileMaxRxPSDTone(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 6, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class vdslLineMCMConfProfileMaxRxPSDPSD(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 6, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32
	access = 5
	units = '0.5dBm/Hz'


class vdslLineMCMConfProfileMaxRxPSDRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 6, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


# rows 
class vdslLineMCMConfProfileEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([vdslLineConfProfileName], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 1, 1])
	access = 2
	rowstatus = vdslLineMCMConfProfileRowStatus
	columns = {'vdslLineMCMConfProfileTxWindowLength': vdslLineMCMConfProfileTxWindowLength, 'vdslLineMCMConfProfileRowStatus': vdslLineMCMConfProfileRowStatus}


class vdslLineMCMConfProfileTxBandEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([vdslLineConfProfileName, vdslLineMCMConfProfileTxBandNumber], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 2, 1])
	access = 2
	rowstatus = vdslLineMCMConfProfileTxBandRowStatus
	columns = {'vdslLineMCMConfProfileTxBandNumber': vdslLineMCMConfProfileTxBandNumber, 'vdslLineMCMConfProfileTxBandStart': vdslLineMCMConfProfileTxBandStart, 'vdslLineMCMConfProfileTxBandStop': vdslLineMCMConfProfileTxBandStop, 'vdslLineMCMConfProfileTxBandRowStatus': vdslLineMCMConfProfileTxBandRowStatus}


class vdslLineMCMConfProfileRxBandEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([vdslLineConfProfileName, vdslLineMCMConfProfileRxBandNumber], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 3, 1])
	access = 2
	rowstatus = vdslLineMCMConfProfileRxBandRowStatus
	columns = {'vdslLineMCMConfProfileRxBandNumber': vdslLineMCMConfProfileRxBandNumber, 'vdslLineMCMConfProfileRxBandStart': vdslLineMCMConfProfileRxBandStart, 'vdslLineMCMConfProfileRxBandStop': vdslLineMCMConfProfileRxBandStop, 'vdslLineMCMConfProfileRxBandRowStatus': vdslLineMCMConfProfileRxBandRowStatus}


class vdslLineMCMConfProfileTxPSDEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([vdslLineConfProfileName, vdslLineMCMConfProfileTxPSDNumber], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 4, 1])
	access = 2
	rowstatus = vdslLineMCMConfProfileTxPSDRowStatus
	columns = {'vdslLineMCMConfProfileTxPSDNumber': vdslLineMCMConfProfileTxPSDNumber, 'vdslLineMCMConfProfileTxPSDTone': vdslLineMCMConfProfileTxPSDTone, 'vdslLineMCMConfProfileTxPSDPSD': vdslLineMCMConfProfileTxPSDPSD, 'vdslLineMCMConfProfileTxPSDRowStatus': vdslLineMCMConfProfileTxPSDRowStatus}


class vdslLineMCMConfProfileMaxTxPSDEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([vdslLineConfProfileName, vdslLineMCMConfProfileMaxTxPSDNumber], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 5, 1])
	access = 2
	rowstatus = vdslLineMCMConfProfileMaxTxPSDRowStatus
	columns = {'vdslLineMCMConfProfileMaxTxPSDNumber': vdslLineMCMConfProfileMaxTxPSDNumber, 'vdslLineMCMConfProfileMaxTxPSDTone': vdslLineMCMConfProfileMaxTxPSDTone, 'vdslLineMCMConfProfileMaxTxPSDPSD': vdslLineMCMConfProfileMaxTxPSDPSD, 'vdslLineMCMConfProfileMaxTxPSDRowStatus': vdslLineMCMConfProfileMaxTxPSDRowStatus}


class vdslLineMCMConfProfileMaxRxPSDEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([vdslLineConfProfileName, vdslLineMCMConfProfileMaxRxPSDNumber], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 6, 1])
	access = 2
	rowstatus = vdslLineMCMConfProfileMaxRxPSDRowStatus
	columns = {'vdslLineMCMConfProfileMaxRxPSDNumber': vdslLineMCMConfProfileMaxRxPSDNumber, 'vdslLineMCMConfProfileMaxRxPSDTone': vdslLineMCMConfProfileMaxRxPSDTone, 'vdslLineMCMConfProfileMaxRxPSDPSD': vdslLineMCMConfProfileMaxRxPSDPSD, 'vdslLineMCMConfProfileMaxRxPSDRowStatus': vdslLineMCMConfProfileMaxRxPSDRowStatus}


# notifications (traps) 
# groups 
class vdslLineExtMCMGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 229, 1, 2, 1, 1])
	group = [vdslLineMCMConfProfileTxWindowLength, vdslLineMCMConfProfileRowStatus, vdslLineMCMConfProfileTxBandStart, vdslLineMCMConfProfileTxBandStop, vdslLineMCMConfProfileTxBandRowStatus, vdslLineMCMConfProfileRxBandStart, vdslLineMCMConfProfileRxBandStop, vdslLineMCMConfProfileRxBandRowStatus, vdslLineMCMConfProfileTxPSDTone, vdslLineMCMConfProfileTxPSDPSD, vdslLineMCMConfProfileTxPSDRowStatus, vdslLineMCMConfProfileMaxTxPSDTone, vdslLineMCMConfProfileMaxTxPSDPSD, vdslLineMCMConfProfileMaxTxPSDRowStatus, vdslLineMCMConfProfileMaxRxPSDTone, vdslLineMCMConfProfileMaxRxPSDPSD, vdslLineMCMConfProfileMaxRxPSDRowStatus]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
