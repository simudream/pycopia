# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP, NOTIFICATION_GROUP
from ENTITY_MIB import entLogicalIndex
from SNMPv2_SMI import Integer32, IpAddress, OBJECT_TYPE, MODULE_IDENTITY, NOTIFICATION_TYPE
from RMON_MIB import alarmEntry, eventEntry
from SNMP_TARGET_MIB import snmpTargetAddrEntry
from HP_ICF_OID import hpicfObjectModules, hpicfCommon, hpicfCommonTrapsPrefix
from IF_MIB import ifIndex
from SNMPv2_TC import MacAddress, TruthValue, RowStatus, DisplayString, TDomain, TAddress, StorageType, TimeStamp

class HP_ICF_BASIC(ModuleObject):
	path = '/usr/share/snmp/mibs/site/HP-ICF-BASIC'
	conformance = 1
	name = 'HP-ICF-BASIC'
	language = 2
	description = 'This MIB module describes objects for basic\nmanagement of devices in the HP Integrated\nCommunication Facility product line.'

# nodes
class hpicfBasicMib(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5])
	name = 'hpicfBasicMib'

class hpicfBasicConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1])
	name = 'hpicfBasicConformance'

class hpicfBasicCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 1])
	name = 'hpicfBasicCompliances'

class hpicfBasicGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2])
	name = 'hpicfBasicGroups'

class hpicfBasic(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4])
	name = 'hpicfBasic'

class hpicfSelfTestResult(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 5])
	name = 'hpicfSelfTestResult'

class hpicfBasicDiscovery(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 7])
	name = 'hpicfBasicDiscovery'

class hpicfBasicIpConfig(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 8])
	name = 'hpicfBasicIpConfig'

class hpicfBasicIpxConfig(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 9])
	name = 'hpicfBasicIpxConfig'

class hpicfBasicTraps(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 10])
	name = 'hpicfBasicTraps'

class hpicfBasicRmon(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 11])
	name = 'hpicfBasicRmon'

class hpicfBasicAlarm(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 11, 3])
	name = 'hpicfBasicAlarm'

class hpicfBasicEvent(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 11, 9])
	name = 'hpicfBasicEvent'

class hpicfBasicSnmpTargetAddrLogFilter(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 12])
	name = 'hpicfBasicSnmpTargetAddrLogFilter'


# macros
# types 
# scalars 
class hpicfReset(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'noReset'), Enum(2, 'normalReset'), Enum(4, 'agentReset')]


class hpicfSelfTest(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'stSuccess'), Enum(2, 'stExecute')]


class hpicfTelnetEnable(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class hpicfConfigClear(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'running'), Enum(2, 'configClear')]


class hpicfSelfTestResultCode(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 5, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'ok'), Enum(2, 'softFailure')]


class hpicfSelfTestResultText(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 5, 2])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class hpicfSelfTestResultTime(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 5, 3])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class hpicfWebAgentEnable(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class hpicfIpGlobalDefaultRouter(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 8, 3])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class hpicfIpGlobalPingRouter(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 8, 4])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class hpicfBasicAlarmNVCapacity(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 11, 3, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpicfBasicEventNVCapacity(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 11, 9, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


# columns
class hpicfAnnounceAddress(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 7, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.MacAddress


class hpicfIfEntLogicalIndex(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 7, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpicfAnnounceDiscoveryAddress(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 7, 3, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.MacAddress


class hpicfIpConfigAddress(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 8, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class hpicfIpConfigAddrMask(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 8, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class hpicfIpConfigDefaultRouter(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 8, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class hpicfIpConfigPingRouter(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 8, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class hpicfIpConfigMtu(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 8, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpicfIpConfigAdminStatus(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 8, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'disable'), Enum(2, 'useConfigured'), Enum(3, 'learn')]


class hpicfIpConfigProxyArp(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 8, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class hpicfIpAddrAddr(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 8, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class hpicfIpAddrMask(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 8, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class hpicfIpAddrStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 8, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class hpicfIpxConfigNodeAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 9, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.MacAddress


class hpicfIpxConfigDefaultRouter(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 9, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.MacAddress


class hpicfIpxConfigRouterEncaps(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 9, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'ethernetII'), Enum(2, 'ieee8022'), Enum(3, 'snap'), Enum(4, 'ieee8023Raw'), Enum(5, 'noGateway'), Enum(6, 'learn')]


class hpicfIpxConfigAdminStatus(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 9, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enable'), Enum(2, 'disable')]


class hpicfIpxNetEncaps(ColumnObject):
	status = 1
	access = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 9, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'ethernetII'), Enum(2, 'ieee8022'), Enum(3, 'snap'), Enum(4, 'ieee8023Raw')]


class hpicfIpxNetNumber(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 9, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class hpicfFixedTrapID(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 10, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.ObjectIdentifier


class hpicfFixedTrapEventIndex(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 10, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpicfTrapDestIndex(ColumnObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 10, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpicfTrapDestVersion(ColumnObject):
	status = 2
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 10, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'snmpv1'), Enum(2, 'snmpv2c')]


class hpicfTrapDestCommunity(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 10, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class hpicfTrapDestTDomain(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 10, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.TDomain


class hpicfTrapDestTAddress(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 10, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.TAddress


class hpicfTrapDestFilter(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 10, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpicfTrapDestStatus(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 10, 2, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class hpicfBasicAlarmStorageType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 11, 3, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


class hpicfBasicEventStorageType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 11, 9, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


class hpicfSnmpTargetAddrLogFilter(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 12, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


# rows 
class hpicfAnnounceEntry(RowObject):
	status = 2
	index = pycopia.SMI.Objects.IndexObjects([entLogicalIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 7, 1, 1])
	access = 2
	columns = {'hpicfAnnounceAddress': hpicfAnnounceAddress}


class hpicfIfToEntityEntry(RowObject):
	status = 2
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 7, 2, 1])
	access = 2
	columns = {'hpicfIfEntLogicalIndex': hpicfIfEntLogicalIndex}


class hpicfAnnounceDiscoveryEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 7, 3, 1])
	access = 2
	columns = {'hpicfAnnounceDiscoveryAddress': hpicfAnnounceDiscoveryAddress}


class hpicfIpConfigEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 8, 1, 1])
	access = 2
	columns = {'hpicfIpConfigAddress': hpicfIpConfigAddress, 'hpicfIpConfigAddrMask': hpicfIpConfigAddrMask, 'hpicfIpConfigDefaultRouter': hpicfIpConfigDefaultRouter, 'hpicfIpConfigPingRouter': hpicfIpConfigPingRouter, 'hpicfIpConfigMtu': hpicfIpConfigMtu, 'hpicfIpConfigAdminStatus': hpicfIpConfigAdminStatus, 'hpicfIpConfigProxyArp': hpicfIpConfigProxyArp}


class hpicfIpAddrEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, hpicfIpAddrAddr], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 8, 2, 1])
	access = 2
	rowstatus = hpicfIpAddrStatus
	columns = {'hpicfIpAddrAddr': hpicfIpAddrAddr, 'hpicfIpAddrMask': hpicfIpAddrMask, 'hpicfIpAddrStatus': hpicfIpAddrStatus}


class hpicfIpxConfigEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 9, 1, 1])
	access = 2
	columns = {'hpicfIpxConfigNodeAddress': hpicfIpxConfigNodeAddress, 'hpicfIpxConfigDefaultRouter': hpicfIpxConfigDefaultRouter, 'hpicfIpxConfigRouterEncaps': hpicfIpxConfigRouterEncaps, 'hpicfIpxConfigAdminStatus': hpicfIpxConfigAdminStatus}


class hpicfIpxNetEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, hpicfIpxNetEncaps], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 9, 2, 1])
	access = 2
	columns = {'hpicfIpxNetEncaps': hpicfIpxNetEncaps, 'hpicfIpxNetNumber': hpicfIpxNetNumber}


class hpicfFixedTrapEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([hpicfFixedTrapID], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 10, 1, 1])
	access = 2
	columns = {'hpicfFixedTrapID': hpicfFixedTrapID, 'hpicfFixedTrapEventIndex': hpicfFixedTrapEventIndex}


class hpicfTrapDestEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([hpicfTrapDestIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 10, 2, 1])
	access = 2
	rowstatus = hpicfTrapDestStatus
	columns = {'hpicfTrapDestIndex': hpicfTrapDestIndex, 'hpicfTrapDestVersion': hpicfTrapDestVersion, 'hpicfTrapDestCommunity': hpicfTrapDestCommunity, 'hpicfTrapDestTDomain': hpicfTrapDestTDomain, 'hpicfTrapDestTAddress': hpicfTrapDestTAddress, 'hpicfTrapDestFilter': hpicfTrapDestFilter, 'hpicfTrapDestStatus': hpicfTrapDestStatus}


from RMON_MIB import alarmIndex
class hpicfBasicAlarmEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([alarmIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 11, 3, 2, 1])
	access = 2
	columns = {'hpicfBasicAlarmStorageType': hpicfBasicAlarmStorageType}


from RMON_MIB import eventIndex
class hpicfBasicEventEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([eventIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 11, 9, 2, 1])
	access = 2
	columns = {'hpicfBasicEventStorageType': hpicfBasicEventStorageType}


from SNMP_TARGET_MIB import snmpTargetAddrName
class hpicfSnmpTargetAddrLogFilterEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([snmpTargetAddrName], True)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 12, 1, 1])
	access = 2
	columns = {'hpicfSnmpTargetAddrLogFilter': hpicfSnmpTargetAddrLogFilter}


# notifications (traps) 
class hpicfSelfTestTrap(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 12, 1, 0, 4])

# groups 
class hpicfBasicGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 1])
	group = [hpicfReset, hpicfSelfTest]

class hpicfTelnetGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 2])
	group = [hpicfTelnetEnable]

class hpicfNewBasicGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 3])
	group = [hpicfReset, hpicfSelfTest, hpicfTelnetEnable, hpicfConfigClear, hpicfSelfTestResultCode, hpicfSelfTestResultText, hpicfSelfTestResultTime]

class hpicfDiscoverGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 4])
	group = [hpicfAnnounceAddress, hpicfIfEntLogicalIndex]

class hpicfBasicIpConfigGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 5])
	group = [hpicfIpConfigAddress, hpicfIpConfigAddrMask, hpicfIpConfigDefaultRouter, hpicfIpConfigPingRouter, hpicfIpConfigMtu, hpicfIpConfigAdminStatus]

class hpicfBasicIpxConfigGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 6])
	group = [hpicfIpxConfigNodeAddress, hpicfIpxConfigDefaultRouter, hpicfIpxConfigRouterEncaps, hpicfIpxConfigAdminStatus, hpicfIpxNetNumber]

class hpicfBasicFixedTrapGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 7])
	group = [hpicfFixedTrapEventIndex]

class hpicfBasicTrapDestGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 8])
	group = [hpicfTrapDestVersion, hpicfTrapDestCommunity, hpicfTrapDestTDomain, hpicfTrapDestTAddress, hpicfTrapDestFilter, hpicfTrapDestStatus]

class hpicfBasicRmonNVGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 9])
	group = [hpicfBasicAlarmNVCapacity, hpicfBasicAlarmStorageType, hpicfBasicEventNVCapacity, hpicfBasicEventStorageType]

class hpicfBasicSelfTestNotifyGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 10])
	group = [hpicfSelfTestTrap]

class hpicfBasicWebAgentGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 11])
	group = [hpicfWebAgentEnable]

class hpicfAnnounceDiscoveryGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 12])
	group = [hpicfAnnounceDiscoveryAddress]

class hpicfBasicIpConfigGroup2(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 13])
	group = [hpicfIpConfigAddress, hpicfIpConfigAddrMask, hpicfIpConfigMtu, hpicfIpConfigAdminStatus, hpicfIpGlobalDefaultRouter, hpicfIpGlobalPingRouter]

class hpicfBasicProxyArpGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 14])
	group = [hpicfIpConfigProxyArp]

class hpicfBasicIpSecondaryGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 15])
	group = [hpicfIpAddrMask, hpicfIpAddrStatus]

class hpicfSnmpTargetAddrLogFilterGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 16])
	group = [hpicfSnmpTargetAddrLogFilter]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
