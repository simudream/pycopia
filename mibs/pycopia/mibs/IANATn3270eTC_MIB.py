# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, mib_2
from SNMPv2_TC import TEXTUAL_CONVENTION

class IANATn3270eTC_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/iana/IANATn3270eTC-MIB'
	conformance = 5
	name = 'IANATn3270eTC-MIB'
	language = 2
	description = 'This module defines a set of textual conventions\nfor use by the TN3270E-MIB and the TN3270E-RT-MIB.\n\nAny additions or changes to the contents of this\nMIB module must first be discussed on the tn3270e\nworking group list at: tn3270e@list.nih.gov\nand approved by one of the following TN3270E\nworking group contacts:\n\n    Ed Bailey (co-chair) - elbailey@us.ibm.com\n    Michael Boe (co-chair) - mboe@cisco.com\n    Ken White - kennethw@vnet.ibm.com\n    Robert Moore - remoore@us.ibm.com\n\nThe above list of contacts can be altered with\nthe approval of the two co-chairs.\n\nThe Textual Conventions defined within this MIB have\nno security issues associated with them unless\nexplicitly stated in their corresponding\nDESCRIPTION clause.'

# nodes
class ianaTn3270eTcMib(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 61])
	name = 'ianaTn3270eTcMib'


# macros
# types 

class IANATn3270eAddrType(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(0, 'unknown'), Enum(1, 'ipv4'), Enum(2, 'ipv6')]


class IANATn3270eAddress(pycopia.SMI.Basetypes.OctetString):
	status = 1
	ranges = Ranges(Range(0, 255))


class IANATn3270eClientType(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'none'), Enum(2, 'other'), Enum(3, 'ipv4'), Enum(4, 'ipv6'), Enum(5, 'domainName'), Enum(6, 'truncDomainName'), Enum(7, 'string'), Enum(8, 'certificate'), Enum(9, 'userId'), Enum(10, 'x509dn')]


class IANATn3270Functions(pycopia.SMI.Basetypes.BITS):
	status = 1
	enumerations = [Enum(0, 'transmitBinary'), Enum(1, 'timemark'), Enum(2, 'endOfRecord'), Enum(3, 'terminalType'), Enum(4, 'tn3270Regime'), Enum(5, 'scsCtlCodes'), Enum(6, 'dataStreamCtl'), Enum(7, 'responses'), Enum(8, 'bindImage'), Enum(9, 'sysreq')]


class IANATn3270ResourceType(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'other'), Enum(2, 'terminal'), Enum(3, 'printer'), Enum(4, 'terminalOrPrinter')]


class IANATn3270DeviceType(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'ibm3278d2'), Enum(2, 'ibm3278d2E'), Enum(3, 'ibm3278d3'), Enum(4, 'ibm3278d3E'), Enum(5, 'ibm3278d4'), Enum(6, 'ibm3278d4E'), Enum(7, 'ibm3278d5'), Enum(8, 'ibm3278d5E'), Enum(9, 'ibmDynamic'), Enum(10, 'ibm3287d1'), Enum(100, 'unknown')]


class IANATn3270eLogData(pycopia.SMI.Basetypes.OctetString):
	status = 1
	ranges = Ranges(Range(0, 0), Range(6, 2048))

# scalars 
# columns
# rows 
# notifications (traps) 
# groups 
# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
