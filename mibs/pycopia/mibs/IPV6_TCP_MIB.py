# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, mib_2, experimental
from IPV6_TC import Ipv6Address, Ipv6IfIndexOrZero

class IPV6_TCP_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/IPV6-TCP-MIB'
	conformance = 3
	name = 'IPV6-TCP-MIB'
	language = 2
	description = 'The MIB module for entities implementing TCP over IPv6.'

# nodes
class tcp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 6])
	name = 'tcp'

class ipv6TcpMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 86])
	name = 'ipv6TcpMIB'

class ipv6TcpConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 86, 2])
	name = 'ipv6TcpConformance'

class ipv6TcpCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 86, 2, 1])
	name = 'ipv6TcpCompliances'

class ipv6TcpGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 86, 2, 2])
	name = 'ipv6TcpGroups'


# macros
# types 
# scalars 
# columns
class ipv6TcpConnLocalAddress(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 6, 16, 1, 1])
	syntaxobject = Ipv6Address


class ipv6TcpConnLocalPort(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 6, 16, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ipv6TcpConnRemAddress(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 6, 16, 1, 3])
	syntaxobject = Ipv6Address


class ipv6TcpConnRemPort(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 6, 16, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ipv6TcpConnIfIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 6, 16, 1, 5])
	syntaxobject = Ipv6IfIndexOrZero


class ipv6TcpConnState(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 6, 16, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'closed'), Enum(2, 'listen'), Enum(3, 'synSent'), Enum(4, 'synReceived'), Enum(5, 'established'), Enum(6, 'finWait1'), Enum(7, 'finWait2'), Enum(8, 'closeWait'), Enum(9, 'lastAck'), Enum(10, 'closing'), Enum(11, 'timeWait'), Enum(12, 'deleteTCB')]


# rows 
class ipv6TcpConnEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ipv6TcpConnLocalAddress, ipv6TcpConnLocalPort, ipv6TcpConnRemAddress, ipv6TcpConnRemPort, ipv6TcpConnIfIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 6, 16, 1])
	access = 2
	columns = {'ipv6TcpConnLocalAddress': ipv6TcpConnLocalAddress, 'ipv6TcpConnLocalPort': ipv6TcpConnLocalPort, 'ipv6TcpConnRemAddress': ipv6TcpConnRemAddress, 'ipv6TcpConnRemPort': ipv6TcpConnRemPort, 'ipv6TcpConnIfIndex': ipv6TcpConnIfIndex, 'ipv6TcpConnState': ipv6TcpConnState}


# notifications (traps) 
# groups 
class ipv6TcpGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 86, 2, 2, 1])
	group = [ipv6TcpConnState]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
