# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from RFC_1212 import OBJECT_TYPE
from BRIDGE_MIB import dot1dBridge, dot1dSr
from RFC1155_SMI import Counter, Gauge

class SOURCE_ROUTING_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/SOURCE-ROUTING-MIB'
	conformance = 132
	name = 'SOURCE-ROUTING-MIB'
	language = 1

# nodes
class dot1dPortPair(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 10])
	name = 'dot1dPortPair'


# macros
# types 
# scalars 
class dot1dSrBridgeLfMode(ScalarObject):
	status = 3
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 3, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'mode3'), Enum(2, 'mode6')]


class dot1dPortPairTableSize(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 10, 1])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


# columns
class dot1dSrPort(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 3, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dot1dSrPortHopCount(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 3, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dot1dSrPortLocalSegment(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 3, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dot1dSrPortBridgeNum(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 3, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dot1dSrPortTargetSegment(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 3, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dot1dSrPortLargestFrame(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 3, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dot1dSrPortSTESpanMode(ColumnObject):
	status = 3
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 3, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'auto-span'), Enum(2, 'disabled'), Enum(3, 'forced')]


class dot1dSrPortSpecInFrames(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 3, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dot1dSrPortSpecOutFrames(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 3, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dot1dSrPortApeInFrames(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 3, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dot1dSrPortApeOutFrames(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 3, 1, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dot1dSrPortSteInFrames(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 3, 1, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dot1dSrPortSteOutFrames(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 3, 1, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dot1dSrPortSegmentMismatchDiscards(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 3, 1, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dot1dSrPortDuplicateSegmentDiscards(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 3, 1, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dot1dSrPortHopCountExceededDiscards(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 3, 1, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dot1dSrPortDupLanIdOrTreeErrors(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 3, 1, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dot1dSrPortLanIdMismatches(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 3, 1, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dot1dPortPairLowPort(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 10, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dot1dPortPairHighPort(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 10, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dot1dPortPairBridgeNum(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 10, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dot1dPortPairBridgeState(ColumnObject):
	status = 3
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 10, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled'), Enum(3, 'invalid')]


# rows 
class dot1dSrPortEntry(RowObject):
	status = 3
	index = pycopia.SMI.Objects.IndexObjects([dot1dSrPort], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 3, 1, 1])
	access = 2
	columns = {'dot1dSrPort': dot1dSrPort, 'dot1dSrPortHopCount': dot1dSrPortHopCount, 'dot1dSrPortLocalSegment': dot1dSrPortLocalSegment, 'dot1dSrPortBridgeNum': dot1dSrPortBridgeNum, 'dot1dSrPortTargetSegment': dot1dSrPortTargetSegment, 'dot1dSrPortLargestFrame': dot1dSrPortLargestFrame, 'dot1dSrPortSTESpanMode': dot1dSrPortSTESpanMode, 'dot1dSrPortSpecInFrames': dot1dSrPortSpecInFrames, 'dot1dSrPortSpecOutFrames': dot1dSrPortSpecOutFrames, 'dot1dSrPortApeInFrames': dot1dSrPortApeInFrames, 'dot1dSrPortApeOutFrames': dot1dSrPortApeOutFrames, 'dot1dSrPortSteInFrames': dot1dSrPortSteInFrames, 'dot1dSrPortSteOutFrames': dot1dSrPortSteOutFrames, 'dot1dSrPortSegmentMismatchDiscards': dot1dSrPortSegmentMismatchDiscards, 'dot1dSrPortDuplicateSegmentDiscards': dot1dSrPortDuplicateSegmentDiscards, 'dot1dSrPortHopCountExceededDiscards': dot1dSrPortHopCountExceededDiscards, 'dot1dSrPortDupLanIdOrTreeErrors': dot1dSrPortDupLanIdOrTreeErrors, 'dot1dSrPortLanIdMismatches': dot1dSrPortLanIdMismatches}


class dot1dPortPairEntry(RowObject):
	status = 3
	index = pycopia.SMI.Objects.IndexObjects([dot1dPortPairLowPort, dot1dPortPairHighPort], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 10, 2, 1])
	access = 2
	columns = {'dot1dPortPairLowPort': dot1dPortPairLowPort, 'dot1dPortPairHighPort': dot1dPortPairHighPort, 'dot1dPortPairBridgeNum': dot1dPortPairBridgeNum, 'dot1dPortPairBridgeState': dot1dPortPairBridgeState}


# notifications (traps) 
# groups 
# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
