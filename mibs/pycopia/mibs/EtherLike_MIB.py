# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, OBJECT_IDENTITY, Integer32, Counter32, Counter64, mib_2, transmission
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from SNMPv2_TC import TruthValue
from IF_MIB import ifIndex, InterfaceIndex

class EtherLike_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/EtherLike-MIB'
	conformance = 5
	name = 'EtherLike-MIB'
	language = 2
	description = "The MIB module to describe generic objects for\nethernet-like network interfaces.\n\nThe following reference is used throughout this\nMIB module:\n\n[IEEE 802.3 Std] refers to:\n   IEEE Std 802.3, 2002 Edition: 'IEEE Standard\n\n\n\n   for Information technology -\n   Telecommunications and information exchange\n   between systems - Local and metropolitan\n   area networks - Specific requirements -\n   Part 3: Carrier sense multiple access with\n   collision detection (CSMA/CD) access method\n   and physical layer specifications', as\n   amended by IEEE Std 802.3ae-2002:\n   'Amendment: Media Access Control (MAC)\n   Parameters, Physical Layer, and Management\n   Parameters for 10 Gb/s Operation', August,\n   2002.\n\nOf particular interest is Clause 30, '10 Mb/s,\n100 Mb/s, 1000 Mb/s, and 10 Gb/s Management'.\n\nCopyright (C) The Internet Society (2003).  This\nversion of this MIB module is part of RFC 3635;\nsee the RFC itself for full legal notices."

# nodes
class dot3(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7])
	name = 'dot3'

class dot3Tests(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 6])
	name = 'dot3Tests'

class dot3TestTdr(NodeObject):
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 6, 1])
	name = 'dot3TestTdr'

class dot3TestLoopBack(NodeObject):
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 6, 2])
	name = 'dot3TestLoopBack'

class dot3Errors(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 7])
	name = 'dot3Errors'

class dot3ErrorInitError(NodeObject):
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 7, 1])
	name = 'dot3ErrorInitError'

class dot3ErrorLoopbackError(NodeObject):
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 7, 2])
	name = 'dot3ErrorLoopbackError'

class etherMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 35])
	name = 'etherMIB'

class etherMIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 35, 1])
	name = 'etherMIBObjects'

class etherConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 35, 2])
	name = 'etherConformance'

class etherGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 35, 2, 1])
	name = 'etherGroups'

class etherCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 35, 2, 2])
	name = 'etherCompliances'


# macros
# types 
# scalars 
# columns
class dot3StatsIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 1])
	syntaxobject = InterfaceIndex


class dot3StatsAlignmentErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dot3StatsFCSErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dot3StatsSingleCollisionFrames(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dot3StatsMultipleCollisionFrames(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dot3StatsSQETestErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dot3StatsDeferredTransmissions(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dot3StatsLateCollisions(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dot3StatsExcessiveCollisions(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dot3StatsInternalMacTransmitErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dot3StatsCarrierSenseErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dot3StatsFrameTooLongs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dot3StatsInternalMacReceiveErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dot3StatsEtherChipSet(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.ObjectIdentifier


class dot3StatsSymbolErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dot3StatsDuplexStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'unknown'), Enum(2, 'halfDuplex'), Enum(3, 'fullDuplex')]


class dot3StatsRateControlAbility(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 20])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class dot3StatsRateControlStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 2, 1, 21])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'rateControlOff'), Enum(2, 'rateControlOn'), Enum(3, 'unknown')]


class dot3CollCount(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 5, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dot3CollFrequencies(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 5, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dot3ControlFunctionsSupported(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 9, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.BITS


class dot3ControlInUnknownOpcodes(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 9, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dot3HCControlInUnknownOpcodes(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 9, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class dot3PauseAdminMode(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 10, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'disabled'), Enum(2, 'enabledXmit'), Enum(3, 'enabledRcv'), Enum(4, 'enabledXmitAndRcv')]


class dot3PauseOperMode(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 10, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'disabled'), Enum(2, 'enabledXmit'), Enum(3, 'enabledRcv'), Enum(4, 'enabledXmitAndRcv')]


class dot3InPauseFrames(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 10, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dot3OutPauseFrames(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 10, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dot3HCInPauseFrames(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 10, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class dot3HCOutPauseFrames(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 10, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class dot3HCStatsAlignmentErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 11, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class dot3HCStatsFCSErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 11, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class dot3HCStatsInternalMacTransmitErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 11, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class dot3HCStatsFrameTooLongs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 11, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class dot3HCStatsInternalMacReceiveErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 11, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class dot3HCStatsSymbolErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 11, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


# rows 
class dot3StatsEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([dot3StatsIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 2, 1])
	access = 2
	columns = {'dot3StatsIndex': dot3StatsIndex, 'dot3StatsAlignmentErrors': dot3StatsAlignmentErrors, 'dot3StatsFCSErrors': dot3StatsFCSErrors, 'dot3StatsSingleCollisionFrames': dot3StatsSingleCollisionFrames, 'dot3StatsMultipleCollisionFrames': dot3StatsMultipleCollisionFrames, 'dot3StatsSQETestErrors': dot3StatsSQETestErrors, 'dot3StatsDeferredTransmissions': dot3StatsDeferredTransmissions, 'dot3StatsLateCollisions': dot3StatsLateCollisions, 'dot3StatsExcessiveCollisions': dot3StatsExcessiveCollisions, 'dot3StatsInternalMacTransmitErrors': dot3StatsInternalMacTransmitErrors, 'dot3StatsCarrierSenseErrors': dot3StatsCarrierSenseErrors, 'dot3StatsFrameTooLongs': dot3StatsFrameTooLongs, 'dot3StatsInternalMacReceiveErrors': dot3StatsInternalMacReceiveErrors, 'dot3StatsEtherChipSet': dot3StatsEtherChipSet, 'dot3StatsSymbolErrors': dot3StatsSymbolErrors, 'dot3StatsDuplexStatus': dot3StatsDuplexStatus, 'dot3StatsRateControlAbility': dot3StatsRateControlAbility, 'dot3StatsRateControlStatus': dot3StatsRateControlStatus}


class dot3CollEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, dot3CollCount], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 5, 1])
	access = 2
	columns = {'dot3CollCount': dot3CollCount, 'dot3CollFrequencies': dot3CollFrequencies}


class dot3ControlEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([dot3StatsIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 9, 1])
	access = 2
	columns = {'dot3ControlFunctionsSupported': dot3ControlFunctionsSupported, 'dot3ControlInUnknownOpcodes': dot3ControlInUnknownOpcodes, 'dot3HCControlInUnknownOpcodes': dot3HCControlInUnknownOpcodes}


class dot3PauseEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([dot3StatsIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 10, 1])
	access = 2
	columns = {'dot3PauseAdminMode': dot3PauseAdminMode, 'dot3PauseOperMode': dot3PauseOperMode, 'dot3InPauseFrames': dot3InPauseFrames, 'dot3OutPauseFrames': dot3OutPauseFrames, 'dot3HCInPauseFrames': dot3HCInPauseFrames, 'dot3HCOutPauseFrames': dot3HCOutPauseFrames}


class dot3HCStatsEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([dot3StatsIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 7, 11, 1])
	access = 2
	columns = {'dot3HCStatsAlignmentErrors': dot3HCStatsAlignmentErrors, 'dot3HCStatsFCSErrors': dot3HCStatsFCSErrors, 'dot3HCStatsInternalMacTransmitErrors': dot3HCStatsInternalMacTransmitErrors, 'dot3HCStatsFrameTooLongs': dot3HCStatsFrameTooLongs, 'dot3HCStatsInternalMacReceiveErrors': dot3HCStatsInternalMacReceiveErrors, 'dot3HCStatsSymbolErrors': dot3HCStatsSymbolErrors}


# notifications (traps) 
# groups 
class etherStatsGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 35, 2, 1, 1])
	group = [dot3StatsIndex, dot3StatsAlignmentErrors, dot3StatsFCSErrors, dot3StatsSingleCollisionFrames, dot3StatsMultipleCollisionFrames, dot3StatsSQETestErrors, dot3StatsDeferredTransmissions, dot3StatsLateCollisions, dot3StatsExcessiveCollisions, dot3StatsInternalMacTransmitErrors, dot3StatsCarrierSenseErrors, dot3StatsFrameTooLongs, dot3StatsInternalMacReceiveErrors, dot3StatsEtherChipSet]

class etherCollisionTableGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 35, 2, 1, 2])
	group = [dot3CollFrequencies]

class etherStats100MbsGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 35, 2, 1, 3])
	group = [dot3StatsIndex, dot3StatsAlignmentErrors, dot3StatsFCSErrors, dot3StatsSingleCollisionFrames, dot3StatsMultipleCollisionFrames, dot3StatsDeferredTransmissions, dot3StatsLateCollisions, dot3StatsExcessiveCollisions, dot3StatsInternalMacTransmitErrors, dot3StatsCarrierSenseErrors, dot3StatsFrameTooLongs, dot3StatsInternalMacReceiveErrors, dot3StatsEtherChipSet, dot3StatsSymbolErrors]

class etherStatsBaseGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 35, 2, 1, 4])
	group = [dot3StatsIndex, dot3StatsAlignmentErrors, dot3StatsFCSErrors, dot3StatsSingleCollisionFrames, dot3StatsMultipleCollisionFrames, dot3StatsDeferredTransmissions, dot3StatsLateCollisions, dot3StatsExcessiveCollisions, dot3StatsInternalMacTransmitErrors, dot3StatsCarrierSenseErrors, dot3StatsFrameTooLongs, dot3StatsInternalMacReceiveErrors]

class etherStatsLowSpeedGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 35, 2, 1, 5])
	group = [dot3StatsSQETestErrors]

class etherStatsHighSpeedGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 35, 2, 1, 6])
	group = [dot3StatsSymbolErrors]

class etherDuplexGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 35, 2, 1, 7])
	group = [dot3StatsDuplexStatus]

class etherControlGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 35, 2, 1, 8])
	group = [dot3ControlFunctionsSupported, dot3ControlInUnknownOpcodes]

class etherControlPauseGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 35, 2, 1, 9])
	group = [dot3PauseAdminMode, dot3PauseOperMode, dot3InPauseFrames, dot3OutPauseFrames]

class etherStatsBaseGroup2(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 35, 2, 1, 10])
	group = [dot3StatsIndex, dot3StatsAlignmentErrors, dot3StatsFCSErrors, dot3StatsInternalMacTransmitErrors, dot3StatsFrameTooLongs, dot3StatsInternalMacReceiveErrors]

class etherStatsHalfDuplexGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 35, 2, 1, 11])
	group = [dot3StatsSingleCollisionFrames, dot3StatsMultipleCollisionFrames, dot3StatsDeferredTransmissions, dot3StatsLateCollisions, dot3StatsExcessiveCollisions, dot3StatsCarrierSenseErrors]

class etherHCStatsGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 35, 2, 1, 12])
	group = [dot3HCStatsAlignmentErrors, dot3HCStatsFCSErrors, dot3HCStatsInternalMacTransmitErrors, dot3HCStatsFrameTooLongs, dot3HCStatsInternalMacReceiveErrors, dot3HCStatsSymbolErrors]

class etherHCControlGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 35, 2, 1, 13])
	group = [dot3HCControlInUnknownOpcodes]

class etherHCControlPauseGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 35, 2, 1, 14])
	group = [dot3HCInPauseFrames, dot3HCOutPauseFrames]

class etherRateControlGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 35, 2, 1, 15])
	group = [dot3StatsRateControlAbility, dot3StatsRateControlStatus]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
