# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, NOTIFICATION_TYPE, IpAddress
from CISCO_TC import Unsigned32
from CISCO_SMI import ciscoMgmt
from SNMPv2_TC import TEXTUAL_CONVENTION, DisplayString, TimeStamp, RowStatus, TruthValue
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP

class CISCO_CONFIG_COPY_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/site/CISCO-CONFIG-COPY-MIB'
	conformance = 3
	name = 'CISCO-CONFIG-COPY-MIB'
	language = 2
	description = "This MIB facilitates writing of configuration files\nof an SNMP Agent running Cisco's IOS in the following ways:\nto and from the net, copying running configurations to startup\nconfigurations and vice-versa, and copying a configuration\n(running or startup) to and from the local IOS file system."

# nodes
class ciscoConfigCopyMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 96])
	name = 'ciscoConfigCopyMIB'

class ciscoConfigCopyMIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 96, 1])
	name = 'ciscoConfigCopyMIBObjects'

class ccCopy(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 96, 1, 1])
	name = 'ccCopy'

class ciscoConfigCopyMIBTrapPrefix(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 96, 2])
	name = 'ciscoConfigCopyMIBTrapPrefix'

class ccCopyMIBTraps(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 96, 2, 1])
	name = 'ccCopyMIBTraps'

class ciscoConfigCopyMIBConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 96, 3])
	name = 'ciscoConfigCopyMIBConformance'

class ccCopyMIBCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 96, 3, 1])
	name = 'ccCopyMIBCompliances'

class ccCopyMIBGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 96, 3, 2])
	name = 'ccCopyMIBGroups'


# macros
# types 

class ConfigCopyProtocol(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'tftp'), Enum(2, 'ftp'), Enum(3, 'rcp')]


class ConfigCopyState(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'waiting'), Enum(2, 'running'), Enum(3, 'successful'), Enum(4, 'failed')]


class ConfigCopyFailCause(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'unknown'), Enum(2, 'badFileName'), Enum(3, 'timeout'), Enum(4, 'noMem'), Enum(5, 'noConfig')]


class ConfigFileType(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'networkFile'), Enum(2, 'iosFile'), Enum(3, 'startupConfig'), Enum(4, 'runningConfig'), Enum(5, 'terminal')]

# scalars 
# columns
class ccCopyIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 96, 1, 1, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class ccCopyProtocol(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 96, 1, 1, 1, 1, 2])
	syntaxobject = ConfigCopyProtocol


class ccCopySourceFileType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 96, 1, 1, 1, 1, 3])
	syntaxobject = ConfigFileType


class ccCopyDestFileType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 96, 1, 1, 1, 1, 4])
	syntaxobject = ConfigFileType


class ccCopyServerAddress(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 96, 1, 1, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ccCopyFileName(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 96, 1, 1, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class ccCopyUserName(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 96, 1, 1, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class ccCopyUserPassword(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 96, 1, 1, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class ccCopyNotificationOnCompletion(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 96, 1, 1, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class ccCopyState(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 96, 1, 1, 1, 1, 10])
	syntaxobject = ConfigCopyState


class ccCopyTimeStarted(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 96, 1, 1, 1, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class ccCopyTimeCompleted(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 96, 1, 1, 1, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class ccCopyFailCause(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 96, 1, 1, 1, 1, 13])
	syntaxobject = ConfigCopyFailCause


class ccCopyEntryRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 96, 1, 1, 1, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


# rows 
class ccCopyEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ccCopyIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 96, 1, 1, 1, 1])
	access = 2
	rowstatus = ccCopyEntryRowStatus
	columns = {'ccCopyIndex': ccCopyIndex, 'ccCopyProtocol': ccCopyProtocol, 'ccCopySourceFileType': ccCopySourceFileType, 'ccCopyDestFileType': ccCopyDestFileType, 'ccCopyServerAddress': ccCopyServerAddress, 'ccCopyFileName': ccCopyFileName, 'ccCopyUserName': ccCopyUserName, 'ccCopyUserPassword': ccCopyUserPassword, 'ccCopyNotificationOnCompletion': ccCopyNotificationOnCompletion, 'ccCopyState': ccCopyState, 'ccCopyTimeStarted': ccCopyTimeStarted, 'ccCopyTimeCompleted': ccCopyTimeCompleted, 'ccCopyFailCause': ccCopyFailCause, 'ccCopyEntryRowStatus': ccCopyEntryRowStatus}


# notifications (traps) 
class ccCopyCompletion(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 96, 2, 1, 1])

# groups 
class ccCopyGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 96, 3, 2, 1])
	group = [ccCopyProtocol, ccCopySourceFileType, ccCopyDestFileType, ccCopyServerAddress, ccCopyFileName, ccCopyUserName, ccCopyUserPassword, ccCopyNotificationOnCompletion, ccCopyState, ccCopyTimeStarted, ccCopyTimeCompleted, ccCopyFailCause, ccCopyEntryRowStatus]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
