# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from FDDI_SMT73_MIB import fddimibPORTSMTIndex, fddimibPORTIndex
from IF_MIB import OwnerString, ifName, ifIndex
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, Integer32, IpAddress, TimeTicks, Counter32, Counter64, NOTIFICATION_TYPE
from TOKEN_RING_RMON_MIB import ringStationMacAddress
from CISCO_TC import Unsigned32
from CISCO_SMI import workgroup
from SNMPv2_TC import DisplayString, RowStatus

class CISCO_STACK_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/site/CISCO-STACK-MIB'
	conformance = 2
	name = 'CISCO-STACK-MIB'
	language = 2
	description = 'Main SNMP MIB for the Catalyst OS products such as\nCatalyst 1000, Catalyst 1200, Catalyst 4000,\nCatalyst 5000, and Catalyst 6000. This MIB provides\nconfiguration and runtime status for chassis, modules,\nports, etc. on the Catalyst systems.'

# nodes
class ciscoStackNotificationsPrefix(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 0])
	name = 'ciscoStackNotificationsPrefix'

class ciscoStackMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1])
	name = 'ciscoStackMIB'

class systemGrp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1])
	name = 'systemGrp'

class chassisGrp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 2])
	name = 'chassisGrp'

class moduleGrp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 3])
	name = 'moduleGrp'

class portGrp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 4])
	name = 'portGrp'

class tftpGrp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 5])
	name = 'tftpGrp'

class brouterGrp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 6])
	name = 'brouterGrp'

class filterGrp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 7])
	name = 'filterGrp'

class monitorGrp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 8])
	name = 'monitorGrp'

class vlanGrp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 9])
	name = 'vlanGrp'

class securityGrp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 10])
	name = 'securityGrp'

class tokenRingGrp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 11])
	name = 'tokenRingGrp'

class multicastGrp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 12])
	name = 'multicastGrp'

class dnsGrp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 13])
	name = 'dnsGrp'

class syslogGrp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 14])
	name = 'syslogGrp'

class ntpGrp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 15])
	name = 'ntpGrp'

class tacacsGrp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 16])
	name = 'tacacsGrp'

class ipPermitListGrp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 17])
	name = 'ipPermitListGrp'

class portChannelGrp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 18])
	name = 'portChannelGrp'

class portCpbGrp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 19])
	name = 'portCpbGrp'

class portTopNGrp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 20])
	name = 'portTopNGrp'

class mdgGrp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 21])
	name = 'mdgGrp'

class radiusGrp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 22])
	name = 'radiusGrp'

class traceRouteGrp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 24])
	name = 'traceRouteGrp'

class ciscoStackMIBConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 31])
	name = 'ciscoStackMIBConformance'

class ciscoStackMIBCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 1])
	name = 'ciscoStackMIBCompliances'

class ciscoStackMIBGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2])
	name = 'ciscoStackMIBGroups'

class adapterCard(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 2])
	name = 'adapterCard'

class wsc1000sysID(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 3])
	name = 'wsc1000sysID'

class wsc1100sysID(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 4])
	name = 'wsc1100sysID'

class wsc1200sysID(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 5])
	name = 'wsc1200sysID'

class wsc1400sysID(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 6])
	name = 'wsc1400sysID'

class wsc5000sysID(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 7])
	name = 'wsc5000sysID'

class wsc1600sysID(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 8])
	name = 'wsc1600sysID'

class cpw1600sysID(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 9])
	name = 'cpw1600sysID'

class wsc3000sysID(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 10])
	name = 'wsc3000sysID'

class ls1010sysID(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11])
	name = 'ls1010sysID'

class wsc2900sysID(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 12])
	name = 'wsc2900sysID'

class cpw2200sysID(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 13])
	name = 'cpw2200sysID'

class esStack(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 14])
	name = 'esStack'

class wsc3200sysID(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 15])
	name = 'wsc3200sysID'

class cpw1900sysID(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 16])
	name = 'cpw1900sysID'

class wsc5500sysID(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 17])
	name = 'wsc5500sysID'

class wsc1900sysID(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 18])
	name = 'wsc1900sysID'

class cpw1220sysID(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 19])
	name = 'cpw1220sysID'

class wsc2820sysID(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 20])
	name = 'wsc2820sysID'

class cpw1420sysID(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 21])
	name = 'cpw1420sysID'

class dcd(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 22])
	name = 'dcd'

class wsc3100sysID(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 23])
	name = 'wsc3100sysID'

class cpw1800sysID(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 24])
	name = 'cpw1800sysID'

class cpw1601sysID(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 25])
	name = 'cpw1601sysID'

class wsc3001sysID(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 26])
	name = 'wsc3001sysID'

class cpw1220csysID(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 27])
	name = 'cpw1220csysID'

class wsc1900csysID(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 28])
	name = 'wsc1900csysID'

class wsc5002sysID(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 29])
	name = 'wsc5002sysID'

class cpw1220isysID(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 30])
	name = 'cpw1220isysID'

class wsc1900isysID(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 31])
	name = 'wsc1900isysID'

class tsStack(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 32])
	name = 'tsStack'

class wsc3900sysID(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 33])
	name = 'wsc3900sysID'

class wsc5505sysID(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 34])
	name = 'wsc5505sysID'

class wsc2926sysID(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 35])
	name = 'wsc2926sysID'

class wsc5509sysID(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 36])
	name = 'wsc5509sysID'

class wsc3920sysID(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 37])
	name = 'wsc3920sysID'

class wsc6006sysID(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 38])
	name = 'wsc6006sysID'

class wsc6009sysID(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 39])
	name = 'wsc6009sysID'

class wsc4003sysID(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 40])
	name = 'wsc4003sysID'

class wsc4912gsysID(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 41])
	name = 'wsc4912gsysID'

class wsc2948gsysID(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 42])
	name = 'wsc2948gsysID'

class wsc6509sysID(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 44])
	name = 'wsc6509sysID'

class wsc6506sysID(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 45])
	name = 'wsc6506sysID'

class wsc1900LiteFxsysID(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 175])
	name = 'wsc1900LiteFxsysID'


# macros
# types 

class MacAddressType(pycopia.SMI.Basetypes.OctetString):
	ranges = Ranges(Range(6, 6))


class VendorIdType(pycopia.SMI.Basetypes.OctetString):
	ranges = Ranges(Range(3, 3))

# scalars 
class sysMgmtType(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'snmpV1'), Enum(3, 'smux'), Enum(4, 'snmpV2V1'), Enum(5, 'snmpV2cV1')]


class sysIpAddr(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class sysNetMask(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class sysBroadcast(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class sysAttachType(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'dualAttach'), Enum(3, 'singleAttach'), Enum(4, 'nullAttach'), Enum(5, 'dualPrio')]


class sysTraffic(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class sysReset(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'reset')]


class sysBaudRate(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(600, 'b600'), Enum(1200, 'b1200'), Enum(2400, 'b2400'), Enum(4800, 'b4800'), Enum(9600, 'b9600'), Enum(19200, 'b19200'), Enum(38400, 'b38400')]


class sysInsertMode(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'standard'), Enum(3, 'scheduled'), Enum(4, 'graceful')]


class sysClearMacTime(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class sysClearPortTime(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class sysEnableModem(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class sysEnableRedirects(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class sysEnableRmon(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class sysArpAgingTime(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class sysTrafficPeak(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class sysTrafficPeakTime(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 20])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class sysCommunityRwa(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 21])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class sysCommunityRw(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 22])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class sysCommunityRo(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 23])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class sysEnableChassisTraps(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 24])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class sysEnableModuleTraps(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 25])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class sysEnableBridgeTraps(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 26])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class sysIpVlan(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 27])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class sysConfigChangeTime(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 28])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class sysEnableRepeaterTraps(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 29])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class sysBannerMotd(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 30])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class sysEnableIpPermitTraps(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 31])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class sysEnableVmpsTraps(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 33])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class sysConfigChangeInfo(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 34])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class sysEnableConfigTraps(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 35])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class sysConfigRegister(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 36])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class sysBootVariable(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 37])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class sysBootedImage(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 38])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class sysEnableEntityTrap(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 39])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class sysEnableStpxTrap(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 40])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class sysExtendedRmonVlanModeEnable(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 41])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class sysExtendedRmonNetflowPassword(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 42])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class sysExtendedRmonNetflowEnable(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 43])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class sysExtendedRmonVlanAgentEnable(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 44])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class sysExtendedRmonEnable(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 45])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled'), Enum(3, 'noNAMPresent')]


class sysConsolePrimaryLoginAuthentication(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 46])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'tacacs'), Enum(2, 'radius'), Enum(3, 'local')]


class sysConsolePrimaryEnableAuthentication(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 47])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'tacacs'), Enum(2, 'radius'), Enum(3, 'local')]


class sysTelnetPrimaryLoginAuthentication(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 48])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'tacacs'), Enum(2, 'radius'), Enum(3, 'local')]


class sysTelnetPrimaryEnableAuthentication(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 49])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'tacacs'), Enum(2, 'radius'), Enum(3, 'local')]


class chassisSysType(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(3, 'wsc1000'), Enum(4, 'wsc1001'), Enum(5, 'wsc1100'), Enum(6, 'wsc5000'), Enum(7, 'wsc2900'), Enum(8, 'wsc5500'), Enum(9, 'wsc5002'), Enum(10, 'wsc5505'), Enum(11, 'wsc1200'), Enum(12, 'wsc1400'), Enum(13, 'wsc2926'), Enum(14, 'wsc5509'), Enum(15, 'wsc6006'), Enum(16, 'wsc6009'), Enum(17, 'wsc4003'), Enum(18, 'wsc5500e'), Enum(19, 'wsc4912g'), Enum(20, 'wsc2948g'), Enum(22, 'wsc6509'), Enum(23, 'wsc6506')]


class chassisBkplType(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'fddi'), Enum(3, 'fddiEthernet'), Enum(4, 'giga'), Enum(5, 'giga3'), Enum(6, 'giga3E'), Enum(7, 'giga12'), Enum(8, 'giga16')]


class chassisPs1Type(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'none'), Enum(3, 'w50'), Enum(4, 'w200'), Enum(5, 'w600'), Enum(6, 'w80'), Enum(7, 'w130'), Enum(8, 'wsc5008'), Enum(9, 'wsc5008a'), Enum(10, 'w175'), Enum(11, 'wsc5068'), Enum(12, 'wsc5508'), Enum(13, 'wsc5568'), Enum(14, 'wsc5508a'), Enum(15, 'w155'), Enum(16, 'w175pfc'), Enum(17, 'w175dc'), Enum(18, 'wsc5008b'), Enum(19, 'wsc5008c'), Enum(20, 'wsc5068b'), Enum(21, 'wscac1000'), Enum(22, 'wscac1300'), Enum(23, 'wscdc1000'), Enum(24, 'wscdc1300'), Enum(25, 'wsc4008'), Enum(26, 'wsc5518'), Enum(27, 'wsc5598'), Enum(28, 'w120'), Enum(29, 'externalPS')]


class chassisPs1Status(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'ok'), Enum(3, 'minorFault'), Enum(4, 'majorFault')]


class chassisPs1TestResult(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class chassisPs2Type(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'none'), Enum(3, 'w50'), Enum(4, 'w200'), Enum(5, 'w600'), Enum(6, 'w80'), Enum(7, 'w130'), Enum(8, 'wsc5008'), Enum(9, 'wsc5008a'), Enum(10, 'w175'), Enum(11, 'wsc5068'), Enum(12, 'wsc5508'), Enum(13, 'wsc5568'), Enum(14, 'wsc5508a'), Enum(15, 'w155'), Enum(16, 'w175pfc'), Enum(17, 'w175dc'), Enum(18, 'wsc5008b'), Enum(19, 'wsc5008c'), Enum(20, 'wsc5068b'), Enum(21, 'wscac1000'), Enum(22, 'wscac1300'), Enum(23, 'wscdc1000'), Enum(24, 'wscdc1360'), Enum(25, 'wsc4008'), Enum(26, 'wsc5518'), Enum(27, 'wsc5598'), Enum(28, 'w120'), Enum(29, 'externalPS')]


class chassisPs2Status(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 7])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'ok'), Enum(3, 'minorFault'), Enum(4, 'majorFault')]


class chassisPs2TestResult(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 8])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class chassisFanStatus(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 9])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'ok'), Enum(3, 'minorFault'), Enum(4, 'majorFault')]


class chassisFanTestResult(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 10])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class chassisMinorAlarm(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 11])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'off'), Enum(2, 'on')]


class chassisMajorAlarm(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 12])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'off'), Enum(2, 'on')]


class chassisTempAlarm(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 13])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'off'), Enum(2, 'on'), Enum(3, 'critical')]


class chassisNumSlots(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 14])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class chassisSlotConfig(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 15])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class chassisModel(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 16])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class chassisSerialNumber(ScalarObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 17])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class chassisSerialNumberString(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 19])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class tftpHost(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 5, 1])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class tftpFile(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 5, 2])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class tftpModule(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 5, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class tftpAction(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 5, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'downloadConfig'), Enum(3, 'uploadConfig'), Enum(4, 'downloadSw'), Enum(5, 'uploadSw'), Enum(6, 'downloadFw'), Enum(7, 'uploadFw')]


class tftpResult(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 5, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'inProgress'), Enum(2, 'success'), Enum(3, 'noResponse'), Enum(4, 'tooManyRetries'), Enum(5, 'noBuffers'), Enum(6, 'noProcesses'), Enum(7, 'badChecksum'), Enum(8, 'badLength'), Enum(9, 'badFlash'), Enum(10, 'serverError'), Enum(11, 'userCanceled'), Enum(12, 'wrongCode'), Enum(13, 'fileNotFound'), Enum(14, 'invalidTftpHost'), Enum(15, 'invalidTftpModule'), Enum(16, 'accessViolation'), Enum(17, 'unknownStatus'), Enum(18, 'invalidStorageDevice'), Enum(19, 'insufficientSpaceOnStorageDevice'), Enum(20, 'insufficientDramSize'), Enum(21, 'incompatibleImage')]


class brouterEnableRip(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class brouterEnableSpantree(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class brouterEnableGiantCheck(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class brouterEnableIpFragmentation(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class brouterEnableUnreachables(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class brouterCamAgingTime(ScalarObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class brouterCamMode(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 7])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'filtering'), Enum(2, 'forwarding')]


class brouterIpxSnapToEther(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 8])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'snap'), Enum(2, 'ethernetII'), Enum(3, 'iso8023'), Enum(4, 'raw8023')]


class brouterIpx8023RawToFddi(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 9])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'snap'), Enum(5, 'iso8022'), Enum(6, 'fddiRaw')]


class brouterEthernetReceiveMax(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 10])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class brouterEthernetTransmitMax(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 11])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class brouterFddiReceiveMax(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 12])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class brouterFddiTransmitMax(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 13])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class brouterIpx8022ToEther(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 15])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'snap'), Enum(2, 'ethernetII'), Enum(3, 'iso8023'), Enum(4, 'raw8023')]


class brouterEnableTransitEncapsulation(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 16])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class brouterEnableFddiCheck(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 17])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class brouterEnableAPaRT(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 18])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class monitorSourceModule(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 8, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class monitorSourcePort(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 8, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class monitorDestinationModule(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 8, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class monitorDestinationPort(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 8, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class monitorDirection(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 8, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'transmit'), Enum(2, 'receive'), Enum(3, 'transmitAndReceive')]


class monitorEnable(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 8, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class monitorAdminSourcePorts(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 8, 7])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class monitorOperSourcePorts(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 8, 8])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class vmpsAction(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'inProgress'), Enum(3, 'success'), Enum(4, 'noResponse'), Enum(5, 'noPrimaryVmps'), Enum(6, 'noDynamicPort'), Enum(7, 'noHostConnected'), Enum(8, 'reconfirm')]


class vmpsAccessed(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 6])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class tokenRingDripDistCrfMode(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class tokenRingDripAreReductionMode(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class tokenRingDripLocalNodeID(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 4])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class tokenRingDripLastRevision(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class tokenRingDripLastChangedRevision(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class tokenRingDripAdvertsReceived(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class tokenRingDripAdvertsTransmitted(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class tokenRingDripAdvertsProcessed(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class tokenRingDripInputQueueDrops(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class tokenRingDripOutputQueueDrops(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 11])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class mcastEnableCgmp(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 12, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class mcastEnableIgmp(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 12, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class dnsEnable(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 13, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class dnsDomainName(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 13, 3])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class syslogConsoleEnable(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 14, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class syslogHostEnable(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 14, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class syslogTimeStampOption(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 14, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class ntpBcastClient(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 15, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class ntpBcastDelay(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 15, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ntpClient(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 15, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class ntpSummertimeStatus(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 15, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class ntpSummerTimezoneName(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 15, 6])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class ntpTimezoneName(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 15, 7])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class ntpTimezoneOffsetHour(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 15, 8])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ntpTimezoneOffsetMinute(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 15, 9])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ntpAuthenticationEnable(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 15, 10])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class tacacsLoginAuthentication(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 16, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled'), Enum(3, 'enabledForTelnetOnly'), Enum(4, 'enabledForConsoleOnly')]


class tacacsEnableAuthentication(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 16, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled'), Enum(3, 'enabledForTelnetOnly'), Enum(4, 'enabledForConsoleOnly')]


class tacacsLocalLoginAuthentication(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 16, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled'), Enum(3, 'enabledForTelnetOnly'), Enum(4, 'enabledForConsoleOnly')]


class tacacsLocalEnableAuthentication(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 16, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled'), Enum(3, 'enabledForTelnetOnly'), Enum(4, 'enabledForConsoleOnly')]


class tacacsNumLoginAttempts(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 16, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class tacacsDirectedRequest(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 16, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class tacacsTimeout(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 16, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class tacacsAuthKey(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 16, 8])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class ipPermitEnable(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 17, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class radiusLoginAuthentication(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 22, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled'), Enum(3, 'enabledForTelnetOnly'), Enum(4, 'enabledForConsoleOnly')]


class radiusEnableAuthentication(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 22, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled'), Enum(3, 'enabledForTelnetOnly'), Enum(4, 'enabledForConsoleOnly')]


class radiusDeadtime(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 22, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class radiusAuthKey(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 22, 4])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class radiusTimeout(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 22, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class radiusRetransmits(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 22, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class traceRouteMaxQueries(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


# columns
class sysTrapReceiverType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 5, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'valid'), Enum(2, 'invalid')]


class sysTrapReceiverAddr(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 5, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class sysTrapReceiverComm(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 5, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class sysCommunityAccess(ColumnObject):
	status = 2
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 6, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'readOnly'), Enum(3, 'readWrite'), Enum(4, 'readWriteAll')]


class sysCommunityString(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 6, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class sysFddiRingSMTIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 14, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class sysFddiRingAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 14, 1, 2])
	syntaxobject = MacAddressType


class sysFddiRingNext(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 14, 1, 3])
	syntaxobject = MacAddressType


class sysTrafficMeterType(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 32, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'systemSwitchingBus'), Enum(2, 'switchingBusA'), Enum(3, 'switchingBusB'), Enum(4, 'switchingBusC')]


class sysTrafficMeter(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 32, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class sysTrafficMeterPeak(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 32, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class sysTrafficMeterPeakTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 32, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class chassisComponentIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 18, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class chassisComponentType(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 18, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'unknown'), Enum(2, 'wsc6000cl'), Enum(3, 'wsc6000vtt'), Enum(4, 'wsc6000tempSensor')]


class chassisComponentSerialNumber(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 18, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class chassisComponentHwVersion(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 18, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class chassisComponentModel(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 18, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class moduleIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class moduleType(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'empty'), Enum(3, 'wsc1000'), Enum(4, 'wsc1001'), Enum(5, 'wsc1100'), Enum(11, 'wsc1200'), Enum(12, 'wsc1400'), Enum(13, 'wsx1441'), Enum(14, 'wsx1444'), Enum(15, 'wsx1450'), Enum(16, 'wsx1483'), Enum(17, 'wsx1454'), Enum(18, 'wsx1455'), Enum(19, 'wsx1431'), Enum(20, 'wsx1465'), Enum(21, 'wsx1436'), Enum(22, 'wsx1434'), Enum(23, 'wsx5009'), Enum(24, 'wsx5013'), Enum(25, 'wsx5011'), Enum(26, 'wsx5010'), Enum(27, 'wsx5113'), Enum(28, 'wsx5101'), Enum(29, 'wsx5103'), Enum(30, 'wsx5104'), Enum(31, 'wsx5105'), Enum(32, 'wsx5155'), Enum(33, 'wsx5154'), Enum(34, 'wsx5153'), Enum(35, 'wsx5111'), Enum(36, 'wsx5213'), Enum(37, 'wsx5020'), Enum(38, 'wsx5006'), Enum(39, 'wsx5005'), Enum(40, 'wsx5509'), Enum(41, 'wsx5506'), Enum(42, 'wsx5505'), Enum(43, 'wsx5156'), Enum(44, 'wsx5157'), Enum(45, 'wsx5158'), Enum(46, 'wsx5030'), Enum(47, 'wsx5114'), Enum(48, 'wsx5223'), Enum(49, 'wsx5224'), Enum(50, 'wsx5012'), Enum(52, 'wsx5302'), Enum(53, 'wsx5213a'), Enum(54, 'wsx5380'), Enum(55, 'wsx5201'), Enum(56, 'wsx5203'), Enum(57, 'wsx5530'), Enum(61, 'wsx5161'), Enum(62, 'wsx5162'), Enum(65, 'wsx5165'), Enum(66, 'wsx5166'), Enum(67, 'wsx5031'), Enum(68, 'wsx5410'), Enum(69, 'wsx5403'), Enum(73, 'wsx5201r'), Enum(74, 'wsx5225r'), Enum(75, 'wsx5014'), Enum(76, 'wsx5015'), Enum(77, 'wsx5236'), Enum(78, 'wsx5540'), Enum(79, 'wsx5234'), Enum(81, 'wsx5012a'), Enum(82, 'wsx5167'), Enum(83, 'wsx5239'), Enum(84, 'wsx5168'), Enum(85, 'wsx5305'), Enum(86, 'wsx5238'), Enum(87, 'wsx5550'), Enum(88, 'wsf5541'), Enum(91, 'wsx5534'), Enum(92, 'wsx5536'), Enum(200, 'wsx6ksup12ge'), Enum(201, 'wsx6408gbic'), Enum(202, 'wsx6224mmmt'), Enum(203, 'wsx6248rj45'), Enum(204, 'wsx6248tel'), Enum(206, 'wsx6302msm'), Enum(300, 'wsx4012'), Enum(301, 'wsx4148rj'), Enum(302, 'wsx4232gbrj'), Enum(303, 'wsx4306gb'), Enum(304, 'wsx4418gb'), Enum(306, 'wsx4912gb'), Enum(307, 'wsx2948gbrj'), Enum(309, 'wsx2948'), Enum(310, 'wsx4912'), Enum(311, 'wsx4424sxmt'), Enum(312, 'wsx4232xx')]


class moduleSerialNumber(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class moduleHwHiVersion(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class moduleHwLoVersion(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class moduleFwHiVersion(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class moduleFwLoVersion(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class moduleSwHiVersion(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class moduleSwLoVersion(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class moduleStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'ok'), Enum(3, 'minorFault'), Enum(4, 'majorFault')]


class moduleTestResult(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class moduleAction(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'reset'), Enum(3, 'enable'), Enum(4, 'disable')]


class moduleName(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class moduleNumPorts(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class modulePortStatus(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class moduleSubType(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'empty'), Enum(3, 'wsf5510'), Enum(4, 'wsf5511'), Enum(6, 'wsx5304'), Enum(7, 'wsf5520'), Enum(8, 'wsf5521'), Enum(9, 'wsf5531'), Enum(100, 'wsf6020'), Enum(101, 'wsf6020a')]


class moduleModel(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class moduleHwVersion(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class moduleFwVersion(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class moduleSwVersion(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 20])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class moduleStandbyStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 21])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'active'), Enum(3, 'standby'), Enum(4, 'error')]


class moduleIPAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 22])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class moduleIPAddressVlan(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 23])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class moduleSubType2(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 24])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'empty'), Enum(3, 'wsu5531'), Enum(4, 'wsu5532'), Enum(5, 'wsu5533'), Enum(6, 'wsu5534'), Enum(7, 'wsu5535'), Enum(8, 'wsu5536'), Enum(9, 'wsu5537'), Enum(10, 'wsu5538'), Enum(11, 'wsu5539'), Enum(314, 'wsu4504fxmt')]


class moduleSlotNum(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 25])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class moduleSerialNumberString(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 26])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class portModuleIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class portIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class portCrossIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class portName(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class portType(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'cddi'), Enum(3, 'fddi'), Enum(4, 'tppmd'), Enum(5, 'mlt3'), Enum(6, 'sddi'), Enum(7, 'smf'), Enum(8, 'e10BaseT'), Enum(9, 'e10BaseF'), Enum(10, 'scf'), Enum(11, 'e100BaseTX'), Enum(12, 'e100BaseT4'), Enum(13, 'e100BaseF'), Enum(14, 'atmOc3mmf'), Enum(15, 'atmOc3smf'), Enum(16, 'atmOc3utp'), Enum(17, 'e100BaseFsm'), Enum(18, 'e10a100BaseTX'), Enum(19, 'mii'), Enum(20, 'vlanRouter'), Enum(22, 'tokenring'), Enum(23, 'atmOc12mmf'), Enum(24, 'atmOc12smf'), Enum(25, 'atmDs3'), Enum(26, 'tokenringMmf'), Enum(27, 'e1000BaseLX'), Enum(28, 'e1000BaseSX'), Enum(29, 'e1000BaseCX'), Enum(30, 'networkAnalysis'), Enum(31, 'empty'), Enum(32, 'e1000BaseLH'), Enum(33, 'e1000BaseT'), Enum(34, 'e1000UnsupportedGbic'), Enum(35, 'e1000BaseZX')]


class portOperStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'ok'), Enum(3, 'minorFault'), Enum(4, 'majorFault')]


class portCrossGroupIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class portAdditionalStatus(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class portAdminSpeed(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'autoDetect'), Enum(4000000, 's4000000'), Enum(10000000, 's10000000'), Enum(16000000, 's16000000'), Enum(45000000, 's45000000'), Enum(100000000, 's100000000'), Enum(155000000, 's155000000'), Enum(400000000, 's400000000'), Enum(622000000, 's622000000'), Enum(1000000000, 's1000000000')]


class portDuplex(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'half'), Enum(2, 'full'), Enum(3, 'disagree'), Enum(4, 'auto')]


class portIfIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class portSpantreeFastStart(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class portAdminRxFlowControl(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'on'), Enum(2, 'off'), Enum(3, 'desired')]


class portOperRxFlowControl(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'on'), Enum(2, 'off'), Enum(3, 'disagree')]


class portAdminTxFlowControl(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'on'), Enum(2, 'off'), Enum(3, 'desired')]


class portOperTxFlowControl(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'on'), Enum(2, 'off'), Enum(3, 'disagree')]


class portMacControlTransmitFrames(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class portMacControlReceiveFrames(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class portMacControlPauseTransmitFrames(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class portMacControlPauseReceiveFrames(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 20])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class portMacControlUnknownProtocolFrames(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 21])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class portLinkFaultStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 22])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'noFault'), Enum(2, 'nearEndFault'), Enum(3, 'nearEndConfigFail'), Enum(4, 'farEndDisable'), Enum(5, 'farEndFault'), Enum(6, 'farEndConfigFail'), Enum(7, 'notApplicable')]


class brouterPortModule(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 14, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class brouterPort(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 14, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class brouterPortIpVlan(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 14, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class brouterPortIpAddr(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 14, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class brouterPortNetMask(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 14, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class brouterPortBroadcast(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 14, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class brouterPortBridgeVlan(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 14, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class brouterPortIpHelpers(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 14, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class filterMacModule(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class filterMacPort(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class filterMacAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 1, 1, 3])
	syntaxobject = MacAddressType


class filterMacType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'deny'), Enum(2, 'invalid'), Enum(3, 'permit')]


class filterVendorModule(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class filterVendorPort(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class filterVendorId(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 2, 1, 3])
	syntaxobject = VendorIdType


class filterVendorType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'deny'), Enum(2, 'invalid'), Enum(3, 'permit')]


class filterProtocolModule(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 3, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class filterProtocolPort(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 3, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class filterProtocolValue(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 3, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class filterProtocolType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 3, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'deny'), Enum(2, 'invalid'), Enum(3, 'permit')]


class filterTestModule(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 4, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class filterTestPort(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 4, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class filterTestIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 4, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class filterTestType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 4, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'valid'), Enum(2, 'invalid')]


class filterTestOffset(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 4, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class filterTestValue(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 4, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class filterTestMask(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 4, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class filterPortModule(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 5, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class filterPort(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 5, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class filterPortComplex(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 5, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class filterPortBroadcastThrottle(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 5, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class filterPortBroadcastThreshold(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 5, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class filterPortBroadcastDiscards(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 5, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class vlanIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class vlanSpantreeEnable(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled'), Enum(3, 'notApplicable')]


class vlanIfIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class vlanPortModule(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 3, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class vlanPort(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 3, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class vlanPortVlan(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 3, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class vlanPortIslVlansAllowed(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 3, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class vlanPortSwitchLevel(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 3, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'normal'), Enum(2, 'high'), Enum(3, 'notApplicable')]


class vlanPortIslAdminStatus(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 3, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'on'), Enum(2, 'off'), Enum(3, 'desirable'), Enum(4, 'auto'), Enum(5, 'onNoNegotiate')]


class vlanPortIslOperStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 3, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'trunking'), Enum(2, 'notTrunking')]


class vlanPortIslPriorityVlans(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 3, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class vlanPortAdminStatus(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 3, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'static'), Enum(2, 'dynamic')]


class vlanPortOperStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 3, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'inactive'), Enum(2, 'active'), Enum(3, 'shutdown'), Enum(4, 'vlanActiveFault')]


class vmpsAddr(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 4, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class vmpsType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 4, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'invalid'), Enum(2, 'primary'), Enum(3, 'other')]


class portSecurityModuleIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 10, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class portSecurityPortIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 10, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class portSecurityAdminStatus(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 10, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class portSecurityOperStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 10, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'notShutdown'), Enum(2, 'shutdown')]


class portSecurityLastSrcAddr(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 10, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class portSecuritySecureSrcAddr(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 10, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class tokenRingModuleIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class tokenRingPortIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class tokenRingPortSetACbits(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class tokenRingPortMode(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'auto'), Enum(2, 'fdxCport'), Enum(3, 'fdxStation'), Enum(4, 'hdxCport'), Enum(5, 'hdxStation'), Enum(7, 'riro')]


class tokenRingPortEarlyTokenRel(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class tokenRingPortPriorityThresh(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class tokenRingPortPriorityMinXmit(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 1, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class tokenRingPortCfgLossThresh(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 1, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class tokenRingPortCfgLossInterval(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 1, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class tokenRingDripVlan(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 12, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class tokenRingDripLocalPortStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 12, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'active'), Enum(2, 'inactive')]


class tokenRingDripRemotePortStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 12, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'active'), Enum(2, 'inactive')]


class tokenRingDripRemotePortConfigured(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 12, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'true'), Enum(2, 'false')]


class tokenRingDripDistributedCrf(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 12, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'true'), Enum(2, 'false')]


class tokenRingDripBackupCrf(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 12, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'true'), Enum(2, 'false')]


class tokenRingDripOwnerNodeID(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 12, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class tokenRingPortSoftErrThresh(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 14, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class tokenRingPortSoftErrReportInterval(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 14, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class tokenRingPortSoftErrResetCounters(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 14, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'noop'), Enum(2, 'reset')]


class tokenRingPortSoftErrLastCounterReset(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 14, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class tokenRingPortSoftErrEnable(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 14, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class mcastRouterModuleIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 12, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class mcastRouterPortIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 12, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class mcastRouterAdminStatus(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 12, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'routerPresent'), Enum(3, 'dynamic')]


class mcastRouterOperStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 12, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'routerPresent'), Enum(2, 'noRouter')]


class dnsServerAddr(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 13, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class dnsServerType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 13, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'invalid'), Enum(2, 'primary'), Enum(3, 'other')]


class syslogServerAddr(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 14, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class syslogServerType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 14, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'valid'), Enum(2, 'invalid')]


class syslogMessageFacility(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 14, 4, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'cdp'), Enum(2, 'mcast'), Enum(3, 'dtp'), Enum(4, 'dvlan'), Enum(5, 'earl'), Enum(6, 'fddi'), Enum(7, 'ip'), Enum(8, 'pruning'), Enum(9, 'snmp'), Enum(10, 'spantree'), Enum(11, 'system'), Enum(12, 'tac'), Enum(13, 'tcp'), Enum(14, 'telnet'), Enum(15, 'tftp'), Enum(16, 'vtp'), Enum(17, 'vmps'), Enum(18, 'kernel'), Enum(19, 'filesys'), Enum(20, 'drip'), Enum(21, 'pagp'), Enum(22, 'mgmt'), Enum(23, 'mls'), Enum(24, 'protfilt'), Enum(25, 'security'), Enum(26, 'radius'), Enum(27, 'udld'), Enum(28, 'gvrp'), Enum(29, 'qos')]


class syslogMessageSeverity(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 14, 4, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'emergencies'), Enum(2, 'alerts'), Enum(3, 'critical'), Enum(4, 'errors'), Enum(5, 'warnings'), Enum(6, 'notification'), Enum(7, 'informational'), Enum(8, 'debugging')]


class ntpServerAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 15, 4, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ntpServerType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 15, 4, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'valid'), Enum(2, 'invalid')]


class ntpServerPublicKey(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 15, 4, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class ntpAuthenticationPublicKey(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 15, 11, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class ntpAuthenticationSecretKey(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 15, 11, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class ntpAuthenticationTrustedMode(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 15, 11, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'trusted'), Enum(2, 'untrusted')]


class ntpAuthenticationType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 15, 11, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'valid'), Enum(2, 'invalid')]


class tacacsServerAddr(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 16, 9, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class tacacsServerType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 16, 9, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'invalid'), Enum(2, 'primary'), Enum(3, 'other')]


class ipPermitAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 17, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ipPermitMask(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 17, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ipPermitType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 17, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'valid'), Enum(2, 'invalid')]


class ipPermitDeniedAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 17, 3, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ipPermitDeniedAccess(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 17, 3, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'telnet'), Enum(2, 'snmp')]


class ipPermitDeniedTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 17, 3, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class portChannelModuleIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 18, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class portChannelPortIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 18, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class portChannelPorts(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 18, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class portChannelAdminStatus(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 18, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'on'), Enum(2, 'off'), Enum(3, 'desirable'), Enum(4, 'auto'), Enum(5, 'desirableSilent'), Enum(6, 'autoSilent')]


class portChannelOperStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 18, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'channelling'), Enum(2, 'notChannelling')]


class portChannelNeighbourDeviceId(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 18, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class portChannelNeighbourPortId(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 18, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class portChannelProtInPackets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 18, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class portChannelProtOutPackets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 18, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class portChannelIfIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 18, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class portCpbModuleIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 19, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class portCpbPortIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 19, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class portCpbSpeed(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 19, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.BITS


class portCpbDuplex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 19, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.BITS


class portCpbTrunkEncapsulationType(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 19, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.BITS


class portCpbTrunkMode(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 19, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.BITS


class portCpbChannel(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 19, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class portCpbBroadcastSuppression(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 19, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.BITS


class portCpbFlowControl(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 19, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.BITS


class portCpbSecurity(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 19, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'yes'), Enum(2, 'no')]


class portCpbVlanMembership(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 19, 1, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.BITS


class portCpbPortfast(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 19, 1, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'yes'), Enum(2, 'no')]


class portTopNControlIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class portTopNRateBase(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'portTopNUtilization'), Enum(2, 'portTopNIOOctets'), Enum(3, 'portTopNIOPkts'), Enum(4, 'portTopNIOBroadcastPkts'), Enum(5, 'portTopNIOMulticastPkts'), Enum(6, 'portTopNInErrors'), Enum(7, 'portTopNBufferOverflow')]


class portTopNType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'portTopNAllPorts'), Enum(2, 'portTopNEthernet'), Enum(3, 'portTopNFastEthernet'), Enum(4, 'portTopNGigaEthernet'), Enum(5, 'portTopNTokenRing'), Enum(6, 'portTopNFDDI')]


class portTopNMode(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'portTopNForeground'), Enum(2, 'portTopNBackground')]


class portTopNReportStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'progressing'), Enum(2, 'ready')]


class portTopNDuration(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class portTopNTimeRemaining(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class portTopNStartTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class portTopNRequestedSize(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class portTopNGrantedSize(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class portTopNOwner(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 1, 1, 11])
	syntaxobject = OwnerString


class portTopNStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 1, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class portTopNIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class portTopNModuleNumber(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class portTopNPortNumber(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class portTopNUtilization(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class portTopNIOOctets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class portTopNIOPkts(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class portTopNIOBroadcast(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 2, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class portTopNIOMulticast(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 2, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class portTopNInErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 2, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class portTopNBufferOverFlow(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 2, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class mdgGatewayAddr(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 21, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class mdgGatewayType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 21, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'invalid'), Enum(2, 'primary'), Enum(3, 'other')]


class radiusServerAddr(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 22, 7, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class radiusServerAuthPort(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 22, 7, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class radiusServerType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 22, 7, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'invalid'), Enum(2, 'primary'), Enum(3, 'other')]


class traceRouteQueryIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class traceRouteHost(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class traceRouteQueryDNSEnable(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class traceRouteQueryWaitingTime(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class traceRouteQueryInitTTL(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class traceRouteQueryMaxTTL(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class traceRouteQueryUDPPort(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 2, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class traceRouteQueryPacketCount(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 2, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class traceRouteQueryPacketSize(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 2, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class traceRouteQueryTOS(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 2, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class traceRouteQueryResult(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 2, 1, 21])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class traceRouteQueryTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 2, 1, 22])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class traceRouteQueryOwner(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 2, 1, 23])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class traceRouteQueryStatus(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 2, 1, 24])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'valid'), Enum(2, 'invalid')]


class traceRouteDataIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 3, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class traceRouteDataGatewayName(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 3, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class traceRouteDataGatewayIp(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 3, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class traceRouteDataRtt(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 3, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = 'milliseconds'


class traceRouteDataHopCount(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 3, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class traceRouteDataErrors(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 3, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'icmpUnreachNet'), Enum(2, 'icmpUnreachHost'), Enum(3, 'icmpUnreachProtocol'), Enum(4, 'icmpUnreachPort'), Enum(5, 'icmpUnreachNeedFrag'), Enum(6, 'icmpUnreachSrcFail'), Enum(7, 'icmpUnreachNoNet'), Enum(8, 'icmpUnreachNoHost'), Enum(9, 'icmpUnreachHostIsolated'), Enum(10, 'icmpUnreachNetProhib'), Enum(11, 'icmpUnreachProhib'), Enum(12, 'icmpUnreachNetTos'), Enum(13, 'icmpUnreachHostTos'), Enum(14, 'icmpUnreachAdmin'), Enum(15, 'icmpUnreachHostPrec'), Enum(16, 'icmpUnreachPrecedence'), Enum(17, 'icmpUnknown'), Enum(18, 'icmpTimeOut'), Enum(19, 'icmpTTLExpired')]


# rows 
class sysTrapReceiverEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([sysTrapReceiverAddr], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 5, 1])
	access = 2
	columns = {'sysTrapReceiverType': sysTrapReceiverType, 'sysTrapReceiverAddr': sysTrapReceiverAddr, 'sysTrapReceiverComm': sysTrapReceiverComm}


class sysCommunityEntry(RowObject):
	status = 2
	index = pycopia.SMI.Objects.IndexObjects([sysCommunityAccess], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 6, 1])
	access = 2
	columns = {'sysCommunityAccess': sysCommunityAccess, 'sysCommunityString': sysCommunityString}


class sysFddiRingEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([sysFddiRingSMTIndex, sysFddiRingAddress], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 14, 1])
	access = 2
	columns = {'sysFddiRingSMTIndex': sysFddiRingSMTIndex, 'sysFddiRingAddress': sysFddiRingAddress, 'sysFddiRingNext': sysFddiRingNext}


class sysTrafficMeterEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([sysTrafficMeterType], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 32, 1])
	access = 2
	columns = {'sysTrafficMeterType': sysTrafficMeterType, 'sysTrafficMeter': sysTrafficMeter, 'sysTrafficMeterPeak': sysTrafficMeterPeak, 'sysTrafficMeterPeakTime': sysTrafficMeterPeakTime}


class chassisComponentEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([chassisComponentIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 18, 1])
	access = 2
	columns = {'chassisComponentIndex': chassisComponentIndex, 'chassisComponentType': chassisComponentType, 'chassisComponentSerialNumber': chassisComponentSerialNumber, 'chassisComponentHwVersion': chassisComponentHwVersion, 'chassisComponentModel': chassisComponentModel}


class moduleEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([moduleIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1])
	access = 2
	columns = {'moduleIndex': moduleIndex, 'moduleType': moduleType, 'moduleSerialNumber': moduleSerialNumber, 'moduleHwHiVersion': moduleHwHiVersion, 'moduleHwLoVersion': moduleHwLoVersion, 'moduleFwHiVersion': moduleFwHiVersion, 'moduleFwLoVersion': moduleFwLoVersion, 'moduleSwHiVersion': moduleSwHiVersion, 'moduleSwLoVersion': moduleSwLoVersion, 'moduleStatus': moduleStatus, 'moduleTestResult': moduleTestResult, 'moduleAction': moduleAction, 'moduleName': moduleName, 'moduleNumPorts': moduleNumPorts, 'modulePortStatus': modulePortStatus, 'moduleSubType': moduleSubType, 'moduleModel': moduleModel, 'moduleHwVersion': moduleHwVersion, 'moduleFwVersion': moduleFwVersion, 'moduleSwVersion': moduleSwVersion, 'moduleStandbyStatus': moduleStandbyStatus, 'moduleIPAddress': moduleIPAddress, 'moduleIPAddressVlan': moduleIPAddressVlan, 'moduleSubType2': moduleSubType2, 'moduleSlotNum': moduleSlotNum, 'moduleSerialNumberString': moduleSerialNumberString}


class portEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([portModuleIndex, portIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1])
	access = 2
	columns = {'portModuleIndex': portModuleIndex, 'portIndex': portIndex, 'portCrossIndex': portCrossIndex, 'portName': portName, 'portType': portType, 'portOperStatus': portOperStatus, 'portCrossGroupIndex': portCrossGroupIndex, 'portAdditionalStatus': portAdditionalStatus, 'portAdminSpeed': portAdminSpeed, 'portDuplex': portDuplex, 'portIfIndex': portIfIndex, 'portSpantreeFastStart': portSpantreeFastStart, 'portAdminRxFlowControl': portAdminRxFlowControl, 'portOperRxFlowControl': portOperRxFlowControl, 'portAdminTxFlowControl': portAdminTxFlowControl, 'portOperTxFlowControl': portOperTxFlowControl, 'portMacControlTransmitFrames': portMacControlTransmitFrames, 'portMacControlReceiveFrames': portMacControlReceiveFrames, 'portMacControlPauseTransmitFrames': portMacControlPauseTransmitFrames, 'portMacControlPauseReceiveFrames': portMacControlPauseReceiveFrames, 'portMacControlUnknownProtocolFrames': portMacControlUnknownProtocolFrames, 'portLinkFaultStatus': portLinkFaultStatus}


class brouterPortEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([brouterPortModule, brouterPort], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 14, 1])
	access = 2
	columns = {'brouterPortModule': brouterPortModule, 'brouterPort': brouterPort, 'brouterPortIpVlan': brouterPortIpVlan, 'brouterPortIpAddr': brouterPortIpAddr, 'brouterPortNetMask': brouterPortNetMask, 'brouterPortBroadcast': brouterPortBroadcast, 'brouterPortBridgeVlan': brouterPortBridgeVlan, 'brouterPortIpHelpers': brouterPortIpHelpers}


class filterMacEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([filterMacModule, filterMacPort, filterMacAddress], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 1, 1])
	access = 2
	columns = {'filterMacModule': filterMacModule, 'filterMacPort': filterMacPort, 'filterMacAddress': filterMacAddress, 'filterMacType': filterMacType}


class filterVendorEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([filterVendorModule, filterVendorPort, filterVendorId], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 2, 1])
	access = 2
	columns = {'filterVendorModule': filterVendorModule, 'filterVendorPort': filterVendorPort, 'filterVendorId': filterVendorId, 'filterVendorType': filterVendorType}


class filterProtocolEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([filterProtocolModule, filterProtocolPort, filterProtocolValue], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 3, 1])
	access = 2
	columns = {'filterProtocolModule': filterProtocolModule, 'filterProtocolPort': filterProtocolPort, 'filterProtocolValue': filterProtocolValue, 'filterProtocolType': filterProtocolType}


class filterTestEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([filterTestModule, filterTestPort, filterTestIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 4, 1])
	access = 2
	columns = {'filterTestModule': filterTestModule, 'filterTestPort': filterTestPort, 'filterTestIndex': filterTestIndex, 'filterTestType': filterTestType, 'filterTestOffset': filterTestOffset, 'filterTestValue': filterTestValue, 'filterTestMask': filterTestMask}


class filterPortEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([filterPortModule, filterPort], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 5, 1])
	access = 2
	columns = {'filterPortModule': filterPortModule, 'filterPort': filterPort, 'filterPortComplex': filterPortComplex, 'filterPortBroadcastThrottle': filterPortBroadcastThrottle, 'filterPortBroadcastThreshold': filterPortBroadcastThreshold, 'filterPortBroadcastDiscards': filterPortBroadcastDiscards}


class vlanEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([vlanIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 2, 1])
	access = 2
	columns = {'vlanIndex': vlanIndex, 'vlanSpantreeEnable': vlanSpantreeEnable, 'vlanIfIndex': vlanIfIndex}


class vlanPortEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([vlanPortModule, vlanPort], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 3, 1])
	access = 2
	columns = {'vlanPortModule': vlanPortModule, 'vlanPort': vlanPort, 'vlanPortVlan': vlanPortVlan, 'vlanPortIslVlansAllowed': vlanPortIslVlansAllowed, 'vlanPortSwitchLevel': vlanPortSwitchLevel, 'vlanPortIslAdminStatus': vlanPortIslAdminStatus, 'vlanPortIslOperStatus': vlanPortIslOperStatus, 'vlanPortIslPriorityVlans': vlanPortIslPriorityVlans, 'vlanPortAdminStatus': vlanPortAdminStatus, 'vlanPortOperStatus': vlanPortOperStatus}


class vmpsEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([vmpsAddr], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 4, 1])
	access = 2
	columns = {'vmpsAddr': vmpsAddr, 'vmpsType': vmpsType}


class portSecurityEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([portSecurityModuleIndex, portSecurityPortIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 10, 1, 1])
	access = 2
	columns = {'portSecurityModuleIndex': portSecurityModuleIndex, 'portSecurityPortIndex': portSecurityPortIndex, 'portSecurityAdminStatus': portSecurityAdminStatus, 'portSecurityOperStatus': portSecurityOperStatus, 'portSecurityLastSrcAddr': portSecurityLastSrcAddr, 'portSecuritySecureSrcAddr': portSecuritySecureSrcAddr}


class tokenRingPortEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([tokenRingModuleIndex, tokenRingPortIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 1, 1])
	access = 2
	columns = {'tokenRingModuleIndex': tokenRingModuleIndex, 'tokenRingPortIndex': tokenRingPortIndex, 'tokenRingPortSetACbits': tokenRingPortSetACbits, 'tokenRingPortMode': tokenRingPortMode, 'tokenRingPortEarlyTokenRel': tokenRingPortEarlyTokenRel, 'tokenRingPortPriorityThresh': tokenRingPortPriorityThresh, 'tokenRingPortPriorityMinXmit': tokenRingPortPriorityMinXmit, 'tokenRingPortCfgLossThresh': tokenRingPortCfgLossThresh, 'tokenRingPortCfgLossInterval': tokenRingPortCfgLossInterval}


class tokenRingDripLocalVlanStatusEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([tokenRingDripVlan], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 12, 1])
	access = 2
	columns = {'tokenRingDripVlan': tokenRingDripVlan, 'tokenRingDripLocalPortStatus': tokenRingDripLocalPortStatus, 'tokenRingDripRemotePortStatus': tokenRingDripRemotePortStatus, 'tokenRingDripRemotePortConfigured': tokenRingDripRemotePortConfigured, 'tokenRingDripDistributedCrf': tokenRingDripDistributedCrf, 'tokenRingDripBackupCrf': tokenRingDripBackupCrf, 'tokenRingDripOwnerNodeID': tokenRingDripOwnerNodeID}


from CISCO_STACK_MIB import tokenRingModuleIndex
from CISCO_STACK_MIB import tokenRingPortIndex
class tokenRingPortSoftErrEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([tokenRingModuleIndex, tokenRingPortIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 14, 1])
	access = 2
	columns = {'tokenRingPortSoftErrThresh': tokenRingPortSoftErrThresh, 'tokenRingPortSoftErrReportInterval': tokenRingPortSoftErrReportInterval, 'tokenRingPortSoftErrResetCounters': tokenRingPortSoftErrResetCounters, 'tokenRingPortSoftErrLastCounterReset': tokenRingPortSoftErrLastCounterReset, 'tokenRingPortSoftErrEnable': tokenRingPortSoftErrEnable}


class mcastRouterEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([mcastRouterModuleIndex, mcastRouterPortIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 12, 1, 1])
	access = 2
	columns = {'mcastRouterModuleIndex': mcastRouterModuleIndex, 'mcastRouterPortIndex': mcastRouterPortIndex, 'mcastRouterAdminStatus': mcastRouterAdminStatus, 'mcastRouterOperStatus': mcastRouterOperStatus}


class dnsServerEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([dnsServerAddr], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 13, 2, 1])
	access = 2
	columns = {'dnsServerAddr': dnsServerAddr, 'dnsServerType': dnsServerType}


class syslogServerEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([syslogServerAddr], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 14, 1, 1])
	access = 2
	columns = {'syslogServerAddr': syslogServerAddr, 'syslogServerType': syslogServerType}


class syslogMessageControlEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([syslogMessageFacility], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 14, 4, 1])
	access = 2
	columns = {'syslogMessageFacility': syslogMessageFacility, 'syslogMessageSeverity': syslogMessageSeverity}


class ntpServerEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ntpServerAddress], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 15, 4, 1])
	access = 2
	columns = {'ntpServerAddress': ntpServerAddress, 'ntpServerType': ntpServerType, 'ntpServerPublicKey': ntpServerPublicKey}


class ntpAuthenticationEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ntpAuthenticationPublicKey], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 15, 11, 1])
	access = 2
	columns = {'ntpAuthenticationPublicKey': ntpAuthenticationPublicKey, 'ntpAuthenticationSecretKey': ntpAuthenticationSecretKey, 'ntpAuthenticationTrustedMode': ntpAuthenticationTrustedMode, 'ntpAuthenticationType': ntpAuthenticationType}


class tacacsServerEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([tacacsServerAddr], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 16, 9, 1])
	access = 2
	columns = {'tacacsServerAddr': tacacsServerAddr, 'tacacsServerType': tacacsServerType}


class ipPermitListEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ipPermitAddress, ipPermitMask], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 17, 2, 1])
	access = 2
	columns = {'ipPermitAddress': ipPermitAddress, 'ipPermitMask': ipPermitMask, 'ipPermitType': ipPermitType}


class ipPermitDeniedListEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ipPermitDeniedAddress], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 17, 3, 1])
	access = 2
	columns = {'ipPermitDeniedAddress': ipPermitDeniedAddress, 'ipPermitDeniedAccess': ipPermitDeniedAccess, 'ipPermitDeniedTime': ipPermitDeniedTime}


class portChannelEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([portChannelModuleIndex, portChannelPortIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 18, 1, 1])
	access = 2
	columns = {'portChannelModuleIndex': portChannelModuleIndex, 'portChannelPortIndex': portChannelPortIndex, 'portChannelPorts': portChannelPorts, 'portChannelAdminStatus': portChannelAdminStatus, 'portChannelOperStatus': portChannelOperStatus, 'portChannelNeighbourDeviceId': portChannelNeighbourDeviceId, 'portChannelNeighbourPortId': portChannelNeighbourPortId, 'portChannelProtInPackets': portChannelProtInPackets, 'portChannelProtOutPackets': portChannelProtOutPackets, 'portChannelIfIndex': portChannelIfIndex}


class portCpbEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([portCpbModuleIndex, portCpbPortIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 19, 1, 1])
	access = 2
	columns = {'portCpbModuleIndex': portCpbModuleIndex, 'portCpbPortIndex': portCpbPortIndex, 'portCpbSpeed': portCpbSpeed, 'portCpbDuplex': portCpbDuplex, 'portCpbTrunkEncapsulationType': portCpbTrunkEncapsulationType, 'portCpbTrunkMode': portCpbTrunkMode, 'portCpbChannel': portCpbChannel, 'portCpbBroadcastSuppression': portCpbBroadcastSuppression, 'portCpbFlowControl': portCpbFlowControl, 'portCpbSecurity': portCpbSecurity, 'portCpbVlanMembership': portCpbVlanMembership, 'portCpbPortfast': portCpbPortfast}


class portTopNControlEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([portTopNControlIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 1, 1])
	access = 2
	rowstatus = portTopNStatus
	columns = {'portTopNControlIndex': portTopNControlIndex, 'portTopNRateBase': portTopNRateBase, 'portTopNType': portTopNType, 'portTopNMode': portTopNMode, 'portTopNReportStatus': portTopNReportStatus, 'portTopNDuration': portTopNDuration, 'portTopNTimeRemaining': portTopNTimeRemaining, 'portTopNStartTime': portTopNStartTime, 'portTopNRequestedSize': portTopNRequestedSize, 'portTopNGrantedSize': portTopNGrantedSize, 'portTopNOwner': portTopNOwner, 'portTopNStatus': portTopNStatus}


class portTopNEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([portTopNControlIndex, portTopNIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 2, 1])
	access = 2
	columns = {'portTopNIndex': portTopNIndex, 'portTopNModuleNumber': portTopNModuleNumber, 'portTopNPortNumber': portTopNPortNumber, 'portTopNUtilization': portTopNUtilization, 'portTopNIOOctets': portTopNIOOctets, 'portTopNIOPkts': portTopNIOPkts, 'portTopNIOBroadcast': portTopNIOBroadcast, 'portTopNIOMulticast': portTopNIOMulticast, 'portTopNInErrors': portTopNInErrors, 'portTopNBufferOverFlow': portTopNBufferOverFlow}


class mdgGatewayEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([mdgGatewayAddr], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 21, 1, 1])
	access = 2
	columns = {'mdgGatewayAddr': mdgGatewayAddr, 'mdgGatewayType': mdgGatewayType}


class radiusServerEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([radiusServerAddr], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 22, 7, 1])
	access = 2
	columns = {'radiusServerAddr': radiusServerAddr, 'radiusServerAuthPort': radiusServerAuthPort, 'radiusServerType': radiusServerType}


class traceRouteQueryEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([traceRouteQueryIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 2, 1])
	access = 2
	columns = {'traceRouteQueryIndex': traceRouteQueryIndex, 'traceRouteHost': traceRouteHost, 'traceRouteQueryDNSEnable': traceRouteQueryDNSEnable, 'traceRouteQueryWaitingTime': traceRouteQueryWaitingTime, 'traceRouteQueryInitTTL': traceRouteQueryInitTTL, 'traceRouteQueryMaxTTL': traceRouteQueryMaxTTL, 'traceRouteQueryUDPPort': traceRouteQueryUDPPort, 'traceRouteQueryPacketCount': traceRouteQueryPacketCount, 'traceRouteQueryPacketSize': traceRouteQueryPacketSize, 'traceRouteQueryTOS': traceRouteQueryTOS, 'traceRouteQueryResult': traceRouteQueryResult, 'traceRouteQueryTime': traceRouteQueryTime, 'traceRouteQueryOwner': traceRouteQueryOwner, 'traceRouteQueryStatus': traceRouteQueryStatus}


class traceRouteDataEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([traceRouteQueryIndex, traceRouteDataIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 3, 1])
	access = 2
	columns = {'traceRouteDataIndex': traceRouteDataIndex, 'traceRouteDataGatewayName': traceRouteDataGatewayName, 'traceRouteDataGatewayIp': traceRouteDataGatewayIp, 'traceRouteDataRtt': traceRouteDataRtt, 'traceRouteDataHopCount': traceRouteDataHopCount, 'traceRouteDataErrors': traceRouteDataErrors}


# notifications (traps) 
class lerAlarmOn(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 0, 1])

class lerAlarmOff(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 0, 2])

class moduleUp(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 0, 3])

class moduleDown(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 0, 4])

class chassisAlarmOn(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 0, 5])

class chassisAlarmOff(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 0, 6])

class ipPermitDeniedTrap(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 0, 7])

class sysConfigChangeTrap(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 0, 9])

class tokenRingSoftErrExceededTrap(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 0, 10])

# groups 
class systemMiscGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 1])
	group = [sysMgmtType, sysIpAddr, sysNetMask, sysBroadcast, sysAttachType, sysReset, sysBaudRate, sysInsertMode, sysClearMacTime, sysClearPortTime, sysEnableModem, sysEnableRedirects, sysArpAgingTime, sysCommunityRwa, sysCommunityRw, sysCommunityRo, sysIpVlan]

class systemTrapGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 2])
	group = [sysTrapReceiverAddr, sysTrapReceiverType, sysTrapReceiverComm, sysEnableChassisTraps, sysEnableModuleTraps, sysEnableBridgeTraps, sysEnableRepeaterTraps]

class chassisGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 3])
	group = [chassisSysType, chassisBkplType, chassisPs1Type, chassisPs1Status, chassisPs1TestResult, chassisPs2Type, chassisPs2Status, chassisPs2TestResult, chassisFanStatus, chassisFanTestResult, chassisMinorAlarm, chassisMajorAlarm, chassisTempAlarm, chassisNumSlots]

class moduleGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 4])
	group = [moduleIndex, moduleType, moduleStatus, moduleTestResult, moduleAction, moduleName, moduleNumPorts, modulePortStatus, moduleSubType, moduleSerialNumberString]

class portGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 5])
	group = [portModuleIndex, portIndex, portCrossIndex, portName, portType, portOperStatus, portCrossGroupIndex, portAdditionalStatus, portAdminSpeed, portDuplex, portIfIndex, portSpantreeFastStart, portAdminRxFlowControl, portOperRxFlowControl, portAdminTxFlowControl, portOperTxFlowControl, portMacControlTransmitFrames, portMacControlReceiveFrames, portMacControlPauseTransmitFrames, portMacControlPauseReceiveFrames, portMacControlUnknownProtocolFrames, portLinkFaultStatus]

class optionalSystemMiscGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 6])
	group = [sysConfigChangeTime, sysBannerMotd, sysConfigChangeInfo, sysConfigRegister, sysBootVariable, sysBootedImage]

class optionalSystemTrapGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 7])
	group = [sysEnableIpPermitTraps, sysEnableVmpsTraps, sysEnableConfigTraps, sysEnableEntityTrap, sysEnableStpxTrap]

class optionalChassisGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 8])
	group = [chassisPs1TestResult, chassisPs2TestResult, chassisFanTestResult, chassisSlotConfig, chassisModel, chassisComponentIndex, chassisComponentType, chassisComponentSerialNumber, chassisComponentHwVersion, chassisComponentModel, chassisSerialNumberString]

class optionalModuleGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 9])
	group = [moduleTestResult, moduleModel, moduleHwVersion, moduleFwVersion, moduleSwVersion, moduleStandbyStatus, moduleIPAddress, moduleIPAddressVlan, moduleSubType2, moduleSlotNum]

class optionalPortGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 10])
	group = [portSecurityModuleIndex, portSecurityPortIndex, portSecurityAdminStatus, portSecurityOperStatus, portSecurityLastSrcAddr, portSecuritySecureSrcAddr, portChannelModuleIndex, portChannelPortIndex, portChannelPorts, portChannelAdminStatus, portChannelOperStatus, portChannelNeighbourDeviceId, portChannelNeighbourPortId, portChannelProtInPackets, portChannelProtOutPackets, portChannelIfIndex, portCpbModuleIndex, portCpbPortIndex, portCpbSpeed, portCpbDuplex, portCpbTrunkEncapsulationType, portCpbTrunkMode, portCpbChannel, portCpbBroadcastSuppression, portCpbFlowControl, portCpbSecurity, portCpbVlanMembership, portCpbPortfast, portTopNControlIndex, portTopNRateBase, portTopNType, portTopNMode, portTopNReportStatus, portTopNDuration, portTopNTimeRemaining, portTopNStartTime, portTopNRequestedSize, portTopNGrantedSize, portTopNOwner, portTopNStatus, portTopNIndex, portTopNModuleNumber, portTopNPortNumber, portTopNUtilization, portTopNIOOctets, portTopNIOPkts, portTopNIOBroadcast, portTopNIOMulticast, portTopNInErrors, portTopNBufferOverFlow]

class systemTrafficGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 11])
	group = [sysTrafficMeterType, sysTraffic, sysTrafficPeak, sysTrafficPeakTime, sysTrafficMeter, sysTrafficMeterPeak, sysTrafficMeterPeakTime]

class systemFddiGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 12])
	group = [sysFddiRingSMTIndex, sysFddiRingAddress, sysFddiRingNext]

class systemRmonGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 13])
	group = [sysEnableRmon, sysExtendedRmonVlanModeEnable, sysExtendedRmonNetflowPassword, sysExtendedRmonNetflowEnable, sysExtendedRmonVlanAgentEnable, sysExtendedRmonEnable]

class authenticationGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 14])
	group = [sysConsolePrimaryLoginAuthentication, sysConsolePrimaryEnableAuthentication, sysTelnetPrimaryLoginAuthentication, sysTelnetPrimaryEnableAuthentication, tacacsLoginAuthentication, tacacsEnableAuthentication, tacacsLocalLoginAuthentication, tacacsLocalEnableAuthentication, tacacsNumLoginAttempts, tacacsDirectedRequest, tacacsTimeout, tacacsAuthKey, tacacsServerAddr, tacacsServerType, radiusLoginAuthentication, radiusEnableAuthentication, radiusDeadtime, radiusAuthKey, radiusTimeout, radiusRetransmits, radiusServerAddr, radiusServerAuthPort, radiusServerType]

class tftpGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 15])
	group = [tftpHost, tftpFile, tftpModule, tftpAction, tftpResult]

class brouteEnableGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 16])
	group = [brouterPortModule, brouterPort, brouterEnableRip, brouterEnableSpantree, brouterEnableGiantCheck, brouterEnableIpFragmentation, brouterEnableUnreachables, brouterCamMode, brouterIpxSnapToEther, brouterIpx8023RawToFddi, brouterEthernetReceiveMax, brouterEthernetTransmitMax, brouterFddiReceiveMax, brouterFddiTransmitMax, brouterPortIpVlan, brouterPortIpAddr, brouterPortNetMask, brouterPortBroadcast, brouterPortBridgeVlan, brouterPortIpHelpers, brouterIpx8022ToEther, brouterEnableTransitEncapsulation, brouterEnableFddiCheck, brouterEnableAPaRT]

class filterGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 17])
	group = [filterMacModule, filterMacPort, filterMacAddress, filterMacType, filterVendorModule, filterVendorPort, filterVendorId, filterVendorType, filterProtocolModule, filterProtocolPort, filterProtocolValue, filterProtocolType, filterTestModule, filterTestPort, filterTestIndex, filterTestType, filterTestOffset, filterTestValue, filterTestMask, filterPortModule, filterPort, filterPortComplex, filterPortBroadcastThrottle, filterPortBroadcastThreshold, filterPortBroadcastDiscards]

class monitorGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 18])
	group = [monitorSourceModule, monitorSourcePort, monitorDestinationModule, monitorDestinationPort, monitorDirection, monitorEnable, monitorAdminSourcePorts, monitorOperSourcePorts]

class vlanGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 19])
	group = [vlanIndex, vlanSpantreeEnable, vlanIfIndex, vlanPortModule, vlanPort, vlanPortVlan, vlanPortIslVlansAllowed, vlanPortSwitchLevel, vlanPortIslAdminStatus, vlanPortIslOperStatus, vlanPortIslPriorityVlans, vlanPortAdminStatus, vlanPortOperStatus]

class vmpsGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 20])
	group = [vmpsAddr, vmpsType, vmpsAction, vmpsAccessed]

class tokenRingGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 21])
	group = [tokenRingModuleIndex, tokenRingPortIndex, tokenRingPortSetACbits, tokenRingPortMode, tokenRingPortEarlyTokenRel, tokenRingPortPriorityThresh, tokenRingPortPriorityMinXmit, tokenRingPortCfgLossThresh, tokenRingPortCfgLossInterval, tokenRingDripDistCrfMode, tokenRingDripAreReductionMode, tokenRingDripLocalNodeID, tokenRingDripLastRevision, tokenRingDripLastChangedRevision, tokenRingDripAdvertsReceived, tokenRingDripAdvertsTransmitted, tokenRingDripAdvertsProcessed, tokenRingDripInputQueueDrops, tokenRingDripOutputQueueDrops, tokenRingDripVlan, tokenRingDripLocalPortStatus, tokenRingDripRemotePortStatus, tokenRingDripRemotePortConfigured, tokenRingDripDistributedCrf, tokenRingDripBackupCrf, tokenRingDripOwnerNodeID]

class mcastGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 22])
	group = [mcastRouterModuleIndex, mcastRouterPortIndex, mcastRouterAdminStatus, mcastRouterOperStatus, mcastEnableCgmp, mcastEnableIgmp]

class dnsGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 23])
	group = [dnsEnable, dnsServerAddr, dnsServerType, dnsDomainName]

class syslogGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 24])
	group = [syslogServerAddr, syslogServerType, syslogConsoleEnable, syslogHostEnable, syslogMessageFacility, syslogMessageSeverity, syslogTimeStampOption]

class ntpGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 25])
	group = [ntpBcastClient, ntpBcastDelay, ntpClient, ntpServerAddress, ntpServerType, ntpSummertimeStatus, ntpSummerTimezoneName, ntpTimezoneName, ntpTimezoneOffsetHour, ntpTimezoneOffsetMinute]

class ipPermitGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 26])
	group = [ipPermitAddress, ipPermitMask, ipPermitEnable, ipPermitType, ipPermitDeniedAddress, ipPermitDeniedAccess, ipPermitDeniedTime]

class mdgGatewayGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 27])
	group = [mdgGatewayAddr, mdgGatewayType]

class traceRouteGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 28])
	group = [traceRouteMaxQueries, traceRouteQueryIndex, traceRouteHost, traceRouteQueryDNSEnable, traceRouteQueryWaitingTime, traceRouteQueryInitTTL, traceRouteQueryMaxTTL, traceRouteQueryUDPPort, traceRouteQueryPacketCount, traceRouteQueryPacketSize, traceRouteQueryTOS, traceRouteQueryResult, traceRouteQueryTime, traceRouteQueryOwner, traceRouteQueryStatus, traceRouteDataIndex, traceRouteDataGatewayName, traceRouteDataGatewayIp, traceRouteDataRtt, traceRouteDataHopCount, traceRouteDataErrors]

class deprecatedObjectGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 29])
	group = [sysCommunityAccess, sysCommunityString, moduleHwHiVersion, moduleHwLoVersion, moduleFwHiVersion, moduleFwLoVersion, moduleSwHiVersion, moduleSwLoVersion, brouterCamAgingTime, chassisSerialNumber, moduleSerialNumber]

class ntpAuthenticationGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 30])
	group = [ntpServerPublicKey, ntpAuthenticationEnable, ntpAuthenticationPublicKey, ntpAuthenticationSecretKey, ntpAuthenticationTrustedMode, ntpAuthenticationType]

class tokenRingSoftErrorMonitorGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 31])
	group = [tokenRingPortSoftErrThresh, tokenRingPortSoftErrReportInterval, tokenRingPortSoftErrResetCounters, tokenRingPortSoftErrLastCounterReset, tokenRingPortSoftErrEnable]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
