# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, IpAddress
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from CISCO_SMI import ciscoMgmt
from SNMPv2_TC import DisplayString, RowStatus, TruthValue
from CISCO_CHANNEL_MIB import cipCardEntryIndex, cipCardDtrBrdIndex, cipCardSubChannelIndex

class CISCO_TCPOFFLOAD_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/site/CISCO-TCPOFFLOAD-MIB'
	conformance = 2
	name = 'CISCO-TCPOFFLOAD-MIB'
	language = 2
	description = 'This is the MIB module for objects used to manage\nthe cisco tcp offload feature.\n\nThe IBM mainframe (host) supports TCP/IP. As a way to\nsave cycles on the host, the TCP/IP stack can be run \non the 3172. This offloads the host from the protocol \nprocessing and is known as TCP-OFFLOAD. This mib \nidentifies the manageable objects for the TCP-OFFLOAD\nfeature in the Cisco router.'

# nodes
class ciscoTcpOffloadMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 31])
	name = 'ciscoTcpOffloadMIB'

class tcpOffloadObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 31, 1])
	name = 'tcpOffloadObjects'

class cipCardOffloadConfig(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 31, 1, 1])
	name = 'cipCardOffloadConfig'

class ciscoTcpOffloadMibConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 31, 2])
	name = 'ciscoTcpOffloadMibConformance'

class ciscoTcpOffloadMibCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 31, 2, 1])
	name = 'ciscoTcpOffloadMibCompliances'

class ciscoTcpOffloadMibGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 31, 2, 2])
	name = 'ciscoTcpOffloadMibGroups'


# macros
# types 
# scalars 
# columns
class cipCardOffloadConfigPath(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 31, 1, 1, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class cipCardOffloadConfigDevice(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 31, 1, 1, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class cipCardOffloadConfigIpAddr(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 31, 1, 1, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class cipCardOffloadConfigHostName(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 31, 1, 1, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class cipCardOffloadConfigRouterName(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 31, 1, 1, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class cipCardOffloadConfigLinkHostAppl(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 31, 1, 1, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class cipCardOffloadConfigLinkRouterAppl(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 31, 1, 1, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class cipCardOffloadConfigAPIHostAppl(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 31, 1, 1, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class cipCardOffloadConfigAPIRouterAppl(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 31, 1, 1, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class cipCardOffloadConfigBroadcastEnable(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 31, 1, 1, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class cipCardOffloadConfigRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 31, 1, 1, 1, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


# rows 
class cipCardOffloadConfigEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([cipCardEntryIndex, cipCardDtrBrdIndex, cipCardSubChannelIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 31, 1, 1, 1, 1])
	access = 2
	rowstatus = cipCardOffloadConfigRowStatus
	columns = {'cipCardOffloadConfigPath': cipCardOffloadConfigPath, 'cipCardOffloadConfigDevice': cipCardOffloadConfigDevice, 'cipCardOffloadConfigIpAddr': cipCardOffloadConfigIpAddr, 'cipCardOffloadConfigHostName': cipCardOffloadConfigHostName, 'cipCardOffloadConfigRouterName': cipCardOffloadConfigRouterName, 'cipCardOffloadConfigLinkHostAppl': cipCardOffloadConfigLinkHostAppl, 'cipCardOffloadConfigLinkRouterAppl': cipCardOffloadConfigLinkRouterAppl, 'cipCardOffloadConfigAPIHostAppl': cipCardOffloadConfigAPIHostAppl, 'cipCardOffloadConfigAPIRouterAppl': cipCardOffloadConfigAPIRouterAppl, 'cipCardOffloadConfigBroadcastEnable': cipCardOffloadConfigBroadcastEnable, 'cipCardOffloadConfigRowStatus': cipCardOffloadConfigRowStatus}


# notifications (traps) 
# groups 
class ciscoTcpOffloadGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 31, 2, 2, 1])
	group = [cipCardOffloadConfigPath, cipCardOffloadConfigDevice, cipCardOffloadConfigIpAddr, cipCardOffloadConfigHostName, cipCardOffloadConfigRouterName, cipCardOffloadConfigLinkHostAppl, cipCardOffloadConfigLinkRouterAppl, cipCardOffloadConfigAPIHostAppl, cipCardOffloadConfigAPIRouterAppl, cipCardOffloadConfigBroadcastEnable, cipCardOffloadConfigRowStatus]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
