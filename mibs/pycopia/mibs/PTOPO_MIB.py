# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP, NOTIFICATION_GROUP
from ENTITY_MIB import PhysicalIndex
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, NOTIFICATION_TYPE, Integer32, Counter32, mib_2
from RMON2_MIB import TimeFilter
from IANA_ADDRESS_FAMILY_NUMBERS_MIB import AddressFamilyNumbers
from SNMPv2_TC import TEXTUAL_CONVENTION, AutonomousType, RowStatus, TimeStamp, TruthValue

class PTOPO_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/PTOPO-MIB'
	name = 'PTOPO-MIB'
	language = 2
	description = 'The MIB module for physical topology information.'

# nodes
class ptopoMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 79])
	name = 'ptopoMIB'

class ptopoMIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 79, 1])
	name = 'ptopoMIBObjects'

class ptopoData(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 79, 1, 1])
	name = 'ptopoData'

class ptopoGeneral(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 79, 1, 2])
	name = 'ptopoGeneral'

class ptopoConfig(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 79, 1, 3])
	name = 'ptopoConfig'

class ptopoMIBNotifications(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 79, 2])
	name = 'ptopoMIBNotifications'

class ptopoMIBTrapPrefix(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 79, 2, 0])
	name = 'ptopoMIBTrapPrefix'

class ptopoRegistrationPoints(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 79, 3])
	name = 'ptopoRegistrationPoints'

class ptopoDiscoveryMechanisms(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 79, 3, 1])
	name = 'ptopoDiscoveryMechanisms'

class ptopoDiscoveryLocal(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 79, 3, 1, 1])
	name = 'ptopoDiscoveryLocal'

class ptopoConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 79, 4])
	name = 'ptopoConformance'

class ptopoCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 79, 4, 1])
	name = 'ptopoCompliances'

class ptopoGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 79, 4, 2])
	name = 'ptopoGroups'


# macros
# types 

class PtopoGenAddr(pycopia.SMI.Basetypes.OctetString):
	status = 1
	ranges = Ranges(Range(0, 20))


class PtopoChassisIdType(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'chasIdEntPhysicalAlias'), Enum(2, 'chasIdIfAlias'), Enum(3, 'chasIdPortEntPhysicalAlias'), Enum(4, 'chasIdMacAddress'), Enum(5, 'chasIdPtopoGenAddr')]


class PtopoChassisId(pycopia.SMI.Basetypes.OctetString):
	status = 1
	ranges = Ranges(Range(1, 32))


class PtopoPortIdType(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'portIdIfAlias'), Enum(2, 'portIdEntPhysicalAlias'), Enum(3, 'portIdMacAddr'), Enum(4, 'portIdPtopoGenAddr')]


class PtopoPortId(pycopia.SMI.Basetypes.OctetString):
	status = 1
	ranges = Ranges(Range(1, 32))


class PtopoAddrSeenState(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'notUsed'), Enum(2, 'unknown'), Enum(3, 'oneAddr'), Enum(4, 'multiAddr')]

# scalars 
class ptopoLastChangeTime(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 79, 1, 2, 1])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class ptopoConnTabInserts(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 79, 1, 2, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'table entries'


class ptopoConnTabDeletes(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 79, 1, 2, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'table entries'


class ptopoConnTabDrops(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 79, 1, 2, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'table entries'


class ptopoConnTabAgeouts(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 79, 1, 2, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ptopoConfigTrapInterval(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 79, 1, 3, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class ptopoConfigMaxHoldTime(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 79, 1, 3, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


# columns
class ptopoConnTimeMark(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 79, 1, 1, 1, 1, 1])
	syntaxobject = TimeFilter


class ptopoConnLocalChassis(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 79, 1, 1, 1, 1, 2])
	syntaxobject = PhysicalIndex


class ptopoConnLocalPort(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 79, 1, 1, 1, 1, 3])
	syntaxobject = PhysicalIndex


class ptopoConnIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 79, 1, 1, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ptopoConnRemoteChassisType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 79, 1, 1, 1, 1, 5])
	syntaxobject = PtopoChassisIdType


class ptopoConnRemoteChassis(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 79, 1, 1, 1, 1, 6])
	syntaxobject = PtopoChassisId


class ptopoConnRemotePortType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 79, 1, 1, 1, 1, 7])
	syntaxobject = PtopoPortIdType


class ptopoConnRemotePort(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 79, 1, 1, 1, 1, 8])
	syntaxobject = PtopoPortId


class ptopoConnDiscAlgorithm(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 79, 1, 1, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.AutonomousType


class ptopoConnAgentNetAddrType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 79, 1, 1, 1, 1, 10])
	syntaxobject = AddressFamilyNumbers


class ptopoConnAgentNetAddr(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 79, 1, 1, 1, 1, 11])
	syntaxobject = PtopoGenAddr


class ptopoConnMultiMacSASeen(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 79, 1, 1, 1, 1, 12])
	syntaxobject = PtopoAddrSeenState


class ptopoConnMultiNetSASeen(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 79, 1, 1, 1, 1, 13])
	syntaxobject = PtopoAddrSeenState


class ptopoConnIsStatic(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 79, 1, 1, 1, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class ptopoConnLastVerifyTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 79, 1, 1, 1, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class ptopoConnRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 79, 1, 1, 1, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


# rows 
class ptopoConnEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ptopoConnTimeMark, ptopoConnLocalChassis, ptopoConnLocalPort, ptopoConnIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 79, 1, 1, 1, 1])
	access = 2
	rowstatus = ptopoConnRowStatus
	columns = {'ptopoConnTimeMark': ptopoConnTimeMark, 'ptopoConnLocalChassis': ptopoConnLocalChassis, 'ptopoConnLocalPort': ptopoConnLocalPort, 'ptopoConnIndex': ptopoConnIndex, 'ptopoConnRemoteChassisType': ptopoConnRemoteChassisType, 'ptopoConnRemoteChassis': ptopoConnRemoteChassis, 'ptopoConnRemotePortType': ptopoConnRemotePortType, 'ptopoConnRemotePort': ptopoConnRemotePort, 'ptopoConnDiscAlgorithm': ptopoConnDiscAlgorithm, 'ptopoConnAgentNetAddrType': ptopoConnAgentNetAddrType, 'ptopoConnAgentNetAddr': ptopoConnAgentNetAddr, 'ptopoConnMultiMacSASeen': ptopoConnMultiMacSASeen, 'ptopoConnMultiNetSASeen': ptopoConnMultiNetSASeen, 'ptopoConnIsStatic': ptopoConnIsStatic, 'ptopoConnLastVerifyTime': ptopoConnLastVerifyTime, 'ptopoConnRowStatus': ptopoConnRowStatus}


# notifications (traps) 
class ptopoConfigChange(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 79, 2, 0, 1])

# groups 
class ptopoDataGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 79, 4, 2, 1])
	group = [ptopoConnRemoteChassisType, ptopoConnRemoteChassis, ptopoConnRemotePortType, ptopoConnRemotePort, ptopoConnDiscAlgorithm, ptopoConnAgentNetAddrType, ptopoConnAgentNetAddr, ptopoConnMultiMacSASeen, ptopoConnMultiNetSASeen, ptopoConnIsStatic, ptopoConnLastVerifyTime, ptopoConnRowStatus]

class ptopoGeneralGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 79, 4, 2, 2])
	group = [ptopoLastChangeTime, ptopoConnTabInserts, ptopoConnTabDeletes, ptopoConnTabDrops, ptopoConnTabAgeouts]

class ptopoConfigGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 79, 4, 2, 3])
	group = [ptopoConfigTrapInterval, ptopoConfigMaxHoldTime]

class ptopoNotificationsGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 79, 4, 2, 4])
	group = [ptopoConfigChange]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
