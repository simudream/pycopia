# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_CONF import OBJECT_GROUP, MODULE_COMPLIANCE
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, Integer32, mib_2
from INET_ADDRESS_MIB import InetAddressType, InetAddress
from DOCS_IF_MIB import docsIfCmtsCmStatusIndex, docsIfCmtsCmStatusEntry
from SNMPv2_TC import RowStatus, TruthValue, TimeStamp, StorageType
from DIFFSERV_MIB import diffServMIBDataPathGroup, diffServMIBClfrGroup, diffServMIBClfrElementGroup, diffServMIBMultiFieldClfrGroup, diffServMIBActionGroup, diffServMIBAlgDropGroup, diffServMIBCounterGroup, diffServDataPathStatus, diffServClfrStatus, diffServClfrElementStatus, diffServMultiFieldClfrAddrType, diffServMultiFieldClfrSrcAddr, diffServMultiFieldClfrDstAddr, diffServAlgDropStatus, diffServDataPathStorage, diffServClfrStorage, diffServClfrElementStorage, diffServMultiFieldClfrStorage, diffServActionStorage, diffServCountActStorage, diffServAlgDropStorage, diffServAlgDropType

class DOCS_IETF_SUBMGT_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/DOCS-IETF-SUBMGT-MIB'
	name = 'DOCS-IETF-SUBMGT-MIB'
	language = 2
	description = "This is the CMTS centric subscriber management MIB for\nDOCSIS-compliant CMTS.  It provides the objects to allow a Cable\nModem Termination operator to control the IP addresses and\nprotocols associated with subscribers' cable modems.\n\n\n\n\n\n\nCopyright (C) The Internet Society (2005).  This version of this\nMIB module is part of RFC 4036; see the RFC itself for full legal\nnotices."

# nodes
class docsSubMgt(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 125])
	name = 'docsSubMgt'

class docsSubMgtObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 125, 1])
	name = 'docsSubMgtObjects'

class docsSubMgtConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 125, 2])
	name = 'docsSubMgtConformance'

class docsSubMgtCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 125, 2, 1])
	name = 'docsSubMgtCompliances'

class docsSubMgtGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 125, 2, 2])
	name = 'docsSubMgtGroups'


# macros
# types 
# scalars 
class docsSubMgtCpeMaxIpDefault(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 125, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class docsSubMgtCpeActiveDefault(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 125, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class docsSubMgtCpeLearnableDefault(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 125, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


# columns
class docsSubMgtCpeControlMaxCpeIp(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 125, 1, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class docsSubMgtCpeControlActive(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 125, 1, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class docsSubMgtCpeControlLearnable(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 125, 1, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class docsSubMgtCpeControlReset(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 125, 1, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class docsSubMgtCpeControlLastReset(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 125, 1, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class docsSubMgtCpeIpIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 125, 1, 5, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class docsSubMgtCpeIpAddressType(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 125, 1, 5, 1, 2])
	syntaxobject = InetAddressType


class docsSubMgtCpeIpAddr(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 125, 1, 5, 1, 3])
	syntaxobject = InetAddress


class docsSubMgtCpeIpLearned(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 125, 1, 5, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class docsSubMgtCmFilterSubDownstream(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 125, 1, 6, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class docsSubMgtCmFilterSubUpstream(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 125, 1, 6, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class docsSubMgtCmFilterCmDownstream(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 125, 1, 6, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class docsSubMgtCmFilterCmUpstream(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 125, 1, 6, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class docsSubMgtFilterGroupIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 125, 1, 7, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


# rows 
from DOCS_IF_MIB import docsIfCmtsCmStatusIndex
class docsSubMgtCpeControlEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([docsIfCmtsCmStatusIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 125, 1, 1, 1])
	access = 2
	columns = {'docsSubMgtCpeControlMaxCpeIp': docsSubMgtCpeControlMaxCpeIp, 'docsSubMgtCpeControlActive': docsSubMgtCpeControlActive, 'docsSubMgtCpeControlLearnable': docsSubMgtCpeControlLearnable, 'docsSubMgtCpeControlReset': docsSubMgtCpeControlReset, 'docsSubMgtCpeControlLastReset': docsSubMgtCpeControlLastReset}


class docsSubMgtCpeIpEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([docsIfCmtsCmStatusIndex, docsSubMgtCpeIpIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 125, 1, 5, 1])
	access = 2
	columns = {'docsSubMgtCpeIpIndex': docsSubMgtCpeIpIndex, 'docsSubMgtCpeIpAddressType': docsSubMgtCpeIpAddressType, 'docsSubMgtCpeIpAddr': docsSubMgtCpeIpAddr, 'docsSubMgtCpeIpLearned': docsSubMgtCpeIpLearned}


from DOCS_IF_MIB import docsIfCmtsCmStatusIndex
class docsSubMgtCmFilterEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([docsIfCmtsCmStatusIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 125, 1, 6, 1])
	access = 2
	columns = {'docsSubMgtCmFilterSubDownstream': docsSubMgtCmFilterSubDownstream, 'docsSubMgtCmFilterSubUpstream': docsSubMgtCmFilterSubUpstream, 'docsSubMgtCmFilterCmDownstream': docsSubMgtCmFilterCmDownstream, 'docsSubMgtCmFilterCmUpstream': docsSubMgtCmFilterCmUpstream}


class docsSubMgtFilterGroupEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([docsSubMgtFilterGroupIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 125, 1, 7, 1])
	access = 2
	columns = {'docsSubMgtFilterGroupIndex': docsSubMgtFilterGroupIndex}


# notifications (traps) 
# groups 
class docsSubMgtGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 125, 2, 2, 1])
	group = [docsSubMgtCpeControlMaxCpeIp, docsSubMgtCpeControlActive, docsSubMgtCpeControlLearnable, docsSubMgtCpeControlReset, docsSubMgtCpeControlLastReset, docsSubMgtCpeMaxIpDefault, docsSubMgtCpeActiveDefault, docsSubMgtCpeLearnableDefault, docsSubMgtCpeIpAddressType, docsSubMgtCpeIpAddr, docsSubMgtCpeIpLearned, docsSubMgtCmFilterSubDownstream, docsSubMgtCmFilterSubUpstream, docsSubMgtCmFilterCmDownstream, docsSubMgtCmFilterCmUpstream, docsSubMgtFilterGroupIndex]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
