# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, NOTIFICATION_TYPE, Counter32
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from CISCO_SMI import ciscoMgmt
from SNMPv2_TC import DisplayString, TruthValue
from IF_MIB import ifIndex

class CISCO_ISDNU_IF_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/site/CISCO-ISDNU-IF-MIB'
	conformance = 3
	name = 'CISCO-ISDNU-IF-MIB'
	language = 2
	description = 'ISDN BRI integrated U Interface MIB module.\nThis MIB manages the ISDN BRI integrated U \nInterface in the router.'

# nodes
class ciscoIsdnuIfMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 18])
	name = 'ciscoIsdnuIfMIB'

class ciuIfObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 18, 1])
	name = 'ciuIfObjects'

class ciuInterface(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 18, 1, 1])
	name = 'ciuInterface'

class ciuIfExternalSTPort(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 18, 1, 2])
	name = 'ciuIfExternalSTPort'

class ciuIfMIBNotificationEnables(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 18, 1, 3])
	name = 'ciuIfMIBNotificationEnables'

class ciuIfMIBNotificationPrefix(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 18, 2])
	name = 'ciuIfMIBNotificationPrefix'

class ciuIfMIBNotifications(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 18, 2, 0])
	name = 'ciuIfMIBNotifications'

class ciuIfMIBConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 18, 3])
	name = 'ciuIfMIBConformance'

class ciuIfMIBCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 18, 3, 1])
	name = 'ciuIfMIBCompliances'

class ciuIfMIBGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 18, 3, 2])
	name = 'ciuIfMIBGroups'


# macros
# types 
# scalars 
class ciuIfEnableULoopStatusNotification(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 18, 1, 3, 1])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


# columns
class ciuIfType(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 18, 1, 1, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'addOnU'), Enum(3, 'onBoardU'), Enum(4, 'onBoardIntegUandSTPort'), Enum(5, 'addOnIntegUandSTPort')]


class ciuIfStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 18, 1, 1, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'activated'), Enum(2, 'activationPending'), Enum(3, 'deactivated')]


class ciuIfEocCommand(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 18, 1, 1, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class ciuIfOverHeadBits(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 18, 1, 1, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class ciuIfFebeErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 18, 1, 1, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciuIfNebeErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 18, 1, 1, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciuIfLoopStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 18, 1, 1, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'none'), Enum(2, 'type2Loopback'), Enum(3, 'type3Loopback'), Enum(4, 'ntQuietMode'), Enum(5, 'ilmtMode')]


class ciuIfExternalSTPortNumber(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 18, 1, 2, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciuIfExternalSTPortStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 18, 1, 2, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'activated'), Enum(2, 'activationPending'), Enum(3, 'deactivated')]


# rows 
class ciuIfStaticConfigEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 18, 1, 1, 1, 1])
	access = 2
	columns = {'ciuIfType': ciuIfType}


class ciuIfStatusEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 18, 1, 1, 2, 1])
	access = 2
	columns = {'ciuIfStatus': ciuIfStatus, 'ciuIfEocCommand': ciuIfEocCommand, 'ciuIfOverHeadBits': ciuIfOverHeadBits, 'ciuIfFebeErrors': ciuIfFebeErrors, 'ciuIfNebeErrors': ciuIfNebeErrors, 'ciuIfLoopStatus': ciuIfLoopStatus}


class ciuIfExternalSTPortStatusEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, ciuIfExternalSTPortNumber], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 18, 1, 2, 1, 1])
	access = 2
	columns = {'ciuIfExternalSTPortNumber': ciuIfExternalSTPortNumber, 'ciuIfExternalSTPortStatus': ciuIfExternalSTPortStatus}


# notifications (traps) 
class ciuIfLoopStatusNotification(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 18, 2, 0, 1])

# groups 
class ciuIfMIBGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 18, 3, 2, 1])
	group = [ciuIfType, ciuIfStatus, ciuIfEocCommand, ciuIfOverHeadBits, ciuIfFebeErrors, ciuIfNebeErrors, ciuIfLoopStatus, ciuIfExternalSTPortStatus, ciuIfEnableULoopStatusNotification]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
