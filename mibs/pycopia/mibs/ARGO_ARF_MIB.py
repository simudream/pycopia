# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_CONF import MODULE_COMPLIANCE, NOTIFICATION_GROUP, OBJECT_GROUP
from ARGO_MIB import argoV1
from SNMP_FRAMEWORK_MIB import SnmpAdminString
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, NOTIFICATION_TYPE, Counter32
from IANA_ITU_ALARM_TC_MIB import IANAItuEventType, IANAItuProbableCause
from ITU_ALARM_TC_MIB import ItuPerceivedSeverity, ItuTrendIndication
from SNMPv2_TC import DateAndTime

class ARGO_ARF_MIB(ModuleObject):
	path = '/usr/share/mibs/site/ARGO-ARF-MIB'
	name = 'ARGO-ARF-MIB'
	language = 2
	description = 'This MIB describes registrations for the common TRAPs generated\nby the Argo Alarm Reporting Function (ARF).  The ARF monitors\nthresholds and raises notifications in response to detection of\nthreshold-crossing events.'

# nodes
class argoARFMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 2])
	name = 'argoARFMIB'

class argoARFObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 2, 1])
	name = 'argoARFObjects'

class argoARFTrapObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 2, 1, 1])
	name = 'argoARFTrapObjects'

class argoARFFactObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 2, 1, 2])
	name = 'argoARFFactObjects'

class argoARFTraps(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 2, 2])
	name = 'argoARFTraps'

class argoARFTrapPrefix(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 2, 2, 0])
	name = 'argoARFTrapPrefix'

class argoARFConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 2, 3])
	name = 'argoARFConformance'

class argoARFCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 2, 3, 1])
	name = 'argoARFCompliances'

class argoARFGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 2, 3, 2])
	name = 'argoARFGroups'


# macros
# types 
# scalars 
class argoARFTrapObjectID(ScalarObject):
	access = 3
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 2, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.ObjectIdentifier


class argoARFTrapEventID(ScalarObject):
	access = 3
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 2, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class argoARFTrapEventTime(ScalarObject):
	access = 3
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 2, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.DateAndTime


class argoARFTrapEventType(ScalarObject):
	access = 3
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 2, 1, 1, 4])
	syntaxobject = IANAItuEventType


class argoARFTrapEventAlarmID(ScalarObject):
	access = 3
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 2, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class argoARFTrapSeverity(ScalarObject):
	access = 3
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 2, 1, 1, 6])
	syntaxobject = ItuPerceivedSeverity


class argoARFTrapTrend(ScalarObject):
	access = 3
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 2, 1, 1, 7])
	syntaxobject = ItuTrendIndication


class argoARFTrapProbCause(ScalarObject):
	access = 3
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 2, 1, 1, 8])
	syntaxobject = IANAItuProbableCause


class argoARFTrapProbSpecific(ScalarObject):
	access = 3
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 2, 1, 1, 9])
	syntaxobject = SnmpAdminString


class argoARFTrapProbData(ScalarObject):
	access = 3
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 2, 1, 1, 10])
	syntaxobject = SnmpAdminString


class argoARFTrapProbText(ScalarObject):
	access = 3
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 2, 1, 1, 11])
	syntaxobject = SnmpAdminString


class argoARFTrapObjectDesc(ScalarObject):
	access = 3
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 2, 1, 1, 12])
	syntaxobject = SnmpAdminString


class argoARFTrapFactAgentName(ScalarObject):
	access = 3
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 2, 1, 2, 1])
	syntaxobject = SnmpAdminString


class argoARFTrapFactLocation(ScalarObject):
	access = 3
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 2, 1, 2, 2])
	syntaxobject = SnmpAdminString


class argoARFTrapFactTestPlan(ScalarObject):
	access = 3
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 2, 1, 2, 3])
	syntaxobject = SnmpAdminString


class argoARFTrapFactTestName(ScalarObject):
	access = 3
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 2, 1, 2, 4])
	syntaxobject = SnmpAdminString


class argoARFTrapFactTestRunID(ScalarObject):
	access = 3
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 2, 1, 2, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class argoARFTrapFactTestRunUniqueID(ScalarObject):
	access = 3
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 2, 1, 2, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class argoARFTrapFactMeasureType(ScalarObject):
	access = 3
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 2, 1, 2, 7])
	syntaxobject = SnmpAdminString


class argoARFTrapFactMeasureName(ScalarObject):
	access = 3
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 2, 1, 2, 8])
	syntaxobject = SnmpAdminString


class argoARFTrapFactMeasureValue(ScalarObject):
	access = 3
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 2, 1, 2, 9])
	syntaxobject = SnmpAdminString


class argoARFTrapFactMetricUnit(ScalarObject):
	access = 3
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 2, 1, 2, 10])
	syntaxobject = SnmpAdminString


# columns
# rows 
# notifications (traps) 
class argoARFTrapAlarm(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 2, 2, 0, 1])

class argoARFTrapFactAlarm(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 2, 2, 0, 2])

class argoARFTrapHeartBeat(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 2, 2, 0, 3])

class argoARFTrapAgentAlarm(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 2, 2, 0, 4])

# groups 
class argoARFCoreObjectGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 2, 3, 2, 1])
	group = [argoARFTrapObjectID, argoARFTrapObjectDesc, argoARFTrapEventID, argoARFTrapEventTime, argoARFTrapEventType, argoARFTrapEventAlarmID, argoARFTrapSeverity, argoARFTrapTrend, argoARFTrapProbCause, argoARFTrapProbSpecific, argoARFTrapProbData, argoARFTrapProbText]

class argoARFFactObjectGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 2, 3, 2, 2])
	group = [argoARFTrapFactAgentName, argoARFTrapFactLocation, argoARFTrapFactTestPlan, argoARFTrapFactTestName, argoARFTrapFactTestRunID, argoARFTrapFactTestRunUniqueID, argoARFTrapFactMeasureType, argoARFTrapFactMeasureName, argoARFTrapFactMeasureValue, argoARFTrapFactMetricUnit]

class argoARFCoreNotifyGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 2, 3, 2, 3])
	group = [argoARFTrapAlarm, argoARFTrapHeartBeat]

class argoARFFactNotifyGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 2, 3, 2, 4])
	group = [argoARFTrapFactAlarm]

class argoARFAgentNotifyGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 2, 3, 2, 5])
	group = [argoARFTrapAgentAlarm]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
