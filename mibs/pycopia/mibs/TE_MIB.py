# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, NOTIFICATION_TYPE, mib_2, Integer32, Gauge32, Counter32, Counter64, Unsigned32, TimeTicks
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP, NOTIFICATION_GROUP
from MPLS_TC_STD_MIB import TeHopAddress, TeHopAddressType, MplsBitRate
from SNMPv2_TC import RowStatus, StorageType, TimeStamp, TruthValue
from SNMP_FRAMEWORK_MIB import SnmpAdminString

class TE_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/TE-MIB'
	name = 'TE-MIB'
	language = 2
	description = 'The Traffic Engineering MIB module.\n\nCopyright (C) The Internet Society (2005).  This\nversion of this MIB module is part of RFC 3970;\nsee the RFC itself for full legal notices.'

# nodes
class teMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122])
	name = 'teMIB'

class teMIBNotifications(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 0])
	name = 'teMIBNotifications'

class teMIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1])
	name = 'teMIBObjects'

class teInfo(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 1])
	name = 'teInfo'

class teMIBConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 2])
	name = 'teMIBConformance'

class teGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 2, 1])
	name = 'teGroups'

class teModuleCompliance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 2, 2])
	name = 'teModuleCompliance'


# macros
# types 
# scalars 
class teDistProtocol(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.BITS


class teSignalingProto(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.BITS


class teNotificationEnable(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class teNextTunnelIndex(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class teNextPathHopIndex(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class teConfiguredTunnels(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class teActiveTunnels(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class tePrimaryTunnels(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


# columns
class teAdminGroupNumber(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 1, 9, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class teAdminGroupName(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 1, 9, 1, 2])
	syntaxobject = SnmpAdminString


class teAdminGroupRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 1, 9, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class teTunnelIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class teTunnelName(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 2, 1, 2])
	syntaxobject = SnmpAdminString


class teTunnelNextPathIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class teTunnelRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class teTunnelStorageType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


class teTunnelSourceAddressType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 2, 1, 6])
	syntaxobject = TeHopAddressType


class teTunnelSourceAddress(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 2, 1, 7])
	syntaxobject = TeHopAddress


class teTunnelDestinationAddressType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 2, 1, 8])
	syntaxobject = TeHopAddressType


class teTunnelDestinationAddress(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 2, 1, 9])
	syntaxobject = TeHopAddress


class teTunnelState(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 2, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'unknown'), Enum(2, 'up'), Enum(3, 'down'), Enum(4, 'testing')]


class teTunnelDiscontinuityTimer(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 2, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class teTunnelOctets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 2, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class teTunnelPackets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 2, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class teTunnelLPOctets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 2, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class teTunnelLPPackets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 2, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class teTunnelAge(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 2, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class teTunnelTimeUp(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 2, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class teTunnelPrimaryTimeUp(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 2, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class teTunnelTransitions(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 2, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class teTunnelLastTransition(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 2, 1, 20])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class teTunnelPathChanges(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 2, 1, 21])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class teTunnelLastPathChange(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 2, 1, 22])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class teTunnelConfiguredPaths(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 2, 1, 23])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class teTunnelStandbyPaths(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 2, 1, 24])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class teTunnelOperationalPaths(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 2, 1, 25])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class tePathIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 3, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class tePathName(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 3, 1, 2])
	syntaxobject = SnmpAdminString


class tePathRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 3, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class tePathStorageType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 3, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


class tePathType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 3, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'primary'), Enum(3, 'standby'), Enum(4, 'secondary')]


class tePathConfiguredRoute(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 3, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class tePathBandwidth(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 3, 1, 7])
	syntaxobject = MplsBitRate
	access = 5
	units = 'Kilobits per second'


class tePathIncludeAny(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 3, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class tePathIncludeAll(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 3, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class tePathExclude(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 3, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class tePathSetupPriority(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 3, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class tePathHoldPriority(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 3, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class tePathProperties(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 3, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.BITS


class tePathOperStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 3, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(0, 'unknown'), Enum(1, 'down'), Enum(2, 'testing'), Enum(3, 'dormant'), Enum(4, 'ready'), Enum(5, 'operational')]


class tePathAdminStatus(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 3, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'normal'), Enum(2, 'testing')]


class tePathComputedRoute(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 3, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class tePathRecordedRoute(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 3, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class teHopListIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 4, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class tePathHopIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 4, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class tePathHopRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 4, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class tePathHopStorageType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 4, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


class tePathHopAddrType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 4, 1, 5])
	syntaxobject = TeHopAddressType


class tePathHopAddress(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 4, 1, 6])
	syntaxobject = TeHopAddress


class tePathHopType(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 4, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(0, 'unknown'), Enum(1, 'loose'), Enum(2, 'strict')]


# rows 
class teAdminGroupEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([teAdminGroupNumber], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 1, 9, 1])
	access = 2
	rowstatus = teAdminGroupRowStatus
	columns = {'teAdminGroupNumber': teAdminGroupNumber, 'teAdminGroupName': teAdminGroupName, 'teAdminGroupRowStatus': teAdminGroupRowStatus}


class teTunnelEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([teTunnelIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 2, 1])
	access = 2
	rowstatus = teTunnelRowStatus
	columns = {'teTunnelIndex': teTunnelIndex, 'teTunnelName': teTunnelName, 'teTunnelNextPathIndex': teTunnelNextPathIndex, 'teTunnelRowStatus': teTunnelRowStatus, 'teTunnelStorageType': teTunnelStorageType, 'teTunnelSourceAddressType': teTunnelSourceAddressType, 'teTunnelSourceAddress': teTunnelSourceAddress, 'teTunnelDestinationAddressType': teTunnelDestinationAddressType, 'teTunnelDestinationAddress': teTunnelDestinationAddress, 'teTunnelState': teTunnelState, 'teTunnelDiscontinuityTimer': teTunnelDiscontinuityTimer, 'teTunnelOctets': teTunnelOctets, 'teTunnelPackets': teTunnelPackets, 'teTunnelLPOctets': teTunnelLPOctets, 'teTunnelLPPackets': teTunnelLPPackets, 'teTunnelAge': teTunnelAge, 'teTunnelTimeUp': teTunnelTimeUp, 'teTunnelPrimaryTimeUp': teTunnelPrimaryTimeUp, 'teTunnelTransitions': teTunnelTransitions, 'teTunnelLastTransition': teTunnelLastTransition, 'teTunnelPathChanges': teTunnelPathChanges, 'teTunnelLastPathChange': teTunnelLastPathChange, 'teTunnelConfiguredPaths': teTunnelConfiguredPaths, 'teTunnelStandbyPaths': teTunnelStandbyPaths, 'teTunnelOperationalPaths': teTunnelOperationalPaths}


class tePathEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([teTunnelIndex, tePathIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 3, 1])
	access = 2
	rowstatus = tePathRowStatus
	columns = {'tePathIndex': tePathIndex, 'tePathName': tePathName, 'tePathRowStatus': tePathRowStatus, 'tePathStorageType': tePathStorageType, 'tePathType': tePathType, 'tePathConfiguredRoute': tePathConfiguredRoute, 'tePathBandwidth': tePathBandwidth, 'tePathIncludeAny': tePathIncludeAny, 'tePathIncludeAll': tePathIncludeAll, 'tePathExclude': tePathExclude, 'tePathSetupPriority': tePathSetupPriority, 'tePathHoldPriority': tePathHoldPriority, 'tePathProperties': tePathProperties, 'tePathOperStatus': tePathOperStatus, 'tePathAdminStatus': tePathAdminStatus, 'tePathComputedRoute': tePathComputedRoute, 'tePathRecordedRoute': tePathRecordedRoute}


class tePathHopEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([teHopListIndex, tePathHopIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 1, 4, 1])
	access = 2
	rowstatus = tePathHopRowStatus
	columns = {'teHopListIndex': teHopListIndex, 'tePathHopIndex': tePathHopIndex, 'tePathHopRowStatus': tePathHopRowStatus, 'tePathHopStorageType': tePathHopStorageType, 'tePathHopAddrType': tePathHopAddrType, 'tePathHopAddress': tePathHopAddress, 'tePathHopType': tePathHopType}


# notifications (traps) 
class teTunnelUp(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 0, 1])

class teTunnelDown(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 0, 2])

class teTunnelChanged(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 0, 3])

class teTunnelRerouted(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 0, 4])

# groups 
class teTrafficEngineeringGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 2, 1, 1])
	group = [teTunnelName, teTunnelNextPathIndex, teTunnelRowStatus, teTunnelStorageType, teTunnelSourceAddressType, teTunnelSourceAddress, teTunnelDestinationAddressType, teTunnelDestinationAddress, teTunnelState, teTunnelDiscontinuityTimer, teTunnelOctets, teTunnelPackets, teTunnelLPOctets, teTunnelLPPackets, teTunnelAge, teTunnelTimeUp, teTunnelPrimaryTimeUp, teTunnelTransitions, teTunnelLastTransition, teTunnelPathChanges, teTunnelLastPathChange, teTunnelConfiguredPaths, teTunnelStandbyPaths, teTunnelOperationalPaths, tePathBandwidth, tePathIncludeAny, tePathIncludeAll, tePathExclude, tePathSetupPriority, tePathHoldPriority, tePathProperties, tePathOperStatus, tePathAdminStatus, tePathComputedRoute, tePathRecordedRoute, teDistProtocol, teSignalingProto, teNotificationEnable, teNextTunnelIndex, teNextPathHopIndex, teAdminGroupName, teAdminGroupRowStatus, teConfiguredTunnels, teActiveTunnels, tePrimaryTunnels, tePathName, tePathType, tePathRowStatus, tePathStorageType, tePathConfiguredRoute, tePathHopRowStatus, tePathHopStorageType, tePathHopAddrType, tePathHopAddress, tePathHopType]

class teNotificationGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 122, 2, 1, 2])
	group = [teTunnelUp, teTunnelDown, teTunnelChanged, teTunnelRerouted]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
