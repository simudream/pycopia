# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, mib_2, Counter32, Gauge32, Unsigned32, IpAddress, TimeTicks
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from SNMPv2_TC import RowStatus, TruthValue
from IF_MIB import InterfaceIndexOrZero, InterfaceIndex

class IGMP_STD_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/IGMP-STD-MIB'
	conformance = 5
	name = 'IGMP-STD-MIB'
	language = 2
	description = 'The MIB module for IGMP Management.'

# nodes
class igmpStdMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 85])
	name = 'igmpStdMIB'

class igmpMIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 85, 1])
	name = 'igmpMIBObjects'

class igmpMIBConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 85, 2])
	name = 'igmpMIBConformance'

class igmpMIBCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 85, 2, 1])
	name = 'igmpMIBCompliances'

class igmpMIBGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 85, 2, 2])
	name = 'igmpMIBGroups'


# macros
# types 
# scalars 
# columns
class igmpInterfaceIfIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 85, 1, 1, 1, 1])
	syntaxobject = InterfaceIndex


class igmpInterfaceQueryInterval(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 85, 1, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32
	access = 5
	units = 'seconds'


class igmpInterfaceStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 85, 1, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class igmpInterfaceVersion(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 85, 1, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class igmpInterfaceQuerier(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 85, 1, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class igmpInterfaceQueryMaxResponseTime(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 85, 1, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32
	access = 5
	units = 'tenths of seconds'


class igmpInterfaceQuerierUpTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 85, 1, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class igmpInterfaceQuerierExpiryTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 85, 1, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class igmpInterfaceVersion1QuerierTimer(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 85, 1, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class igmpInterfaceWrongVersionQueries(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 85, 1, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class igmpInterfaceJoins(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 85, 1, 1, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class igmpInterfaceProxyIfIndex(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 85, 1, 1, 1, 12])
	syntaxobject = InterfaceIndexOrZero


class igmpInterfaceGroups(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 85, 1, 1, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class igmpInterfaceRobustness(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 85, 1, 1, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class igmpInterfaceLastMembQueryIntvl(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 85, 1, 1, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32
	access = 5
	units = 'tenths of seconds'


class igmpCacheAddress(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 85, 1, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class igmpCacheIfIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 85, 1, 2, 1, 2])
	syntaxobject = InterfaceIndex


class igmpCacheSelf(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 85, 1, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class igmpCacheLastReporter(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 85, 1, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class igmpCacheUpTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 85, 1, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class igmpCacheExpiryTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 85, 1, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class igmpCacheStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 85, 1, 2, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class igmpCacheVersion1HostTimer(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 85, 1, 2, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


# rows 
class igmpInterfaceEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([igmpInterfaceIfIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 85, 1, 1, 1])
	access = 2
	rowstatus = igmpInterfaceStatus
	columns = {'igmpInterfaceIfIndex': igmpInterfaceIfIndex, 'igmpInterfaceQueryInterval': igmpInterfaceQueryInterval, 'igmpInterfaceStatus': igmpInterfaceStatus, 'igmpInterfaceVersion': igmpInterfaceVersion, 'igmpInterfaceQuerier': igmpInterfaceQuerier, 'igmpInterfaceQueryMaxResponseTime': igmpInterfaceQueryMaxResponseTime, 'igmpInterfaceQuerierUpTime': igmpInterfaceQuerierUpTime, 'igmpInterfaceQuerierExpiryTime': igmpInterfaceQuerierExpiryTime, 'igmpInterfaceVersion1QuerierTimer': igmpInterfaceVersion1QuerierTimer, 'igmpInterfaceWrongVersionQueries': igmpInterfaceWrongVersionQueries, 'igmpInterfaceJoins': igmpInterfaceJoins, 'igmpInterfaceProxyIfIndex': igmpInterfaceProxyIfIndex, 'igmpInterfaceGroups': igmpInterfaceGroups, 'igmpInterfaceRobustness': igmpInterfaceRobustness, 'igmpInterfaceLastMembQueryIntvl': igmpInterfaceLastMembQueryIntvl}


class igmpCacheEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([igmpCacheAddress, igmpCacheIfIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 85, 1, 2, 1])
	access = 2
	rowstatus = igmpCacheStatus
	columns = {'igmpCacheAddress': igmpCacheAddress, 'igmpCacheIfIndex': igmpCacheIfIndex, 'igmpCacheSelf': igmpCacheSelf, 'igmpCacheLastReporter': igmpCacheLastReporter, 'igmpCacheUpTime': igmpCacheUpTime, 'igmpCacheExpiryTime': igmpCacheExpiryTime, 'igmpCacheStatus': igmpCacheStatus, 'igmpCacheVersion1HostTimer': igmpCacheVersion1HostTimer}


# notifications (traps) 
# groups 
class igmpBaseMIBGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 85, 2, 2, 1])
	group = [igmpCacheSelf, igmpCacheStatus, igmpInterfaceStatus]

class igmpRouterMIBGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 85, 2, 2, 2])
	group = [igmpCacheUpTime, igmpCacheExpiryTime, igmpInterfaceJoins, igmpInterfaceGroups, igmpCacheLastReporter, igmpInterfaceQuerierUpTime, igmpInterfaceQuerierExpiryTime, igmpInterfaceQueryInterval]

class igmpV2HostMIBGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 85, 2, 2, 3])
	group = [igmpInterfaceVersion1QuerierTimer]

class igmpHostOptMIBGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 85, 2, 2, 4])
	group = [igmpCacheLastReporter, igmpInterfaceQuerier]

class igmpV2RouterMIBGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 85, 2, 2, 5])
	group = [igmpInterfaceVersion, igmpInterfaceQuerier, igmpInterfaceQueryMaxResponseTime, igmpInterfaceRobustness, igmpInterfaceWrongVersionQueries, igmpInterfaceLastMembQueryIntvl, igmpCacheVersion1HostTimer]

class igmpV2ProxyMIBGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 85, 2, 2, 6])
	group = [igmpInterfaceProxyIfIndex]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
