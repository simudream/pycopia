# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_IDENTITY
from ARGO_MIB import argoCustomers

class ARGO_CUSTOM_MIB(ModuleObject):
	path = '/usr/share/mibs/site/ARGO-CUSTOM-MIB'
	conformance = 132
	name = 'ARGO-CUSTOM-MIB'
	language = 2
	description = "This MIB describes the objects referenced in Traps raised by \nMonitor Master during the monitoring of GoogleInc\nservices.  The services currently monitored are identified later.\n\nSource objects will be identified in Argogroup Alarm Traps (see \nthe Trap definitions provided in the ARGO-ARF-MIB).  The source\nobject value passed in a Trap identifies the service component\nin which an error or performance problem has been detected.\n\nFor use at the Agent, the ObjectIDs of the source objects defined \nin this file must be extracted from the generated MIB and referenced\nin the Raise ARF Trap scene's parameters.\n\nFor use at the Projector, the ObjectIDs of the source objects defined \nin this file must be added to the Projector's Alarm Reporting Function \ncontrol table (called u_SrcObject) - they can be added automatically by \nthe Custom MIB Editor or they can be added through the Web GUI\nprovided by the Alarming menu item at the address\n\nhttp://projector-ip-address:9091/rp\n\nAfter this, the objects can be referenced in Alarm Definitions \ncreated through the same GUI.  The Alarm Definitions correlate\nspecific source objects with a Threshold definition.  \n\nWhen the associated threshold is triggered by incoming data \nfrom monitoring tests being executed at Monitor Master Agents, \nan alarm is raised, and a Trap is sent to all destinations\nidentified in the Alarm Destinations table (which is also\nconfigured through the Web GUI)."

# nodes
class argoCustGoogleIncMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 4, 65])
	name = 'argoCustGoogleIncMIB'

class argoGoogleAgentMonitoring(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 4, 65, 1])
	name = 'argoGoogleAgentMonitoring'

class argoGoogleAgentMonitoringObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 4, 65, 1, 1])
	name = 'argoGoogleAgentMonitoringObjects'

class argoGoogleAgentMonitoringSourceObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 4, 65, 1, 1, 1])
	name = 'argoGoogleAgentMonitoringSourceObjects'

class argoGoogleAgentMonitoringScriptingEngine(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 4, 65, 1, 1, 1, 2])
	name = 'argoGoogleAgentMonitoringScriptingEngine'

class argoGoogleAgentMonitoringScriptingEngineHeartbeat(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 8970, 1, 1, 4, 65, 1, 1, 1, 2, 1])
	name = 'argoGoogleAgentMonitoringScriptingEngineHeartbeat'


# macros
# types 
# scalars 
# columns
# rows 
# notifications (traps) 
# groups 
# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
