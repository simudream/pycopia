# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, Gauge32
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from RFC1213_MIB import ifIndex
from SNMPv2_TC import TEXTUAL_CONVENTION, TruthValue
from CISCO_SMI import ciscoMgmt

class CISCO_ATM_SWITCH_FR_RM_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/site/CISCO-ATM-SWITCH-FR-RM-MIB'
	conformance = 2
	name = 'CISCO-ATM-SWITCH-FR-RM-MIB'
	language = 2
	description = 'This MIB module describes a set of objects used\nfor switch Resource Management (RM) for Frame Relay/Frame\nbased User-to-Network (FUNI) to ATM interworking\nfunction (IWF) connections. Please refer to the Frame\nRelay Forum documents FRF.5 and FRF.8 for details on the\nFrame Relay to ATM Interworking Functions. For details \non FUNI, please refer to the ATM Forum FUNI Specification\ndocument.\n\nThese objects are applicable to Frame Relay and FUNI\ninterfaces present on the Frame Relay Port Adapter\nModule (PAM).\n\nInitial version of this MIB module.'

# nodes
class ciscoAtmSwitchFrRmMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 110])
	name = 'ciscoAtmSwitchFrRmMIB'

class ciscoAtmSwitchFrRmMIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 110, 1])
	name = 'ciscoAtmSwitchFrRmMIBObjects'

class cfaAdapter(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 1])
	name = 'cfaAdapter'

class cfaInterwork(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 2])
	name = 'cfaInterwork'

class ciscoAtmSwitchFrRmMIBNotifications(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 110, 2])
	name = 'ciscoAtmSwitchFrRmMIBNotifications'

class ciscoAtmSwitchFrRmMIBConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 110, 3])
	name = 'ciscoAtmSwitchFrRmMIBConformance'

class ciscoAtmSwitchFrRmMIBCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 110, 3, 1])
	name = 'ciscoAtmSwitchFrRmMIBCompliances'

class ciscoAtmSwitchFrRmMIBGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 110, 3, 2])
	name = 'ciscoAtmSwitchFrRmMIBGroups'


# macros
# types 

class CfaInterworkServiceCategory(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'vbrNrt'), Enum(2, 'abr'), Enum(3, 'ubr')]

# scalars 
# columns
class cfaAdapterIfVcQService(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 1, 1, 1, 1])
	syntaxobject = CfaInterworkServiceCategory


class cfaAdapterIfVcQInqDiscThresh(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 1, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'percent'


class cfaAdapterIfVcQOutqDiscThresh(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 1, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'percent'


class cfaAdapterIfVcQInqMarkThresh(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 1, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'percent'


class cfaAdapterIfVcQOutqMarkThresh(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 1, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'percent'


class cfaAdapterIfVbrServOflow(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 1, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class cfaAdapterIfOverbooking(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 1, 3, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'percent'


class cfaInterworkIfVcQService(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 2, 1, 1, 1])
	syntaxobject = CfaInterworkServiceCategory


class cfaInterworkIfRxAvailRate(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 2, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32
	access = 4
	units = 'bits-per-second'


class cfaInterworkIfTxAvailRate(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 2, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32
	access = 4
	units = 'bits-per-second'


class cfaInterworkIfRxAllocRate(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 2, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32
	access = 4
	units = 'bits-per-second'


class cfaInterworkIfTxAllocRate(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 2, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32
	access = 4
	units = 'bits-per-second'


# rows 
class cfaAdapterIfVcQThresholdEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, cfaAdapterIfVcQService], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 1, 1, 1])
	access = 2
	columns = {'cfaAdapterIfVcQService': cfaAdapterIfVcQService, 'cfaAdapterIfVcQInqDiscThresh': cfaAdapterIfVcQInqDiscThresh, 'cfaAdapterIfVcQOutqDiscThresh': cfaAdapterIfVcQOutqDiscThresh, 'cfaAdapterIfVcQInqMarkThresh': cfaAdapterIfVcQInqMarkThresh, 'cfaAdapterIfVcQOutqMarkThresh': cfaAdapterIfVcQOutqMarkThresh}


class cfaAdapterIfVbrServOflowEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 1, 2, 1])
	access = 2
	columns = {'cfaAdapterIfVbrServOflow': cfaAdapterIfVbrServOflow}


class cfaAdapterIfFrConfigEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 1, 3, 1])
	access = 2
	columns = {'cfaAdapterIfOverbooking': cfaAdapterIfOverbooking}


class cfaInterworkIfResourceEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, cfaInterworkIfVcQService], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 110, 1, 2, 1, 1])
	access = 2
	columns = {'cfaInterworkIfVcQService': cfaInterworkIfVcQService, 'cfaInterworkIfRxAvailRate': cfaInterworkIfRxAvailRate, 'cfaInterworkIfTxAvailRate': cfaInterworkIfTxAvailRate, 'cfaInterworkIfRxAllocRate': cfaInterworkIfRxAllocRate, 'cfaInterworkIfTxAllocRate': cfaInterworkIfTxAllocRate}


# notifications (traps) 
# groups 
class cfaAdapterGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 110, 3, 2, 1])
	group = [cfaAdapterIfVcQInqDiscThresh, cfaAdapterIfVcQOutqDiscThresh, cfaAdapterIfVcQInqMarkThresh, cfaAdapterIfVcQOutqMarkThresh, cfaAdapterIfVbrServOflow, cfaAdapterIfOverbooking]

class cfaInterworkGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 110, 3, 2, 2])
	group = [cfaInterworkIfRxAvailRate, cfaInterworkIfTxAvailRate, cfaInterworkIfRxAllocRate, cfaInterworkIfTxAllocRate]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
