# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from CISCO_ATM_RM_MIB import LsPerVcqThresholdGroup
from IF_MIB import ifIndex
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, Counter32, Integer32, Gauge32
from ATM_TC_MIB import atmVplVpi, atmVclVpi, atmVclVci, AtmTrafficDescrParamIndex
from CISCO_ATM_IF_MIB import NsapAtmAddr
from CISCO_SMI import ciscoExperiment
from SNMPv2_TC import TEXTUAL_CONVENTION, TimeStamp, TruthValue, RowStatus

class CISCO_ATM_CONN_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/site/CISCO-ATM-CONN-MIB'
	conformance = 1
	name = 'CISCO-ATM-CONN-MIB'
	language = 2
	description = 'This MIB module is a cisco extension to VPL/VCL table defined \nin rfc1695 for ATM switch connection management.'

# nodes
class ciscoAtmConnMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13])
	name = 'ciscoAtmConnMIB'

class ciscoAtmConnMIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1])
	name = 'ciscoAtmConnMIBObjects'

class ciscoAtmVpl(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1])
	name = 'ciscoAtmVpl'

class ciscoAtmVcl(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2])
	name = 'ciscoAtmVcl'

class ciscoAtmSvp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 3])
	name = 'ciscoAtmSvp'

class ciscoAtmSvc(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 4])
	name = 'ciscoAtmSvc'

class ciscoAtmSnoopVc(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 5])
	name = 'ciscoAtmSnoopVc'

class ciscoAtmSnoopVp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 6])
	name = 'ciscoAtmSnoopVp'

class ciscoAtmConnMIBConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 3])
	name = 'ciscoAtmConnMIBConformance'

class ciscoAtmConnMIBCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 3, 1])
	name = 'ciscoAtmConnMIBCompliances'

class ciscoAtmConnMIBGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 3, 2])
	name = 'ciscoAtmConnMIBGroups'


# macros
# types 

class InterfaceIndexOrZero(pycopia.SMI.Basetypes.Integer32):
	status = 1
	ranges = Ranges(Range(0, 2147483647))
	format = 'd'


class CastType(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'pointToPoint'), Enum(2, 'pointToMultiPointRoot'), Enum(3, 'pointToMultiPointLeaf')]


class ConfigType(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'other'), Enum(2, 'permanent'), Enum(3, 'switch'), Enum(4, 'soft')]


class SpanType(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'unknown'), Enum(2, 'transit'), Enum(3, 'terminate'), Enum(4, 'both')]


class EnableStatus(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'enable'), Enum(2, 'disable')]


class UpcStatus(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'passing'), Enum(2, 'tagging'), Enum(3, 'dropping'), Enum(4, 'localShaping')]


class ConnState(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'setup'), Enum(2, 'release'), Enum(3, 'notInstalled'), Enum(4, 'down'), Enum(5, 'up')]


class Location(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'unknown'), Enum(2, 'calling'), Enum(3, 'called')]


class Direction(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'unknown'), Enum(2, 'p2pCallingSide'), Enum(3, 'p2pCalledSide'), Enum(4, 'p2mpRoot'), Enum(5, 'p2mpLeaf')]


class SnoopDirType(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'transmit'), Enum(2, 'receive')]

# scalars 
class ciscoAtmSvcFrameDiscardUsesAal5Ie(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 4, 2])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


# columns
class ciscoAtmVplCastType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 1])
	syntaxobject = CastType


class ciscoAtmVplSpanType(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 2])
	syntaxobject = SpanType


class ciscoAtmVplConfigType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 3])
	syntaxobject = ConfigType


class ciscoAtmVplRxUpcMode(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 4])
	syntaxobject = UpcStatus


class ciscoAtmVplConnState(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 5])
	syntaxobject = ConnState


class ciscoAtmVplOamLoopbkTxInterval(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class ciscoAtmVplOamSegmentLoopback(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 7])
	syntaxobject = EnableStatus


class ciscoAtmVplOamEndLoopback(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 8])
	syntaxobject = EnableStatus


class ciscoAtmVplOamAisEnable(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 9])
	syntaxobject = EnableStatus


class ciscoAtmVplOamRdiEnable(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 10])
	syntaxobject = EnableStatus


class ciscoAtmVplInstallTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class ciscoAtmVplInCells(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmVplOutCells(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmVplCrossIfIndex(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 14])
	syntaxobject = InterfaceIndexOrZero


class ciscoAtmVplCrossVpi(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoAtmVplNextLeafIfIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 16])
	syntaxobject = InterfaceIndexOrZero


class ciscoAtmVplNextLeafVpi(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoAtmVplRemoteAddr(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 18])
	syntaxobject = NsapAtmAddr


class ciscoAtmVplRemoteVpi(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoAtmVplLocation(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 20])
	syntaxobject = Location


class ciscoAtmVplSlowRetryIntv(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 21])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoAtmVplNumAttempts(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 22])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmVplLastReleaseCause(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 23])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoAtmVplLogicalPortDef(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 24])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'notLogicalIf'), Enum(2, 'isLogicalIf')]


class ciscoAtmVplLogicalPortIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 25])
	syntaxobject = InterfaceIndexOrZero


class ciscoAtmVplUpcViolations(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 26])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmVplEpdTpdCellDrops(ColumnObject):
	access = 4
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 27])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmVplEpdTpdPacketDrops(ColumnObject):
	access = 4
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 28])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmVplEpdTpdPacketsIn(ColumnObject):
	access = 4
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 29])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmVplClp1Drops(ColumnObject):
	access = 4
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 30])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmVplDefaultRxUpcTolerance(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 31])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoAtmVplDefaultRxUpcVbrCdvt(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 32])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoAtmVplLsPerVcqWrrWeight(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 33])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoAtmVplLsPerVcqTunnelIsShaped(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 34])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class ciscoAtmVplLsPerVcqXmtQueuedCells(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 35])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class ciscoAtmVplLsPerVcQThreshGrp(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 36])
	syntaxobject = LsPerVcqThresholdGroup


class ciscoAtmVplInClp0Cells(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 37])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmVplInClp1Cells(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 38])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmVplOutClp0Cells(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 39])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmVplOutClp1Cells(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 40])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmVplCellDrops(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 41])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmVplClp0VcqFullCellDrops(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 43])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmVplVcqClpThreshCellDrops(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 44])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmVplLsPerVcqTunnelIsHierarchical(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 45])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class ciscoAtmVplRxNegTraffDescrIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 46])
	syntaxobject = AtmTrafficDescrParamIndex


class ciscoAtmVplTxNegTraffDescrIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 47])
	syntaxobject = AtmTrafficDescrParamIndex


class ciscoAtmVclCastType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 1])
	syntaxobject = CastType


class ciscoAtmVclSpanType(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 2])
	syntaxobject = SpanType


class ciscoAtmVclConfigType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 3])
	syntaxobject = ConfigType


class ciscoAtmVclRxUpcMode(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 4])
	syntaxobject = UpcStatus


class ciscoAtmVclEpdEnable(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 5])
	syntaxobject = EnableStatus


class ciscoAtmVclConnState(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 6])
	syntaxobject = ConnState


class ciscoAtmVclOamLoopbkTxInterval(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class ciscoAtmVclOamSegmentLoopback(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 8])
	syntaxobject = EnableStatus


class ciscoAtmVclOamEndLoopback(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 9])
	syntaxobject = EnableStatus


class ciscoAtmVclOamAisEnable(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 10])
	syntaxobject = EnableStatus


class ciscoAtmVclOamRdiEnable(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 11])
	syntaxobject = EnableStatus


class ciscoAtmVclInstallTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class ciscoAtmVclInCells(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmVclOutCells(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmVclCrossIfIndex(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 15])
	syntaxobject = InterfaceIndexOrZero


class ciscoAtmVclCrossVpi(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoAtmVclCrossVci(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoAtmVclNextLeafIfIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 18])
	syntaxobject = InterfaceIndexOrZero


class ciscoAtmVclNextLeafVpi(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoAtmVclNextLeafVci(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 20])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoAtmVclAalEncapFlag(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 21])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'aal5Snap'), Enum(3, 'aal5Nlpid'), Enum(4, 'aal5FrNlpid'), Enum(5, 'aal5Mux'), Enum(6, 'aal34Smds'), Enum(7, 'aalQsAal'), Enum(8, 'aal5Ilmi'), Enum(9, 'aal5Lane'), Enum(10, 'aal5Pnni')]


class ciscoAtmVclAalEncapProtocol(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 22])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'ip'), Enum(3, 'xns'), Enum(4, 'appletalk'), Enum(5, 'clns'), Enum(6, 'decnet'), Enum(7, 'novell'), Enum(8, 'apollo'), Enum(9, 'vines')]


class ciscoAtmVclAalUserVcType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 23])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'boxConfigure'), Enum(3, 'busForward'), Enum(4, 'busSend'), Enum(5, 'clientConfigure'), Enum(6, 'clientData'), Enum(7, 'clientDirect'), Enum(8, 'clientDistribute'), Enum(9, 'clientForward'), Enum(10, 'clientSend'), Enum(11, 'configure'), Enum(12, 'serverConfigure'), Enum(13, 'serverDirect'), Enum(14, 'serverDistribute')]


class ciscoAtmVclAtmInArpInterval(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 24])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'minutes'


class ciscoAtmVclRemoteAddr(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 25])
	syntaxobject = NsapAtmAddr


class ciscoAtmVclRemoteVpi(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 26])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoAtmVclRemoteVci(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 27])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoAtmVclLocation(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 28])
	syntaxobject = Location


class ciscoAtmVclSlowRetryIntv(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 29])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class ciscoAtmVclNumAttempts(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 30])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmVclLastReleaseCause(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 31])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoAtmVclUpcViolations(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 32])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmVclEpdTpdCellDrops(ColumnObject):
	access = 4
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 33])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmVclEpdTpdPacketDrops(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 34])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmVclEpdTpdPacketsIn(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 35])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmVclClp1Drops(ColumnObject):
	access = 4
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 37])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmVclDefaultRxUpcTolerance(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 38])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoAtmVclDefaultRxUpcVbrCdvt(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 39])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoAtmVclLsPerVcqWrrWeight(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 40])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoAtmVclLsPerVcqXmtQueuedCells(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 41])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class ciscoAtmVclLsPerVcQThreshGrp(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 42])
	syntaxobject = LsPerVcqThresholdGroup


class ciscoAtmVclInClp0Cells(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 43])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmVclInClp1Cells(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 44])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmVclOutClp0Cells(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 45])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmVclOutClp1Cells(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 46])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmVclCellDrops(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 47])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmVclClp0VcqFullCellDrops(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 48])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmVclVcqClpThreshCellDrops(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 49])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmVclRxNegTraffDescrIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 50])
	syntaxobject = AtmTrafficDescrParamIndex


class ciscoAtmVclTxNegTraffDescrIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 51])
	syntaxobject = AtmTrafficDescrParamIndex


class ciscoAtmSvpAddr(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 3, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class ciscoAtmSvpVpi(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 3, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoAtmSvpDirection(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 3, 1, 1, 3])
	syntaxobject = Direction


class ciscoAtmSvcAddr(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 4, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class ciscoAtmSvcVpi(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 4, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoAtmSvcVci(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 4, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoAtmSvcDirection(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 4, 1, 1, 4])
	syntaxobject = Direction


class ciscoAtmSnoopVcSnoopedIfIndex(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 5, 1, 1, 1])
	syntaxobject = InterfaceIndexOrZero


class ciscoAtmSnoopVcSnoopedVpi(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 5, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoAtmSnoopVcSnoopedVci(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 5, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoAtmSnoopVcDir(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 5, 1, 1, 4])
	syntaxobject = SnoopDirType


class ciscoAtmSnoopVcState(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 5, 1, 1, 5])
	syntaxobject = ConnState


class ciscoAtmSnoopVcRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 5, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class ciscoAtmSnoopVpSnoopedIfIndex(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 6, 1, 1, 1])
	syntaxobject = InterfaceIndexOrZero


class ciscoAtmSnoopVpSnoopedVpi(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 6, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoAtmSnoopVpDir(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 6, 1, 1, 3])
	syntaxobject = SnoopDirType


class ciscoAtmSnoopVpState(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 6, 1, 1, 4])
	syntaxobject = ConnState


class ciscoAtmSnoopVpRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 6, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


# rows 
class ciscoAtmVplEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, atmVplVpi], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1])
	access = 2
	columns = {'ciscoAtmVplCastType': ciscoAtmVplCastType, 'ciscoAtmVplSpanType': ciscoAtmVplSpanType, 'ciscoAtmVplConfigType': ciscoAtmVplConfigType, 'ciscoAtmVplRxUpcMode': ciscoAtmVplRxUpcMode, 'ciscoAtmVplConnState': ciscoAtmVplConnState, 'ciscoAtmVplOamLoopbkTxInterval': ciscoAtmVplOamLoopbkTxInterval, 'ciscoAtmVplOamSegmentLoopback': ciscoAtmVplOamSegmentLoopback, 'ciscoAtmVplOamEndLoopback': ciscoAtmVplOamEndLoopback, 'ciscoAtmVplOamAisEnable': ciscoAtmVplOamAisEnable, 'ciscoAtmVplOamRdiEnable': ciscoAtmVplOamRdiEnable, 'ciscoAtmVplInstallTime': ciscoAtmVplInstallTime, 'ciscoAtmVplInCells': ciscoAtmVplInCells, 'ciscoAtmVplOutCells': ciscoAtmVplOutCells, 'ciscoAtmVplCrossIfIndex': ciscoAtmVplCrossIfIndex, 'ciscoAtmVplCrossVpi': ciscoAtmVplCrossVpi, 'ciscoAtmVplNextLeafIfIndex': ciscoAtmVplNextLeafIfIndex, 'ciscoAtmVplNextLeafVpi': ciscoAtmVplNextLeafVpi, 'ciscoAtmVplRemoteAddr': ciscoAtmVplRemoteAddr, 'ciscoAtmVplRemoteVpi': ciscoAtmVplRemoteVpi, 'ciscoAtmVplLocation': ciscoAtmVplLocation, 'ciscoAtmVplSlowRetryIntv': ciscoAtmVplSlowRetryIntv, 'ciscoAtmVplNumAttempts': ciscoAtmVplNumAttempts, 'ciscoAtmVplLastReleaseCause': ciscoAtmVplLastReleaseCause, 'ciscoAtmVplLogicalPortDef': ciscoAtmVplLogicalPortDef, 'ciscoAtmVplLogicalPortIndex': ciscoAtmVplLogicalPortIndex, 'ciscoAtmVplUpcViolations': ciscoAtmVplUpcViolations, 'ciscoAtmVplEpdTpdCellDrops': ciscoAtmVplEpdTpdCellDrops, 'ciscoAtmVplEpdTpdPacketDrops': ciscoAtmVplEpdTpdPacketDrops, 'ciscoAtmVplEpdTpdPacketsIn': ciscoAtmVplEpdTpdPacketsIn, 'ciscoAtmVplClp1Drops': ciscoAtmVplClp1Drops, 'ciscoAtmVplDefaultRxUpcTolerance': ciscoAtmVplDefaultRxUpcTolerance, 'ciscoAtmVplDefaultRxUpcVbrCdvt': ciscoAtmVplDefaultRxUpcVbrCdvt, 'ciscoAtmVplLsPerVcqWrrWeight': ciscoAtmVplLsPerVcqWrrWeight, 'ciscoAtmVplLsPerVcqTunnelIsShaped': ciscoAtmVplLsPerVcqTunnelIsShaped, 'ciscoAtmVplLsPerVcqXmtQueuedCells': ciscoAtmVplLsPerVcqXmtQueuedCells, 'ciscoAtmVplLsPerVcQThreshGrp': ciscoAtmVplLsPerVcQThreshGrp, 'ciscoAtmVplInClp0Cells': ciscoAtmVplInClp0Cells, 'ciscoAtmVplInClp1Cells': ciscoAtmVplInClp1Cells, 'ciscoAtmVplOutClp0Cells': ciscoAtmVplOutClp0Cells, 'ciscoAtmVplOutClp1Cells': ciscoAtmVplOutClp1Cells, 'ciscoAtmVplCellDrops': ciscoAtmVplCellDrops, 'ciscoAtmVplClp0VcqFullCellDrops': ciscoAtmVplClp0VcqFullCellDrops, 'ciscoAtmVplVcqClpThreshCellDrops': ciscoAtmVplVcqClpThreshCellDrops, 'ciscoAtmVplLsPerVcqTunnelIsHierarchical': ciscoAtmVplLsPerVcqTunnelIsHierarchical, 'ciscoAtmVplRxNegTraffDescrIndex': ciscoAtmVplRxNegTraffDescrIndex, 'ciscoAtmVplTxNegTraffDescrIndex': ciscoAtmVplTxNegTraffDescrIndex}


class ciscoAtmVclEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, atmVclVpi, atmVclVci], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1])
	access = 2
	columns = {'ciscoAtmVclCastType': ciscoAtmVclCastType, 'ciscoAtmVclSpanType': ciscoAtmVclSpanType, 'ciscoAtmVclConfigType': ciscoAtmVclConfigType, 'ciscoAtmVclRxUpcMode': ciscoAtmVclRxUpcMode, 'ciscoAtmVclEpdEnable': ciscoAtmVclEpdEnable, 'ciscoAtmVclConnState': ciscoAtmVclConnState, 'ciscoAtmVclOamLoopbkTxInterval': ciscoAtmVclOamLoopbkTxInterval, 'ciscoAtmVclOamSegmentLoopback': ciscoAtmVclOamSegmentLoopback, 'ciscoAtmVclOamEndLoopback': ciscoAtmVclOamEndLoopback, 'ciscoAtmVclOamAisEnable': ciscoAtmVclOamAisEnable, 'ciscoAtmVclOamRdiEnable': ciscoAtmVclOamRdiEnable, 'ciscoAtmVclInstallTime': ciscoAtmVclInstallTime, 'ciscoAtmVclInCells': ciscoAtmVclInCells, 'ciscoAtmVclOutCells': ciscoAtmVclOutCells, 'ciscoAtmVclCrossIfIndex': ciscoAtmVclCrossIfIndex, 'ciscoAtmVclCrossVpi': ciscoAtmVclCrossVpi, 'ciscoAtmVclCrossVci': ciscoAtmVclCrossVci, 'ciscoAtmVclNextLeafIfIndex': ciscoAtmVclNextLeafIfIndex, 'ciscoAtmVclNextLeafVpi': ciscoAtmVclNextLeafVpi, 'ciscoAtmVclNextLeafVci': ciscoAtmVclNextLeafVci, 'ciscoAtmVclAalEncapFlag': ciscoAtmVclAalEncapFlag, 'ciscoAtmVclAalEncapProtocol': ciscoAtmVclAalEncapProtocol, 'ciscoAtmVclAalUserVcType': ciscoAtmVclAalUserVcType, 'ciscoAtmVclAtmInArpInterval': ciscoAtmVclAtmInArpInterval, 'ciscoAtmVclRemoteAddr': ciscoAtmVclRemoteAddr, 'ciscoAtmVclRemoteVpi': ciscoAtmVclRemoteVpi, 'ciscoAtmVclRemoteVci': ciscoAtmVclRemoteVci, 'ciscoAtmVclLocation': ciscoAtmVclLocation, 'ciscoAtmVclSlowRetryIntv': ciscoAtmVclSlowRetryIntv, 'ciscoAtmVclNumAttempts': ciscoAtmVclNumAttempts, 'ciscoAtmVclLastReleaseCause': ciscoAtmVclLastReleaseCause, 'ciscoAtmVclUpcViolations': ciscoAtmVclUpcViolations, 'ciscoAtmVclEpdTpdCellDrops': ciscoAtmVclEpdTpdCellDrops, 'ciscoAtmVclEpdTpdPacketDrops': ciscoAtmVclEpdTpdPacketDrops, 'ciscoAtmVclEpdTpdPacketsIn': ciscoAtmVclEpdTpdPacketsIn, 'ciscoAtmVclClp1Drops': ciscoAtmVclClp1Drops, 'ciscoAtmVclDefaultRxUpcTolerance': ciscoAtmVclDefaultRxUpcTolerance, 'ciscoAtmVclDefaultRxUpcVbrCdvt': ciscoAtmVclDefaultRxUpcVbrCdvt, 'ciscoAtmVclLsPerVcqWrrWeight': ciscoAtmVclLsPerVcqWrrWeight, 'ciscoAtmVclLsPerVcqXmtQueuedCells': ciscoAtmVclLsPerVcqXmtQueuedCells, 'ciscoAtmVclLsPerVcQThreshGrp': ciscoAtmVclLsPerVcQThreshGrp, 'ciscoAtmVclInClp0Cells': ciscoAtmVclInClp0Cells, 'ciscoAtmVclInClp1Cells': ciscoAtmVclInClp1Cells, 'ciscoAtmVclOutClp0Cells': ciscoAtmVclOutClp0Cells, 'ciscoAtmVclOutClp1Cells': ciscoAtmVclOutClp1Cells, 'ciscoAtmVclCellDrops': ciscoAtmVclCellDrops, 'ciscoAtmVclClp0VcqFullCellDrops': ciscoAtmVclClp0VcqFullCellDrops, 'ciscoAtmVclVcqClpThreshCellDrops': ciscoAtmVclVcqClpThreshCellDrops, 'ciscoAtmVclRxNegTraffDescrIndex': ciscoAtmVclRxNegTraffDescrIndex, 'ciscoAtmVclTxNegTraffDescrIndex': ciscoAtmVclTxNegTraffDescrIndex}


class ciscoAtmSvpAddrEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, ciscoAtmSvpAddr, ciscoAtmSvpVpi], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 3, 1, 1])
	access = 2
	columns = {'ciscoAtmSvpAddr': ciscoAtmSvpAddr, 'ciscoAtmSvpVpi': ciscoAtmSvpVpi, 'ciscoAtmSvpDirection': ciscoAtmSvpDirection}


class ciscoAtmSvcAddrEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, ciscoAtmSvcAddr, ciscoAtmSvcVpi, ciscoAtmSvcVci], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 4, 1, 1])
	access = 2
	columns = {'ciscoAtmSvcAddr': ciscoAtmSvcAddr, 'ciscoAtmSvcVpi': ciscoAtmSvcVpi, 'ciscoAtmSvcVci': ciscoAtmSvcVci, 'ciscoAtmSvcDirection': ciscoAtmSvcDirection}


class ciscoAtmSnoopVcEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, atmVclVpi, atmVclVci], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 5, 1, 1])
	access = 2
	rowstatus = ciscoAtmSnoopVcRowStatus
	columns = {'ciscoAtmSnoopVcSnoopedIfIndex': ciscoAtmSnoopVcSnoopedIfIndex, 'ciscoAtmSnoopVcSnoopedVpi': ciscoAtmSnoopVcSnoopedVpi, 'ciscoAtmSnoopVcSnoopedVci': ciscoAtmSnoopVcSnoopedVci, 'ciscoAtmSnoopVcDir': ciscoAtmSnoopVcDir, 'ciscoAtmSnoopVcState': ciscoAtmSnoopVcState, 'ciscoAtmSnoopVcRowStatus': ciscoAtmSnoopVcRowStatus}


class ciscoAtmSnoopVpEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, atmVplVpi], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 6, 1, 1])
	access = 2
	rowstatus = ciscoAtmSnoopVpRowStatus
	columns = {'ciscoAtmSnoopVpSnoopedIfIndex': ciscoAtmSnoopVpSnoopedIfIndex, 'ciscoAtmSnoopVpSnoopedVpi': ciscoAtmSnoopVpSnoopedVpi, 'ciscoAtmSnoopVpDir': ciscoAtmSnoopVpDir, 'ciscoAtmSnoopVpState': ciscoAtmSnoopVpState, 'ciscoAtmSnoopVpRowStatus': ciscoAtmSnoopVpRowStatus}


# notifications (traps) 
# groups 
class ciscoAtmConnMIBGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 3, 2, 1])
	group = [ciscoAtmVplCastType, ciscoAtmVplSpanType, ciscoAtmVplConfigType, ciscoAtmVplRxUpcMode, ciscoAtmVplConnState, ciscoAtmVplOamLoopbkTxInterval, ciscoAtmVplOamSegmentLoopback, ciscoAtmVplOamEndLoopback, ciscoAtmVplOamAisEnable, ciscoAtmVplOamRdiEnable, ciscoAtmVplInstallTime, ciscoAtmVplInCells, ciscoAtmVplOutCells, ciscoAtmVplCrossIfIndex, ciscoAtmVplCrossVpi, ciscoAtmVplNextLeafIfIndex, ciscoAtmVplNextLeafVpi, ciscoAtmVplRemoteAddr, ciscoAtmVplRemoteVpi, ciscoAtmVplLocation, ciscoAtmVplSlowRetryIntv, ciscoAtmVplNumAttempts, ciscoAtmVplLastReleaseCause, ciscoAtmVplLogicalPortDef, ciscoAtmVplLogicalPortIndex, ciscoAtmVclCastType, ciscoAtmVclSpanType, ciscoAtmVclConfigType, ciscoAtmVclRxUpcMode, ciscoAtmVclEpdEnable, ciscoAtmVclConnState, ciscoAtmVclOamLoopbkTxInterval, ciscoAtmVclOamSegmentLoopback, ciscoAtmVclOamEndLoopback, ciscoAtmVclOamAisEnable, ciscoAtmVclOamRdiEnable, ciscoAtmVclInstallTime, ciscoAtmVclInCells, ciscoAtmVclOutCells, ciscoAtmVclCrossIfIndex, ciscoAtmVclCrossVpi, ciscoAtmVclCrossVci, ciscoAtmVclNextLeafIfIndex, ciscoAtmVclNextLeafVpi, ciscoAtmVclNextLeafVci, ciscoAtmVclAalEncapFlag, ciscoAtmVclAalEncapProtocol, ciscoAtmVclAalUserVcType, ciscoAtmVclAtmInArpInterval, ciscoAtmVclRemoteAddr, ciscoAtmVclRemoteVpi, ciscoAtmVclRemoteVci, ciscoAtmVclLocation, ciscoAtmVclSlowRetryIntv, ciscoAtmVclNumAttempts, ciscoAtmVclLastReleaseCause, ciscoAtmSvpDirection, ciscoAtmSvcDirection]

class ciscoAtmConnMIBGroup3(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 3, 2, 3])
	group = [ciscoAtmVplDefaultRxUpcTolerance, ciscoAtmVclDefaultRxUpcTolerance, ciscoAtmVplDefaultRxUpcVbrCdvt, ciscoAtmVclDefaultRxUpcVbrCdvt, ciscoAtmSvcFrameDiscardUsesAal5Ie]

class ciscoAtmConnMIBlsFcPfqGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 3, 2, 5])
	group = [ciscoAtmVplUpcViolations, ciscoAtmVclUpcViolations, ciscoAtmVclEpdTpdPacketDrops, ciscoAtmVclEpdTpdPacketsIn, ciscoAtmVplInClp0Cells, ciscoAtmVplInClp1Cells, ciscoAtmVplOutClp0Cells, ciscoAtmVplOutClp1Cells, ciscoAtmVplCellDrops, ciscoAtmVplClp0VcqFullCellDrops, ciscoAtmVplVcqClpThreshCellDrops, ciscoAtmVclInClp0Cells, ciscoAtmVclInClp1Cells, ciscoAtmVclOutClp0Cells, ciscoAtmVclOutClp1Cells, ciscoAtmVclCellDrops, ciscoAtmVclClp0VcqFullCellDrops, ciscoAtmVclVcqClpThreshCellDrops]

class ciscoAtmConnMIBlsPerVcqGroup2(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 3, 2, 6])
	group = [ciscoAtmVplLsPerVcqWrrWeight, ciscoAtmVplLsPerVcqTunnelIsShaped, ciscoAtmVplLsPerVcqTunnelIsHierarchical, ciscoAtmVplLsPerVcqXmtQueuedCells, ciscoAtmVplLsPerVcQThreshGrp, ciscoAtmVclLsPerVcqWrrWeight, ciscoAtmVclLsPerVcqXmtQueuedCells, ciscoAtmVclLsPerVcQThreshGrp, ciscoAtmSnoopVcSnoopedIfIndex, ciscoAtmSnoopVcSnoopedVpi, ciscoAtmSnoopVcSnoopedVci, ciscoAtmSnoopVcDir, ciscoAtmSnoopVcState, ciscoAtmSnoopVcRowStatus, ciscoAtmSnoopVpSnoopedIfIndex, ciscoAtmSnoopVpSnoopedVpi, ciscoAtmSnoopVpDir, ciscoAtmSnoopVpState, ciscoAtmSnoopVpRowStatus]

class ciscoAtmConnMIBNegTraffGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 13, 3, 2, 7])
	group = [ciscoAtmVplRxNegTraffDescrIndex, ciscoAtmVplTxNegTraffDescrIndex, ciscoAtmVclRxNegTraffDescrIndex, ciscoAtmVclTxNegTraffDescrIndex]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
