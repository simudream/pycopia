# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, Integer32
from CISCO_TC import CiscoNetworkProtocol, CiscoNetworkAddress
from CISCO_SMI import ciscoMgmt
from CISCO_VTP_MIB import VlanIndex
from SNMPv2_TC import TruthValue, DisplayString

class CISCO_CDP_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/site/CISCO-CDP-MIB'
	conformance = 2
	name = 'CISCO-CDP-MIB'
	language = 2
	description = 'The MIB module for management of the Cisco Discovery\nProtocol in Cisco devices.'

# nodes
class ciscoCdpMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 23])
	name = 'ciscoCdpMIB'

class ciscoCdpMIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 23, 1])
	name = 'ciscoCdpMIBObjects'

class cdpInterface(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 1])
	name = 'cdpInterface'

class cdpCache(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2])
	name = 'cdpCache'

class cdpGlobal(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 3])
	name = 'cdpGlobal'

class ciscoCdpMIBConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 23, 2])
	name = 'ciscoCdpMIBConformance'

class ciscoCdpMIBCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 23, 2, 1])
	name = 'ciscoCdpMIBCompliances'

class ciscoCdpMIBGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 23, 2, 2])
	name = 'ciscoCdpMIBGroups'


# macros
# types 
# scalars 
class cdpGlobalRun(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 3, 1])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class cdpGlobalMessageInterval(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 3, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class cdpGlobalHoldTime(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 3, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class cdpGlobalDeviceId(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 3, 4])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


# columns
class cdpInterfaceIfIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 1, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class cdpInterfaceEnable(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 1, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class cdpInterfaceMessageInterval(ColumnObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 1, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class cdpInterfaceGroup(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 1, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class cdpInterfacePort(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 1, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class cdpCacheIfIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class cdpCacheDeviceIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class cdpCacheAddressType(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 1, 1, 3])
	syntaxobject = CiscoNetworkProtocol


class cdpCacheAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 1, 1, 4])
	syntaxobject = CiscoNetworkAddress


class cdpCacheVersion(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class cdpCacheDeviceId(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class cdpCacheDevicePort(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class cdpCachePlatform(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class cdpCacheCapabilities(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class cdpCacheVTPMgmtDomain(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class cdpCacheNativeVLAN(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 1, 1, 11])
	syntaxobject = VlanIndex


class cdpCacheDuplex(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 1, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'unknown'), Enum(2, 'halfduplex'), Enum(3, 'fullduplex')]


# rows 
class cdpInterfaceEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([cdpInterfaceIfIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 1, 1, 1])
	access = 2
	columns = {'cdpInterfaceIfIndex': cdpInterfaceIfIndex, 'cdpInterfaceEnable': cdpInterfaceEnable, 'cdpInterfaceMessageInterval': cdpInterfaceMessageInterval, 'cdpInterfaceGroup': cdpInterfaceGroup, 'cdpInterfacePort': cdpInterfacePort}


class cdpCacheEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([cdpCacheIfIndex, cdpCacheDeviceIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 1, 1])
	access = 2
	columns = {'cdpCacheIfIndex': cdpCacheIfIndex, 'cdpCacheDeviceIndex': cdpCacheDeviceIndex, 'cdpCacheAddressType': cdpCacheAddressType, 'cdpCacheAddress': cdpCacheAddress, 'cdpCacheVersion': cdpCacheVersion, 'cdpCacheDeviceId': cdpCacheDeviceId, 'cdpCacheDevicePort': cdpCacheDevicePort, 'cdpCachePlatform': cdpCachePlatform, 'cdpCacheCapabilities': cdpCacheCapabilities, 'cdpCacheVTPMgmtDomain': cdpCacheVTPMgmtDomain, 'cdpCacheNativeVLAN': cdpCacheNativeVLAN, 'cdpCacheDuplex': cdpCacheDuplex}


# notifications (traps) 
# groups 
class ciscoCdpMIBGroupV12R02(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 23, 2, 2, 5])
	group = [cdpInterfaceEnable, cdpInterfaceGroup, cdpInterfacePort, cdpCacheAddressType, cdpCacheAddress, cdpCacheVersion, cdpCacheDeviceId, cdpCacheDevicePort, cdpCacheCapabilities, cdpCachePlatform, cdpCacheVTPMgmtDomain, cdpCacheNativeVLAN, cdpCacheDuplex, cdpGlobalRun, cdpGlobalMessageInterval, cdpGlobalHoldTime, cdpGlobalDeviceId]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
