# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from FC_MGMT_MIB import fcmInstanceIndex, FcNameIdOrZero, fcmPortEntry, fcmSwitchEntry
from IF_MIB import InterfaceIndex
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, Unsigned32, mib_2
from T11_TC_MIB import T11FabricIndex
from SNMPv2_TC import RowStatus, StorageType

class T11_FC_VIRTUAL_FABRIC_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/T11-FC-VIRTUAL-FABRIC-MIB'
	name = 'T11-FC-VIRTUAL-FABRIC-MIB'
	language = 2
	description = 'This module defines management information specific to\nFibre Channel Virtual Fabrics.  A Virtual Fabric is a\n\n\n\nFabric composed of partitions of switches, links and\nN_Ports with a single Fabric management domain, Fabric\nServices and independence from other Virtual Fabrics.\n\nCopyright (C) The IETF Trust (2006).  This version of\nthis MIB module is part of RFC 4747; see the RFC itself for\nfull legal notices.'

# nodes
class t11FcVirtualFabricMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 147])
	name = 't11FcVirtualFabricMIB'

class t11vfObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 147, 1])
	name = 't11vfObjects'

class t11vfConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 147, 2])
	name = 't11vfConformance'

class t11vfMIBCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 147, 2, 1])
	name = 't11vfMIBCompliances'

class t11vfMIBGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 147, 2, 2])
	name = 't11vfMIBGroups'


# macros
# types 
# scalars 
# columns
class t11vfCoreSwitchSwitchName(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 147, 1, 1, 1, 1])
	syntaxobject = FcNameIdOrZero


class t11vfCoreSwitchMaxSupported(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 147, 1, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class t11vfCoreSwitchStorageType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 147, 1, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


class t11vfVirtualSwitchVfId(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 147, 1, 2, 1, 1])
	syntaxobject = T11FabricIndex


class t11vfVirtualSwitchCoreSwitchName(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 147, 1, 2, 1, 2])
	syntaxobject = FcNameIdOrZero


class t11vfVirtualSwitchRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 147, 1, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class t11vfVirtualSwitchStorageType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 147, 1, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


class t11vfPortVfId(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 147, 1, 3, 1, 1])
	syntaxobject = T11FabricIndex


class t11vfPortTaggingAdminStatus(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 147, 1, 3, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'off'), Enum(2, 'on'), Enum(3, 'auto')]


class t11vfPortTaggingOperStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 147, 1, 3, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'off'), Enum(2, 'on')]


class t11vfPortStorageType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 147, 1, 3, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


class t11vfLocallyEnabledPortIfIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 147, 1, 4, 1, 1])
	syntaxobject = InterfaceIndex


class t11vfLocallyEnabledVfId(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 147, 1, 4, 1, 2])
	syntaxobject = T11FabricIndex


class t11vfLocallyEnabledOperStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 147, 1, 4, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'off'), Enum(2, 'on')]


class t11vfLocallyEnabledRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 147, 1, 4, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class t11vfLocallyEnabledStorageType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 147, 1, 4, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


# rows 
class t11vfCoreSwitchEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([fcmInstanceIndex, t11vfCoreSwitchSwitchName], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 147, 1, 1, 1])
	access = 2
	columns = {'t11vfCoreSwitchSwitchName': t11vfCoreSwitchSwitchName, 't11vfCoreSwitchMaxSupported': t11vfCoreSwitchMaxSupported, 't11vfCoreSwitchStorageType': t11vfCoreSwitchStorageType}


from FC_MGMT_MIB import fcmInstanceIndex
from FC_MGMT_MIB import fcmSwitchIndex
class t11vfVirtualSwitchEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([fcmInstanceIndex, fcmSwitchIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 147, 1, 2, 1])
	access = 2
	rowstatus = t11vfVirtualSwitchRowStatus
	columns = {'t11vfVirtualSwitchVfId': t11vfVirtualSwitchVfId, 't11vfVirtualSwitchCoreSwitchName': t11vfVirtualSwitchCoreSwitchName, 't11vfVirtualSwitchRowStatus': t11vfVirtualSwitchRowStatus, 't11vfVirtualSwitchStorageType': t11vfVirtualSwitchStorageType}


from IF_MIB import ifIndex
class t11vfPortEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 147, 1, 3, 1])
	access = 2
	columns = {'t11vfPortVfId': t11vfPortVfId, 't11vfPortTaggingAdminStatus': t11vfPortTaggingAdminStatus, 't11vfPortTaggingOperStatus': t11vfPortTaggingOperStatus, 't11vfPortStorageType': t11vfPortStorageType}


class t11vfLocallyEnabledEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([t11vfLocallyEnabledPortIfIndex, t11vfLocallyEnabledVfId], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 147, 1, 4, 1])
	access = 2
	rowstatus = t11vfLocallyEnabledRowStatus
	columns = {'t11vfLocallyEnabledPortIfIndex': t11vfLocallyEnabledPortIfIndex, 't11vfLocallyEnabledVfId': t11vfLocallyEnabledVfId, 't11vfLocallyEnabledOperStatus': t11vfLocallyEnabledOperStatus, 't11vfLocallyEnabledRowStatus': t11vfLocallyEnabledRowStatus, 't11vfLocallyEnabledStorageType': t11vfLocallyEnabledStorageType}


# notifications (traps) 
# groups 
class t11vfGeneralGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 147, 2, 2, 1])
	group = [t11vfCoreSwitchMaxSupported, t11vfVirtualSwitchVfId, t11vfVirtualSwitchCoreSwitchName, t11vfVirtualSwitchRowStatus, t11vfPortVfId, t11vfPortTaggingAdminStatus, t11vfLocallyEnabledOperStatus, t11vfPortTaggingOperStatus, t11vfLocallyEnabledRowStatus, t11vfCoreSwitchStorageType, t11vfVirtualSwitchStorageType, t11vfPortStorageType, t11vfLocallyEnabledStorageType]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
