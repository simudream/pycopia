# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, NOTIFICATION_TYPE, mib_2, Counter32, Unsigned32, Integer32, Gauge32
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP, NOTIFICATION_GROUP
from SNMPv2_TC import DisplayString, PhysAddress, TruthValue, TimeStamp, VariablePointer, RowPointer
from IPV6_TC import Ipv6IfIndex, Ipv6Address, Ipv6AddressPrefix, Ipv6AddressIfIdentifier, Ipv6IfIndexOrZero

class IPV6_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/IPV6-MIB'
	conformance = 3
	name = 'IPV6-MIB'
	language = 2
	description = 'The MIB module for entities implementing the IPv6\nprotocol.'

# nodes
class ipv6MIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55])
	name = 'ipv6MIB'

class ipv6MIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1])
	name = 'ipv6MIBObjects'

class ipv6Notifications(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 2])
	name = 'ipv6Notifications'

class ipv6NotificationPrefix(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 2, 0])
	name = 'ipv6NotificationPrefix'

class ipv6Conformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 3])
	name = 'ipv6Conformance'

class ipv6Compliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 3, 1])
	name = 'ipv6Compliances'

class ipv6Groups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 3, 2])
	name = 'ipv6Groups'


# macros
# types 
# scalars 
class ipv6Forwarding(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'forwarding'), Enum(2, 'notForwarding')]


class ipv6DefaultHopLimit(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ipv6Interfaces(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class ipv6IfTableLastChange(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class ipv6RouteNumber(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class ipv6DiscardedRoutes(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


# columns
class ipv6IfIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 5, 1, 1])
	syntaxobject = Ipv6IfIndex


class ipv6IfDescr(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 5, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class ipv6IfLowerLayer(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 5, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.VariablePointer


class ipv6IfEffectiveMtu(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 5, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32
	access = 4
	units = 'octets'


class ipv6IfReasmMaxSize(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 5, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32
	access = 4
	units = 'octets'


class ipv6IfIdentifier(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 5, 1, 6])
	syntaxobject = Ipv6AddressIfIdentifier


class ipv6IfIdentifierLength(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 5, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'bits'


class ipv6IfPhysicalAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 5, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.PhysAddress


class ipv6IfAdminStatus(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 5, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'up'), Enum(2, 'down')]


class ipv6IfOperStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 5, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'up'), Enum(2, 'down'), Enum(3, 'noIfIdentifier'), Enum(4, 'unknown'), Enum(5, 'notPresent')]


class ipv6IfLastChange(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 5, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class ipv6IfStatsInReceives(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 6, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ipv6IfStatsInHdrErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 6, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ipv6IfStatsInTooBigErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 6, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ipv6IfStatsInNoRoutes(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 6, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ipv6IfStatsInAddrErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 6, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ipv6IfStatsInUnknownProtos(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 6, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ipv6IfStatsInTruncatedPkts(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 6, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ipv6IfStatsInDiscards(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 6, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ipv6IfStatsInDelivers(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 6, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ipv6IfStatsOutForwDatagrams(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 6, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ipv6IfStatsOutRequests(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 6, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ipv6IfStatsOutDiscards(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 6, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ipv6IfStatsOutFragOKs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 6, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ipv6IfStatsOutFragFails(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 6, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ipv6IfStatsOutFragCreates(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 6, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ipv6IfStatsReasmReqds(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 6, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ipv6IfStatsReasmOKs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 6, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ipv6IfStatsReasmFails(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 6, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ipv6IfStatsInMcastPkts(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 6, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ipv6IfStatsOutMcastPkts(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 6, 1, 20])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ipv6AddrPrefix(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 7, 1, 1])
	syntaxobject = Ipv6AddressPrefix


class ipv6AddrPrefixLength(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 7, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 2
	units = 'bits'


class ipv6AddrPrefixOnLinkFlag(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 7, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class ipv6AddrPrefixAutonomousFlag(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 7, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class ipv6AddrPrefixAdvPreferredLifetime(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 7, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32
	access = 4
	units = 'seconds'


class ipv6AddrPrefixAdvValidLifetime(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 7, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32
	access = 4
	units = 'seconds'


class ipv6AddrAddress(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 8, 1, 1])
	syntaxobject = Ipv6Address


class ipv6AddrPfxLength(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 8, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = 'bits'


class ipv6AddrType(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 8, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'stateless'), Enum(2, 'stateful'), Enum(3, 'unknown')]


class ipv6AddrAnycastFlag(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 8, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class ipv6AddrStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 8, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'preferred'), Enum(2, 'deprecated'), Enum(3, 'invalid'), Enum(4, 'inaccessible'), Enum(5, 'unknown')]


class ipv6RouteDest(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 11, 1, 1])
	syntaxobject = Ipv6Address


class ipv6RoutePfxLength(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 11, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 2
	units = 'bits'


class ipv6RouteIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 11, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class ipv6RouteIfIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 11, 1, 4])
	syntaxobject = Ipv6IfIndexOrZero


class ipv6RouteNextHop(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 11, 1, 5])
	syntaxobject = Ipv6Address


class ipv6RouteType(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 11, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'discard'), Enum(3, 'local'), Enum(4, 'remote')]


class ipv6RouteProtocol(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 11, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'local'), Enum(3, 'netmgmt'), Enum(4, 'ndisc'), Enum(5, 'rip'), Enum(6, 'ospf'), Enum(7, 'bgp'), Enum(8, 'idrp'), Enum(9, 'igrp')]


class ipv6RoutePolicy(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 11, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ipv6RouteAge(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 11, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32
	access = 4
	units = 'seconds'


class ipv6RouteNextHopRDI(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 11, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class ipv6RouteMetric(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 11, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class ipv6RouteWeight(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 11, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class ipv6RouteInfo(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 11, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.RowPointer


class ipv6RouteValid(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 11, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class ipv6NetToMediaNetAddress(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 12, 1, 1])
	syntaxobject = Ipv6Address


class ipv6NetToMediaPhysAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 12, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.PhysAddress


class ipv6NetToMediaType(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 12, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'dynamic'), Enum(3, 'static'), Enum(4, 'local')]


class ipv6IfNetToMediaState(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 12, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'reachable'), Enum(2, 'stale'), Enum(3, 'delay'), Enum(4, 'probe'), Enum(5, 'invalid'), Enum(6, 'unknown')]


class ipv6IfNetToMediaLastUpdated(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 12, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class ipv6NetToMediaValid(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 12, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


# rows 
class ipv6IfEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ipv6IfIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 5, 1])
	access = 2
	columns = {'ipv6IfIndex': ipv6IfIndex, 'ipv6IfDescr': ipv6IfDescr, 'ipv6IfLowerLayer': ipv6IfLowerLayer, 'ipv6IfEffectiveMtu': ipv6IfEffectiveMtu, 'ipv6IfReasmMaxSize': ipv6IfReasmMaxSize, 'ipv6IfIdentifier': ipv6IfIdentifier, 'ipv6IfIdentifierLength': ipv6IfIdentifierLength, 'ipv6IfPhysicalAddress': ipv6IfPhysicalAddress, 'ipv6IfAdminStatus': ipv6IfAdminStatus, 'ipv6IfOperStatus': ipv6IfOperStatus, 'ipv6IfLastChange': ipv6IfLastChange}


from IPV6_MIB import ipv6IfIndex
class ipv6IfStatsEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ipv6IfIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 6, 1])
	access = 2
	columns = {'ipv6IfStatsInReceives': ipv6IfStatsInReceives, 'ipv6IfStatsInHdrErrors': ipv6IfStatsInHdrErrors, 'ipv6IfStatsInTooBigErrors': ipv6IfStatsInTooBigErrors, 'ipv6IfStatsInNoRoutes': ipv6IfStatsInNoRoutes, 'ipv6IfStatsInAddrErrors': ipv6IfStatsInAddrErrors, 'ipv6IfStatsInUnknownProtos': ipv6IfStatsInUnknownProtos, 'ipv6IfStatsInTruncatedPkts': ipv6IfStatsInTruncatedPkts, 'ipv6IfStatsInDiscards': ipv6IfStatsInDiscards, 'ipv6IfStatsInDelivers': ipv6IfStatsInDelivers, 'ipv6IfStatsOutForwDatagrams': ipv6IfStatsOutForwDatagrams, 'ipv6IfStatsOutRequests': ipv6IfStatsOutRequests, 'ipv6IfStatsOutDiscards': ipv6IfStatsOutDiscards, 'ipv6IfStatsOutFragOKs': ipv6IfStatsOutFragOKs, 'ipv6IfStatsOutFragFails': ipv6IfStatsOutFragFails, 'ipv6IfStatsOutFragCreates': ipv6IfStatsOutFragCreates, 'ipv6IfStatsReasmReqds': ipv6IfStatsReasmReqds, 'ipv6IfStatsReasmOKs': ipv6IfStatsReasmOKs, 'ipv6IfStatsReasmFails': ipv6IfStatsReasmFails, 'ipv6IfStatsInMcastPkts': ipv6IfStatsInMcastPkts, 'ipv6IfStatsOutMcastPkts': ipv6IfStatsOutMcastPkts}


class ipv6AddrPrefixEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ipv6IfIndex, ipv6AddrPrefix, ipv6AddrPrefixLength], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 7, 1])
	access = 2
	columns = {'ipv6AddrPrefix': ipv6AddrPrefix, 'ipv6AddrPrefixLength': ipv6AddrPrefixLength, 'ipv6AddrPrefixOnLinkFlag': ipv6AddrPrefixOnLinkFlag, 'ipv6AddrPrefixAutonomousFlag': ipv6AddrPrefixAutonomousFlag, 'ipv6AddrPrefixAdvPreferredLifetime': ipv6AddrPrefixAdvPreferredLifetime, 'ipv6AddrPrefixAdvValidLifetime': ipv6AddrPrefixAdvValidLifetime}


class ipv6AddrEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ipv6IfIndex, ipv6AddrAddress], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 8, 1])
	access = 2
	columns = {'ipv6AddrAddress': ipv6AddrAddress, 'ipv6AddrPfxLength': ipv6AddrPfxLength, 'ipv6AddrType': ipv6AddrType, 'ipv6AddrAnycastFlag': ipv6AddrAnycastFlag, 'ipv6AddrStatus': ipv6AddrStatus}


class ipv6RouteEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ipv6RouteDest, ipv6RoutePfxLength, ipv6RouteIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 11, 1])
	access = 2
	columns = {'ipv6RouteDest': ipv6RouteDest, 'ipv6RoutePfxLength': ipv6RoutePfxLength, 'ipv6RouteIndex': ipv6RouteIndex, 'ipv6RouteIfIndex': ipv6RouteIfIndex, 'ipv6RouteNextHop': ipv6RouteNextHop, 'ipv6RouteType': ipv6RouteType, 'ipv6RouteProtocol': ipv6RouteProtocol, 'ipv6RoutePolicy': ipv6RoutePolicy, 'ipv6RouteAge': ipv6RouteAge, 'ipv6RouteNextHopRDI': ipv6RouteNextHopRDI, 'ipv6RouteMetric': ipv6RouteMetric, 'ipv6RouteWeight': ipv6RouteWeight, 'ipv6RouteInfo': ipv6RouteInfo, 'ipv6RouteValid': ipv6RouteValid}


class ipv6NetToMediaEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ipv6IfIndex, ipv6NetToMediaNetAddress], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 1, 12, 1])
	access = 2
	columns = {'ipv6NetToMediaNetAddress': ipv6NetToMediaNetAddress, 'ipv6NetToMediaPhysAddress': ipv6NetToMediaPhysAddress, 'ipv6NetToMediaType': ipv6NetToMediaType, 'ipv6IfNetToMediaState': ipv6IfNetToMediaState, 'ipv6IfNetToMediaLastUpdated': ipv6IfNetToMediaLastUpdated, 'ipv6NetToMediaValid': ipv6NetToMediaValid}


# notifications (traps) 
class ipv6IfStateChange(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 2, 0, 1])

# groups 
class ipv6GeneralGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 3, 2, 1])
	group = [ipv6Forwarding, ipv6DefaultHopLimit, ipv6Interfaces, ipv6IfTableLastChange, ipv6IfDescr, ipv6IfLowerLayer, ipv6IfEffectiveMtu, ipv6IfReasmMaxSize, ipv6IfIdentifier, ipv6IfIdentifierLength, ipv6IfPhysicalAddress, ipv6IfAdminStatus, ipv6IfOperStatus, ipv6IfLastChange, ipv6IfStatsInReceives, ipv6IfStatsInHdrErrors, ipv6IfStatsInTooBigErrors, ipv6IfStatsInNoRoutes, ipv6IfStatsInAddrErrors, ipv6IfStatsInUnknownProtos, ipv6IfStatsInTruncatedPkts, ipv6IfStatsInDiscards, ipv6IfStatsInDelivers, ipv6IfStatsOutForwDatagrams, ipv6IfStatsOutRequests, ipv6IfStatsOutDiscards, ipv6IfStatsOutFragOKs, ipv6IfStatsOutFragFails, ipv6IfStatsOutFragCreates, ipv6IfStatsReasmReqds, ipv6IfStatsReasmOKs, ipv6IfStatsReasmFails, ipv6IfStatsInMcastPkts, ipv6IfStatsOutMcastPkts, ipv6AddrPrefixOnLinkFlag, ipv6AddrPrefixAutonomousFlag, ipv6AddrPrefixAdvPreferredLifetime, ipv6AddrPrefixAdvValidLifetime, ipv6AddrPfxLength, ipv6AddrType, ipv6AddrAnycastFlag, ipv6AddrStatus, ipv6RouteNumber, ipv6DiscardedRoutes, ipv6RouteIfIndex, ipv6RouteNextHop, ipv6RouteType, ipv6RouteProtocol, ipv6RoutePolicy, ipv6RouteAge, ipv6RouteNextHopRDI, ipv6RouteMetric, ipv6RouteWeight, ipv6RouteInfo, ipv6RouteValid, ipv6NetToMediaPhysAddress, ipv6NetToMediaType, ipv6IfNetToMediaState, ipv6IfNetToMediaLastUpdated, ipv6NetToMediaValid]

class ipv6NotificationGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 55, 3, 2, 2])
	group = [ipv6IfStateChange]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
