# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, NOTIFICATION_TYPE, OBJECT_IDENTITY, Counter32, Gauge32, Integer32, mib_2
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from SNMPv2_TC import DisplayString, TimeStamp, TimeInterval, TestAndIncr, AutonomousType, TEXTUAL_CONVENTION

class UPS_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/UPS-MIB'
	conformance = 2
	name = 'UPS-MIB'
	language = 2
	description = 'The MIB module to describe Uninterruptible Power\nSupplies.'

# nodes
class upsMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33])
	name = 'upsMIB'

class upsObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1])
	name = 'upsObjects'

class upsIdent(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 1])
	name = 'upsIdent'

class upsBattery(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 2])
	name = 'upsBattery'

class upsInput(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 3])
	name = 'upsInput'

class upsOutput(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 4])
	name = 'upsOutput'

class upsBypass(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 5])
	name = 'upsBypass'

class upsAlarm(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 6])
	name = 'upsAlarm'

class upsWellKnownAlarms(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 6, 3])
	name = 'upsWellKnownAlarms'

class upsAlarmBatteryBad(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 6, 3, 1])
	name = 'upsAlarmBatteryBad'

class upsAlarmOnBattery(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 6, 3, 2])
	name = 'upsAlarmOnBattery'

class upsAlarmLowBattery(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 6, 3, 3])
	name = 'upsAlarmLowBattery'

class upsAlarmDepletedBattery(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 6, 3, 4])
	name = 'upsAlarmDepletedBattery'

class upsAlarmTempBad(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 6, 3, 5])
	name = 'upsAlarmTempBad'

class upsAlarmInputBad(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 6, 3, 6])
	name = 'upsAlarmInputBad'

class upsAlarmOutputBad(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 6, 3, 7])
	name = 'upsAlarmOutputBad'

class upsAlarmOutputOverload(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 6, 3, 8])
	name = 'upsAlarmOutputOverload'

class upsAlarmOnBypass(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 6, 3, 9])
	name = 'upsAlarmOnBypass'

class upsAlarmBypassBad(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 6, 3, 10])
	name = 'upsAlarmBypassBad'

class upsAlarmOutputOffAsRequested(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 6, 3, 11])
	name = 'upsAlarmOutputOffAsRequested'

class upsAlarmUpsOffAsRequested(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 6, 3, 12])
	name = 'upsAlarmUpsOffAsRequested'

class upsAlarmChargerFailed(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 6, 3, 13])
	name = 'upsAlarmChargerFailed'

class upsAlarmUpsOutputOff(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 6, 3, 14])
	name = 'upsAlarmUpsOutputOff'

class upsAlarmUpsSystemOff(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 6, 3, 15])
	name = 'upsAlarmUpsSystemOff'

class upsAlarmFanFailure(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 6, 3, 16])
	name = 'upsAlarmFanFailure'

class upsAlarmFuseFailure(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 6, 3, 17])
	name = 'upsAlarmFuseFailure'

class upsAlarmGeneralFault(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 6, 3, 18])
	name = 'upsAlarmGeneralFault'

class upsAlarmDiagnosticTestFailed(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 6, 3, 19])
	name = 'upsAlarmDiagnosticTestFailed'

class upsAlarmCommunicationsLost(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 6, 3, 20])
	name = 'upsAlarmCommunicationsLost'

class upsAlarmAwaitingPower(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 6, 3, 21])
	name = 'upsAlarmAwaitingPower'

class upsAlarmShutdownPending(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 6, 3, 22])
	name = 'upsAlarmShutdownPending'

class upsAlarmShutdownImminent(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 6, 3, 23])
	name = 'upsAlarmShutdownImminent'

class upsAlarmTestInProgress(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 6, 3, 24])
	name = 'upsAlarmTestInProgress'

class upsTest(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 7])
	name = 'upsTest'

class upsWellKnownTests(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 7, 7])
	name = 'upsWellKnownTests'

class upsTestNoTestsInitiated(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 7, 7, 1])
	name = 'upsTestNoTestsInitiated'

class upsTestAbortTestInProgress(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 7, 7, 2])
	name = 'upsTestAbortTestInProgress'

class upsTestGeneralSystemsTest(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 7, 7, 3])
	name = 'upsTestGeneralSystemsTest'

class upsTestQuickBatteryTest(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 7, 7, 4])
	name = 'upsTestQuickBatteryTest'

class upsTestDeepBatteryCalibration(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 7, 7, 5])
	name = 'upsTestDeepBatteryCalibration'

class upsControl(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 8])
	name = 'upsControl'

class upsConfig(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 9])
	name = 'upsConfig'

class upsTraps(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 2])
	name = 'upsTraps'

class upsConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 3])
	name = 'upsConformance'

class upsCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 3, 1])
	name = 'upsCompliances'

class upsGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 3, 2])
	name = 'upsGroups'

class upsSubsetGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 3, 2, 1])
	name = 'upsSubsetGroups'

class upsBasicGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 3, 2, 2])
	name = 'upsBasicGroups'

class upsFullGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 3, 2, 3])
	name = 'upsFullGroups'


# macros
# types 

class PositiveInteger(pycopia.SMI.Basetypes.Integer32):
	status = 1
	ranges = Ranges(Range(1, 2147483647))
	format = 'd'


class NonNegativeInteger(pycopia.SMI.Basetypes.Integer32):
	status = 1
	ranges = Ranges(Range(0, 2147483647))
	format = 'd'

# scalars 
class upsIdentManufacturer(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class upsIdentModel(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class upsIdentUPSSoftwareVersion(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class upsIdentAgentSoftwareVersion(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class upsIdentName(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class upsIdentAttachedDevices(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class upsBatteryStatus(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 2, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'unknown'), Enum(2, 'batteryNormal'), Enum(3, 'batteryLow'), Enum(4, 'batteryDepleted')]


class upsSecondsOnBattery(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 2, 2])
	syntaxobject = NonNegativeInteger
	access = 4
	units = 'seconds'


class upsEstimatedMinutesRemaining(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 2, 3])
	syntaxobject = PositiveInteger
	access = 4
	units = 'minutes'


class upsEstimatedChargeRemaining(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 2, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = 'percent'


class upsBatteryVoltage(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 2, 5])
	syntaxobject = NonNegativeInteger
	access = 4
	units = '0.1 Volt DC'


class upsBatteryCurrent(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 2, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = '0.1 Amp DC'


class upsBatteryTemperature(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 2, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = 'degrees Centigrade'


class upsInputLineBads(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 3, 1])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class upsInputNumLines(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 3, 2])
	syntaxobject = NonNegativeInteger


class upsOutputSource(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 4, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'none'), Enum(3, 'normal'), Enum(4, 'bypass'), Enum(5, 'battery'), Enum(6, 'booster'), Enum(7, 'reducer')]


class upsOutputFrequency(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 4, 2])
	syntaxobject = NonNegativeInteger
	access = 4
	units = '0.1 Hertz'


class upsOutputNumLines(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 4, 3])
	syntaxobject = NonNegativeInteger


class upsBypassFrequency(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 5, 1])
	syntaxobject = NonNegativeInteger
	access = 4
	units = '0.1 Hertz'


class upsBypassNumLines(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 5, 2])
	syntaxobject = NonNegativeInteger


class upsAlarmsPresent(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 6, 1])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class upsTestId(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 7, 1])
	syntaxobject = pycopia.SMI.Basetypes.ObjectIdentifier


class upsTestSpinLock(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 7, 2])
	syntaxobject = pycopia.SMI.Basetypes.TestAndIncr


class upsTestResultsSummary(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 7, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'donePass'), Enum(2, 'doneWarning'), Enum(3, 'doneError'), Enum(4, 'aborted'), Enum(5, 'inProgress'), Enum(6, 'noTestsInitiated')]


class upsTestResultsDetail(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 7, 4])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class upsTestStartTime(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 7, 5])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class upsTestElapsedTime(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 7, 6])
	syntaxobject = pycopia.SMI.Basetypes.TimeInterval


class upsShutdownType(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 8, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'output'), Enum(2, 'system')]


class upsShutdownAfterDelay(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 8, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class upsStartupAfterDelay(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 8, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class upsRebootWithDuration(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 8, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class upsAutoRestart(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 8, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'on'), Enum(2, 'off')]


class upsConfigInputVoltage(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 9, 1])
	syntaxobject = NonNegativeInteger
	access = 5
	units = 'RMS Volts'


class upsConfigInputFreq(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 9, 2])
	syntaxobject = NonNegativeInteger
	access = 5
	units = '0.1 Hertz'


class upsConfigOutputVoltage(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 9, 3])
	syntaxobject = NonNegativeInteger
	access = 5
	units = 'RMS Volts'


class upsConfigOutputFreq(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 9, 4])
	syntaxobject = NonNegativeInteger
	access = 5
	units = '0.1 Hertz'


class upsConfigOutputVA(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 9, 5])
	syntaxobject = NonNegativeInteger
	access = 4
	units = 'Volt-Amps'


class upsConfigOutputPower(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 9, 6])
	syntaxobject = NonNegativeInteger
	access = 4
	units = 'Watts'


class upsConfigLowBattTime(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 9, 7])
	syntaxobject = NonNegativeInteger
	access = 5
	units = 'minutes'


class upsConfigAudibleStatus(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 9, 8])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'disabled'), Enum(2, 'enabled'), Enum(3, 'muted')]


class upsConfigLowVoltageTransferPoint(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 9, 9])
	syntaxobject = NonNegativeInteger
	access = 5
	units = 'RMS Volts'


class upsConfigHighVoltageTransferPoint(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 9, 10])
	syntaxobject = NonNegativeInteger
	access = 5
	units = 'RMS Volts'


# columns
class upsInputLineIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 3, 3, 1, 1])
	syntaxobject = PositiveInteger


class upsInputFrequency(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 3, 3, 1, 2])
	syntaxobject = NonNegativeInteger
	access = 4
	units = '0.1 Hertz'


class upsInputVoltage(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 3, 3, 1, 3])
	syntaxobject = NonNegativeInteger
	access = 4
	units = 'RMS Volts'


class upsInputCurrent(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 3, 3, 1, 4])
	syntaxobject = NonNegativeInteger
	access = 4
	units = '0.1 RMS Amp'


class upsInputTruePower(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 3, 3, 1, 5])
	syntaxobject = NonNegativeInteger
	access = 4
	units = 'Watts'


class upsOutputLineIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 4, 4, 1, 1])
	syntaxobject = PositiveInteger


class upsOutputVoltage(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 4, 4, 1, 2])
	syntaxobject = NonNegativeInteger
	access = 4
	units = 'RMS Volts'


class upsOutputCurrent(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 4, 4, 1, 3])
	syntaxobject = NonNegativeInteger
	access = 4
	units = '0.1 RMS Amp'


class upsOutputPower(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 4, 4, 1, 4])
	syntaxobject = NonNegativeInteger
	access = 4
	units = 'Watts'


class upsOutputPercentLoad(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 4, 4, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = 'percent'


class upsBypassLineIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 5, 3, 1, 1])
	syntaxobject = PositiveInteger


class upsBypassVoltage(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 5, 3, 1, 2])
	syntaxobject = NonNegativeInteger
	access = 4
	units = 'RMS Volts'


class upsBypassCurrent(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 5, 3, 1, 3])
	syntaxobject = NonNegativeInteger
	access = 4
	units = '0.1 RMS Amp'


class upsBypassPower(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 5, 3, 1, 4])
	syntaxobject = NonNegativeInteger
	access = 4
	units = 'Watts'


class upsAlarmId(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 6, 2, 1, 1])
	syntaxobject = PositiveInteger


class upsAlarmDescr(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 6, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.AutonomousType


class upsAlarmTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 6, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


# rows 
class upsInputEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([upsInputLineIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 3, 3, 1])
	access = 2
	columns = {'upsInputLineIndex': upsInputLineIndex, 'upsInputFrequency': upsInputFrequency, 'upsInputVoltage': upsInputVoltage, 'upsInputCurrent': upsInputCurrent, 'upsInputTruePower': upsInputTruePower}


class upsOutputEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([upsOutputLineIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 4, 4, 1])
	access = 2
	columns = {'upsOutputLineIndex': upsOutputLineIndex, 'upsOutputVoltage': upsOutputVoltage, 'upsOutputCurrent': upsOutputCurrent, 'upsOutputPower': upsOutputPower, 'upsOutputPercentLoad': upsOutputPercentLoad}


class upsBypassEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([upsBypassLineIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 5, 3, 1])
	access = 2
	columns = {'upsBypassLineIndex': upsBypassLineIndex, 'upsBypassVoltage': upsBypassVoltage, 'upsBypassCurrent': upsBypassCurrent, 'upsBypassPower': upsBypassPower}


class upsAlarmEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([upsAlarmId], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 1, 6, 2, 1])
	access = 2
	columns = {'upsAlarmId': upsAlarmId, 'upsAlarmDescr': upsAlarmDescr, 'upsAlarmTime': upsAlarmTime}


# notifications (traps) 
class upsTrapOnBattery(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 2, 1])

class upsTrapTestCompleted(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 2, 2])

class upsTrapAlarmEntryAdded(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 2, 3])

class upsTrapAlarmEntryRemoved(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 2, 4])

# groups 
class upsSubsetIdentGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 3, 2, 1, 1])
	group = [upsIdentManufacturer, upsIdentModel, upsIdentAgentSoftwareVersion, upsIdentName, upsIdentAttachedDevices]

class upsSubsetBatteryGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 3, 2, 1, 2])
	group = [upsBatteryStatus, upsSecondsOnBattery]

class upsSubsetInputGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 3, 2, 1, 3])
	group = [upsInputLineBads]

class upsSubsetOutputGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 3, 2, 1, 4])
	group = [upsOutputSource]

class upsSubsetAlarmGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 3, 2, 1, 6])
	group = [upsAlarmsPresent, upsAlarmDescr, upsAlarmTime]

class upsSubsetControlGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 3, 2, 1, 8])
	group = [upsShutdownType, upsShutdownAfterDelay, upsAutoRestart]

class upsSubsetConfigGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 3, 2, 1, 9])
	group = [upsConfigInputVoltage, upsConfigInputFreq, upsConfigOutputVoltage, upsConfigOutputFreq, upsConfigOutputVA, upsConfigOutputPower]

class upsBasicIdentGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 3, 2, 2, 1])
	group = [upsIdentManufacturer, upsIdentModel, upsIdentUPSSoftwareVersion, upsIdentAgentSoftwareVersion, upsIdentName]

class upsBasicBatteryGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 3, 2, 2, 2])
	group = [upsBatteryStatus, upsSecondsOnBattery]

class upsBasicInputGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 3, 2, 2, 3])
	group = [upsInputLineBads, upsInputNumLines, upsInputFrequency, upsInputVoltage]

class upsBasicOutputGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 3, 2, 2, 4])
	group = [upsOutputSource, upsOutputFrequency, upsOutputNumLines, upsOutputVoltage]

class upsBasicBypassGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 3, 2, 2, 5])
	group = [upsBypassFrequency, upsBypassNumLines, upsBypassVoltage]

class upsBasicAlarmGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 3, 2, 2, 6])
	group = [upsAlarmsPresent, upsAlarmDescr, upsAlarmTime]

class upsBasicTestGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 3, 2, 2, 7])
	group = [upsTestId, upsTestSpinLock, upsTestResultsSummary, upsTestResultsDetail, upsTestStartTime, upsTestElapsedTime]

class upsBasicControlGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 3, 2, 2, 8])
	group = [upsShutdownType, upsShutdownAfterDelay, upsStartupAfterDelay, upsRebootWithDuration, upsAutoRestart]

class upsBasicConfigGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 3, 2, 2, 9])
	group = [upsConfigInputVoltage, upsConfigInputFreq, upsConfigOutputVoltage, upsConfigOutputFreq, upsConfigOutputVA, upsConfigOutputPower, upsConfigLowBattTime, upsConfigAudibleStatus]

class upsFullIdentGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 3, 2, 3, 1])
	group = [upsIdentManufacturer, upsIdentModel, upsIdentUPSSoftwareVersion, upsIdentAgentSoftwareVersion, upsIdentName, upsIdentAttachedDevices]

class upsFullBatteryGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 3, 2, 3, 2])
	group = [upsBatteryStatus, upsSecondsOnBattery, upsEstimatedMinutesRemaining, upsEstimatedChargeRemaining]

class upsFullInputGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 3, 2, 3, 3])
	group = [upsInputLineBads, upsInputNumLines, upsInputFrequency, upsInputVoltage]

class upsFullOutputGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 3, 2, 3, 4])
	group = [upsOutputSource, upsOutputFrequency, upsOutputNumLines, upsOutputVoltage, upsOutputCurrent, upsOutputPower, upsOutputPercentLoad]

class upsFullBypassGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 3, 2, 3, 5])
	group = [upsBypassFrequency, upsBypassNumLines, upsBypassVoltage]

class upsFullAlarmGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 3, 2, 3, 6])
	group = [upsAlarmsPresent, upsAlarmDescr, upsAlarmTime]

class upsFullTestGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 3, 2, 3, 7])
	group = [upsTestId, upsTestSpinLock, upsTestResultsSummary, upsTestResultsDetail, upsTestStartTime, upsTestElapsedTime]

class upsFullControlGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 3, 2, 3, 8])
	group = [upsShutdownType, upsShutdownAfterDelay, upsStartupAfterDelay, upsRebootWithDuration, upsAutoRestart]

class upsFullConfigGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 33, 3, 2, 3, 9])
	group = [upsConfigInputVoltage, upsConfigInputFreq, upsConfigOutputVoltage, upsConfigOutputFreq, upsConfigOutputVA, upsConfigOutputPower, upsConfigLowBattTime, upsConfigAudibleStatus]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
