# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import Counter32, Gauge32, TimeTicks, OBJECT_TYPE, MODULE_IDENTITY, NOTIFICATION_TYPE, mib_2
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP, NOTIFICATION_GROUP
from SNMPv2_TC import DisplayString, RowStatus, RowPointer, TruthValue, TEXTUAL_CONVENTION
from IF_MIB import ifIndex
from SNA_SDLC_MIB import sdlcLSAddress

class DLSW_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/DLSW-MIB'
	conformance = 3
	name = 'DLSW-MIB'
	language = 2
	description = 'This MIB module contains objects to manage Data Link\nSwitches.'

# nodes
class null(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([0, 0])
	name = 'null'

class dlsw(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46])
	name = 'dlsw'

class dlswMIB(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1])
	name = 'dlswMIB'

class dlswTraps(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 0])
	name = 'dlswTraps'

class dlswNode(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 1])
	name = 'dlswNode'

class dlswTrapControl(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 1, 10])
	name = 'dlswTrapControl'

class dlswTConn(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2])
	name = 'dlswTConn'

class dlswTConnStat(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 1])
	name = 'dlswTConnStat'

class dlswTConnSpecific(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 4])
	name = 'dlswTConnSpecific'

class dlswTConnTcp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 4, 1])
	name = 'dlswTConnTcp'

class dlswInterface(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 3])
	name = 'dlswInterface'

class dlswDirectory(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 4])
	name = 'dlswDirectory'

class dlswDirStat(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 4, 1])
	name = 'dlswDirStat'

class dlswDirCache(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 4, 2])
	name = 'dlswDirCache'

class dlswDirLocate(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 4, 3])
	name = 'dlswDirLocate'

class dlswCircuit(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 5])
	name = 'dlswCircuit'

class dlswCircuitStat(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 5, 1])
	name = 'dlswCircuitStat'

class dlswSdlc(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 6])
	name = 'dlswSdlc'

class dlswDomains(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 2])
	name = 'dlswDomains'

class dlswTCPDomain(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 2, 1])
	name = 'dlswTCPDomain'

class dlswConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 3])
	name = 'dlswConformance'

class dlswCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 3, 1])
	name = 'dlswCompliances'

class dlswGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 3, 2])
	name = 'dlswGroups'


# macros
# types 

class NBName(pycopia.SMI.Basetypes.OctetString):
	status = 1
	ranges = Ranges(Range(0, 16))


class MacAddressNC(pycopia.SMI.Basetypes.OctetString):
	status = 1
	ranges = Ranges(Range(0, 0), Range(6, 6))
	format = '1x:'

TAddress = pycopia.SMI.Basetypes.TAddress

class EndStationLocation(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'other'), Enum(2, 'internal'), Enum(3, 'remote'), Enum(4, 'local')]


class DlcType(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'other'), Enum(2, 'na'), Enum(3, 'llc'), Enum(4, 'sdlc'), Enum(5, 'qllc')]


class LFSize(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(516, 'lfs516'), Enum(635, 'lfs635'), Enum(754, 'lfs754'), Enum(873, 'lfs873'), Enum(993, 'lfs993'), Enum(1112, 'lfs1112'), Enum(1231, 'lfs1231'), Enum(1350, 'lfs1350'), Enum(1470, 'lfs1470'), Enum(1542, 'lfs1542'), Enum(1615, 'lfs1615'), Enum(1688, 'lfs1688'), Enum(1761, 'lfs1761'), Enum(1833, 'lfs1833'), Enum(1906, 'lfs1906'), Enum(1979, 'lfs1979'), Enum(2052, 'lfs2052'), Enum(2345, 'lfs2345'), Enum(2638, 'lfs2638'), Enum(2932, 'lfs2932'), Enum(3225, 'lfs3225'), Enum(3518, 'lfs3518'), Enum(3812, 'lfs3812'), Enum(4105, 'lfs4105'), Enum(4399, 'lfs4399'), Enum(4865, 'lfs4865'), Enum(5331, 'lfs5331'), Enum(5798, 'lfs5798'), Enum(6264, 'lfs6264'), Enum(6730, 'lfs6730'), Enum(7197, 'lfs7197'), Enum(7663, 'lfs7663'), Enum(8130, 'lfs8130'), Enum(8539, 'lfs8539'), Enum(8949, 'lfs8949'), Enum(9358, 'lfs9358'), Enum(9768, 'lfs9768'), Enum(10178, 'lfs10178'), Enum(10587, 'lfs10587'), Enum(10997, 'lfs10997'), Enum(11407, 'lfs11407'), Enum(12199, 'lfs12199'), Enum(12992, 'lfs12992'), Enum(13785, 'lfs13785'), Enum(14578, 'lfs14578'), Enum(15370, 'lfs15370'), Enum(16163, 'lfs16163'), Enum(16956, 'lfs16956'), Enum(17749, 'lfs17749'), Enum(20730, 'lfs20730'), Enum(23711, 'lfs23711'), Enum(26693, 'lfs26693'), Enum(29674, 'lfs29674'), Enum(32655, 'lfs32655'), Enum(38618, 'lfs38618'), Enum(41600, 'lfs41600'), Enum(44591, 'lfs44591'), Enum(47583, 'lfs47583'), Enum(50575, 'lfs50575'), Enum(53567, 'lfs53567'), Enum(56559, 'lfs56559'), Enum(59551, 'lfs59551'), Enum(65535, 'lfs65535')]


class DlswTCPAddress(pycopia.SMI.Basetypes.OctetString):
	status = 1
	ranges = Ranges(Range(4, 4))
	format = '1d.1d.1d.1d'

# scalars 
class dlswNodeVersion(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class dlswNodeVendorID(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class dlswNodeVersionString(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class dlswNodeStdPacingSupport(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'none'), Enum(2, 'adaptiveRcvWindow'), Enum(3, 'fixedRcvWindow')]


class dlswNodeStatus(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'active'), Enum(2, 'inactive')]


class dlswNodeUpTime(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks
	access = 4
	units = 'hundredths of a second'


class dlswNodeVirtualSegmentLFSize(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 1, 7])
	syntaxobject = LFSize


class dlswNodeResourceNBExclusivity(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class dlswNodeResourceMacExclusivity(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class dlswTrapCntlTConnPartnerReject(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 1, 10, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled'), Enum(3, 'partial')]


class dlswTrapCntlTConnProtViolation(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 1, 10, 2])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class dlswTrapCntlTConn(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 1, 10, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled'), Enum(3, 'partial')]


class dlswTrapCntlCircuit(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 1, 10, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled'), Enum(3, 'partial')]


class dlswTConnStatActiveConnections(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class dlswTConnStatCloseIdles(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dlswTConnStatCloseBusys(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dlswDirMacEntries(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 4, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class dlswDirMacCacheHits(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 4, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dlswDirMacCacheMisses(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 4, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dlswDirMacCacheNextIndex(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 4, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dlswDirNBEntries(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 4, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class dlswDirNBCacheHits(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 4, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dlswDirNBCacheMisses(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 4, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dlswDirNBCacheNextIndex(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 4, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dlswCircuitStatActives(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 5, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class dlswCircuitStatCreates(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 5, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dlswSdlcLsEntries(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 6, 1])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


# columns
class dlswTConnConfigIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dlswTConnConfigTDomain(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.ObjectIdentifier


class dlswTConnConfigLocalTAddr(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.TAddress


class dlswTConnConfigRemoteTAddr(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.TAddress


class dlswTConnConfigLastModifyTime(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks
	access = 4
	units = 'hundredths of a second'


class dlswTConnConfigEntryType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'individual'), Enum(2, 'global'), Enum(3, 'group')]


class dlswTConnConfigGroupDefinition(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 2, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.RowPointer


class dlswTConnConfigSetupType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 2, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'activePersistent'), Enum(3, 'activeOnDemand'), Enum(4, 'passive'), Enum(5, 'excluded')]


class dlswTConnConfigSapList(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 2, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class dlswTConnConfigAdvertiseMacNB(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 2, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class dlswTConnConfigInitCirRecvWndw(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 2, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'SSP messages'


class dlswTConnConfigOpens(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 2, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dlswTConnConfigRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 2, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class dlswTConnOperTDomain(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 3, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.ObjectIdentifier


class dlswTConnOperLocalTAddr(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 3, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.TAddress


class dlswTConnOperRemoteTAddr(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 3, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.TAddress


class dlswTConnOperEntryTime(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 3, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks
	access = 4
	units = 'hundredths of a second'


class dlswTConnOperConnectTime(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 3, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks
	access = 4
	units = 'hundredths of a second'


class dlswTConnOperState(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 3, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'connecting'), Enum(2, 'initCapExchange'), Enum(3, 'connected'), Enum(4, 'quiescing'), Enum(5, 'disconnecting'), Enum(6, 'disconnected')]


class dlswTConnOperConfigIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 3, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dlswTConnOperFlowCntlMode(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 3, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'undetermined'), Enum(2, 'pacing'), Enum(3, 'other')]


class dlswTConnOperPartnerVersion(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 3, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class dlswTConnOperPartnerVendorID(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 3, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class dlswTConnOperPartnerVersionStr(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 3, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class dlswTConnOperPartnerInitPacingWndw(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 3, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dlswTConnOperPartnerSapList(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 3, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class dlswTConnOperPartnerNBExcl(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 3, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class dlswTConnOperPartnerMacExcl(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 3, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class dlswTConnOperPartnerNBInfo(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 3, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'none'), Enum(2, 'partial'), Enum(3, 'complete'), Enum(4, 'notApplicable')]


class dlswTConnOperPartnerMacInfo(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 3, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'none'), Enum(2, 'partial'), Enum(3, 'complete'), Enum(4, 'notApplicable')]


class dlswTConnOperDiscTime(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 3, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks
	access = 4
	units = 'hundredths of a second'


class dlswTConnOperDiscReason(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 3, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'capExFailed'), Enum(3, 'transportLayerDisc'), Enum(4, 'operatorCommand'), Enum(5, 'lastCircuitDiscd'), Enum(6, 'protocolError')]


class dlswTConnOperDiscActiveCir(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 3, 1, 20])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dlswTConnOperInDataPkts(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 3, 1, 21])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'SSP messages'


class dlswTConnOperOutDataPkts(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 3, 1, 22])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'SSP messages'


class dlswTConnOperInDataOctets(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 3, 1, 23])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'octets'


class dlswTConnOperOutDataOctets(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 3, 1, 24])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'octets'


class dlswTConnOperInCntlPkts(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 3, 1, 25])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'SSP messages'


class dlswTConnOperOutCntlPkts(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 3, 1, 26])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'SSP messages'


class dlswTConnOperCURexSents(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 3, 1, 27])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dlswTConnOperICRexRcvds(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 3, 1, 28])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dlswTConnOperCURexRcvds(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 3, 1, 29])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dlswTConnOperICRexSents(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 3, 1, 30])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dlswTConnOperNQexSents(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 3, 1, 31])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dlswTConnOperNRexRcvds(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 3, 1, 32])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dlswTConnOperNQexRcvds(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 3, 1, 33])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dlswTConnOperNRexSents(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 3, 1, 34])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dlswTConnOperCirCreates(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 3, 1, 35])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dlswTConnOperCircuits(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 3, 1, 36])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class dlswTConnTcpConfigKeepAliveInt(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 4, 1, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class dlswTConnTcpConfigTcpConnections(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 4, 1, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dlswTConnTcpConfigMaxSegmentSize(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 4, 1, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'packets'


class dlswTConnTcpOperKeepAliveInt(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 4, 1, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = 'seconds'


class dlswTConnTcpOperPrefTcpConnections(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 4, 1, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dlswTConnTcpOperTcpConnections(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 4, 1, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dlswIfRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 3, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class dlswIfVirtualSegment(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 3, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dlswIfSapList(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 3, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class dlswDirMacIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 4, 2, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dlswDirMacMac(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 4, 2, 1, 1, 2])
	syntaxobject = MacAddressNC


class dlswDirMacMask(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 4, 2, 1, 1, 3])
	syntaxobject = MacAddressNC


class dlswDirMacEntryType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 4, 2, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'userConfiguredPublic'), Enum(3, 'userConfiguredPrivate'), Enum(4, 'partnerCapExMsg'), Enum(5, 'dynamic')]


class dlswDirMacLocationType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 4, 2, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'local'), Enum(3, 'remote')]


class dlswDirMacLocation(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 4, 2, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.RowPointer


class dlswDirMacStatus(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 4, 2, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'unknown'), Enum(2, 'reachable'), Enum(3, 'notReachable')]


class dlswDirMacLFSize(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 4, 2, 1, 1, 8])
	syntaxobject = LFSize


class dlswDirMacRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 4, 2, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class dlswDirNBIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 4, 2, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dlswDirNBName(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 4, 2, 2, 1, 2])
	syntaxobject = NBName


class dlswDirNBNameType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 4, 2, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'unknown'), Enum(2, 'individual'), Enum(3, 'group')]


class dlswDirNBEntryType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 4, 2, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'userConfiguredPublic'), Enum(3, 'userConfiguredPrivate'), Enum(4, 'partnerCapExMsg'), Enum(5, 'dynamic')]


class dlswDirNBLocationType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 4, 2, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'local'), Enum(3, 'remote')]


class dlswDirNBLocation(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 4, 2, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.RowPointer


class dlswDirNBStatus(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 4, 2, 2, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'unknown'), Enum(2, 'reachable'), Enum(3, 'notReachable')]


class dlswDirNBLFSize(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 4, 2, 2, 1, 8])
	syntaxobject = LFSize


class dlswDirNBRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 4, 2, 2, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class dlswDirLocateMacMac(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 4, 3, 1, 1, 1])
	syntaxobject = MacAddressNC


class dlswDirLocateMacMatch(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 4, 3, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dlswDirLocateMacLocation(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 4, 3, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.RowPointer


class dlswDirLocateNBName(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 4, 3, 2, 1, 1])
	syntaxobject = NBName


class dlswDirLocateNBMatch(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 4, 3, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dlswDirLocateNBLocation(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 4, 3, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.RowPointer


class dlswCircuitS1Mac(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 5, 2, 1, 1])
	syntaxobject = MacAddressNC


class dlswCircuitS1Sap(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 5, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class dlswCircuitS1IfIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 5, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dlswCircuitS1DlcType(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 5, 2, 1, 4])
	syntaxobject = DlcType


class dlswCircuitS1RouteInfo(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 5, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class dlswCircuitS1CircuitId(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 5, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class dlswCircuitS1Dlc(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 5, 2, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.RowPointer


class dlswCircuitS2Mac(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 5, 2, 1, 8])
	syntaxobject = MacAddressNC


class dlswCircuitS2Sap(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 5, 2, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class dlswCircuitS2Location(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 5, 2, 1, 10])
	syntaxobject = EndStationLocation


class dlswCircuitS2TDomain(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 5, 2, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.ObjectIdentifier


class dlswCircuitS2TAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 5, 2, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.TAddress


class dlswCircuitS2CircuitId(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 5, 2, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class dlswCircuitOrigin(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 5, 2, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 's1'), Enum(2, 's2')]


class dlswCircuitEntryTime(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 5, 2, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks
	access = 4
	units = 'hundredths of a second'


class dlswCircuitStateTime(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 5, 2, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks
	access = 4
	units = 'hundredths of a second'


class dlswCircuitState(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 5, 2, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'disconnected'), Enum(2, 'circuitStart'), Enum(3, 'resolvePending'), Enum(4, 'circuitPending'), Enum(5, 'circuitEstablished'), Enum(6, 'connectPending'), Enum(7, 'contactPending'), Enum(8, 'connected'), Enum(9, 'disconnectPending'), Enum(10, 'haltPending'), Enum(11, 'haltPendingNoack'), Enum(12, 'circuitRestart'), Enum(13, 'restartPending')]


class dlswCircuitPriority(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 5, 2, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'unsupported'), Enum(2, 'low'), Enum(3, 'medium'), Enum(4, 'high'), Enum(5, 'highest')]


class dlswCircuitFCSendGrantedUnits(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 5, 2, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dlswCircuitFCSendCurrentWndw(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 5, 2, 1, 20])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dlswCircuitFCRecvGrantedUnits(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 5, 2, 1, 21])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dlswCircuitFCRecvCurrentWndw(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 5, 2, 1, 22])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dlswCircuitFCLargestRecvGranted(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 5, 2, 1, 23])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class dlswCircuitFCLargestSendGranted(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 5, 2, 1, 24])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class dlswCircuitFCHalveWndwSents(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 5, 2, 1, 25])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dlswCircuitFCResetOpSents(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 5, 2, 1, 26])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dlswCircuitFCHalveWndwRcvds(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 5, 2, 1, 27])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dlswCircuitFCResetOpRcvds(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 5, 2, 1, 28])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dlswCircuitDiscReasonLocal(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 5, 2, 1, 29])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'endStationDiscRcvd'), Enum(2, 'endStationDlcError'), Enum(3, 'protocolError'), Enum(4, 'operatorCommand'), Enum(5, 'haltDlRcvd'), Enum(6, 'haltDlNoAckRcvd'), Enum(7, 'transportConnClosed')]


class dlswCircuitDiscReasonRemote(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 5, 2, 1, 30])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'unknown'), Enum(2, 'endStationDiscRcvd'), Enum(3, 'endStationDlcError'), Enum(4, 'protocolError'), Enum(5, 'operatorCommand')]


class dlswCircuitDiscReasonRemoteData(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 5, 2, 1, 31])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class dlswSdlcLsLocalMac(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 6, 2, 1, 1])
	syntaxobject = MacAddressNC


class dlswSdlcLsLocalSap(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 6, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class dlswSdlcLsLocalIdBlock(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 6, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class dlswSdlcLsLocalIdNum(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 6, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class dlswSdlcLsRemoteMac(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 6, 2, 1, 5])
	syntaxobject = MacAddressNC


class dlswSdlcLsRemoteSap(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 6, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class dlswSdlcLsRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 6, 2, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


# rows 
class dlswTConnConfigEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([dlswTConnConfigIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 2, 1])
	access = 2
	rowstatus = dlswTConnConfigRowStatus
	columns = {'dlswTConnConfigIndex': dlswTConnConfigIndex, 'dlswTConnConfigTDomain': dlswTConnConfigTDomain, 'dlswTConnConfigLocalTAddr': dlswTConnConfigLocalTAddr, 'dlswTConnConfigRemoteTAddr': dlswTConnConfigRemoteTAddr, 'dlswTConnConfigLastModifyTime': dlswTConnConfigLastModifyTime, 'dlswTConnConfigEntryType': dlswTConnConfigEntryType, 'dlswTConnConfigGroupDefinition': dlswTConnConfigGroupDefinition, 'dlswTConnConfigSetupType': dlswTConnConfigSetupType, 'dlswTConnConfigSapList': dlswTConnConfigSapList, 'dlswTConnConfigAdvertiseMacNB': dlswTConnConfigAdvertiseMacNB, 'dlswTConnConfigInitCirRecvWndw': dlswTConnConfigInitCirRecvWndw, 'dlswTConnConfigOpens': dlswTConnConfigOpens, 'dlswTConnConfigRowStatus': dlswTConnConfigRowStatus}


class dlswTConnOperEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([dlswTConnOperTDomain, dlswTConnOperRemoteTAddr], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 3, 1])
	access = 2
	columns = {'dlswTConnOperTDomain': dlswTConnOperTDomain, 'dlswTConnOperLocalTAddr': dlswTConnOperLocalTAddr, 'dlswTConnOperRemoteTAddr': dlswTConnOperRemoteTAddr, 'dlswTConnOperEntryTime': dlswTConnOperEntryTime, 'dlswTConnOperConnectTime': dlswTConnOperConnectTime, 'dlswTConnOperState': dlswTConnOperState, 'dlswTConnOperConfigIndex': dlswTConnOperConfigIndex, 'dlswTConnOperFlowCntlMode': dlswTConnOperFlowCntlMode, 'dlswTConnOperPartnerVersion': dlswTConnOperPartnerVersion, 'dlswTConnOperPartnerVendorID': dlswTConnOperPartnerVendorID, 'dlswTConnOperPartnerVersionStr': dlswTConnOperPartnerVersionStr, 'dlswTConnOperPartnerInitPacingWndw': dlswTConnOperPartnerInitPacingWndw, 'dlswTConnOperPartnerSapList': dlswTConnOperPartnerSapList, 'dlswTConnOperPartnerNBExcl': dlswTConnOperPartnerNBExcl, 'dlswTConnOperPartnerMacExcl': dlswTConnOperPartnerMacExcl, 'dlswTConnOperPartnerNBInfo': dlswTConnOperPartnerNBInfo, 'dlswTConnOperPartnerMacInfo': dlswTConnOperPartnerMacInfo, 'dlswTConnOperDiscTime': dlswTConnOperDiscTime, 'dlswTConnOperDiscReason': dlswTConnOperDiscReason, 'dlswTConnOperDiscActiveCir': dlswTConnOperDiscActiveCir, 'dlswTConnOperInDataPkts': dlswTConnOperInDataPkts, 'dlswTConnOperOutDataPkts': dlswTConnOperOutDataPkts, 'dlswTConnOperInDataOctets': dlswTConnOperInDataOctets, 'dlswTConnOperOutDataOctets': dlswTConnOperOutDataOctets, 'dlswTConnOperInCntlPkts': dlswTConnOperInCntlPkts, 'dlswTConnOperOutCntlPkts': dlswTConnOperOutCntlPkts, 'dlswTConnOperCURexSents': dlswTConnOperCURexSents, 'dlswTConnOperICRexRcvds': dlswTConnOperICRexRcvds, 'dlswTConnOperCURexRcvds': dlswTConnOperCURexRcvds, 'dlswTConnOperICRexSents': dlswTConnOperICRexSents, 'dlswTConnOperNQexSents': dlswTConnOperNQexSents, 'dlswTConnOperNRexRcvds': dlswTConnOperNRexRcvds, 'dlswTConnOperNQexRcvds': dlswTConnOperNQexRcvds, 'dlswTConnOperNRexSents': dlswTConnOperNRexSents, 'dlswTConnOperCirCreates': dlswTConnOperCirCreates, 'dlswTConnOperCircuits': dlswTConnOperCircuits}


class dlswTConnTcpConfigEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([dlswTConnConfigIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 4, 1, 1, 1])
	access = 2
	columns = {'dlswTConnTcpConfigKeepAliveInt': dlswTConnTcpConfigKeepAliveInt, 'dlswTConnTcpConfigTcpConnections': dlswTConnTcpConfigTcpConnections, 'dlswTConnTcpConfigMaxSegmentSize': dlswTConnTcpConfigMaxSegmentSize}


class dlswTConnTcpOperEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([dlswTConnOperTDomain, dlswTConnOperRemoteTAddr], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 2, 4, 1, 2, 1])
	access = 2
	columns = {'dlswTConnTcpOperKeepAliveInt': dlswTConnTcpOperKeepAliveInt, 'dlswTConnTcpOperPrefTcpConnections': dlswTConnTcpOperPrefTcpConnections, 'dlswTConnTcpOperTcpConnections': dlswTConnTcpOperTcpConnections}


class dlswIfEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 3, 1, 1])
	access = 2
	rowstatus = dlswIfRowStatus
	columns = {'dlswIfRowStatus': dlswIfRowStatus, 'dlswIfVirtualSegment': dlswIfVirtualSegment, 'dlswIfSapList': dlswIfSapList}


class dlswDirMacEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([dlswDirMacIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 4, 2, 1, 1])
	access = 2
	rowstatus = dlswDirMacRowStatus
	columns = {'dlswDirMacIndex': dlswDirMacIndex, 'dlswDirMacMac': dlswDirMacMac, 'dlswDirMacMask': dlswDirMacMask, 'dlswDirMacEntryType': dlswDirMacEntryType, 'dlswDirMacLocationType': dlswDirMacLocationType, 'dlswDirMacLocation': dlswDirMacLocation, 'dlswDirMacStatus': dlswDirMacStatus, 'dlswDirMacLFSize': dlswDirMacLFSize, 'dlswDirMacRowStatus': dlswDirMacRowStatus}


class dlswDirNBEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([dlswDirNBIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 4, 2, 2, 1])
	access = 2
	rowstatus = dlswDirNBRowStatus
	columns = {'dlswDirNBIndex': dlswDirNBIndex, 'dlswDirNBName': dlswDirNBName, 'dlswDirNBNameType': dlswDirNBNameType, 'dlswDirNBEntryType': dlswDirNBEntryType, 'dlswDirNBLocationType': dlswDirNBLocationType, 'dlswDirNBLocation': dlswDirNBLocation, 'dlswDirNBStatus': dlswDirNBStatus, 'dlswDirNBLFSize': dlswDirNBLFSize, 'dlswDirNBRowStatus': dlswDirNBRowStatus}


class dlswDirLocateMacEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([dlswDirLocateMacMac, dlswDirLocateMacMatch], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 4, 3, 1, 1])
	access = 2
	columns = {'dlswDirLocateMacMac': dlswDirLocateMacMac, 'dlswDirLocateMacMatch': dlswDirLocateMacMatch, 'dlswDirLocateMacLocation': dlswDirLocateMacLocation}


class dlswDirLocateNBEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([dlswDirLocateNBName, dlswDirLocateNBMatch], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 4, 3, 2, 1])
	access = 2
	columns = {'dlswDirLocateNBName': dlswDirLocateNBName, 'dlswDirLocateNBMatch': dlswDirLocateNBMatch, 'dlswDirLocateNBLocation': dlswDirLocateNBLocation}


class dlswCircuitEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([dlswCircuitS1Mac, dlswCircuitS1Sap, dlswCircuitS2Mac, dlswCircuitS2Sap], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 5, 2, 1])
	access = 2
	columns = {'dlswCircuitS1Mac': dlswCircuitS1Mac, 'dlswCircuitS1Sap': dlswCircuitS1Sap, 'dlswCircuitS1IfIndex': dlswCircuitS1IfIndex, 'dlswCircuitS1DlcType': dlswCircuitS1DlcType, 'dlswCircuitS1RouteInfo': dlswCircuitS1RouteInfo, 'dlswCircuitS1CircuitId': dlswCircuitS1CircuitId, 'dlswCircuitS1Dlc': dlswCircuitS1Dlc, 'dlswCircuitS2Mac': dlswCircuitS2Mac, 'dlswCircuitS2Sap': dlswCircuitS2Sap, 'dlswCircuitS2Location': dlswCircuitS2Location, 'dlswCircuitS2TDomain': dlswCircuitS2TDomain, 'dlswCircuitS2TAddress': dlswCircuitS2TAddress, 'dlswCircuitS2CircuitId': dlswCircuitS2CircuitId, 'dlswCircuitOrigin': dlswCircuitOrigin, 'dlswCircuitEntryTime': dlswCircuitEntryTime, 'dlswCircuitStateTime': dlswCircuitStateTime, 'dlswCircuitState': dlswCircuitState, 'dlswCircuitPriority': dlswCircuitPriority, 'dlswCircuitFCSendGrantedUnits': dlswCircuitFCSendGrantedUnits, 'dlswCircuitFCSendCurrentWndw': dlswCircuitFCSendCurrentWndw, 'dlswCircuitFCRecvGrantedUnits': dlswCircuitFCRecvGrantedUnits, 'dlswCircuitFCRecvCurrentWndw': dlswCircuitFCRecvCurrentWndw, 'dlswCircuitFCLargestRecvGranted': dlswCircuitFCLargestRecvGranted, 'dlswCircuitFCLargestSendGranted': dlswCircuitFCLargestSendGranted, 'dlswCircuitFCHalveWndwSents': dlswCircuitFCHalveWndwSents, 'dlswCircuitFCResetOpSents': dlswCircuitFCResetOpSents, 'dlswCircuitFCHalveWndwRcvds': dlswCircuitFCHalveWndwRcvds, 'dlswCircuitFCResetOpRcvds': dlswCircuitFCResetOpRcvds, 'dlswCircuitDiscReasonLocal': dlswCircuitDiscReasonLocal, 'dlswCircuitDiscReasonRemote': dlswCircuitDiscReasonRemote, 'dlswCircuitDiscReasonRemoteData': dlswCircuitDiscReasonRemoteData}


class dlswSdlcLsEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, sdlcLSAddress], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 6, 2, 1])
	access = 2
	rowstatus = dlswSdlcLsRowStatus
	columns = {'dlswSdlcLsLocalMac': dlswSdlcLsLocalMac, 'dlswSdlcLsLocalSap': dlswSdlcLsLocalSap, 'dlswSdlcLsLocalIdBlock': dlswSdlcLsLocalIdBlock, 'dlswSdlcLsLocalIdNum': dlswSdlcLsLocalIdNum, 'dlswSdlcLsRemoteMac': dlswSdlcLsRemoteMac, 'dlswSdlcLsRemoteSap': dlswSdlcLsRemoteSap, 'dlswSdlcLsRowStatus': dlswSdlcLsRowStatus}


# notifications (traps) 
class dlswTrapTConnPartnerReject(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 0, 1])

class dlswTrapTConnProtViolation(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 0, 2])

class dlswTrapTConnUp(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 0, 3])

class dlswTrapTConnDown(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 0, 4])

class dlswTrapCircuitUp(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 0, 5])

class dlswTrapCircuitDown(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 1, 0, 6])

# groups 
class dlswNodeGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 3, 2, 1])
	group = [dlswNodeVersion, dlswNodeVendorID, dlswNodeVersionString, dlswNodeStdPacingSupport, dlswNodeStatus, dlswNodeUpTime, dlswNodeVirtualSegmentLFSize, dlswNodeResourceMacExclusivity, dlswTrapCntlTConnPartnerReject, dlswTrapCntlTConnProtViolation, dlswTrapCntlTConn, dlswTrapCntlCircuit]

class dlswNodeNBGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 3, 2, 2])
	group = [dlswNodeResourceNBExclusivity]

class dlswTConnStatGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 3, 2, 3])
	group = [dlswTConnStatActiveConnections, dlswTConnStatCloseIdles, dlswTConnStatCloseBusys]

class dlswTConnConfigGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 3, 2, 4])
	group = [dlswTConnConfigTDomain, dlswTConnConfigLocalTAddr, dlswTConnConfigRemoteTAddr, dlswTConnConfigLastModifyTime, dlswTConnConfigEntryType, dlswTConnConfigGroupDefinition, dlswTConnConfigSetupType, dlswTConnConfigSapList, dlswTConnConfigAdvertiseMacNB, dlswTConnConfigInitCirRecvWndw, dlswTConnConfigOpens, dlswTConnConfigRowStatus]

class dlswTConnOperGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 3, 2, 5])
	group = [dlswTConnOperLocalTAddr, dlswTConnOperEntryTime, dlswTConnOperConnectTime, dlswTConnOperState, dlswTConnOperConfigIndex, dlswTConnOperFlowCntlMode, dlswTConnOperPartnerVersion, dlswTConnOperPartnerVendorID, dlswTConnOperPartnerVersionStr, dlswTConnOperPartnerInitPacingWndw, dlswTConnOperPartnerSapList, dlswTConnOperPartnerMacExcl, dlswTConnOperPartnerMacInfo, dlswTConnOperDiscTime, dlswTConnOperDiscReason, dlswTConnOperDiscActiveCir, dlswTConnOperInDataPkts, dlswTConnOperOutDataPkts, dlswTConnOperInDataOctets, dlswTConnOperOutDataOctets, dlswTConnOperInCntlPkts, dlswTConnOperOutCntlPkts, dlswTConnOperCURexSents, dlswTConnOperICRexRcvds, dlswTConnOperCURexRcvds, dlswTConnOperICRexSents, dlswTConnOperCirCreates, dlswTConnOperCircuits]

class dlswTConnNBGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 3, 2, 6])
	group = [dlswTConnOperPartnerNBExcl, dlswTConnOperPartnerNBInfo, dlswTConnOperNQexSents, dlswTConnOperNRexRcvds, dlswTConnOperNQexRcvds, dlswTConnOperNRexSents]

class dlswTConnTcpConfigGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 3, 2, 7])
	group = [dlswTConnTcpConfigKeepAliveInt, dlswTConnTcpConfigTcpConnections, dlswTConnTcpConfigMaxSegmentSize]

class dlswTConnTcpOperGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 3, 2, 8])
	group = [dlswTConnTcpOperKeepAliveInt, dlswTConnTcpOperPrefTcpConnections, dlswTConnTcpOperTcpConnections]

class dlswInterfaceGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 3, 2, 9])
	group = [dlswIfRowStatus, dlswIfVirtualSegment, dlswIfSapList]

class dlswDirGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 3, 2, 10])
	group = [dlswDirMacEntries, dlswDirMacCacheHits, dlswDirMacCacheMisses, dlswDirMacCacheNextIndex, dlswDirMacMac, dlswDirMacMask, dlswDirMacEntryType, dlswDirMacLocationType, dlswDirMacLocation, dlswDirMacStatus, dlswDirMacLFSize, dlswDirMacRowStatus]

class dlswDirNBGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 3, 2, 11])
	group = [dlswDirNBEntries, dlswDirNBCacheHits, dlswDirNBCacheMisses, dlswDirNBCacheNextIndex, dlswDirNBName, dlswDirNBNameType, dlswDirNBEntryType, dlswDirNBLocationType, dlswDirNBLocation, dlswDirNBStatus, dlswDirNBLFSize, dlswDirNBRowStatus]

class dlswDirLocateGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 3, 2, 12])
	group = [dlswDirLocateMacLocation]

class dlswDirLocateNBGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 3, 2, 13])
	group = [dlswDirLocateNBLocation]

class dlswCircuitStatGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 3, 2, 14])
	group = [dlswCircuitStatActives, dlswCircuitStatCreates]

class dlswCircuitGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 3, 2, 15])
	group = [dlswCircuitS1IfIndex, dlswCircuitS1DlcType, dlswCircuitS1RouteInfo, dlswCircuitS1CircuitId, dlswCircuitS1Dlc, dlswCircuitS2Location, dlswCircuitS2TDomain, dlswCircuitS2TAddress, dlswCircuitS2CircuitId, dlswCircuitOrigin, dlswCircuitEntryTime, dlswCircuitStateTime, dlswCircuitState, dlswCircuitPriority, dlswCircuitFCSendGrantedUnits, dlswCircuitFCSendCurrentWndw, dlswCircuitFCRecvGrantedUnits, dlswCircuitFCRecvCurrentWndw, dlswCircuitFCLargestRecvGranted, dlswCircuitFCLargestSendGranted, dlswCircuitFCHalveWndwSents, dlswCircuitFCResetOpSents, dlswCircuitFCHalveWndwRcvds, dlswCircuitFCResetOpRcvds, dlswCircuitDiscReasonLocal, dlswCircuitDiscReasonRemote, dlswCircuitDiscReasonRemoteData]

class dlswSdlcGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 3, 2, 16])
	group = [dlswSdlcLsEntries, dlswSdlcLsLocalMac, dlswSdlcLsLocalSap, dlswSdlcLsLocalIdBlock, dlswSdlcLsLocalIdNum, dlswSdlcLsRemoteMac, dlswSdlcLsRemoteSap, dlswSdlcLsRowStatus]

class dlswNotificationGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 46, 3, 2, 17])
	group = [dlswTrapTConnPartnerReject, dlswTrapTConnProtViolation, dlswTrapTConnUp, dlswTrapTConnDown, dlswTrapCircuitUp, dlswTrapCircuitDown]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
