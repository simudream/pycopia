# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, NOTIFICATION_TYPE, IpAddress
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP, NOTIFICATION_GROUP
from OSPF_MIB import ospfRouterId, ospfIfIpAddress, ospfAddressLessIf, ospfIfState, ospfVirtIfAreaId, ospfVirtIfNeighbor, ospfVirtIfState, ospfNbrIpAddr, ospfNbrAddressLessIndex, ospfNbrRtrId, ospfNbrState, ospfVirtNbrArea, ospfVirtNbrRtrId, ospfVirtNbrState, ospfLsdbType, ospfLsdbLsid, ospfLsdbRouterId, ospfLsdbAreaId, ospfExtLsdbLimit, ospf, ospfAreaId, ospfAreaNssaTranslatorState, ospfRestartStatus, ospfRestartInterval, ospfRestartExitReason, ospfNbrRestartHelperStatus, ospfNbrRestartHelperAge, ospfNbrRestartHelperExitReason, ospfVirtNbrRestartHelperStatus, ospfVirtNbrRestartHelperAge, ospfVirtNbrRestartHelperExitReason

class OSPF_TRAP_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/OSPF-TRAP-MIB'
	conformance = 4
	name = 'OSPF-TRAP-MIB'
	language = 2
	description = 'The MIB module to describe traps for the OSPF\nVersion 2 Protocol.\n\nCopyright (C) The IETF Trust (2006).\nThis version of this MIB module is part of\nRFC 4750;  see the RFC itself for full legal\nnotices.'

# nodes
class ospfTrap(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 16])
	name = 'ospfTrap'

class ospfTrapControl(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 16, 1])
	name = 'ospfTrapControl'

class ospfTraps(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 16, 2])
	name = 'ospfTraps'

class ospfTrapConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 16, 3])
	name = 'ospfTrapConformance'

class ospfTrapGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 16, 3, 1])
	name = 'ospfTrapGroups'

class ospfTrapCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 16, 3, 2])
	name = 'ospfTrapCompliances'


# macros
# types 
# scalars 
class ospfSetTrap(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 16, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class ospfConfigErrorType(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 16, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'badVersion'), Enum(2, 'areaMismatch'), Enum(3, 'unknownNbmaNbr'), Enum(4, 'unknownVirtualNbr'), Enum(5, 'authTypeMismatch'), Enum(6, 'authFailure'), Enum(7, 'netMaskMismatch'), Enum(8, 'helloIntervalMismatch'), Enum(9, 'deadIntervalMismatch'), Enum(10, 'optionMismatch'), Enum(11, 'mtuMismatch'), Enum(12, 'duplicateRouterId'), Enum(13, 'noError')]


class ospfPacketType(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 16, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'hello'), Enum(2, 'dbDescript'), Enum(3, 'lsReq'), Enum(4, 'lsUpdate'), Enum(5, 'lsAck'), Enum(6, 'nullPacket')]


class ospfPacketSrc(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 16, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


# columns
# rows 
# notifications (traps) 
class ospfVirtIfStateChange(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 16, 2, 1])

class ospfNbrStateChange(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 16, 2, 2])

class ospfVirtNbrStateChange(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 16, 2, 3])

class ospfIfConfigError(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 16, 2, 4])

class ospfVirtIfConfigError(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 16, 2, 5])

class ospfIfAuthFailure(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 16, 2, 6])

class ospfVirtIfAuthFailure(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 16, 2, 7])

class ospfIfRxBadPacket(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 16, 2, 8])

class ospfVirtIfRxBadPacket(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 16, 2, 9])

class ospfTxRetransmit(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 16, 2, 10])

class ospfVirtIfTxRetransmit(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 16, 2, 11])

class ospfOriginateLsa(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 16, 2, 12])

class ospfMaxAgeLsa(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 16, 2, 13])

class ospfLsdbOverflow(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 16, 2, 14])

class ospfLsdbApproachingOverflow(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 16, 2, 15])

class ospfIfStateChange(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 16, 2, 16])

class ospfNssaTranslatorStatusChange(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 16, 2, 17])

class ospfRestartStatusChange(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 16, 2, 18])

class ospfNbrRestartHelperStatusChange(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 16, 2, 19])

class ospfVirtNbrRestartHelperStatusChange(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 16, 2, 20])

# groups 
class ospfTrapControlGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 16, 3, 1, 1])
	group = [ospfSetTrap, ospfConfigErrorType, ospfPacketType, ospfPacketSrc]

class ospfTrapEventGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 14, 16, 3, 1, 2])
	group = [ospfVirtIfStateChange, ospfNbrStateChange, ospfVirtNbrStateChange, ospfIfConfigError, ospfVirtIfConfigError, ospfIfAuthFailure, ospfVirtIfAuthFailure, ospfIfRxBadPacket, ospfVirtIfRxBadPacket, ospfTxRetransmit, ospfVirtIfTxRetransmit, ospfOriginateLsa, ospfMaxAgeLsa, ospfLsdbOverflow, ospfLsdbApproachingOverflow, ospfIfStateChange, ospfNssaTranslatorStatusChange, ospfRestartStatusChange, ospfNbrRestartHelperStatusChange, ospfVirtNbrRestartHelperStatusChange]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
