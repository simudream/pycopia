# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE
from MPLS_TC_STD_MIB import mplsStdMIB, MplsAtmVcIdentifier
from ATM_TC_MIB import AtmVpIdentifier
from MPLS_LSR_STD_MIB import mplsInterfaceIndex
from SNMPv2_TC import RowStatus, StorageType, TruthValue

class MPLS_LC_ATM_STD_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/MPLS-LC-ATM-STD-MIB'
	conformance = 4
	name = 'MPLS-LC-ATM-STD-MIB'
	language = 2
	description = 'This MIB module contains managed object definitions for\nMPLS Label-Controlled ATM interfaces as defined in\n[RFC3035].\n\nCopyright (C) The Internet Society (2006).  This\nversion of this MIB module is part of RFC 4368; see\nthe RFC itself for full legal notices.'

# nodes
class mplsLcAtmStdMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 9])
	name = 'mplsLcAtmStdMIB'

class mplsLcAtmStdNotifications(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 9, 0])
	name = 'mplsLcAtmStdNotifications'

class mplsLcAtmStdObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 9, 1])
	name = 'mplsLcAtmStdObjects'

class mplsLcAtmStdConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 9, 2])
	name = 'mplsLcAtmStdConformance'

class mplsLcAtmStdCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 9, 2, 1])
	name = 'mplsLcAtmStdCompliances'

class mplsLcAtmStdGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 9, 2, 2])
	name = 'mplsLcAtmStdGroups'


# macros
# types 
# scalars 
# columns
class mplsLcAtmStdCtrlVpi(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 9, 1, 1, 1, 1])
	syntaxobject = AtmVpIdentifier


class mplsLcAtmStdCtrlVci(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 9, 1, 1, 1, 2])
	syntaxobject = MplsAtmVcIdentifier


class mplsLcAtmStdUnlabTrafVpi(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 9, 1, 1, 1, 3])
	syntaxobject = AtmVpIdentifier


class mplsLcAtmStdUnlabTrafVci(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 9, 1, 1, 1, 4])
	syntaxobject = MplsAtmVcIdentifier


class mplsLcAtmStdVcMerge(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 9, 1, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class mplsLcAtmVcDirectlyConnected(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 9, 1, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class mplsLcAtmLcAtmVPI(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 9, 1, 1, 1, 7])
	syntaxobject = AtmVpIdentifier


class mplsLcAtmStdIfConfRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 9, 1, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class mplsLcAtmStdIfConfStorageType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 9, 1, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


# rows 
class mplsLcAtmStdInterfaceConfEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([mplsInterfaceIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 9, 1, 1, 1])
	access = 2
	rowstatus = mplsLcAtmStdIfConfRowStatus
	columns = {'mplsLcAtmStdCtrlVpi': mplsLcAtmStdCtrlVpi, 'mplsLcAtmStdCtrlVci': mplsLcAtmStdCtrlVci, 'mplsLcAtmStdUnlabTrafVpi': mplsLcAtmStdUnlabTrafVpi, 'mplsLcAtmStdUnlabTrafVci': mplsLcAtmStdUnlabTrafVci, 'mplsLcAtmStdVcMerge': mplsLcAtmStdVcMerge, 'mplsLcAtmVcDirectlyConnected': mplsLcAtmVcDirectlyConnected, 'mplsLcAtmLcAtmVPI': mplsLcAtmLcAtmVPI, 'mplsLcAtmStdIfConfRowStatus': mplsLcAtmStdIfConfRowStatus, 'mplsLcAtmStdIfConfStorageType': mplsLcAtmStdIfConfStorageType}


# notifications (traps) 
# groups 
class mplsLcAtmStdIfGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 9, 2, 2, 1])
	group = [mplsLcAtmStdCtrlVpi, mplsLcAtmStdCtrlVci, mplsLcAtmStdUnlabTrafVpi, mplsLcAtmStdUnlabTrafVci, mplsLcAtmStdVcMerge, mplsLcAtmVcDirectlyConnected, mplsLcAtmLcAtmVPI, mplsLcAtmStdIfConfRowStatus, mplsLcAtmStdIfConfStorageType]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
