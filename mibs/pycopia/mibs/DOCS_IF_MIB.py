# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_CONF import OBJECT_GROUP, MODULE_COMPLIANCE
from IF_MIB import ifIndex, InterfaceIndexOrZero
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, Unsigned32, Integer32, Counter32, Counter64, TimeTicks, IpAddress, transmission
from IANAifType_MIB import IANAifType
from INET_ADDRESS_MIB import InetAddressType, InetAddress
from SNMPv2_TC import TEXTUAL_CONVENTION, MacAddress, RowStatus, TruthValue, TimeInterval, TimeStamp, StorageType

class DOCS_IF_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/DOCS-IF-MIB'
	conformance = 132
	name = 'DOCS-IF-MIB'
	language = 2
	description = 'This is the MIB Module for DOCSIS 2.0-compliant Radio\nFrequency (RF) interfaces in Cable Modems and\nCable Modem Termination Systems.\n\nCopyright (C) The Internet Society (2006).  This\nversion of this MIB module is part of RFC 4546; see\nthe RFC itself for full legal notices.'

# nodes
class docsIfMib(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127])
	name = 'docsIfMib'

class docsIfMibObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1])
	name = 'docsIfMibObjects'

class docsIfBaseObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1])
	name = 'docsIfBaseObjects'

class docsIfCmObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 2])
	name = 'docsIfCmObjects'

class docsIfCmtsObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3])
	name = 'docsIfCmtsObjects'

class docsIfNotification(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 2])
	name = 'docsIfNotification'

class docsIfConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 3])
	name = 'docsIfConformance'

class docsIfCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 3, 1])
	name = 'docsIfCompliances'

class docsIfGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 3, 2])
	name = 'docsIfGroups'


# macros
# types 

class TenthdBmV(pycopia.SMI.Basetypes.Integer32):
	status = 1
	format = 'd-1'


class TenthdB(pycopia.SMI.Basetypes.Integer32):
	status = 1
	format = 'd-1'


class DocsisVersion(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'docsis10'), Enum(2, 'docsis11'), Enum(3, 'docsis20')]


class DocsisQosVersion(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'docsis10'), Enum(2, 'docsis11')]


class DocsisUpstreamType(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(0, 'unknown'), Enum(1, 'tdma'), Enum(2, 'atdma'), Enum(3, 'scdma'), Enum(4, 'tdmaAndAtdma')]


class DocsEqualizerData(pycopia.SMI.Basetypes.OctetString):
	status = 1
	ranges = Ranges(Range(0, 0), Range(36, 260))

# scalars 
class docsIfDocsisBaseCapability(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 5])
	syntaxobject = DocsisVersion


class docsIfCmtsQosProfilePermissions(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 6])
	syntaxobject = pycopia.SMI.Basetypes.BITS


class docsIfCmtsChannelUtilizationInterval(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 8])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


# columns
class docsIfDownChannelId(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class docsIfDownChannelFrequency(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'hertz'


class docsIfDownChannelWidth(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'hertz'


class docsIfDownChannelModulation(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'unknown'), Enum(2, 'other'), Enum(3, 'qam64'), Enum(4, 'qam256')]


class docsIfDownChannelInterleave(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'unknown'), Enum(2, 'other'), Enum(3, 'taps8Increment16'), Enum(4, 'taps16Increment8'), Enum(5, 'taps32Increment4'), Enum(6, 'taps64Increment2'), Enum(7, 'taps128Increment1'), Enum(8, 'taps12increment17')]


class docsIfDownChannelPower(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 1, 1, 6])
	syntaxobject = TenthdBmV
	access = 5
	units = 'dBmV'


class docsIfDownChannelAnnex(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'unknown'), Enum(2, 'other'), Enum(3, 'annexA'), Enum(4, 'annexB'), Enum(5, 'annexC')]


class docsIfDownChannelStorageType(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


class docsIfUpChannelId(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class docsIfUpChannelFrequency(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'hertz'


class docsIfUpChannelWidth(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'hertz'


class docsIfUpChannelModulationProfile(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class docsIfUpChannelSlotSize(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32
	access = 5
	units = 'ticks'


class docsIfUpChannelTxTimingOffset(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class docsIfUpChannelRangingBackoffStart(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class docsIfUpChannelRangingBackoffEnd(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class docsIfUpChannelTxBackoffStart(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class docsIfUpChannelTxBackoffEnd(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class docsIfUpChannelScdmaActiveCodes(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class docsIfUpChannelScdmaCodesPerSlot(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'codesperMinislots'


class docsIfUpChannelScdmaFrameSize(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32
	access = 5
	units = 'spreadIntervals'


class docsIfUpChannelScdmaHoppingSeed(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class docsIfUpChannelType(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 15])
	syntaxobject = DocsisUpstreamType


class docsIfUpChannelCloneFrom(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 16])
	syntaxobject = InterfaceIndexOrZero


class docsIfUpChannelUpdate(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class docsIfUpChannelStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class docsIfUpChannelPreEqEnable(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class docsIfQosProfIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 3, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class docsIfQosProfPriority(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 3, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class docsIfQosProfMaxUpBandwidth(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 3, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'bits per second'


class docsIfQosProfGuarUpBandwidth(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 3, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'bits per second'


class docsIfQosProfMaxDownBandwidth(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 3, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'bits per second'


class docsIfQosProfMaxTxBurst(ColumnObject):
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 3, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'mini-slots'


class docsIfQosProfBaselinePrivacy(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 3, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class docsIfQosProfStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 3, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class docsIfQosProfMaxTransmitBurst(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 3, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'bytes'


class docsIfQosProfStorageType(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 3, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


class docsIfSigQIncludesContention(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 4, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class docsIfSigQUnerroreds(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 4, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'codewords'


class docsIfSigQCorrecteds(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 4, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'codewords'


class docsIfSigQUncorrectables(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 4, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'codewords'


class docsIfSigQSignalNoise(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 4, 1, 5])
	syntaxobject = TenthdB
	access = 4
	units = 'TenthdB'


class docsIfSigQMicroreflections(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 4, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = '-dBc'


class docsIfSigQEqualizationData(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 4, 1, 7])
	syntaxobject = DocsEqualizerData


class docsIfSigQExtUnerroreds(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 4, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter64
	access = 4
	units = 'codewords'


class docsIfSigQExtCorrecteds(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 4, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter64
	access = 4
	units = 'codewords'


class docsIfSigQExtUncorrectables(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 4, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter64
	access = 4
	units = 'codewords'


class docsIfCmCmtsAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.MacAddress


class docsIfCmCapabilities(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.BITS


class docsIfCmRangingRespTimeout(ColumnObject):
	access = 5
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class docsIfCmRangingTimeout(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.TimeInterval
	access = 5
	units = 'HundredOfSeconds'


class docsIfCmStatusValue(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'notReady'), Enum(3, 'notSynchronized'), Enum(4, 'phySynchronized'), Enum(5, 'usParametersAcquired'), Enum(6, 'rangingComplete'), Enum(7, 'ipComplete'), Enum(8, 'todEstablished'), Enum(9, 'securityEstablished'), Enum(10, 'paramTransferComplete'), Enum(11, 'registrationComplete'), Enum(12, 'operational'), Enum(13, 'accessDenied')]


class docsIfCmStatusCode(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class docsIfCmStatusTxPower(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 3])
	syntaxobject = TenthdBmV
	access = 4
	units = 'TenthdBmV'


class docsIfCmStatusResets(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'resets'


class docsIfCmStatusLostSyncs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class docsIfCmStatusInvalidMaps(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'maps'


class docsIfCmStatusInvalidUcds(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'messages'


class docsIfCmStatusInvalidRangingResponses(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'messages'


class docsIfCmStatusInvalidRegistrationResponses(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'messages'


class docsIfCmStatusT1Timeouts(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'timeouts'


class docsIfCmStatusT2Timeouts(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'timeouts'


class docsIfCmStatusT3Timeouts(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'timeouts'


class docsIfCmStatusT4Timeouts(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'timeouts'


class docsIfCmStatusRangingAborteds(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'attempts'


class docsIfCmStatusDocsisOperMode(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 15])
	syntaxobject = DocsisQosVersion


class docsIfCmStatusModulationType(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 16])
	syntaxobject = DocsisUpstreamType


class docsIfCmStatusEqualizationData(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 17])
	syntaxobject = DocsEqualizerData


class docsIfCmStatusUCCs(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'attempts'


class docsIfCmStatusUCCFails(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'attempts'


class docsIfCmServiceId(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 3, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class docsIfCmServiceQosProfile(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 3, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class docsIfCmServiceTxSlotsImmed(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 3, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'mini-slots'


class docsIfCmServiceTxSlotsDed(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 3, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'mini-slots'


class docsIfCmServiceTxRetries(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 3, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'attempts'


class docsIfCmServiceTxExceededs(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 3, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'attempts'


class docsIfCmServiceRqRetries(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 3, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'attempts'


class docsIfCmServiceRqExceededs(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 3, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'attempts'


class docsIfCmServiceExtTxSlotsImmed(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 3, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter64
	access = 4
	units = 'mini-slots'


class docsIfCmServiceExtTxSlotsDed(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 3, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter64
	access = 4
	units = 'mini-slots'


class docsIfCmtsCapabilities(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.BITS


class docsIfCmtsSyncInterval(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'Milliseconds'


class docsIfCmtsUcdInterval(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'Milliseconds'


class docsIfCmtsMaxServiceIds(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = 'SIDs'


class docsIfCmtsInsertionInterval(ColumnObject):
	access = 5
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class docsIfCmtsInvitedRangingAttempts(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'attempts'


class docsIfCmtsInsertInterval(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.TimeInterval
	access = 5
	units = 'HundredOfSeconds'


class docsIfCmtsMacStorageType(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


class docsIfCmtsStatusInvalidRangeReqs(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'messages'


class docsIfCmtsStatusRangingAborteds(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'attempts'


class docsIfCmtsStatusInvalidRegReqs(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'messages'


class docsIfCmtsStatusFailedRegReqs(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'attempts'


class docsIfCmtsStatusInvalidDataReqs(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'messages'


class docsIfCmtsStatusT5Timeouts(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'timeouts'


class docsIfCmtsCmStatusIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class docsIfCmtsCmStatusMacAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.MacAddress


class docsIfCmtsCmStatusIpAddress(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class docsIfCmtsCmStatusDownChannelIfIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 4])
	syntaxobject = InterfaceIndexOrZero


class docsIfCmtsCmStatusUpChannelIfIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 5])
	syntaxobject = InterfaceIndexOrZero


class docsIfCmtsCmStatusRxPower(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 6])
	syntaxobject = TenthdBmV
	access = 4
	units = 'ThenthdBmV'


class docsIfCmtsCmStatusTimingOffset(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class docsIfCmtsCmStatusEqualizationData(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 8])
	syntaxobject = DocsEqualizerData


class docsIfCmtsCmStatusValue(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'ranging'), Enum(3, 'rangingAborted'), Enum(4, 'rangingComplete'), Enum(5, 'ipComplete'), Enum(6, 'registrationComplete'), Enum(7, 'accessDenied'), Enum(8, 'operational'), Enum(9, 'registeredBPIInitializing')]


class docsIfCmtsCmStatusUnerroreds(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'codewords'


class docsIfCmtsCmStatusCorrecteds(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'codewords'


class docsIfCmtsCmStatusUncorrectables(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'codewords'


class docsIfCmtsCmStatusSignalNoise(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 13])
	syntaxobject = TenthdB
	access = 4
	units = 'TenthdB'


class docsIfCmtsCmStatusMicroreflections(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = '-dBc'


class docsIfCmtsCmStatusExtUnerroreds(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Counter64
	access = 4
	units = 'codewords'


class docsIfCmtsCmStatusExtCorrecteds(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Counter64
	access = 4
	units = 'codewords'


class docsIfCmtsCmStatusExtUncorrectables(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.Counter64
	access = 4
	units = 'codewords'


class docsIfCmtsCmStatusDocsisRegMode(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 18])
	syntaxobject = DocsisQosVersion


class docsIfCmtsCmStatusModulationType(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 19])
	syntaxobject = DocsisUpstreamType


class docsIfCmtsCmStatusInetAddressType(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 20])
	syntaxobject = InetAddressType


class docsIfCmtsCmStatusInetAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 21])
	syntaxobject = InetAddress


class docsIfCmtsCmStatusValueLastUpdate(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 22])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class docsIfCmtsCmStatusHighResolutionTimingOffset(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 23])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class docsIfCmtsServiceId(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 4, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class docsIfCmtsServiceCmStatusIndex(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 4, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class docsIfCmtsServiceAdminStatus(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 4, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled'), Enum(3, 'destroyed')]


class docsIfCmtsServiceQosProfile(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 4, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class docsIfCmtsServiceCreateTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 4, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class docsIfCmtsServiceInOctets(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 4, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'Bytes'


class docsIfCmtsServiceInPackets(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 4, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'packets'


class docsIfCmtsServiceNewCmStatusIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 4, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class docsIfCmtsModIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class docsIfCmtsModIntervalUsageCode(ColumnObject):
	status = 1
	access = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'request'), Enum(2, 'requestData'), Enum(3, 'initialRanging'), Enum(4, 'periodicRanging'), Enum(5, 'shortData'), Enum(6, 'longData'), Enum(9, 'advPhyShortData'), Enum(10, 'advPhyLongData'), Enum(11, 'ugs')]


class docsIfCmtsModControl(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class docsIfCmtsModType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'qpsk'), Enum(3, 'qam16'), Enum(4, 'qam8'), Enum(5, 'qam32'), Enum(6, 'qam64'), Enum(7, 'qam128')]


class docsIfCmtsModPreambleLen(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'bits'


class docsIfCmtsModDifferentialEncoding(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class docsIfCmtsModFECErrorCorrection(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'Bytes'


class docsIfCmtsModFECCodewordLength(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'Bytes'


class docsIfCmtsModScramblerSeed(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class docsIfCmtsModMaxBurstSize(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'mini-slots'


class docsIfCmtsModGuardTimeSize(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32
	access = 4
	units = 'Symbol-times'


class docsIfCmtsModLastCodewordShortened(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class docsIfCmtsModScrambler(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class docsIfCmtsModByteInterleaverDepth(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class docsIfCmtsModByteInterleaverBlockSize(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class docsIfCmtsModPreambleType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(0, 'unknown'), Enum(1, 'qpsk0'), Enum(2, 'qpsk1')]


class docsIfCmtsModTcmErrorCorrectionOn(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class docsIfCmtsModScdmaInterleaverStepSize(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class docsIfCmtsModScdmaSpreaderEnable(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class docsIfCmtsModScdmaSubframeCodes(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 20])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class docsIfCmtsModChannelType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 21])
	syntaxobject = DocsisUpstreamType


class docsIfCmtsModStorageType(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 22])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


class docsIfCmtsCmMac(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 7, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.MacAddress


class docsIfCmtsCmPtr(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 7, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class docsIfCmtsChannelUtIfType(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 9, 1, 1])
	syntaxobject = IANAifType


class docsIfCmtsChannelUtId(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 9, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class docsIfCmtsChannelUtUtilization(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 9, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = 'percent'


class docsIfCmtsDownChnlCtrId(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 10, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class docsIfCmtsDownChnlCtrTotalBytes(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 10, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'Bytes'


class docsIfCmtsDownChnlCtrUsedBytes(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 10, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'Bytes'


class docsIfCmtsDownChnlCtrExtTotalBytes(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 10, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter64
	access = 4
	units = 'Bytes'


class docsIfCmtsDownChnlCtrExtUsedBytes(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 10, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter64
	access = 4
	units = 'Bytes'


class docsIfCmtsUpChnlCtrId(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class docsIfCmtsUpChnlCtrTotalMslots(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'mini-slots'


class docsIfCmtsUpChnlCtrUcastGrantedMslots(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'mini-slots'


class docsIfCmtsUpChnlCtrTotalCntnMslots(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'mini-slots'


class docsIfCmtsUpChnlCtrUsedCntnMslots(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'mini-slots'


class docsIfCmtsUpChnlCtrExtTotalMslots(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter64
	access = 4
	units = 'mini-slots'


class docsIfCmtsUpChnlCtrExtUcastGrantedMslots(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter64
	access = 4
	units = 'mini-slots'


class docsIfCmtsUpChnlCtrExtTotalCntnMslots(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter64
	access = 4
	units = 'mini-slots'


class docsIfCmtsUpChnlCtrExtUsedCntnMslots(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter64
	access = 4
	units = 'mini-slots'


class docsIfCmtsUpChnlCtrCollCntnMslots(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'mini-slots'


class docsIfCmtsUpChnlCtrTotalCntnReqMslots(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'mini-slots'


class docsIfCmtsUpChnlCtrUsedCntnReqMslots(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'mini-slots'


class docsIfCmtsUpChnlCtrCollCntnReqMslots(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'mini-slots'


class docsIfCmtsUpChnlCtrTotalCntnReqDataMslots(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'mini-slots'


class docsIfCmtsUpChnlCtrUsedCntnReqDataMslots(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'mini-slots'


class docsIfCmtsUpChnlCtrCollCntnReqDataMslots(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'mini-slots'


class docsIfCmtsUpChnlCtrTotalCntnInitMaintMslots(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'mini-slots'


class docsIfCmtsUpChnlCtrUsedCntnInitMaintMslots(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class docsIfCmtsUpChnlCtrCollCntnInitMaintMslots(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'mini-slots'


class docsIfCmtsUpChnlCtrExtCollCntnMslots(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 20])
	syntaxobject = pycopia.SMI.Basetypes.Counter64
	access = 4
	units = 'mini-slots'


class docsIfCmtsUpChnlCtrExtTotalCntnReqMslots(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 21])
	syntaxobject = pycopia.SMI.Basetypes.Counter64
	access = 4
	units = 'mini-slots'


class docsIfCmtsUpChnlCtrExtUsedCntnReqMslots(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 22])
	syntaxobject = pycopia.SMI.Basetypes.Counter64
	access = 4
	units = 'mini-slots'


class docsIfCmtsUpChnlCtrExtCollCntnReqMslots(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 23])
	syntaxobject = pycopia.SMI.Basetypes.Counter64
	access = 4
	units = 'mini-slots'


class docsIfCmtsUpChnlCtrExtTotalCntnReqDataMslots(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 24])
	syntaxobject = pycopia.SMI.Basetypes.Counter64
	access = 4
	units = 'mini-slots'


class docsIfCmtsUpChnlCtrExtUsedCntnReqDataMslots(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 25])
	syntaxobject = pycopia.SMI.Basetypes.Counter64
	access = 4
	units = 'mini-slots'


class docsIfCmtsUpChnlCtrExtCollCntnReqDataMslots(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 26])
	syntaxobject = pycopia.SMI.Basetypes.Counter64
	access = 4
	units = 'mini-slots'


class docsIfCmtsUpChnlCtrExtTotalCntnInitMaintMslots(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 27])
	syntaxobject = pycopia.SMI.Basetypes.Counter64
	access = 4
	units = 'mini-slots'


class docsIfCmtsUpChnlCtrExtUsedCntnInitMaintMslots(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 28])
	syntaxobject = pycopia.SMI.Basetypes.Counter64
	access = 4
	units = 'mini-slots'


class docsIfCmtsUpChnlCtrExtCollCntnInitMaintMslots(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1, 29])
	syntaxobject = pycopia.SMI.Basetypes.Counter64
	access = 4
	units = 'mini-slots'


# rows 
class docsIfDownstreamChannelEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 1, 1])
	access = 2
	columns = {'docsIfDownChannelId': docsIfDownChannelId, 'docsIfDownChannelFrequency': docsIfDownChannelFrequency, 'docsIfDownChannelWidth': docsIfDownChannelWidth, 'docsIfDownChannelModulation': docsIfDownChannelModulation, 'docsIfDownChannelInterleave': docsIfDownChannelInterleave, 'docsIfDownChannelPower': docsIfDownChannelPower, 'docsIfDownChannelAnnex': docsIfDownChannelAnnex, 'docsIfDownChannelStorageType': docsIfDownChannelStorageType}


class docsIfUpstreamChannelEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1])
	access = 2
	rowstatus = docsIfUpChannelStatus
	columns = {'docsIfUpChannelId': docsIfUpChannelId, 'docsIfUpChannelFrequency': docsIfUpChannelFrequency, 'docsIfUpChannelWidth': docsIfUpChannelWidth, 'docsIfUpChannelModulationProfile': docsIfUpChannelModulationProfile, 'docsIfUpChannelSlotSize': docsIfUpChannelSlotSize, 'docsIfUpChannelTxTimingOffset': docsIfUpChannelTxTimingOffset, 'docsIfUpChannelRangingBackoffStart': docsIfUpChannelRangingBackoffStart, 'docsIfUpChannelRangingBackoffEnd': docsIfUpChannelRangingBackoffEnd, 'docsIfUpChannelTxBackoffStart': docsIfUpChannelTxBackoffStart, 'docsIfUpChannelTxBackoffEnd': docsIfUpChannelTxBackoffEnd, 'docsIfUpChannelScdmaActiveCodes': docsIfUpChannelScdmaActiveCodes, 'docsIfUpChannelScdmaCodesPerSlot': docsIfUpChannelScdmaCodesPerSlot, 'docsIfUpChannelScdmaFrameSize': docsIfUpChannelScdmaFrameSize, 'docsIfUpChannelScdmaHoppingSeed': docsIfUpChannelScdmaHoppingSeed, 'docsIfUpChannelType': docsIfUpChannelType, 'docsIfUpChannelCloneFrom': docsIfUpChannelCloneFrom, 'docsIfUpChannelUpdate': docsIfUpChannelUpdate, 'docsIfUpChannelStatus': docsIfUpChannelStatus, 'docsIfUpChannelPreEqEnable': docsIfUpChannelPreEqEnable}


class docsIfQosProfileEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([docsIfQosProfIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 3, 1])
	access = 2
	rowstatus = docsIfQosProfStatus
	columns = {'docsIfQosProfIndex': docsIfQosProfIndex, 'docsIfQosProfPriority': docsIfQosProfPriority, 'docsIfQosProfMaxUpBandwidth': docsIfQosProfMaxUpBandwidth, 'docsIfQosProfGuarUpBandwidth': docsIfQosProfGuarUpBandwidth, 'docsIfQosProfMaxDownBandwidth': docsIfQosProfMaxDownBandwidth, 'docsIfQosProfMaxTxBurst': docsIfQosProfMaxTxBurst, 'docsIfQosProfBaselinePrivacy': docsIfQosProfBaselinePrivacy, 'docsIfQosProfStatus': docsIfQosProfStatus, 'docsIfQosProfMaxTransmitBurst': docsIfQosProfMaxTransmitBurst, 'docsIfQosProfStorageType': docsIfQosProfStorageType}


class docsIfSignalQualityEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 4, 1])
	access = 2
	columns = {'docsIfSigQIncludesContention': docsIfSigQIncludesContention, 'docsIfSigQUnerroreds': docsIfSigQUnerroreds, 'docsIfSigQCorrecteds': docsIfSigQCorrecteds, 'docsIfSigQUncorrectables': docsIfSigQUncorrectables, 'docsIfSigQSignalNoise': docsIfSigQSignalNoise, 'docsIfSigQMicroreflections': docsIfSigQMicroreflections, 'docsIfSigQEqualizationData': docsIfSigQEqualizationData, 'docsIfSigQExtUnerroreds': docsIfSigQExtUnerroreds, 'docsIfSigQExtCorrecteds': docsIfSigQExtCorrecteds, 'docsIfSigQExtUncorrectables': docsIfSigQExtUncorrectables}


class docsIfCmMacEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 1, 1])
	access = 2
	columns = {'docsIfCmCmtsAddress': docsIfCmCmtsAddress, 'docsIfCmCapabilities': docsIfCmCapabilities, 'docsIfCmRangingRespTimeout': docsIfCmRangingRespTimeout, 'docsIfCmRangingTimeout': docsIfCmRangingTimeout}


class docsIfCmStatusEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1])
	access = 2
	columns = {'docsIfCmStatusValue': docsIfCmStatusValue, 'docsIfCmStatusCode': docsIfCmStatusCode, 'docsIfCmStatusTxPower': docsIfCmStatusTxPower, 'docsIfCmStatusResets': docsIfCmStatusResets, 'docsIfCmStatusLostSyncs': docsIfCmStatusLostSyncs, 'docsIfCmStatusInvalidMaps': docsIfCmStatusInvalidMaps, 'docsIfCmStatusInvalidUcds': docsIfCmStatusInvalidUcds, 'docsIfCmStatusInvalidRangingResponses': docsIfCmStatusInvalidRangingResponses, 'docsIfCmStatusInvalidRegistrationResponses': docsIfCmStatusInvalidRegistrationResponses, 'docsIfCmStatusT1Timeouts': docsIfCmStatusT1Timeouts, 'docsIfCmStatusT2Timeouts': docsIfCmStatusT2Timeouts, 'docsIfCmStatusT3Timeouts': docsIfCmStatusT3Timeouts, 'docsIfCmStatusT4Timeouts': docsIfCmStatusT4Timeouts, 'docsIfCmStatusRangingAborteds': docsIfCmStatusRangingAborteds, 'docsIfCmStatusDocsisOperMode': docsIfCmStatusDocsisOperMode, 'docsIfCmStatusModulationType': docsIfCmStatusModulationType, 'docsIfCmStatusEqualizationData': docsIfCmStatusEqualizationData, 'docsIfCmStatusUCCs': docsIfCmStatusUCCs, 'docsIfCmStatusUCCFails': docsIfCmStatusUCCFails}


class docsIfCmServiceEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, docsIfCmServiceId], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 3, 1])
	access = 2
	columns = {'docsIfCmServiceId': docsIfCmServiceId, 'docsIfCmServiceQosProfile': docsIfCmServiceQosProfile, 'docsIfCmServiceTxSlotsImmed': docsIfCmServiceTxSlotsImmed, 'docsIfCmServiceTxSlotsDed': docsIfCmServiceTxSlotsDed, 'docsIfCmServiceTxRetries': docsIfCmServiceTxRetries, 'docsIfCmServiceTxExceededs': docsIfCmServiceTxExceededs, 'docsIfCmServiceRqRetries': docsIfCmServiceRqRetries, 'docsIfCmServiceRqExceededs': docsIfCmServiceRqExceededs, 'docsIfCmServiceExtTxSlotsImmed': docsIfCmServiceExtTxSlotsImmed, 'docsIfCmServiceExtTxSlotsDed': docsIfCmServiceExtTxSlotsDed}


class docsIfCmtsMacEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 1, 1])
	access = 2
	columns = {'docsIfCmtsCapabilities': docsIfCmtsCapabilities, 'docsIfCmtsSyncInterval': docsIfCmtsSyncInterval, 'docsIfCmtsUcdInterval': docsIfCmtsUcdInterval, 'docsIfCmtsMaxServiceIds': docsIfCmtsMaxServiceIds, 'docsIfCmtsInsertionInterval': docsIfCmtsInsertionInterval, 'docsIfCmtsInvitedRangingAttempts': docsIfCmtsInvitedRangingAttempts, 'docsIfCmtsInsertInterval': docsIfCmtsInsertInterval, 'docsIfCmtsMacStorageType': docsIfCmtsMacStorageType}


class docsIfCmtsStatusEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 2, 1])
	access = 2
	columns = {'docsIfCmtsStatusInvalidRangeReqs': docsIfCmtsStatusInvalidRangeReqs, 'docsIfCmtsStatusRangingAborteds': docsIfCmtsStatusRangingAborteds, 'docsIfCmtsStatusInvalidRegReqs': docsIfCmtsStatusInvalidRegReqs, 'docsIfCmtsStatusFailedRegReqs': docsIfCmtsStatusFailedRegReqs, 'docsIfCmtsStatusInvalidDataReqs': docsIfCmtsStatusInvalidDataReqs, 'docsIfCmtsStatusT5Timeouts': docsIfCmtsStatusT5Timeouts}


class docsIfCmtsCmStatusEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([docsIfCmtsCmStatusIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1])
	access = 2
	columns = {'docsIfCmtsCmStatusIndex': docsIfCmtsCmStatusIndex, 'docsIfCmtsCmStatusMacAddress': docsIfCmtsCmStatusMacAddress, 'docsIfCmtsCmStatusIpAddress': docsIfCmtsCmStatusIpAddress, 'docsIfCmtsCmStatusDownChannelIfIndex': docsIfCmtsCmStatusDownChannelIfIndex, 'docsIfCmtsCmStatusUpChannelIfIndex': docsIfCmtsCmStatusUpChannelIfIndex, 'docsIfCmtsCmStatusRxPower': docsIfCmtsCmStatusRxPower, 'docsIfCmtsCmStatusTimingOffset': docsIfCmtsCmStatusTimingOffset, 'docsIfCmtsCmStatusEqualizationData': docsIfCmtsCmStatusEqualizationData, 'docsIfCmtsCmStatusValue': docsIfCmtsCmStatusValue, 'docsIfCmtsCmStatusUnerroreds': docsIfCmtsCmStatusUnerroreds, 'docsIfCmtsCmStatusCorrecteds': docsIfCmtsCmStatusCorrecteds, 'docsIfCmtsCmStatusUncorrectables': docsIfCmtsCmStatusUncorrectables, 'docsIfCmtsCmStatusSignalNoise': docsIfCmtsCmStatusSignalNoise, 'docsIfCmtsCmStatusMicroreflections': docsIfCmtsCmStatusMicroreflections, 'docsIfCmtsCmStatusExtUnerroreds': docsIfCmtsCmStatusExtUnerroreds, 'docsIfCmtsCmStatusExtCorrecteds': docsIfCmtsCmStatusExtCorrecteds, 'docsIfCmtsCmStatusExtUncorrectables': docsIfCmtsCmStatusExtUncorrectables, 'docsIfCmtsCmStatusDocsisRegMode': docsIfCmtsCmStatusDocsisRegMode, 'docsIfCmtsCmStatusModulationType': docsIfCmtsCmStatusModulationType, 'docsIfCmtsCmStatusInetAddressType': docsIfCmtsCmStatusInetAddressType, 'docsIfCmtsCmStatusInetAddress': docsIfCmtsCmStatusInetAddress, 'docsIfCmtsCmStatusValueLastUpdate': docsIfCmtsCmStatusValueLastUpdate, 'docsIfCmtsCmStatusHighResolutionTimingOffset': docsIfCmtsCmStatusHighResolutionTimingOffset}


class docsIfCmtsServiceEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, docsIfCmtsServiceId], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 4, 1])
	access = 2
	columns = {'docsIfCmtsServiceId': docsIfCmtsServiceId, 'docsIfCmtsServiceCmStatusIndex': docsIfCmtsServiceCmStatusIndex, 'docsIfCmtsServiceAdminStatus': docsIfCmtsServiceAdminStatus, 'docsIfCmtsServiceQosProfile': docsIfCmtsServiceQosProfile, 'docsIfCmtsServiceCreateTime': docsIfCmtsServiceCreateTime, 'docsIfCmtsServiceInOctets': docsIfCmtsServiceInOctets, 'docsIfCmtsServiceInPackets': docsIfCmtsServiceInPackets, 'docsIfCmtsServiceNewCmStatusIndex': docsIfCmtsServiceNewCmStatusIndex}


class docsIfCmtsModulationEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([docsIfCmtsModIndex, docsIfCmtsModIntervalUsageCode], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1])
	access = 2
	rowstatus = docsIfCmtsModControl
	columns = {'docsIfCmtsModIndex': docsIfCmtsModIndex, 'docsIfCmtsModIntervalUsageCode': docsIfCmtsModIntervalUsageCode, 'docsIfCmtsModControl': docsIfCmtsModControl, 'docsIfCmtsModType': docsIfCmtsModType, 'docsIfCmtsModPreambleLen': docsIfCmtsModPreambleLen, 'docsIfCmtsModDifferentialEncoding': docsIfCmtsModDifferentialEncoding, 'docsIfCmtsModFECErrorCorrection': docsIfCmtsModFECErrorCorrection, 'docsIfCmtsModFECCodewordLength': docsIfCmtsModFECCodewordLength, 'docsIfCmtsModScramblerSeed': docsIfCmtsModScramblerSeed, 'docsIfCmtsModMaxBurstSize': docsIfCmtsModMaxBurstSize, 'docsIfCmtsModGuardTimeSize': docsIfCmtsModGuardTimeSize, 'docsIfCmtsModLastCodewordShortened': docsIfCmtsModLastCodewordShortened, 'docsIfCmtsModScrambler': docsIfCmtsModScrambler, 'docsIfCmtsModByteInterleaverDepth': docsIfCmtsModByteInterleaverDepth, 'docsIfCmtsModByteInterleaverBlockSize': docsIfCmtsModByteInterleaverBlockSize, 'docsIfCmtsModPreambleType': docsIfCmtsModPreambleType, 'docsIfCmtsModTcmErrorCorrectionOn': docsIfCmtsModTcmErrorCorrectionOn, 'docsIfCmtsModScdmaInterleaverStepSize': docsIfCmtsModScdmaInterleaverStepSize, 'docsIfCmtsModScdmaSpreaderEnable': docsIfCmtsModScdmaSpreaderEnable, 'docsIfCmtsModScdmaSubframeCodes': docsIfCmtsModScdmaSubframeCodes, 'docsIfCmtsModChannelType': docsIfCmtsModChannelType, 'docsIfCmtsModStorageType': docsIfCmtsModStorageType}


class docsIfCmtsMacToCmEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([docsIfCmtsCmMac], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 7, 1])
	access = 2
	columns = {'docsIfCmtsCmMac': docsIfCmtsCmMac, 'docsIfCmtsCmPtr': docsIfCmtsCmPtr}


class docsIfCmtsChannelUtilizationEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, docsIfCmtsChannelUtIfType, docsIfCmtsChannelUtId], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 9, 1])
	access = 2
	columns = {'docsIfCmtsChannelUtIfType': docsIfCmtsChannelUtIfType, 'docsIfCmtsChannelUtId': docsIfCmtsChannelUtId, 'docsIfCmtsChannelUtUtilization': docsIfCmtsChannelUtUtilization}


class docsIfCmtsDownChannelCounterEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 10, 1])
	access = 2
	columns = {'docsIfCmtsDownChnlCtrId': docsIfCmtsDownChnlCtrId, 'docsIfCmtsDownChnlCtrTotalBytes': docsIfCmtsDownChnlCtrTotalBytes, 'docsIfCmtsDownChnlCtrUsedBytes': docsIfCmtsDownChnlCtrUsedBytes, 'docsIfCmtsDownChnlCtrExtTotalBytes': docsIfCmtsDownChnlCtrExtTotalBytes, 'docsIfCmtsDownChnlCtrExtUsedBytes': docsIfCmtsDownChnlCtrExtUsedBytes}


class docsIfCmtsUpChannelCounterEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 11, 1])
	access = 2
	columns = {'docsIfCmtsUpChnlCtrId': docsIfCmtsUpChnlCtrId, 'docsIfCmtsUpChnlCtrTotalMslots': docsIfCmtsUpChnlCtrTotalMslots, 'docsIfCmtsUpChnlCtrUcastGrantedMslots': docsIfCmtsUpChnlCtrUcastGrantedMslots, 'docsIfCmtsUpChnlCtrTotalCntnMslots': docsIfCmtsUpChnlCtrTotalCntnMslots, 'docsIfCmtsUpChnlCtrUsedCntnMslots': docsIfCmtsUpChnlCtrUsedCntnMslots, 'docsIfCmtsUpChnlCtrExtTotalMslots': docsIfCmtsUpChnlCtrExtTotalMslots, 'docsIfCmtsUpChnlCtrExtUcastGrantedMslots': docsIfCmtsUpChnlCtrExtUcastGrantedMslots, 'docsIfCmtsUpChnlCtrExtTotalCntnMslots': docsIfCmtsUpChnlCtrExtTotalCntnMslots, 'docsIfCmtsUpChnlCtrExtUsedCntnMslots': docsIfCmtsUpChnlCtrExtUsedCntnMslots, 'docsIfCmtsUpChnlCtrCollCntnMslots': docsIfCmtsUpChnlCtrCollCntnMslots, 'docsIfCmtsUpChnlCtrTotalCntnReqMslots': docsIfCmtsUpChnlCtrTotalCntnReqMslots, 'docsIfCmtsUpChnlCtrUsedCntnReqMslots': docsIfCmtsUpChnlCtrUsedCntnReqMslots, 'docsIfCmtsUpChnlCtrCollCntnReqMslots': docsIfCmtsUpChnlCtrCollCntnReqMslots, 'docsIfCmtsUpChnlCtrTotalCntnReqDataMslots': docsIfCmtsUpChnlCtrTotalCntnReqDataMslots, 'docsIfCmtsUpChnlCtrUsedCntnReqDataMslots': docsIfCmtsUpChnlCtrUsedCntnReqDataMslots, 'docsIfCmtsUpChnlCtrCollCntnReqDataMslots': docsIfCmtsUpChnlCtrCollCntnReqDataMslots, 'docsIfCmtsUpChnlCtrTotalCntnInitMaintMslots': docsIfCmtsUpChnlCtrTotalCntnInitMaintMslots, 'docsIfCmtsUpChnlCtrUsedCntnInitMaintMslots': docsIfCmtsUpChnlCtrUsedCntnInitMaintMslots, 'docsIfCmtsUpChnlCtrCollCntnInitMaintMslots': docsIfCmtsUpChnlCtrCollCntnInitMaintMslots, 'docsIfCmtsUpChnlCtrExtCollCntnMslots': docsIfCmtsUpChnlCtrExtCollCntnMslots, 'docsIfCmtsUpChnlCtrExtTotalCntnReqMslots': docsIfCmtsUpChnlCtrExtTotalCntnReqMslots, 'docsIfCmtsUpChnlCtrExtUsedCntnReqMslots': docsIfCmtsUpChnlCtrExtUsedCntnReqMslots, 'docsIfCmtsUpChnlCtrExtCollCntnReqMslots': docsIfCmtsUpChnlCtrExtCollCntnReqMslots, 'docsIfCmtsUpChnlCtrExtTotalCntnReqDataMslots': docsIfCmtsUpChnlCtrExtTotalCntnReqDataMslots, 'docsIfCmtsUpChnlCtrExtUsedCntnReqDataMslots': docsIfCmtsUpChnlCtrExtUsedCntnReqDataMslots, 'docsIfCmtsUpChnlCtrExtCollCntnReqDataMslots': docsIfCmtsUpChnlCtrExtCollCntnReqDataMslots, 'docsIfCmtsUpChnlCtrExtTotalCntnInitMaintMslots': docsIfCmtsUpChnlCtrExtTotalCntnInitMaintMslots, 'docsIfCmtsUpChnlCtrExtUsedCntnInitMaintMslots': docsIfCmtsUpChnlCtrExtUsedCntnInitMaintMslots, 'docsIfCmtsUpChnlCtrExtCollCntnInitMaintMslots': docsIfCmtsUpChnlCtrExtCollCntnInitMaintMslots}


# notifications (traps) 
# groups 
class docsIfBasicGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 3, 2, 1])
	group = [docsIfDownChannelId, docsIfDownChannelFrequency, docsIfDownChannelWidth, docsIfDownChannelModulation, docsIfDownChannelInterleave, docsIfDownChannelPower, docsIfUpChannelId, docsIfUpChannelFrequency, docsIfUpChannelWidth, docsIfUpChannelModulationProfile, docsIfUpChannelSlotSize, docsIfUpChannelTxTimingOffset, docsIfUpChannelRangingBackoffStart, docsIfUpChannelRangingBackoffEnd, docsIfUpChannelTxBackoffStart, docsIfUpChannelTxBackoffEnd, docsIfQosProfPriority, docsIfQosProfMaxUpBandwidth, docsIfQosProfGuarUpBandwidth, docsIfQosProfMaxDownBandwidth, docsIfQosProfMaxTxBurst, docsIfQosProfBaselinePrivacy, docsIfQosProfStatus, docsIfSigQIncludesContention, docsIfSigQUnerroreds, docsIfSigQCorrecteds, docsIfSigQUncorrectables, docsIfSigQSignalNoise, docsIfSigQMicroreflections, docsIfSigQEqualizationData]

class docsIfCmGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 3, 2, 2])
	group = [docsIfCmCmtsAddress, docsIfCmCapabilities, docsIfCmRangingTimeout, docsIfCmStatusValue, docsIfCmStatusCode, docsIfCmStatusTxPower, docsIfCmStatusResets, docsIfCmStatusLostSyncs, docsIfCmStatusInvalidMaps, docsIfCmStatusInvalidUcds, docsIfCmStatusInvalidRangingResponses, docsIfCmStatusInvalidRegistrationResponses, docsIfCmStatusT1Timeouts, docsIfCmStatusT2Timeouts, docsIfCmStatusT3Timeouts, docsIfCmStatusT4Timeouts, docsIfCmStatusRangingAborteds, docsIfCmServiceQosProfile, docsIfCmServiceTxSlotsImmed, docsIfCmServiceTxSlotsDed, docsIfCmServiceTxRetries, docsIfCmServiceTxExceededs, docsIfCmServiceRqRetries, docsIfCmServiceRqExceededs]

class docsIfCmtsGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 3, 2, 3])
	group = [docsIfCmtsCapabilities, docsIfCmtsSyncInterval, docsIfCmtsUcdInterval, docsIfCmtsMaxServiceIds, docsIfCmtsInvitedRangingAttempts, docsIfCmtsInsertInterval, docsIfCmtsStatusInvalidRangeReqs, docsIfCmtsStatusRangingAborteds, docsIfCmtsStatusInvalidRegReqs, docsIfCmtsStatusFailedRegReqs, docsIfCmtsStatusInvalidDataReqs, docsIfCmtsStatusT5Timeouts, docsIfCmtsCmStatusMacAddress, docsIfCmtsCmStatusIpAddress, docsIfCmtsCmStatusDownChannelIfIndex, docsIfCmtsCmStatusUpChannelIfIndex, docsIfCmtsCmStatusRxPower, docsIfCmtsCmStatusTimingOffset, docsIfCmtsCmStatusEqualizationData, docsIfCmtsCmStatusValue, docsIfCmtsCmStatusUnerroreds, docsIfCmtsCmStatusCorrecteds, docsIfCmtsCmStatusUncorrectables, docsIfCmtsCmStatusSignalNoise, docsIfCmtsCmStatusMicroreflections, docsIfCmtsServiceCmStatusIndex, docsIfCmtsServiceAdminStatus, docsIfCmtsServiceQosProfile, docsIfCmtsServiceCreateTime, docsIfCmtsServiceInOctets, docsIfCmtsServiceInPackets, docsIfCmtsModType, docsIfCmtsModControl, docsIfCmtsModPreambleLen, docsIfCmtsModDifferentialEncoding, docsIfCmtsModFECErrorCorrection, docsIfCmtsModFECCodewordLength, docsIfCmtsModScramblerSeed, docsIfCmtsModMaxBurstSize, docsIfCmtsModGuardTimeSize, docsIfCmtsModLastCodewordShortened, docsIfCmtsModScrambler, docsIfCmtsQosProfilePermissions, docsIfCmtsCmPtr]

class docsIfBasicGroupV2(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 3, 2, 5])
	group = [docsIfDownChannelId, docsIfDownChannelFrequency, docsIfDownChannelWidth, docsIfDownChannelModulation, docsIfDownChannelInterleave, docsIfDownChannelPower, docsIfDownChannelAnnex, docsIfUpChannelId, docsIfUpChannelFrequency, docsIfUpChannelWidth, docsIfUpChannelModulationProfile, docsIfUpChannelSlotSize, docsIfUpChannelTxTimingOffset, docsIfUpChannelRangingBackoffStart, docsIfUpChannelRangingBackoffEnd, docsIfUpChannelTxBackoffStart, docsIfUpChannelTxBackoffEnd, docsIfUpChannelScdmaActiveCodes, docsIfUpChannelScdmaCodesPerSlot, docsIfUpChannelScdmaFrameSize, docsIfUpChannelScdmaHoppingSeed, docsIfUpChannelType, docsIfUpChannelCloneFrom, docsIfUpChannelUpdate, docsIfUpChannelStatus, docsIfUpChannelPreEqEnable, docsIfQosProfPriority, docsIfQosProfMaxUpBandwidth, docsIfQosProfGuarUpBandwidth, docsIfQosProfMaxDownBandwidth, docsIfQosProfBaselinePrivacy, docsIfQosProfStatus, docsIfQosProfMaxTransmitBurst, docsIfSigQIncludesContention, docsIfSigQUnerroreds, docsIfSigQCorrecteds, docsIfSigQUncorrectables, docsIfSigQSignalNoise, docsIfSigQMicroreflections, docsIfSigQExtUnerroreds, docsIfSigQExtCorrecteds, docsIfSigQExtUncorrectables, docsIfDocsisBaseCapability]

class docsIfCmGroupV2(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 3, 2, 6])
	group = [docsIfCmCmtsAddress, docsIfCmCapabilities, docsIfCmRangingTimeout, docsIfCmStatusValue, docsIfCmStatusCode, docsIfCmStatusTxPower, docsIfCmStatusResets, docsIfCmStatusLostSyncs, docsIfCmStatusInvalidMaps, docsIfCmStatusInvalidUcds, docsIfCmStatusInvalidRangingResponses, docsIfCmStatusInvalidRegistrationResponses, docsIfCmStatusT1Timeouts, docsIfCmStatusT2Timeouts, docsIfCmStatusT3Timeouts, docsIfCmStatusT4Timeouts, docsIfCmStatusRangingAborteds, docsIfCmStatusDocsisOperMode, docsIfCmStatusModulationType, docsIfCmStatusEqualizationData, docsIfCmStatusUCCs, docsIfCmStatusUCCFails, docsIfCmServiceQosProfile, docsIfCmServiceTxSlotsImmed, docsIfCmServiceTxSlotsDed, docsIfCmServiceTxRetries, docsIfCmServiceTxExceededs, docsIfCmServiceRqRetries, docsIfCmServiceRqExceededs, docsIfCmServiceExtTxSlotsImmed, docsIfCmServiceExtTxSlotsDed, docsIfSigQEqualizationData]

class docsIfCmtsGroupV2(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 127, 3, 2, 7])
	group = [docsIfCmtsCapabilities, docsIfCmtsSyncInterval, docsIfCmtsUcdInterval, docsIfCmtsMaxServiceIds, docsIfCmtsInvitedRangingAttempts, docsIfCmtsInsertInterval, docsIfCmtsMacStorageType, docsIfCmtsStatusInvalidRangeReqs, docsIfCmtsStatusRangingAborteds, docsIfCmtsStatusInvalidRegReqs, docsIfCmtsStatusFailedRegReqs, docsIfCmtsStatusInvalidDataReqs, docsIfCmtsStatusT5Timeouts, docsIfCmtsCmStatusMacAddress, docsIfCmtsCmStatusDownChannelIfIndex, docsIfCmtsCmStatusUpChannelIfIndex, docsIfCmtsCmStatusRxPower, docsIfCmtsCmStatusTimingOffset, docsIfCmtsCmStatusEqualizationData, docsIfCmtsCmStatusValue, docsIfCmtsCmStatusUnerroreds, docsIfCmtsCmStatusCorrecteds, docsIfCmtsCmStatusUncorrectables, docsIfCmtsCmStatusSignalNoise, docsIfCmtsCmStatusMicroreflections, docsIfCmtsCmStatusExtUnerroreds, docsIfCmtsCmStatusExtCorrecteds, docsIfCmtsCmStatusExtUncorrectables, docsIfCmtsCmStatusDocsisRegMode, docsIfCmtsCmStatusModulationType, docsIfCmtsCmStatusInetAddressType, docsIfCmtsCmStatusInetAddress, docsIfCmtsCmStatusValueLastUpdate, docsIfCmtsCmStatusHighResolutionTimingOffset, docsIfCmtsServiceAdminStatus, docsIfCmtsServiceQosProfile, docsIfCmtsServiceCreateTime, docsIfCmtsServiceInOctets, docsIfCmtsServiceInPackets, docsIfCmtsServiceNewCmStatusIndex, docsIfCmtsModType, docsIfCmtsModControl, docsIfCmtsModPreambleLen, docsIfCmtsModDifferentialEncoding, docsIfCmtsModFECErrorCorrection, docsIfCmtsModFECCodewordLength, docsIfCmtsModScramblerSeed, docsIfCmtsModMaxBurstSize, docsIfCmtsModGuardTimeSize, docsIfCmtsModLastCodewordShortened, docsIfCmtsModScrambler, docsIfCmtsModByteInterleaverDepth, docsIfCmtsModByteInterleaverBlockSize, docsIfCmtsModPreambleType, docsIfCmtsModTcmErrorCorrectionOn, docsIfCmtsModScdmaInterleaverStepSize, docsIfCmtsModScdmaSpreaderEnable, docsIfCmtsModScdmaSubframeCodes, docsIfCmtsModChannelType, docsIfCmtsModStorageType, docsIfCmtsQosProfilePermissions, docsIfCmtsCmPtr, docsIfCmtsChannelUtilizationInterval, docsIfCmtsChannelUtUtilization, docsIfCmtsDownChnlCtrId, docsIfCmtsDownChnlCtrTotalBytes, docsIfCmtsDownChnlCtrUsedBytes, docsIfCmtsDownChnlCtrExtTotalBytes, docsIfCmtsDownChnlCtrExtUsedBytes, docsIfCmtsUpChnlCtrId, docsIfCmtsUpChnlCtrTotalMslots, docsIfCmtsUpChnlCtrUcastGrantedMslots, docsIfCmtsUpChnlCtrTotalCntnMslots, docsIfCmtsUpChnlCtrUsedCntnMslots, docsIfCmtsUpChnlCtrExtTotalMslots, docsIfCmtsUpChnlCtrExtUcastGrantedMslots, docsIfCmtsUpChnlCtrExtTotalCntnMslots, docsIfCmtsUpChnlCtrExtUsedCntnMslots, docsIfCmtsUpChnlCtrCollCntnMslots, docsIfCmtsUpChnlCtrTotalCntnReqMslots, docsIfCmtsUpChnlCtrUsedCntnReqMslots, docsIfCmtsUpChnlCtrCollCntnReqMslots, docsIfCmtsUpChnlCtrTotalCntnReqDataMslots, docsIfCmtsUpChnlCtrUsedCntnReqDataMslots, docsIfCmtsUpChnlCtrCollCntnReqDataMslots, docsIfCmtsUpChnlCtrTotalCntnInitMaintMslots, docsIfCmtsUpChnlCtrUsedCntnInitMaintMslots, docsIfCmtsUpChnlCtrCollCntnInitMaintMslots, docsIfCmtsUpChnlCtrExtCollCntnMslots, docsIfCmtsUpChnlCtrExtTotalCntnReqMslots, docsIfCmtsUpChnlCtrExtUsedCntnReqMslots, docsIfCmtsUpChnlCtrExtCollCntnReqMslots, docsIfCmtsUpChnlCtrExtTotalCntnReqDataMslots, docsIfCmtsUpChnlCtrExtUsedCntnReqDataMslots, docsIfCmtsUpChnlCtrExtCollCntnReqDataMslots, docsIfCmtsUpChnlCtrExtTotalCntnInitMaintMslots, docsIfCmtsUpChnlCtrExtUsedCntnInitMaintMslots, docsIfCmtsUpChnlCtrExtCollCntnInitMaintMslots, docsIfDownChannelStorageType, docsIfQosProfStorageType]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
