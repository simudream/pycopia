# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, transmission
from SNMPv2_TC import TEXTUAL_CONVENTION

class ADSL2_LINE_TC_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/ADSL2-LINE-TC-MIB'
	conformance = 4
	name = 'ADSL2-LINE-TC-MIB'
	language = 2
	description = 'This MIB Module provides Textual Conventions to be\nused by the ADSL2-LINE-MIB module for the purpose of\nmanaging ADSL, ADSL2, and ADSL2+ lines.\n\nCopyright (C) The Internet Society (2006).  This version of\nthis MIB module is part of RFC 4706: see the RFC itself for\nfull legal notices.'

# nodes
class adsl2TCMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 238, 2])
	name = 'adsl2TCMIB'


# macros
# types 

class Adsl2Unit(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'atuc'), Enum(2, 'atur')]


class Adsl2Direction(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'upstream'), Enum(2, 'downstream')]


class Adsl2TransmissionModeType(pycopia.SMI.Basetypes.BITS):
	status = 1
	enumerations = [Enum(0, 'ansit1413'), Enum(1, 'etsi'), Enum(2, 'g9921PotsNonOverlapped'), Enum(3, 'g9921PotsOverlapped'), Enum(4, 'g9921IsdnNonOverlapped'), Enum(5, 'g9921isdnOverlapped'), Enum(6, 'g9921tcmIsdnNonOverlapped'), Enum(7, 'g9921tcmIsdnOverlapped'), Enum(8, 'g9922potsNonOverlapped'), Enum(9, 'g9922potsOverlapped'), Enum(10, 'g9922tcmIsdnNonOverlapped'), Enum(11, 'g9922tcmIsdnOverlapped'), Enum(12, 'g9921tcmIsdnSymmetric'), Enum(13, 'reserved1'), Enum(14, 'reserved2'), Enum(15, 'reserved3'), Enum(16, 'reserved4'), Enum(17, 'reserved5'), Enum(18, 'g9923PotsNonOverlapped'), Enum(19, 'g9923PotsOverlapped'), Enum(20, 'g9923IsdnNonOverlapped'), Enum(21, 'g9923isdnOverlapped'), Enum(22, 'reserved6'), Enum(23, 'reserved7'), Enum(24, 'g9924potsNonOverlapped'), Enum(25, 'g9924potsOverlapped'), Enum(26, 'reserved8'), Enum(27, 'reserved9'), Enum(28, 'g9923AnnexIAllDigNonOverlapped'), Enum(29, 'g9923AnnexIAllDigOverlapped'), Enum(30, 'g9923AnnexJAllDigNonOverlapped'), Enum(31, 'g9923AnnexJAllDigOverlapped'), Enum(32, 'g9924AnnexIAllDigNonOverlapped'), Enum(33, 'g9924AnnexIAllDigOverlapped'), Enum(34, 'g9923AnnexLMode1NonOverlapped'), Enum(35, 'g9923AnnexLMode2NonOverlapped'), Enum(36, 'g9923AnnexLMode3Overlapped'), Enum(37, 'g9923AnnexLMode4Overlapped'), Enum(38, 'g9923AnnexMPotsNonOverlapped'), Enum(39, 'g9923AnnexMPotsOverlapped'), Enum(40, 'g9925PotsNonOverlapped'), Enum(41, 'g9925PotsOverlapped'), Enum(42, 'g9925IsdnNonOverlapped'), Enum(43, 'g9925isdnOverlapped'), Enum(44, 'reserved10'), Enum(45, 'reserved11'), Enum(46, 'g9925AnnexIAllDigNonOverlapped'), Enum(47, 'g9925AnnexIAllDigOverlapped'), Enum(48, 'g9925AnnexJAllDigNonOverlapped'), Enum(49, 'g9925AnnexJAllDigOverlapped'), Enum(50, 'g9925AnnexMPotsNonOverlapped'), Enum(51, 'g9925AnnexMPotsOverlapped'), Enum(52, 'reserved12'), Enum(53, 'reserved13'), Enum(54, 'reserved14'), Enum(55, 'reserved15')]


class Adsl2RaMode(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'manual'), Enum(2, 'raInit'), Enum(3, 'dynamicRa')]


class Adsl2InitResult(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(0, 'noFail'), Enum(1, 'configError'), Enum(2, 'configNotFeasible'), Enum(3, 'commFail'), Enum(4, 'noPeerAtu'), Enum(5, 'otherCause')]


class Adsl2OperationModes(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'defMode'), Enum(2, 'adsl'), Enum(8, 'g9923PotsNonOverlapped'), Enum(9, 'g9923PotsOverlapped'), Enum(10, 'g9923IsdnNonOverlapped'), Enum(11, 'g9923isdnOverlapped'), Enum(14, 'g9924potsNonOverlapped'), Enum(15, 'g9924potsOverlapped'), Enum(18, 'g9923AnnexIAllDigNonOverlapped'), Enum(19, 'g9923AnnexIAllDigOverlapped'), Enum(20, 'g9923AnnexJAllDigNonOverlapped'), Enum(21, 'g9923AnnexJAllDigOverlapped'), Enum(22, 'g9924AnnexIAllDigNonOverlapped'), Enum(23, 'g9924AnnexIAllDigOverlapped'), Enum(24, 'g9923AnnexLMode1NonOverlapped'), Enum(25, 'g9923AnnexLMode2NonOverlapped'), Enum(26, 'g9923AnnexLMode3Overlapped'), Enum(27, 'g9923AnnexLMode4Overlapped'), Enum(28, 'g9923AnnexMPotsNonOverlapped'), Enum(29, 'g9923AnnexMPotsOverlapped'), Enum(30, 'g9925PotsNonOverlapped'), Enum(31, 'g9925PotsOverlapped'), Enum(32, 'g9925IsdnNonOverlapped'), Enum(33, 'g9925isdnOverlapped'), Enum(36, 'g9925AnnexIAllDigNonOverlapped'), Enum(37, 'g9925AnnexIAllDigOverlapped'), Enum(38, 'g9925AnnexJAllDigNonOverlapped'), Enum(39, 'g9925AnnexJAllDigOverlapped'), Enum(40, 'g9925AnnexMPotsNonOverlapped'), Enum(41, 'g9925AnnexMPotsOverlapped')]


class Adsl2PowerMngState(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'l0'), Enum(2, 'l1'), Enum(3, 'l2'), Enum(4, 'l3')]


class Adsl2ConfPmsForce(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(0, 'l3toL0'), Enum(2, 'l0toL2'), Enum(3, 'l0orL2toL3')]


class Adsl2LConfProfPmMode(pycopia.SMI.Basetypes.BITS):
	status = 1
	enumerations = [Enum(0, 'allowTransitionsToIdle'), Enum(1, 'allowTransitionsToLowPower')]


class Adsl2LineLdsf(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(0, 'inhibit'), Enum(1, 'force')]


class Adsl2LdsfResult(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'none'), Enum(2, 'success'), Enum(3, 'inProgress'), Enum(4, 'unsupported'), Enum(5, 'cannotRun'), Enum(6, 'aborted'), Enum(7, 'failed'), Enum(8, 'illegalMode'), Enum(9, 'adminUp'), Enum(10, 'tableFull'), Enum(11, 'noResources')]


class Adsl2SymbolProtection(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'noProtection'), Enum(2, 'halfSymbol'), Enum(3, 'singleSymbol'), Enum(4, 'twoSymbols'), Enum(5, 'threeSymbols'), Enum(6, 'fourSymbols'), Enum(7, 'fiveSymbols'), Enum(8, 'sixSymbols'), Enum(9, 'sevenSymbols'), Enum(10, 'eightSymbols'), Enum(11, 'nineSymbols'), Enum(12, 'tenSymbols'), Enum(13, 'elevenSymbols'), Enum(14, 'twelveSymbols'), Enum(15, 'thirteeSymbols'), Enum(16, 'fourteenSymbols'), Enum(17, 'fifteenSymbols'), Enum(18, 'sixteenSymbols')]


class Adsl2MaxBer(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'eminus3'), Enum(2, 'eminus5'), Enum(3, 'eminus7')]


class Adsl2ScMaskDs(pycopia.SMI.Basetypes.OctetString):
	status = 1
	ranges = Ranges(Range(0, 64))


class Adsl2ScMaskUs(pycopia.SMI.Basetypes.OctetString):
	status = 1
	ranges = Ranges(Range(0, 8))


class Adsl2RfiDs(pycopia.SMI.Basetypes.OctetString):
	status = 1
	ranges = Ranges(Range(0, 64))


class Adsl2PsdMaskDs(pycopia.SMI.Basetypes.OctetString):
	status = 1
	ranges = Ranges(Range(0, 96))


class Adsl2PsdMaskUs(pycopia.SMI.Basetypes.OctetString):
	status = 1
	ranges = Ranges(Range(0, 12))


class Adsl2Tssi(pycopia.SMI.Basetypes.OctetString):
	status = 1
	ranges = Ranges(Range(0, 96))


class Adsl2LastTransmittedState(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(0, 'atucG9941'), Enum(1, 'atucQuiet1'), Enum(2, 'atucComb1'), Enum(3, 'atucQuiet2'), Enum(4, 'atucComb2'), Enum(5, 'atucIcomb1'), Enum(6, 'atucLineprob'), Enum(7, 'atucQuiet3'), Enum(8, 'atucComb3'), Enum(9, 'atucIComb2'), Enum(10, 'atucMsgfmt'), Enum(11, 'atucMsgpcb'), Enum(12, 'atucQuiet4'), Enum(13, 'atucReverb1'), Enum(14, 'atucTref1'), Enum(15, 'atucReverb2'), Enum(16, 'atucEct'), Enum(17, 'atucReverb3'), Enum(18, 'atucTref2'), Enum(19, 'atucReverb4'), Enum(20, 'atucSegue1'), Enum(21, 'atucMsg1'), Enum(22, 'atucReverb5'), Enum(23, 'atucSegue2'), Enum(24, 'atucMedley'), Enum(25, 'atucExchmarker'), Enum(26, 'atucMsg2'), Enum(27, 'atucReverb6'), Enum(28, 'atucSegue3'), Enum(29, 'atucParams'), Enum(30, 'atucReverb7'), Enum(31, 'atucSegue4'), Enum(32, 'atucShowtime'), Enum(100, 'aturG9941'), Enum(101, 'aturQuiet1'), Enum(102, 'aturComb1'), Enum(103, 'aturQuiet2'), Enum(104, 'aturComb2'), Enum(105, 'aturIcomb1'), Enum(106, 'aturLineprob'), Enum(107, 'aturQuiet3'), Enum(108, 'aturComb3'), Enum(109, 'aturIcomb2'), Enum(110, 'aturMsgfmt'), Enum(111, 'aturMsgpcb'), Enum(112, 'aturReverb1'), Enum(113, 'aturQuiet4'), Enum(114, 'aturReverb2'), Enum(115, 'aturQuiet5'), Enum(116, 'aturReverb3'), Enum(117, 'aturEct'), Enum(118, 'aturReverb4'), Enum(119, 'aturSegue1'), Enum(120, 'aturReverb5'), Enum(121, 'aturSegue2'), Enum(122, 'aturMsg1'), Enum(123, 'aturMedley'), Enum(124, 'aturExchmarker'), Enum(125, 'aturMsg2'), Enum(126, 'aturReverb6'), Enum(127, 'aturSegue3'), Enum(128, 'aturParams'), Enum(129, 'aturReverb7'), Enum(130, 'aturSegue4'), Enum(131, 'aturShowtime')]


class Adsl2LineStatus(pycopia.SMI.Basetypes.BITS):
	status = 1
	enumerations = [Enum(0, 'noDefect'), Enum(1, 'lossOfFrame'), Enum(2, 'lossOfSignal'), Enum(3, 'lossOfPower'), Enum(4, 'initFailure')]


class Adsl2ChAtmStatus(pycopia.SMI.Basetypes.BITS):
	status = 1
	enumerations = [Enum(0, 'noDefect'), Enum(1, 'noCellDelineation'), Enum(2, 'lossOfCellDelineation')]


class Adsl2ChPtmStatus(pycopia.SMI.Basetypes.BITS):
	status = 1
	enumerations = [Enum(0, 'noDefect'), Enum(1, 'outOfSync')]

# scalars 
# columns
# rows 
# notifications (traps) 
# groups 
# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
