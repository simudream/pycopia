# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, NOTIFICATION_TYPE, OBJECT_TYPE, Gauge32, Counter32, Integer32, transmission
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP, NOTIFICATION_GROUP
from SNMPv2_TC import TEXTUAL_CONVENTION, RowStatus, TimeStamp, StorageType
from IF_MIB import ifIndex, InterfaceIndex
from SNMP_FRAMEWORK_MIB import SnmpAdminString

class APS_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/APS-MIB'
	name = 'APS-MIB'
	language = 2
	description = 'This management information module supports the configuration\nand management of SONET linear APS groups. The definitions and\ndescriptions used in this MIB have been derived from\nSynchronous Optical Network (SONET) Transport Systems:\nCommon Generic Criteria, GR-253-CORE Issue 3, September 2000,\nsection 5.3. The MIB is also consistent with the Multiplex\nSection Protection (MSP) protocol as specified in ITU-T\nRecommendation G.783, Characteristics of synchronous digital\nhierarchy (SDH) equipment function blocks, Annex A and B.\n\nCopyright (C) The Internet Society (2003).  This version of\nthis MIB module is part of RFC 3498; see the RFC itself for\nfull legal notices.'

# nodes
class apsMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49])
	name = 'apsMIB'

class apsMIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1])
	name = 'apsMIBObjects'

class apsConfig(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 1])
	name = 'apsConfig'

class apsMap(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 3])
	name = 'apsMap'

class apsMIBNotifications(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 2])
	name = 'apsMIBNotifications'

class apsNotificationsPrefix(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 2, 0])
	name = 'apsNotificationsPrefix'

class apsMIBConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 3])
	name = 'apsMIBConformance'

class apsGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 3, 1])
	name = 'apsGroups'

class apsCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 3, 2])
	name = 'apsCompliances'


# macros
# types 

class ApsK1K2(pycopia.SMI.Basetypes.OctetString):
	status = 1
	ranges = Ranges(Range(2, 2))


class ApsSwitchCommand(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'noCmd'), Enum(2, 'clear'), Enum(3, 'lockoutOfProtection'), Enum(4, 'forcedSwitchWorkToProtect'), Enum(5, 'forcedSwitchProtectToWork'), Enum(6, 'manualSwitchWorkToProtect'), Enum(7, 'manualSwitchProtectToWork'), Enum(8, 'exercise')]


class ApsControlCommand(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'noCmd'), Enum(2, 'lockoutWorkingChannel'), Enum(3, 'clearLockoutWorkingChannel')]

# scalars 
class apsConfigGroups(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class apsChanLTEs(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 3, 1])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class apsNotificationEnable(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.BITS


# columns
class apsConfigName(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 1, 2, 1, 1])
	syntaxobject = SnmpAdminString


class apsConfigRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 1, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class apsConfigMode(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 1, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'onePlusOne'), Enum(2, 'oneToN'), Enum(3, 'onePlusOneCompatible'), Enum(4, 'onePlusOneOptimized')]


class apsConfigRevert(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 1, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'nonrevertive'), Enum(2, 'revertive')]


class apsConfigDirection(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 1, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'unidirectional'), Enum(2, 'bidirectional')]


class apsConfigExtraTraffic(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 1, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class apsConfigSdBerThreshold(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 1, 2, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class apsConfigSfBerThreshold(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 1, 2, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class apsConfigWaitToRestore(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 1, 2, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class apsConfigCreationTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 1, 2, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class apsConfigStorageType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 1, 2, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


class apsStatusK1K2Rcv(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 2, 1, 1])
	syntaxobject = ApsK1K2


class apsStatusK1K2Trans(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 2, 1, 2])
	syntaxobject = ApsK1K2


class apsStatusCurrent(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.BITS


class apsStatusModeMismatches(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class apsStatusChannelMismatches(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class apsStatusPSBFs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class apsStatusFEPLFs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 2, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class apsStatusSwitchedChannel(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 2, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class apsStatusDiscontinuityTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 2, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class apsMapGroupName(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 3, 2, 1, 2])
	syntaxobject = SnmpAdminString


class apsMapChanNumber(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 3, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class apsChanConfigGroupName(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 4, 1, 1])
	syntaxobject = SnmpAdminString


class apsChanConfigNumber(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 4, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class apsChanConfigRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 4, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class apsChanConfigIfIndex(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 4, 1, 4])
	syntaxobject = InterfaceIndex


class apsChanConfigPriority(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 4, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'low'), Enum(2, 'high')]


class apsChanConfigStorageType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 4, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


class apsCommandSwitch(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 5, 1, 1])
	syntaxobject = ApsSwitchCommand


class apsCommandControl(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 5, 1, 2])
	syntaxobject = ApsControlCommand


class apsChanStatusCurrent(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 6, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.BITS


class apsChanStatusSignalDegrades(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 6, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class apsChanStatusSignalFailures(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 6, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class apsChanStatusSwitchovers(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 6, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class apsChanStatusLastSwitchover(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 6, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class apsChanStatusSwitchoverSeconds(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 6, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class apsChanStatusDiscontinuityTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 6, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


# rows 
class apsConfigEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([apsConfigName], True)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 1, 2, 1])
	access = 2
	rowstatus = apsConfigRowStatus
	columns = {'apsConfigName': apsConfigName, 'apsConfigRowStatus': apsConfigRowStatus, 'apsConfigMode': apsConfigMode, 'apsConfigRevert': apsConfigRevert, 'apsConfigDirection': apsConfigDirection, 'apsConfigExtraTraffic': apsConfigExtraTraffic, 'apsConfigSdBerThreshold': apsConfigSdBerThreshold, 'apsConfigSfBerThreshold': apsConfigSfBerThreshold, 'apsConfigWaitToRestore': apsConfigWaitToRestore, 'apsConfigCreationTime': apsConfigCreationTime, 'apsConfigStorageType': apsConfigStorageType}


from APS_MIB import apsConfigName
class apsStatusEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([apsConfigName], True)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 2, 1])
	access = 2
	columns = {'apsStatusK1K2Rcv': apsStatusK1K2Rcv, 'apsStatusK1K2Trans': apsStatusK1K2Trans, 'apsStatusCurrent': apsStatusCurrent, 'apsStatusModeMismatches': apsStatusModeMismatches, 'apsStatusChannelMismatches': apsStatusChannelMismatches, 'apsStatusPSBFs': apsStatusPSBFs, 'apsStatusFEPLFs': apsStatusFEPLFs, 'apsStatusSwitchedChannel': apsStatusSwitchedChannel, 'apsStatusDiscontinuityTime': apsStatusDiscontinuityTime}


class apsMapEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 3, 2, 1])
	access = 2
	columns = {'apsMapGroupName': apsMapGroupName, 'apsMapChanNumber': apsMapChanNumber}


class apsChanConfigEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([apsChanConfigGroupName, apsChanConfigNumber], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 4, 1])
	access = 2
	rowstatus = apsChanConfigRowStatus
	columns = {'apsChanConfigGroupName': apsChanConfigGroupName, 'apsChanConfigNumber': apsChanConfigNumber, 'apsChanConfigRowStatus': apsChanConfigRowStatus, 'apsChanConfigIfIndex': apsChanConfigIfIndex, 'apsChanConfigPriority': apsChanConfigPriority, 'apsChanConfigStorageType': apsChanConfigStorageType}


class apsCommandEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([apsChanConfigGroupName, apsChanConfigNumber], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 5, 1])
	access = 2
	columns = {'apsCommandSwitch': apsCommandSwitch, 'apsCommandControl': apsCommandControl}


from APS_MIB import apsChanConfigGroupName
from APS_MIB import apsChanConfigNumber
class apsChanStatusEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([apsChanConfigGroupName, apsChanConfigNumber], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 1, 6, 1])
	access = 2
	columns = {'apsChanStatusCurrent': apsChanStatusCurrent, 'apsChanStatusSignalDegrades': apsChanStatusSignalDegrades, 'apsChanStatusSignalFailures': apsChanStatusSignalFailures, 'apsChanStatusSwitchovers': apsChanStatusSwitchovers, 'apsChanStatusLastSwitchover': apsChanStatusLastSwitchover, 'apsChanStatusSwitchoverSeconds': apsChanStatusSwitchoverSeconds, 'apsChanStatusDiscontinuityTime': apsChanStatusDiscontinuityTime}


# notifications (traps) 
class apsEventSwitchover(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 2, 0, 1])

class apsEventModeMismatch(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 2, 0, 2])

class apsEventChannelMismatch(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 2, 0, 3])

class apsEventPSBF(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 2, 0, 4])

class apsEventFEPLF(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 2, 0, 5])

# groups 
class apsConfigGeneral(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 3, 1, 1])
	group = [apsConfigMode, apsConfigRevert, apsConfigDirection, apsConfigExtraTraffic, apsConfigSdBerThreshold, apsConfigSfBerThreshold, apsConfigCreationTime, apsConfigRowStatus, apsConfigStorageType, apsNotificationEnable]

class apsConfigWtr(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 3, 1, 2])
	group = [apsConfigWaitToRestore]

class apsCommandOnePlusOne(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 3, 1, 3])
	group = [apsCommandSwitch]

class apsCommandOneToN(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 3, 1, 4])
	group = [apsCommandSwitch, apsCommandControl]

class apsStatusGeneral(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 3, 1, 5])
	group = [apsStatusK1K2Rcv, apsStatusK1K2Trans, apsStatusCurrent, apsStatusModeMismatches, apsStatusChannelMismatches, apsStatusPSBFs, apsStatusFEPLFs, apsStatusSwitchedChannel, apsStatusDiscontinuityTime]

class apsChanGeneral(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 3, 1, 6])
	group = [apsChanConfigIfIndex, apsChanConfigRowStatus, apsChanConfigStorageType, apsChanStatusCurrent, apsChanStatusSignalDegrades, apsChanStatusSignalFailures, apsChanStatusSwitchovers, apsChanStatusLastSwitchover, apsChanStatusSwitchoverSeconds, apsChanStatusDiscontinuityTime]

class apsChanOneToN(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 3, 1, 7])
	group = [apsChanConfigPriority]

class apsTotalsGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 3, 1, 8])
	group = [apsConfigGroups, apsChanLTEs]

class apsMapGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 3, 1, 9])
	group = [apsMapGroupName, apsMapChanNumber]

class apsEventGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 49, 3, 1, 10])
	group = [apsEventSwitchover, apsEventModeMismatch, apsEventChannelMismatch, apsEventPSBF, apsEventFEPLF]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
