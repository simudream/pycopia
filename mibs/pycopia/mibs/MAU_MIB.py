# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import Counter32, Integer32, Counter64, OBJECT_TYPE, MODULE_IDENTITY, NOTIFICATION_TYPE, OBJECT_IDENTITY, mib_2
from SNMPv2_CONF import OBJECT_GROUP, MODULE_COMPLIANCE, NOTIFICATION_GROUP
from SNMPv2_TC import TruthValue, AutonomousType, TEXTUAL_CONVENTION
from IF_MIB import InterfaceIndex

class MAU_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/MAU-MIB'
	conformance = 4
	name = 'MAU-MIB'
	language = 2
	description = "Management information for 802.3 MAUs.\n\nThe following reference is used throughout\nthis MIB module:\n\n[IEEE 802.3 Std] refers to:\n   IEEE Std 802.3, 2002 Edition: 'IEEE Standard\n   for Information technology -\n   Telecommunications and information exchange\n   between systems - Local and metropolitan\n   area networks - Specific requirements -\n   Part 3: Carrier sense multiple access with\n   collision detection (CSMA/CD) access method\n   and physical layer specifications', as\n   amended by IEEE Std 802.3ae-2002:\n   'Amendment: Media Access Control (MAC)\n   Parameters, Physical Layer, and Management\n   Parameters for 10 Gb/s Operation', August,\n   2002.\n\nOf particular interest is Clause 30, '10Mb/s,\n100Mb/s, 1000Mb/s and 10 Gb/s Management'.\n\nCopyright (C) The Internet Society (2003).  This\nversion of this MIB module is part of RFC 3636;\nsee the RFC itself for full legal notices."

# nodes
class snmpDot3MauMgt(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26])
	name = 'snmpDot3MauMgt'

class snmpDot3MauTraps(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 0])
	name = 'snmpDot3MauTraps'

class dot3RpMauBasicGroup(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 1])
	name = 'dot3RpMauBasicGroup'

class dot3IfMauBasicGroup(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 2])
	name = 'dot3IfMauBasicGroup'

class dot3BroadMauBasicGroup(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 3])
	name = 'dot3BroadMauBasicGroup'

class dot3MauType(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 4])
	name = 'dot3MauType'

class dot3MauTypeAUI(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 4, 1])
	name = 'dot3MauTypeAUI'

class dot3MauType10Base5(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 4, 2])
	name = 'dot3MauType10Base5'

class dot3MauTypeFoirl(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 4, 3])
	name = 'dot3MauTypeFoirl'

class dot3MauType10Base2(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 4, 4])
	name = 'dot3MauType10Base2'

class dot3MauType10BaseT(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 4, 5])
	name = 'dot3MauType10BaseT'

class dot3MauType10BaseFP(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 4, 6])
	name = 'dot3MauType10BaseFP'

class dot3MauType10BaseFB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 4, 7])
	name = 'dot3MauType10BaseFB'

class dot3MauType10BaseFL(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 4, 8])
	name = 'dot3MauType10BaseFL'

class dot3MauType10Broad36(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 4, 9])
	name = 'dot3MauType10Broad36'

class dot3MauType10BaseTHD(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 4, 10])
	name = 'dot3MauType10BaseTHD'

class dot3MauType10BaseTFD(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 4, 11])
	name = 'dot3MauType10BaseTFD'

class dot3MauType10BaseFLHD(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 4, 12])
	name = 'dot3MauType10BaseFLHD'

class dot3MauType10BaseFLFD(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 4, 13])
	name = 'dot3MauType10BaseFLFD'

class dot3MauType100BaseT4(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 4, 14])
	name = 'dot3MauType100BaseT4'

class dot3MauType100BaseTXHD(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 4, 15])
	name = 'dot3MauType100BaseTXHD'

class dot3MauType100BaseTXFD(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 4, 16])
	name = 'dot3MauType100BaseTXFD'

class dot3MauType100BaseFXHD(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 4, 17])
	name = 'dot3MauType100BaseFXHD'

class dot3MauType100BaseFXFD(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 4, 18])
	name = 'dot3MauType100BaseFXFD'

class dot3MauType100BaseT2HD(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 4, 19])
	name = 'dot3MauType100BaseT2HD'

class dot3MauType100BaseT2FD(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 4, 20])
	name = 'dot3MauType100BaseT2FD'

class dot3MauType1000BaseXHD(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 4, 21])
	name = 'dot3MauType1000BaseXHD'

class dot3MauType1000BaseXFD(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 4, 22])
	name = 'dot3MauType1000BaseXFD'

class dot3MauType1000BaseLXHD(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 4, 23])
	name = 'dot3MauType1000BaseLXHD'

class dot3MauType1000BaseLXFD(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 4, 24])
	name = 'dot3MauType1000BaseLXFD'

class dot3MauType1000BaseSXHD(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 4, 25])
	name = 'dot3MauType1000BaseSXHD'

class dot3MauType1000BaseSXFD(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 4, 26])
	name = 'dot3MauType1000BaseSXFD'

class dot3MauType1000BaseCXHD(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 4, 27])
	name = 'dot3MauType1000BaseCXHD'

class dot3MauType1000BaseCXFD(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 4, 28])
	name = 'dot3MauType1000BaseCXFD'

class dot3MauType1000BaseTHD(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 4, 29])
	name = 'dot3MauType1000BaseTHD'

class dot3MauType1000BaseTFD(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 4, 30])
	name = 'dot3MauType1000BaseTFD'

class dot3MauType10GigBaseX(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 4, 31])
	name = 'dot3MauType10GigBaseX'

class dot3MauType10GigBaseLX4(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 4, 32])
	name = 'dot3MauType10GigBaseLX4'

class dot3MauType10GigBaseR(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 4, 33])
	name = 'dot3MauType10GigBaseR'

class dot3MauType10GigBaseER(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 4, 34])
	name = 'dot3MauType10GigBaseER'

class dot3MauType10GigBaseLR(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 4, 35])
	name = 'dot3MauType10GigBaseLR'

class dot3MauType10GigBaseSR(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 4, 36])
	name = 'dot3MauType10GigBaseSR'

class dot3MauType10GigBaseW(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 4, 37])
	name = 'dot3MauType10GigBaseW'

class dot3MauType10GigBaseEW(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 4, 38])
	name = 'dot3MauType10GigBaseEW'

class dot3MauType10GigBaseLW(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 4, 39])
	name = 'dot3MauType10GigBaseLW'

class dot3MauType10GigBaseSW(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 4, 40])
	name = 'dot3MauType10GigBaseSW'

class dot3IfMauAutoNegGroup(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 5])
	name = 'dot3IfMauAutoNegGroup'

class mauMod(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 6])
	name = 'mauMod'

class mauModConf(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 6, 1])
	name = 'mauModConf'

class mauModCompls(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 6, 1, 1])
	name = 'mauModCompls'

class mauModObjGrps(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 6, 1, 2])
	name = 'mauModObjGrps'

class mauModNotGrps(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 6, 1, 3])
	name = 'mauModNotGrps'


# macros
# types 

class JackType(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'other'), Enum(2, 'rj45'), Enum(3, 'rj45S'), Enum(4, 'db9'), Enum(5, 'bnc'), Enum(6, 'fAUI'), Enum(7, 'mAUI'), Enum(8, 'fiberSC'), Enum(9, 'fiberMIC'), Enum(10, 'fiberST'), Enum(11, 'telco'), Enum(12, 'mtrj'), Enum(13, 'hssdc'), Enum(14, 'fiberLC')]

# scalars 
# columns
class rpMauGroupIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 1, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rpMauPortIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 1, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rpMauIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 1, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rpMauType(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 1, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.AutonomousType


class rpMauStatus(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 1, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'unknown'), Enum(3, 'operational'), Enum(4, 'standby'), Enum(5, 'shutdown'), Enum(6, 'reset')]


class rpMauMediaAvailable(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 1, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'unknown'), Enum(3, 'available'), Enum(4, 'notAvailable'), Enum(5, 'remoteFault'), Enum(6, 'invalidSignal'), Enum(7, 'remoteJabber'), Enum(8, 'remoteLinkLoss'), Enum(9, 'remoteTest'), Enum(10, 'offline'), Enum(11, 'autoNegError')]


class rpMauMediaAvailableStateExits(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 1, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rpMauJabberState(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 1, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'unknown'), Enum(3, 'noJabber'), Enum(4, 'jabbering')]


class rpMauJabberingStateEnters(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 1, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rpMauFalseCarriers(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 1, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class rpJackIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 1, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class rpJackType(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 1, 2, 1, 2])
	syntaxobject = JackType


class ifMauIfIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 2, 1, 1, 1])
	syntaxobject = InterfaceIndex


class ifMauIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 2, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ifMauType(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 2, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.AutonomousType


class ifMauStatus(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 2, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'unknown'), Enum(3, 'operational'), Enum(4, 'standby'), Enum(5, 'shutdown'), Enum(6, 'reset')]


class ifMauMediaAvailable(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 2, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'unknown'), Enum(3, 'available'), Enum(4, 'notAvailable'), Enum(5, 'remoteFault'), Enum(6, 'invalidSignal'), Enum(7, 'remoteJabber'), Enum(8, 'remoteLinkLoss'), Enum(9, 'remoteTest'), Enum(10, 'offline'), Enum(11, 'autoNegError'), Enum(12, 'pmdLinkFault'), Enum(13, 'wisFrameLoss'), Enum(14, 'wisSignalLoss'), Enum(15, 'pcsLinkFault'), Enum(16, 'excessiveBER'), Enum(17, 'dxsLinkFault'), Enum(18, 'pxsLinkFault')]


class ifMauMediaAvailableStateExits(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 2, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ifMauJabberState(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 2, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'unknown'), Enum(3, 'noJabber'), Enum(4, 'jabbering')]


class ifMauJabberingStateEnters(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 2, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ifMauFalseCarriers(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 2, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ifMauTypeList(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 2, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ifMauDefaultType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 2, 1, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.AutonomousType


class ifMauAutoNegSupported(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 2, 1, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class ifMauTypeListBits(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 2, 1, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.BITS


class ifMauHCFalseCarriers(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 2, 1, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class ifJackIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 2, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ifJackType(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 2, 2, 1, 2])
	syntaxobject = JackType


class broadMauIfIndex(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 3, 1, 1, 1])
	syntaxobject = InterfaceIndex


class broadMauIndex(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 3, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class broadMauXmtRcvSplitType(ColumnObject):
	status = 2
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 3, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'single'), Enum(3, 'dual')]


class broadMauXmtCarrierFreq(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 3, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class broadMauTranslationFreq(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 3, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ifMauAutoNegAdminStatus(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 5, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class ifMauAutoNegRemoteSignaling(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 5, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'detected'), Enum(2, 'notdetected')]


class ifMauAutoNegConfig(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 5, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'configuring'), Enum(3, 'complete'), Enum(4, 'disabled'), Enum(5, 'parallelDetectFail')]


class ifMauAutoNegCapability(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 5, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ifMauAutoNegCapAdvertised(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 5, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ifMauAutoNegCapReceived(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 5, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ifMauAutoNegRestart(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 5, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'restart'), Enum(2, 'norestart')]


class ifMauAutoNegCapabilityBits(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 5, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.BITS


class ifMauAutoNegCapAdvertisedBits(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 5, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.BITS


class ifMauAutoNegCapReceivedBits(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 5, 1, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.BITS


class ifMauAutoNegRemoteFaultAdvertised(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 5, 1, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'noError'), Enum(2, 'offline'), Enum(3, 'linkFailure'), Enum(4, 'autoNegError')]


class ifMauAutoNegRemoteFaultReceived(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 5, 1, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'noError'), Enum(2, 'offline'), Enum(3, 'linkFailure'), Enum(4, 'autoNegError')]


# rows 
class rpMauEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([rpMauGroupIndex, rpMauPortIndex, rpMauIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 1, 1, 1])
	access = 2
	columns = {'rpMauGroupIndex': rpMauGroupIndex, 'rpMauPortIndex': rpMauPortIndex, 'rpMauIndex': rpMauIndex, 'rpMauType': rpMauType, 'rpMauStatus': rpMauStatus, 'rpMauMediaAvailable': rpMauMediaAvailable, 'rpMauMediaAvailableStateExits': rpMauMediaAvailableStateExits, 'rpMauJabberState': rpMauJabberState, 'rpMauJabberingStateEnters': rpMauJabberingStateEnters, 'rpMauFalseCarriers': rpMauFalseCarriers}


class rpJackEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([rpMauGroupIndex, rpMauPortIndex, rpMauIndex, rpJackIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 1, 2, 1])
	access = 2
	columns = {'rpJackIndex': rpJackIndex, 'rpJackType': rpJackType}


class ifMauEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifMauIfIndex, ifMauIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 2, 1, 1])
	access = 2
	columns = {'ifMauIfIndex': ifMauIfIndex, 'ifMauIndex': ifMauIndex, 'ifMauType': ifMauType, 'ifMauStatus': ifMauStatus, 'ifMauMediaAvailable': ifMauMediaAvailable, 'ifMauMediaAvailableStateExits': ifMauMediaAvailableStateExits, 'ifMauJabberState': ifMauJabberState, 'ifMauJabberingStateEnters': ifMauJabberingStateEnters, 'ifMauFalseCarriers': ifMauFalseCarriers, 'ifMauTypeList': ifMauTypeList, 'ifMauDefaultType': ifMauDefaultType, 'ifMauAutoNegSupported': ifMauAutoNegSupported, 'ifMauTypeListBits': ifMauTypeListBits, 'ifMauHCFalseCarriers': ifMauHCFalseCarriers}


class ifJackEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifMauIfIndex, ifMauIndex, ifJackIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 2, 2, 1])
	access = 2
	columns = {'ifJackIndex': ifJackIndex, 'ifJackType': ifJackType}


class broadMauBasicEntry(RowObject):
	status = 2
	index = pycopia.SMI.Objects.IndexObjects([broadMauIfIndex, broadMauIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 3, 1, 1])
	access = 2
	columns = {'broadMauIfIndex': broadMauIfIndex, 'broadMauIndex': broadMauIndex, 'broadMauXmtRcvSplitType': broadMauXmtRcvSplitType, 'broadMauXmtCarrierFreq': broadMauXmtCarrierFreq, 'broadMauTranslationFreq': broadMauTranslationFreq}


class ifMauAutoNegEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifMauIfIndex, ifMauIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 5, 1, 1])
	access = 2
	columns = {'ifMauAutoNegAdminStatus': ifMauAutoNegAdminStatus, 'ifMauAutoNegRemoteSignaling': ifMauAutoNegRemoteSignaling, 'ifMauAutoNegConfig': ifMauAutoNegConfig, 'ifMauAutoNegCapability': ifMauAutoNegCapability, 'ifMauAutoNegCapAdvertised': ifMauAutoNegCapAdvertised, 'ifMauAutoNegCapReceived': ifMauAutoNegCapReceived, 'ifMauAutoNegRestart': ifMauAutoNegRestart, 'ifMauAutoNegCapabilityBits': ifMauAutoNegCapabilityBits, 'ifMauAutoNegCapAdvertisedBits': ifMauAutoNegCapAdvertisedBits, 'ifMauAutoNegCapReceivedBits': ifMauAutoNegCapReceivedBits, 'ifMauAutoNegRemoteFaultAdvertised': ifMauAutoNegRemoteFaultAdvertised, 'ifMauAutoNegRemoteFaultReceived': ifMauAutoNegRemoteFaultReceived}


# notifications (traps) 
class rpMauJabberTrap(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 0, 1])

class ifMauJabberTrap(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 0, 2])

# groups 
class mauRpGrpBasic(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 6, 1, 2, 1])
	group = [rpMauGroupIndex, rpMauPortIndex, rpMauIndex, rpMauType, rpMauStatus, rpMauMediaAvailable, rpMauMediaAvailableStateExits, rpMauJabberState, rpMauJabberingStateEnters]

class mauRpGrp100Mbs(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 6, 1, 2, 2])
	group = [rpMauFalseCarriers]

class mauRpGrpJack(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 6, 1, 2, 3])
	group = [rpJackType]

class mauIfGrpBasic(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 6, 1, 2, 4])
	group = [ifMauIfIndex, ifMauIndex, ifMauType, ifMauStatus, ifMauMediaAvailable, ifMauMediaAvailableStateExits, ifMauJabberState, ifMauJabberingStateEnters]

class mauIfGrp100Mbs(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 6, 1, 2, 5])
	group = [ifMauFalseCarriers, ifMauTypeList, ifMauDefaultType, ifMauAutoNegSupported]

class mauIfGrpJack(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 6, 1, 2, 6])
	group = [ifJackType]

class mauIfGrpAutoNeg(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 6, 1, 2, 7])
	group = [ifMauAutoNegAdminStatus, ifMauAutoNegRemoteSignaling, ifMauAutoNegConfig, ifMauAutoNegCapability, ifMauAutoNegCapAdvertised, ifMauAutoNegCapReceived, ifMauAutoNegRestart]

class mauBroadBasic(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 6, 1, 2, 8])
	group = [broadMauIfIndex, broadMauIndex, broadMauXmtRcvSplitType, broadMauXmtCarrierFreq, broadMauTranslationFreq]

class mauIfGrpHighCapacity(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 6, 1, 2, 9])
	group = [ifMauFalseCarriers, ifMauTypeListBits, ifMauDefaultType, ifMauAutoNegSupported]

class mauIfGrpAutoNeg2(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 6, 1, 2, 10])
	group = [ifMauAutoNegAdminStatus, ifMauAutoNegRemoteSignaling, ifMauAutoNegConfig, ifMauAutoNegCapabilityBits, ifMauAutoNegCapAdvertisedBits, ifMauAutoNegCapReceivedBits, ifMauAutoNegRestart]

class mauIfGrpAutoNeg1000Mbps(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 6, 1, 2, 11])
	group = [ifMauAutoNegRemoteFaultAdvertised, ifMauAutoNegRemoteFaultReceived]

class mauIfGrpHCStats(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 6, 1, 2, 12])
	group = [ifMauHCFalseCarriers]

class rpMauNotifications(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 6, 1, 3, 1])
	group = [rpMauJabberTrap]

class ifMauNotifications(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 26, 6, 1, 3, 2])
	group = [ifMauJabberTrap]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
