# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, Counter32, Integer32, IpAddress, Gauge32, NOTIFICATION_TYPE
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from CISCO_SMI import ciscoMgmt
from SNMPv2_TC import DisplayString, TruthValue, TimeStamp, RowStatus
from IF_MIB import OwnerString

class CISCO_IP_ENCRYPTION_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/site/CISCO-IP-ENCRYPTION-MIB'
	conformance = 3
	name = 'CISCO-IP-ENCRYPTION-MIB'
	language = 2
	description = 'Used to manage the encryption feature.'

# nodes
class ciscoIpEncryptionMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52])
	name = 'ciscoIpEncryptionMIB'

class ciscoIpEncryptionMIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 1])
	name = 'ciscoIpEncryptionMIBObjects'

class cieConfig(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 1, 1])
	name = 'cieConfig'

class cieEngineStatus(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 1, 2])
	name = 'cieEngineStatus'

class cieConnections(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 1, 3])
	name = 'cieConnections'

class cieTestConnection(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 1, 4])
	name = 'cieTestConnection'

class cieMIBTrapPrefix(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 2])
	name = 'cieMIBTrapPrefix'

class cieMIBTraps(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 2, 0])
	name = 'cieMIBTraps'

class cieMIBConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 3])
	name = 'cieMIBConformance'

class cieMIBCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 3, 1])
	name = 'cieMIBCompliances'

class cieMIBGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 3, 2])
	name = 'cieMIBGroups'


# macros
# types 
# scalars 
class cieConfiguredAlgorithms(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class cieEncryptionKeyTimeout(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = 'minutes'


class cieNumberOfCryptoEngines(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class cieNumberOfConnections(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 1, 3, 1])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


# columns
class cieEngineID(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 1, 2, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class cieEngineCardIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 1, 2, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class cieEnginePublicKey(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 1, 2, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class cieEsaTampered(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 1, 2, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class cieEsaAuthenticated(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 1, 2, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class cieEsaMode(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 1, 2, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enableActive'), Enum(2, 'boot'), Enum(3, 'error')]


class cieConnIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 1, 3, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class cieProtectedAddr(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 1, 3, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class cieUnprotectedAddr(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 1, 3, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class cieConnStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 1, 3, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'pendingConnection'), Enum(2, 'openConnection'), Enum(3, 'exchangeKeys'), Enum(4, 'badConnection')]


class ciePktsEncrypted(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 1, 3, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciePktsDecrypted(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 1, 3, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciePktsDropped(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 1, 3, 2, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cieLocalTimeEstablished(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 1, 3, 2, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class cieAlgorithmType(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 1, 3, 2, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'des56bitCfb64'), Enum(2, 'des56bitCfb8'), Enum(3, 'des40bitCfb64'), Enum(4, 'des40bitdesCfb8')]


class cieTestConnSerialNumber(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 1, 4, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class cieTestConnProtectedAddr(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 1, 4, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class cieTestConnUnprotectedAddr(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 1, 4, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class cieTestConnTrapOnCompletion(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 1, 4, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class cieTestConnCryptoMapName(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 1, 4, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class cieTestConnCryptoMapTagNumber(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 1, 4, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class cieTestConnSessionStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 1, 4, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'inProgress'), Enum(2, 'fail'), Enum(3, 'success'), Enum(4, 'badCryptoMapName')]


class cieTestConnEntryOwner(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 1, 4, 1, 1, 8])
	syntaxobject = OwnerString


class cieTestConnEntryStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 1, 4, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


# rows 
class cieEngineStatusEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([cieEngineID], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 1, 2, 1, 1])
	access = 2
	columns = {'cieEngineID': cieEngineID, 'cieEngineCardIndex': cieEngineCardIndex, 'cieEnginePublicKey': cieEnginePublicKey, 'cieEsaTampered': cieEsaTampered, 'cieEsaAuthenticated': cieEsaAuthenticated, 'cieEsaMode': cieEsaMode}


class cieConnEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([cieEngineID, cieConnIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 1, 3, 2, 1])
	access = 2
	columns = {'cieConnIndex': cieConnIndex, 'cieProtectedAddr': cieProtectedAddr, 'cieUnprotectedAddr': cieUnprotectedAddr, 'cieConnStatus': cieConnStatus, 'ciePktsEncrypted': ciePktsEncrypted, 'ciePktsDecrypted': ciePktsDecrypted, 'ciePktsDropped': ciePktsDropped, 'cieLocalTimeEstablished': cieLocalTimeEstablished, 'cieAlgorithmType': cieAlgorithmType}


class cieTestConnEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([cieTestConnSerialNumber], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 1, 4, 1, 1])
	access = 2
	rowstatus = cieTestConnEntryStatus
	columns = {'cieTestConnSerialNumber': cieTestConnSerialNumber, 'cieTestConnProtectedAddr': cieTestConnProtectedAddr, 'cieTestConnUnprotectedAddr': cieTestConnUnprotectedAddr, 'cieTestConnTrapOnCompletion': cieTestConnTrapOnCompletion, 'cieTestConnCryptoMapName': cieTestConnCryptoMapName, 'cieTestConnCryptoMapTagNumber': cieTestConnCryptoMapTagNumber, 'cieTestConnSessionStatus': cieTestConnSessionStatus, 'cieTestConnEntryOwner': cieTestConnEntryOwner, 'cieTestConnEntryStatus': cieTestConnEntryStatus}


# notifications (traps) 
class cieTestCompletion(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 2, 0, 1])

# groups 
class cieMIBGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 52, 3, 2, 1])
	group = [cieConfiguredAlgorithms, cieEncryptionKeyTimeout, cieNumberOfCryptoEngines, cieEngineID, cieEngineCardIndex, cieEnginePublicKey, cieEsaTampered, cieEsaAuthenticated, cieEsaMode, cieNumberOfConnections, cieProtectedAddr, cieUnprotectedAddr, cieConnStatus, ciePktsEncrypted, ciePktsDecrypted, ciePktsDropped, cieLocalTimeEstablished, cieAlgorithmType, cieTestConnProtectedAddr, cieTestConnUnprotectedAddr, cieTestConnTrapOnCompletion, cieTestConnCryptoMapName, cieTestConnCryptoMapTagNumber, cieTestConnSessionStatus, cieTestConnEntryOwner, cieTestConnEntryStatus]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
