# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, Counter64, Unsigned32, Integer32, mib_2
from SNMPv2_TC import TEXTUAL_CONVENTION

class HC_PerfHist_TC_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/HC-PerfHist-TC-MIB'
	conformance = 5
	name = 'HC-PerfHist-TC-MIB'
	language = 2
	description = 'This MIB Module provides Textual Conventions to be\nused by systems supporting 15 minute based performance\nhistory counts that require high-capacity counts.\n\nCopyright (C) The Internet Society (2004).  This version\nof this MIB module is part of RFC 3705: see the RFC\nitself for full legal notices.'

# nodes
class hcPerfHistTCMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 107])
	name = 'hcPerfHistTCMIB'


# macros
# types 

class HCPerfValidIntervals(pycopia.SMI.Basetypes.Integer32):
	status = 1
	ranges = Ranges(Range(0, 96))


class HCPerfInvalidIntervals(pycopia.SMI.Basetypes.Integer32):
	status = 1
	ranges = Ranges(Range(0, 96))


class HCPerfTimeElapsed(pycopia.SMI.Basetypes.Integer32):
	status = 1
	ranges = Ranges(Range(0, 86399))


class HCPerfIntervalThreshold(pycopia.SMI.Basetypes.Unsigned32):
	status = 1
	ranges = Ranges(Range(0, 900))


class HCPerfCurrentCount(pycopia.SMI.Basetypes.Counter64):
	status = 1


class HCPerfIntervalCount(pycopia.SMI.Basetypes.Counter64):
	status = 1


class HCPerfTotalCount(pycopia.SMI.Basetypes.Counter64):
	status = 1

# scalars 
# columns
# rows 
# notifications (traps) 
# groups 
# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
