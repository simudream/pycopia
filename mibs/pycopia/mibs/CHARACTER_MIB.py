# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, NOTIFICATION_TYPE, Counter32, Integer32, Gauge32, TimeTicks
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from RFC1213_MIB import transmission, mib_2
from SNMPv2_TC import AutonomousType, InstancePointer, TEXTUAL_CONVENTION, DisplayString
from IF_MIB import InterfaceIndex

class CHARACTER_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/CHARACTER-MIB'
	conformance = 2
	name = 'CHARACTER-MIB'
	language = 2
	description = 'The MIB module for character stream devices.'

# nodes
class char(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19])
	name = 'char'

class wellKnownProtocols(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 4])
	name = 'wellKnownProtocols'

class protocolOther(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 4, 1])
	name = 'protocolOther'

class protocolTelnet(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 4, 2])
	name = 'protocolTelnet'

class protocolRlogin(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 4, 3])
	name = 'protocolRlogin'

class protocolLat(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 4, 4])
	name = 'protocolLat'

class protocolX29(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 4, 5])
	name = 'protocolX29'

class protocolVtp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 4, 6])
	name = 'protocolVtp'

class charConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 5])
	name = 'charConformance'

class charGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 5, 1])
	name = 'charGroups'

class charCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 5, 2])
	name = 'charCompliances'


# macros
# types 

class PortIndex(pycopia.SMI.Basetypes.Integer32):
	status = 1
	format = 'd'

# scalars 
class charNumber(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


# columns
class charPortIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 2, 1, 1])
	syntaxobject = PortIndex


class charPortName(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class charPortType(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'physical'), Enum(2, 'virtual')]


class charPortHardware(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.AutonomousType


class charPortReset(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'ready'), Enum(2, 'execute')]


class charPortAdminStatus(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled'), Enum(3, 'off'), Enum(4, 'maintenance')]


class charPortOperStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 2, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'up'), Enum(2, 'down'), Enum(3, 'maintenance'), Enum(4, 'absent'), Enum(5, 'active')]


class charPortLastChange(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 2, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class charPortInFlowType(ColumnObject):
	status = 2
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 2, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'none'), Enum(2, 'xonXoff'), Enum(3, 'hardware'), Enum(4, 'ctsRts'), Enum(5, 'dsrDtr')]


class charPortOutFlowType(ColumnObject):
	status = 2
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 2, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'none'), Enum(2, 'xonXoff'), Enum(3, 'hardware'), Enum(4, 'ctsRts'), Enum(5, 'dsrDtr')]


class charPortInFlowState(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 2, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'none'), Enum(2, 'unknown'), Enum(3, 'stop'), Enum(4, 'go')]


class charPortOutFlowState(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 2, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'none'), Enum(2, 'unknown'), Enum(3, 'stop'), Enum(4, 'go')]


class charPortInCharacters(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 2, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class charPortOutCharacters(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 2, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class charPortAdminOrigin(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 2, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'dynamic'), Enum(2, 'network'), Enum(3, 'local'), Enum(4, 'none')]


class charPortSessionMaximum(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 2, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class charPortSessionNumber(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 2, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class charPortSessionIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 2, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class charPortInFlowTypes(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 2, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class charPortOutFlowTypes(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 2, 1, 20])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class charPortLowerIfIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 2, 1, 21])
	syntaxobject = InterfaceIndex


class charSessPortIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 3, 1, 1])
	syntaxobject = PortIndex


class charSessIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 3, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class charSessKill(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 3, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'ready'), Enum(2, 'execute')]


class charSessState(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 3, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'connecting'), Enum(2, 'connected'), Enum(3, 'disconnecting')]


class charSessProtocol(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 3, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.AutonomousType


class charSessOperOrigin(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 3, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'unknown'), Enum(2, 'network'), Enum(3, 'local')]


class charSessInCharacters(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 3, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class charSessOutCharacters(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 3, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class charSessConnectionId(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 3, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.InstancePointer


class charSessStartTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 3, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


# rows 
class charPortEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([charPortIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 2, 1])
	access = 2
	columns = {'charPortIndex': charPortIndex, 'charPortName': charPortName, 'charPortType': charPortType, 'charPortHardware': charPortHardware, 'charPortReset': charPortReset, 'charPortAdminStatus': charPortAdminStatus, 'charPortOperStatus': charPortOperStatus, 'charPortLastChange': charPortLastChange, 'charPortInFlowType': charPortInFlowType, 'charPortOutFlowType': charPortOutFlowType, 'charPortInFlowState': charPortInFlowState, 'charPortOutFlowState': charPortOutFlowState, 'charPortInCharacters': charPortInCharacters, 'charPortOutCharacters': charPortOutCharacters, 'charPortAdminOrigin': charPortAdminOrigin, 'charPortSessionMaximum': charPortSessionMaximum, 'charPortSessionNumber': charPortSessionNumber, 'charPortSessionIndex': charPortSessionIndex, 'charPortInFlowTypes': charPortInFlowTypes, 'charPortOutFlowTypes': charPortOutFlowTypes, 'charPortLowerIfIndex': charPortLowerIfIndex}


class charSessEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([charSessPortIndex, charSessIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 3, 1])
	access = 2
	columns = {'charSessPortIndex': charSessPortIndex, 'charSessIndex': charSessIndex, 'charSessKill': charSessKill, 'charSessState': charSessState, 'charSessProtocol': charSessProtocol, 'charSessOperOrigin': charSessOperOrigin, 'charSessInCharacters': charSessInCharacters, 'charSessOutCharacters': charSessOutCharacters, 'charSessConnectionId': charSessConnectionId, 'charSessStartTime': charSessStartTime}


# notifications (traps) 
# groups 
class charGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 19, 5, 1, 1])
	group = [charNumber, charPortIndex, charPortName, charPortType, charPortHardware, charPortReset, charPortAdminStatus, charPortOperStatus, charPortLastChange, charPortInFlowState, charPortOutFlowState, charPortAdminOrigin, charPortSessionMaximum, charPortInFlowTypes, charPortOutFlowTypes, charPortInCharacters, charPortOutCharacters, charPortSessionNumber, charPortSessionIndex, charPortLowerIfIndex, charSessPortIndex, charSessIndex, charSessKill, charSessState, charSessProtocol, charSessOperOrigin, charSessInCharacters, charSessOutCharacters, charSessConnectionId, charSessStartTime]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
