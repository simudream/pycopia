# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from SNMPv2_SMI import OBJECT_TYPE, MODULE_IDENTITY
from Q_BRIDGE_MIB import VlanIndex
from HP_ICF_OID import hpSwitch
from BRIDGE_MIB import dot1dBasePortEntry
from SNMPv2_TC import TruthValue
from HP_ICF_TC import ConfigStatus

class HP_ICF_BRIDGE(ModuleObject):
	path = '/usr/share/snmp/mibs/site/HP-ICF-BRIDGE'
	conformance = 2
	name = 'HP-ICF-BRIDGE'
	language = 2
	description = 'This MIB module contains HP proprietary\nextensions to the standard Bridge MIBs.'

# nodes
class hpicfBridge(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 12])
	name = 'hpicfBridge'

class hpicfBridgeObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 12, 1])
	name = 'hpicfBridgeObjects'

class hpicfBridgeBase(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 12, 1, 1])
	name = 'hpicfBridgeBase'

class hpicfBridgeGvrp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 12, 1, 2])
	name = 'hpicfBridgeGvrp'

class hpicfBridgeRstp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 12, 1, 4])
	name = 'hpicfBridgeRstp'

class hpicfBridgeConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 12, 2])
	name = 'hpicfBridgeConformance'

class hpicfBridgeGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 12, 2, 1])
	name = 'hpicfBridgeGroups'

class hpicfBridgeCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 12, 2, 2])
	name = 'hpicfBridgeCompliances'


# macros
# types 

class BridgeId(pycopia.SMI.Basetypes.OctetString):
	status = 1
	ranges = Ranges(Range(8, 8))

# scalars 
class hpicfBridgeMaxVlans(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 12, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpicfBridgeVlanEnable(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 12, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enable'), Enum(2, 'disable')]


class hpicfBridgePrimaryVlan(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 12, 1, 1, 3])
	syntaxobject = VlanIndex


class hpicfBridgeVlanConfigStatus(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 12, 1, 1, 4])
	syntaxobject = ConfigStatus


class hpicfBridgeRstpForceVersion(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 12, 1, 4, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(0, 'stpCompatibility'), Enum(2, 'rstpOperation'), Enum(3, 'mstpOperation')]


class hpicfBridgeRstpConfigStatus(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 12, 1, 4, 2])
	syntaxobject = ConfigStatus


class hpicfBridgeRstpProtocolVersion(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 12, 1, 4, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(0, 'ieee8021d'), Enum(2, 'ieee8021w'), Enum(3, 'ieee8021s')]


class hpicfBridgeRstpAdminStatus(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 12, 1, 4, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enable'), Enum(2, 'disable')]


# columns
class hpicfBridgeGvrpRestrictedVlanReg(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 12, 1, 2, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class hpicfBridgeRstpPortIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 12, 1, 4, 5, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpicfBridgeRstpAdminEdgePort(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 12, 1, 4, 5, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enable'), Enum(2, 'disable')]


class hpicfBridgeRstpOperEdgePort(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 12, 1, 4, 5, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enable'), Enum(2, 'disable')]


class hpicfBridgeRstpAdminPointToPointMac(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 12, 1, 4, 5, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'forceTrue'), Enum(2, 'forceFalse'), Enum(3, 'auto')]


class hpicfBridgeRstpOperPointToPointMac(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 12, 1, 4, 5, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'true'), Enum(2, 'false')]


class hpicfBridgeRstpForceBpduMigrationCheck(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 12, 1, 4, 5, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enable'), Enum(2, 'disable')]


class hpicfBridgeRstpPortPathCost(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 12, 1, 4, 5, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


# rows 
from BRIDGE_MIB import dot1dBasePort
class hpicfBridgeGvrpPortEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([dot1dBasePort], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 12, 1, 2, 1, 1])
	access = 2
	columns = {'hpicfBridgeGvrpRestrictedVlanReg': hpicfBridgeGvrpRestrictedVlanReg}


class hpicfBridgeRstpPortEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([hpicfBridgeRstpPortIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 12, 1, 4, 5, 1])
	access = 2
	columns = {'hpicfBridgeRstpPortIndex': hpicfBridgeRstpPortIndex, 'hpicfBridgeRstpAdminEdgePort': hpicfBridgeRstpAdminEdgePort, 'hpicfBridgeRstpOperEdgePort': hpicfBridgeRstpOperEdgePort, 'hpicfBridgeRstpAdminPointToPointMac': hpicfBridgeRstpAdminPointToPointMac, 'hpicfBridgeRstpOperPointToPointMac': hpicfBridgeRstpOperPointToPointMac, 'hpicfBridgeRstpForceBpduMigrationCheck': hpicfBridgeRstpForceBpduMigrationCheck, 'hpicfBridgeRstpPortPathCost': hpicfBridgeRstpPortPathCost}


# notifications (traps) 
# groups 
class hpicfBridgeVlanBaseGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 12, 2, 1, 1])
	group = [hpicfBridgeMaxVlans, hpicfBridgeVlanEnable, hpicfBridgePrimaryVlan, hpicfBridgeVlanConfigStatus]

class hpicfBridgeGvrpPortGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 12, 2, 1, 2])
	group = [hpicfBridgeGvrpRestrictedVlanReg]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
