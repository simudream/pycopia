# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, NOTIFICATION_TYPE, Counter32, Integer32, TimeTicks, mib_2
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP, NOTIFICATION_GROUP
from SNMPv2_TC import TEXTUAL_CONVENTION, MacAddress
from IF_MIB import InterfaceIndex

class BRIDGE_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/BRIDGE-MIB'
	conformance = 4
	name = 'BRIDGE-MIB'
	language = 2
	description = 'The Bridge MIB module for managing devices that support\nIEEE 802.1D.\n\nCopyright (C) The Internet Society (2005).  This version of\nthis MIB module is part of RFC 4188; see the RFC itself for\nfull legal notices.'

# nodes
class dot1dBridge(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17])
	name = 'dot1dBridge'

class dot1dNotifications(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 0])
	name = 'dot1dNotifications'

class dot1dBase(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 1])
	name = 'dot1dBase'

class dot1dStp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 2])
	name = 'dot1dStp'

class dot1dSr(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 3])
	name = 'dot1dSr'

class dot1dTp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 4])
	name = 'dot1dTp'

class dot1dStatic(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 5])
	name = 'dot1dStatic'

class dot1dConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 8])
	name = 'dot1dConformance'

class dot1dGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 8, 1])
	name = 'dot1dGroups'

class dot1dCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 8, 2])
	name = 'dot1dCompliances'


# macros
# types 

class BridgeId(pycopia.SMI.Basetypes.OctetString):
	status = 1
	ranges = Ranges(Range(8, 8))


class Timeout(pycopia.SMI.Basetypes.Integer32):
	status = 1
	format = 'd'

# scalars 
class dot1dBaseBridgeAddress(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.MacAddress


class dot1dBaseNumPorts(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = 'ports'


class dot1dBaseType(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'unknown'), Enum(2, 'transparent-only'), Enum(3, 'sourceroute-only'), Enum(4, 'srt')]


class dot1dStpProtocolSpecification(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 2, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'unknown'), Enum(2, 'decLb100'), Enum(3, 'ieee8021d')]


class dot1dStpPriority(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 2, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dot1dStpTimeSinceTopologyChange(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 2, 3])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks
	access = 4
	units = 'centi-seconds'


class dot1dStpTopChanges(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 2, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dot1dStpDesignatedRoot(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 2, 5])
	syntaxobject = BridgeId


class dot1dStpRootCost(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 2, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dot1dStpRootPort(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 2, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dot1dStpMaxAge(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 2, 8])
	syntaxobject = Timeout
	access = 4
	units = 'centi-seconds'


class dot1dStpHelloTime(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 2, 9])
	syntaxobject = Timeout
	access = 4
	units = 'centi-seconds'


class dot1dStpHoldTime(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 2, 10])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = 'centi-seconds'


class dot1dStpForwardDelay(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 2, 11])
	syntaxobject = Timeout
	access = 4
	units = 'centi-seconds'


class dot1dStpBridgeMaxAge(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 2, 12])
	syntaxobject = Timeout
	access = 5
	units = 'centi-seconds'


class dot1dStpBridgeHelloTime(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 2, 13])
	syntaxobject = Timeout
	access = 5
	units = 'centi-seconds'


class dot1dStpBridgeForwardDelay(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 2, 14])
	syntaxobject = Timeout
	access = 5
	units = 'centi-seconds'


class dot1dTpLearnedEntryDiscards(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 4, 1])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dot1dTpAgingTime(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 4, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


# columns
class dot1dBasePort(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 1, 4, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dot1dBasePortIfIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 1, 4, 1, 2])
	syntaxobject = InterfaceIndex


class dot1dBasePortCircuit(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 1, 4, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.ObjectIdentifier


class dot1dBasePortDelayExceededDiscards(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 1, 4, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dot1dBasePortMtuExceededDiscards(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 1, 4, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dot1dStpPort(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 2, 15, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dot1dStpPortPriority(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 2, 15, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dot1dStpPortState(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 2, 15, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'disabled'), Enum(2, 'blocking'), Enum(3, 'listening'), Enum(4, 'learning'), Enum(5, 'forwarding'), Enum(6, 'broken')]


class dot1dStpPortEnable(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 2, 15, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class dot1dStpPortPathCost(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 2, 15, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dot1dStpPortDesignatedRoot(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 2, 15, 1, 6])
	syntaxobject = BridgeId


class dot1dStpPortDesignatedCost(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 2, 15, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dot1dStpPortDesignatedBridge(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 2, 15, 1, 8])
	syntaxobject = BridgeId


class dot1dStpPortDesignatedPort(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 2, 15, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class dot1dStpPortForwardTransitions(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 2, 15, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dot1dStpPortPathCost32(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 2, 15, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dot1dTpFdbAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 4, 3, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.MacAddress


class dot1dTpFdbPort(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 4, 3, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dot1dTpFdbStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 4, 3, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'invalid'), Enum(3, 'learned'), Enum(4, 'self'), Enum(5, 'mgmt')]


class dot1dTpPort(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 4, 4, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dot1dTpPortMaxInfo(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 4, 4, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = 'bytes'


class dot1dTpPortInFrames(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 4, 4, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'frames'


class dot1dTpPortOutFrames(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 4, 4, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'frames'


class dot1dTpPortInDiscards(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 4, 4, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'frames'


class dot1dStaticAddress(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 5, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.MacAddress


class dot1dStaticReceivePort(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 5, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dot1dStaticAllowedToGoTo(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 5, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class dot1dStaticStatus(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 5, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'invalid'), Enum(3, 'permanent'), Enum(4, 'deleteOnReset'), Enum(5, 'deleteOnTimeout')]


# rows 
class dot1dBasePortEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([dot1dBasePort], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 1, 4, 1])
	access = 2
	columns = {'dot1dBasePort': dot1dBasePort, 'dot1dBasePortIfIndex': dot1dBasePortIfIndex, 'dot1dBasePortCircuit': dot1dBasePortCircuit, 'dot1dBasePortDelayExceededDiscards': dot1dBasePortDelayExceededDiscards, 'dot1dBasePortMtuExceededDiscards': dot1dBasePortMtuExceededDiscards}


class dot1dStpPortEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([dot1dStpPort], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 2, 15, 1])
	access = 2
	columns = {'dot1dStpPort': dot1dStpPort, 'dot1dStpPortPriority': dot1dStpPortPriority, 'dot1dStpPortState': dot1dStpPortState, 'dot1dStpPortEnable': dot1dStpPortEnable, 'dot1dStpPortPathCost': dot1dStpPortPathCost, 'dot1dStpPortDesignatedRoot': dot1dStpPortDesignatedRoot, 'dot1dStpPortDesignatedCost': dot1dStpPortDesignatedCost, 'dot1dStpPortDesignatedBridge': dot1dStpPortDesignatedBridge, 'dot1dStpPortDesignatedPort': dot1dStpPortDesignatedPort, 'dot1dStpPortForwardTransitions': dot1dStpPortForwardTransitions, 'dot1dStpPortPathCost32': dot1dStpPortPathCost32}


class dot1dTpFdbEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([dot1dTpFdbAddress], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 4, 3, 1])
	access = 2
	columns = {'dot1dTpFdbAddress': dot1dTpFdbAddress, 'dot1dTpFdbPort': dot1dTpFdbPort, 'dot1dTpFdbStatus': dot1dTpFdbStatus}


class dot1dTpPortEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([dot1dTpPort], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 4, 4, 1])
	access = 2
	columns = {'dot1dTpPort': dot1dTpPort, 'dot1dTpPortMaxInfo': dot1dTpPortMaxInfo, 'dot1dTpPortInFrames': dot1dTpPortInFrames, 'dot1dTpPortOutFrames': dot1dTpPortOutFrames, 'dot1dTpPortInDiscards': dot1dTpPortInDiscards}


class dot1dStaticEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([dot1dStaticAddress, dot1dStaticReceivePort], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 5, 1, 1])
	access = 2
	columns = {'dot1dStaticAddress': dot1dStaticAddress, 'dot1dStaticReceivePort': dot1dStaticReceivePort, 'dot1dStaticAllowedToGoTo': dot1dStaticAllowedToGoTo, 'dot1dStaticStatus': dot1dStaticStatus}


# notifications (traps) 
class newRoot(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 0, 1])

class topologyChange(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 0, 2])

# groups 
class dot1dBaseBridgeGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 8, 1, 1])
	group = [dot1dBaseBridgeAddress, dot1dBaseNumPorts, dot1dBaseType]

class dot1dBasePortGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 8, 1, 2])
	group = [dot1dBasePort, dot1dBasePortIfIndex, dot1dBasePortCircuit, dot1dBasePortDelayExceededDiscards, dot1dBasePortMtuExceededDiscards]

class dot1dStpBridgeGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 8, 1, 3])
	group = [dot1dStpProtocolSpecification, dot1dStpPriority, dot1dStpTimeSinceTopologyChange, dot1dStpTopChanges, dot1dStpDesignatedRoot, dot1dStpRootCost, dot1dStpRootPort, dot1dStpMaxAge, dot1dStpHelloTime, dot1dStpHoldTime, dot1dStpForwardDelay, dot1dStpBridgeMaxAge, dot1dStpBridgeHelloTime, dot1dStpBridgeForwardDelay]

class dot1dStpPortGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 8, 1, 4])
	group = [dot1dStpPort, dot1dStpPortPriority, dot1dStpPortState, dot1dStpPortEnable, dot1dStpPortPathCost, dot1dStpPortDesignatedRoot, dot1dStpPortDesignatedCost, dot1dStpPortDesignatedBridge, dot1dStpPortDesignatedPort, dot1dStpPortForwardTransitions]

class dot1dStpPortGroup2(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 8, 1, 5])
	group = [dot1dStpPort, dot1dStpPortPriority, dot1dStpPortState, dot1dStpPortEnable, dot1dStpPortDesignatedRoot, dot1dStpPortDesignatedCost, dot1dStpPortDesignatedBridge, dot1dStpPortDesignatedPort, dot1dStpPortForwardTransitions, dot1dStpPortPathCost32]

class dot1dStpPortGroup3(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 8, 1, 6])
	group = [dot1dStpPortPathCost32]

class dot1dTpBridgeGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 8, 1, 7])
	group = [dot1dTpLearnedEntryDiscards, dot1dTpAgingTime]

class dot1dTpFdbGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 8, 1, 8])
	group = [dot1dTpFdbAddress, dot1dTpFdbPort, dot1dTpFdbStatus]

class dot1dTpGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 8, 1, 9])
	group = [dot1dTpPort, dot1dTpPortMaxInfo, dot1dTpPortInFrames, dot1dTpPortOutFrames, dot1dTpPortInDiscards]

class dot1dStaticGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 8, 1, 10])
	group = [dot1dStaticAddress, dot1dStaticReceivePort, dot1dStaticAllowedToGoTo, dot1dStaticStatus]

class dot1dNotificationGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 8, 1, 11])
	group = [newRoot, topologyChange]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
