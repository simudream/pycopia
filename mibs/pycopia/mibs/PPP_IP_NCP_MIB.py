# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from RFC_1212 import OBJECT_TYPE
from RFC1213_MIB import ifIndex
from PPP_LCP_MIB import ppp
from RFC1155_SMI import Counter

class PPP_IP_NCP_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/PPP-IP-NCP-MIB'
	conformance = 2
	name = 'PPP-IP-NCP-MIB'
	language = 1

# nodes
class pppIp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 3])
	name = 'pppIp'


# macros
# types 
# scalars 
# columns
class pppIpOperStatus(ColumnObject):
	status = 3
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 3, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'opened'), Enum(2, 'not-opened')]


class pppIpLocalToRemoteCompressionProtocol(ColumnObject):
	status = 3
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 3, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'none'), Enum(2, 'vj-tcp')]


class pppIpRemoteToLocalCompressionProtocol(ColumnObject):
	status = 3
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 3, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'none'), Enum(2, 'vj-tcp')]


class pppIpRemoteMaxSlotId(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 3, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class pppIpLocalMaxSlotId(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 3, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class pppIpConfigAdminStatus(ColumnObject):
	status = 3
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 3, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'open'), Enum(2, 'close')]


class pppIpConfigCompression(ColumnObject):
	status = 3
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 3, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'none'), Enum(2, 'vj-tcp')]


# rows 
class pppIpEntry(RowObject):
	status = 3
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 3, 1, 1])
	access = 2
	columns = {'pppIpOperStatus': pppIpOperStatus, 'pppIpLocalToRemoteCompressionProtocol': pppIpLocalToRemoteCompressionProtocol, 'pppIpRemoteToLocalCompressionProtocol': pppIpRemoteToLocalCompressionProtocol, 'pppIpRemoteMaxSlotId': pppIpRemoteMaxSlotId, 'pppIpLocalMaxSlotId': pppIpLocalMaxSlotId}


class pppIpConfigEntry(RowObject):
	status = 3
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 23, 3, 2, 1])
	access = 2
	columns = {'pppIpConfigAdminStatus': pppIpConfigAdminStatus, 'pppIpConfigCompression': pppIpConfigCompression}


# notifications (traps) 
# groups 
# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
