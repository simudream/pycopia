# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import Integer32, Counter32, Counter64, OBJECT_TYPE, MODULE_IDENTITY, NOTIFICATION_TYPE
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP, NOTIFICATION_GROUP
from SNMPv2_TC import DisplayString, MacAddress, TruthValue, TimeStamp
from HP_ICF_OID import hpicfObjectModules, icfVgRepeater

class ICF_VG_RPTR(ModuleObject):
	path = '/usr/share/snmp/mibs/site/ICF-VG-RPTR'
	conformance = 5
	name = 'ICF-VG-RPTR'
	language = 2
	description = 'This MIB module contains objects for managing\nHP AdvanceStack 100VG-AnyLAN repeaters.  It is\nexpected that this module will be superceded by\na standard 802.12 Repeater MIB.'

# nodes
class icfVgBasic(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 1])
	name = 'icfVgBasic'

class icfVgBasicRptr(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 1, 1])
	name = 'icfVgBasicRptr'

class icfVgBasicGroup(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 1, 2])
	name = 'icfVgBasicGroup'

class icfVgBasicPort(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 1, 3])
	name = 'icfVgBasicPort'

class icfVgMonitor(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 2])
	name = 'icfVgMonitor'

class icfVgMonRptr(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 2, 1])
	name = 'icfVgMonRptr'

class icfVgMonGroup(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 2, 2])
	name = 'icfVgMonGroup'

class icfVgMonPort(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 2, 3])
	name = 'icfVgMonPort'

class icfVgAddrTrack(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 3])
	name = 'icfVgAddrTrack'

class icfVgAddrTrackRptr(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 3, 1])
	name = 'icfVgAddrTrackRptr'

class icfVgAddrTrackGroup(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 3, 2])
	name = 'icfVgAddrTrackGroup'

class icfVgAddrTrackPort(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 3, 3])
	name = 'icfVgAddrTrackPort'

class icfVgRptrTraps(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 4])
	name = 'icfVgRptrTraps'

class icfVgRptrTrapsPrefix(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 4, 0])
	name = 'icfVgRptrTrapsPrefix'

class icfVgRepeaterMib(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 10])
	name = 'icfVgRepeaterMib'

class icfVgRepeaterConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 10, 1])
	name = 'icfVgRepeaterConformance'

class icfVgRepeaterCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 10, 1, 1])
	name = 'icfVgRepeaterCompliances'

class icfVgRepeaterGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 10, 1, 2])
	name = 'icfVgRepeaterGroups'


# macros
# types 
# scalars 
class icfVgMACAddress(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.MacAddress


class icfVgCurrentFramingType(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'frameType88023'), Enum(2, 'frameType88025')]


class icfVgDesiredFramingType(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'frameType88023'), Enum(2, 'frameType88025')]


class icfVgFramingCapability(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'frameType88023'), Enum(2, 'frameType88025'), Enum(3, 'frameTypeEither')]


class icfVgTrainingVersion(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class icfVgRepeaterGroupCapacity(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class icfVgRepeaterHealthState(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'ok'), Enum(3, 'rptrFailure'), Enum(4, 'groupFailure'), Enum(5, 'portFailure'), Enum(6, 'generalFailure')]


class icfVgRepeaterHealthText(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class icfVgRepeaterReset(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'noReset'), Enum(2, 'reset')]


class icfVgRepeaterNonDisruptTest(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'noSelfTest'), Enum(2, 'selfTest')]


# columns
class icfVgGroupIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 1, 2, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class icfVgGroupDescr(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 1, 2, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class icfVgGroupObjectID(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 1, 2, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.ObjectIdentifier


class icfVgGroupOperStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 1, 2, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'operational'), Enum(3, 'malfunctioning'), Enum(4, 'notPresent'), Enum(5, 'underTest'), Enum(6, 'resetInProgress')]


class icfVgGroupLastOperStatusChange(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 1, 2, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class icfVgGroupPortCapacity(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 1, 2, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class icfVgGroupCablesBundled(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 1, 2, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'someCablesBundled'), Enum(2, 'noCablesBundled')]


class icfVgPortGroupIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 1, 3, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class icfVgPortIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 1, 3, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class icfVgPortType(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 1, 3, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'cascadeExternal'), Enum(2, 'cascadeInternal'), Enum(3, 'localExternal'), Enum(4, 'localInternal')]


class icfVgPortAdminStatus(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 1, 3, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class icfVgPortStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 1, 3, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'active'), Enum(2, 'inactive'), Enum(3, 'training')]


class icfVgPortSupportedPromiscMode(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 1, 3, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'singleModeOnly'), Enum(2, 'singleOrPromiscMode'), Enum(3, 'promiscModeOnly')]


class icfVgPortSupportedCascadeMode(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 1, 3, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'endNodesOnly'), Enum(2, 'endNodesOrRepeaters'), Enum(3, 'cascadePort')]


class icfVgPortAllowedTrainType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 1, 3, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'allowEndNodesOnly'), Enum(2, 'allowPromiscuousEndNodes'), Enum(3, 'allowEndNodesOrRepeaters'), Enum(4, 'allowAnything')]


class icfVgPortLastTrainConfig(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 1, 3, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class icfVgPortTrainingResult(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 1, 3, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class icfVgPortPriorityEnable(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 1, 3, 1, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class icfVgPortMediaType(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 1, 3, 1, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'unknown'), Enum(3, 'pmdMissing'), Enum(4, 'utp4'), Enum(5, 'stp2'), Enum(6, 'fibre')]


class icfVgPortReadableFrames(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 2, 3, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class icfVgPortReadableOctets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 2, 3, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class icfVgPortUnreadableOctets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 2, 3, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class icfVgPortHighPriorityFrames(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 2, 3, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class icfVgPortHighPriorityOctets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 2, 3, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class icfVgPortBroadcastFrames(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 2, 3, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class icfVgPortMulticastFrames(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 2, 3, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class icfVgPortIPMFrames(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 2, 3, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class icfVgPortDataErrorFrames(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 2, 3, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class icfVgPortPriorityPromotions(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 2, 3, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class icfVgPortHCReadableOctets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 2, 3, 1, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class icfVgPortHCUnreadableOctets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 2, 3, 1, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class icfVgPortHCHighPriorityOctets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 2, 3, 1, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class icfVgPortHCNormPriorityOctets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 2, 3, 1, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class icfVgPortNormPriorityFrames(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 2, 3, 1, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class icfVgPortNormPriorityOctets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 2, 3, 1, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class icfVgPortNullAddressedFrames(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 2, 3, 1, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class icfVgPortOversizeFrames(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 2, 3, 1, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class icfVgPortTransitionToTrainings(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 2, 3, 1, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class icfVgAddrLastTrainedAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 3, 3, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class icfVgAddrTrainedAddrChanges(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 3, 3, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class icfVgRptrDetectedDupAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 3, 3, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class icfVgMgrDetectedDupAddress(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 3, 3, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


# rows 
class icfVgBasicGroupEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([icfVgGroupIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 1, 2, 1, 1])
	access = 2
	columns = {'icfVgGroupIndex': icfVgGroupIndex, 'icfVgGroupDescr': icfVgGroupDescr, 'icfVgGroupObjectID': icfVgGroupObjectID, 'icfVgGroupOperStatus': icfVgGroupOperStatus, 'icfVgGroupLastOperStatusChange': icfVgGroupLastOperStatusChange, 'icfVgGroupPortCapacity': icfVgGroupPortCapacity, 'icfVgGroupCablesBundled': icfVgGroupCablesBundled}


class icfVgBasicPortEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([icfVgPortGroupIndex, icfVgPortIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 1, 3, 1, 1])
	access = 2
	columns = {'icfVgPortGroupIndex': icfVgPortGroupIndex, 'icfVgPortIndex': icfVgPortIndex, 'icfVgPortType': icfVgPortType, 'icfVgPortAdminStatus': icfVgPortAdminStatus, 'icfVgPortStatus': icfVgPortStatus, 'icfVgPortSupportedPromiscMode': icfVgPortSupportedPromiscMode, 'icfVgPortSupportedCascadeMode': icfVgPortSupportedCascadeMode, 'icfVgPortAllowedTrainType': icfVgPortAllowedTrainType, 'icfVgPortLastTrainConfig': icfVgPortLastTrainConfig, 'icfVgPortTrainingResult': icfVgPortTrainingResult, 'icfVgPortPriorityEnable': icfVgPortPriorityEnable, 'icfVgPortMediaType': icfVgPortMediaType}


class icfVgMonPortEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([icfVgPortGroupIndex, icfVgPortIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 2, 3, 1, 1])
	access = 2
	columns = {'icfVgPortReadableFrames': icfVgPortReadableFrames, 'icfVgPortReadableOctets': icfVgPortReadableOctets, 'icfVgPortUnreadableOctets': icfVgPortUnreadableOctets, 'icfVgPortHighPriorityFrames': icfVgPortHighPriorityFrames, 'icfVgPortHighPriorityOctets': icfVgPortHighPriorityOctets, 'icfVgPortBroadcastFrames': icfVgPortBroadcastFrames, 'icfVgPortMulticastFrames': icfVgPortMulticastFrames, 'icfVgPortIPMFrames': icfVgPortIPMFrames, 'icfVgPortDataErrorFrames': icfVgPortDataErrorFrames, 'icfVgPortPriorityPromotions': icfVgPortPriorityPromotions, 'icfVgPortHCReadableOctets': icfVgPortHCReadableOctets, 'icfVgPortHCUnreadableOctets': icfVgPortHCUnreadableOctets, 'icfVgPortHCHighPriorityOctets': icfVgPortHCHighPriorityOctets, 'icfVgPortHCNormPriorityOctets': icfVgPortHCNormPriorityOctets, 'icfVgPortNormPriorityFrames': icfVgPortNormPriorityFrames, 'icfVgPortNormPriorityOctets': icfVgPortNormPriorityOctets, 'icfVgPortNullAddressedFrames': icfVgPortNullAddressedFrames, 'icfVgPortOversizeFrames': icfVgPortOversizeFrames, 'icfVgPortTransitionToTrainings': icfVgPortTransitionToTrainings}


class icfVgAddrTrackEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([icfVgPortGroupIndex, icfVgPortIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 3, 3, 1, 1])
	access = 2
	columns = {'icfVgAddrLastTrainedAddress': icfVgAddrLastTrainedAddress, 'icfVgAddrTrainedAddrChanges': icfVgAddrTrainedAddrChanges, 'icfVgRptrDetectedDupAddress': icfVgRptrDetectedDupAddress, 'icfVgMgrDetectedDupAddress': icfVgMgrDetectedDupAddress}


# notifications (traps) 
class icfVgRptrHealth(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 4, 0, 1])

class icfVgRptrResetEvent(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 8, 1, 4, 0, 3])

# groups 
class icfVgRptrBasicGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 10, 1, 2, 1])
	group = [icfVgMACAddress, icfVgCurrentFramingType, icfVgDesiredFramingType, icfVgFramingCapability, icfVgTrainingVersion, icfVgRepeaterGroupCapacity, icfVgRepeaterHealthState, icfVgRepeaterHealthText, icfVgRepeaterReset, icfVgRepeaterNonDisruptTest, icfVgGroupDescr, icfVgGroupObjectID, icfVgGroupOperStatus, icfVgGroupLastOperStatusChange, icfVgGroupPortCapacity, icfVgGroupCablesBundled, icfVgPortType, icfVgPortAdminStatus, icfVgPortStatus, icfVgPortSupportedPromiscMode, icfVgPortSupportedCascadeMode, icfVgPortAllowedTrainType, icfVgPortLastTrainConfig, icfVgPortTrainingResult, icfVgPortPriorityEnable, icfVgPortMediaType]

class icfVgRptrMonitorGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 10, 1, 2, 4])
	group = [icfVgPortReadableFrames, icfVgPortReadableOctets, icfVgPortUnreadableOctets, icfVgPortHighPriorityFrames, icfVgPortHighPriorityOctets, icfVgPortBroadcastFrames, icfVgPortMulticastFrames, icfVgPortIPMFrames, icfVgPortDataErrorFrames, icfVgPortPriorityPromotions, icfVgPortHCReadableOctets, icfVgPortHCUnreadableOctets, icfVgPortHCHighPriorityOctets, icfVgPortHCNormPriorityOctets, icfVgPortNormPriorityFrames, icfVgPortNormPriorityOctets, icfVgPortNullAddressedFrames, icfVgPortOversizeFrames, icfVgPortTransitionToTrainings]

class icfVgRptrAddrTrackGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 10, 1, 2, 5])
	group = [icfVgAddrLastTrainedAddress, icfVgAddrTrainedAddrChanges, icfVgRptrDetectedDupAddress, icfVgMgrDetectedDupAddress]

class icfVgRptrNotificationsGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 10, 1, 2, 6])
	group = [icfVgRptrHealth, icfVgRptrResetEvent]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
