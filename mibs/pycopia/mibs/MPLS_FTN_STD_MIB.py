# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from IF_MIB import InterfaceIndexOrZero, ifGeneralInformationGroup, ifCounterDiscontinuityGroup
from SNMP_FRAMEWORK_MIB import SnmpAdminString
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, Unsigned32, Counter64, Integer32
from MPLS_TC_STD_MIB import mplsStdMIB
from INET_ADDRESS_MIB import InetAddressType, InetAddress, InetPortNumber
from SNMPv2_TC import RowStatus, StorageType, RowPointer, TEXTUAL_CONVENTION, TimeStamp
from DIFFSERV_DSCP_TC import Dscp

class MPLS_FTN_STD_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/MPLS-FTN-STD-MIB'
	conformance = 4
	name = 'MPLS-FTN-STD-MIB'
	language = 2
	description = 'Copyright (C) The Internet Society (2004). The\ninitial version of this MIB module was published\nin RFC 3814. For full legal notices see the RFC\nitself or see:\nhttp://www.ietf.org/copyrights/ianamib.html\n\nThis MIB module contains managed object definitions for\nspecifying FEC to NHLFE (FTN) mappings and corresponding\nperformance for MPLS.'

# nodes
class mplsFTNStdMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8])
	name = 'mplsFTNStdMIB'

class mplsFTNNotifications(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8, 0])
	name = 'mplsFTNNotifications'

class mplsFTNObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8, 1])
	name = 'mplsFTNObjects'

class mplsFTNConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8, 2])
	name = 'mplsFTNConformance'

class mplsFTNGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8, 2, 1])
	name = 'mplsFTNGroups'

class mplsFTNCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8, 2, 2])
	name = 'mplsFTNCompliances'


# macros
# types 

class MplsFTNEntryIndex(pycopia.SMI.Basetypes.Unsigned32):
	status = 1
	ranges = Ranges(Range(1, -1))


class MplsFTNEntryIndexOrZero(pycopia.SMI.Basetypes.Unsigned32):
	status = 1
	ranges = Ranges(Range(0, -1))

# scalars 
class mplsFTNIndexNext(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8, 1, 1])
	syntaxobject = MplsFTNEntryIndexOrZero


class mplsFTNTableLastChanged(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class mplsFTNMapTableLastChanged(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


# columns
class mplsFTNIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8, 1, 3, 1, 1])
	syntaxobject = MplsFTNEntryIndex


class mplsFTNRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8, 1, 3, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class mplsFTNDescr(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8, 1, 3, 1, 3])
	syntaxobject = SnmpAdminString


class mplsFTNMask(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8, 1, 3, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.BITS


class mplsFTNAddrType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8, 1, 3, 1, 5])
	syntaxobject = InetAddressType


class mplsFTNSourceAddrMin(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8, 1, 3, 1, 6])
	syntaxobject = InetAddress


class mplsFTNSourceAddrMax(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8, 1, 3, 1, 7])
	syntaxobject = InetAddress


class mplsFTNDestAddrMin(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8, 1, 3, 1, 8])
	syntaxobject = InetAddress


class mplsFTNDestAddrMax(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8, 1, 3, 1, 9])
	syntaxobject = InetAddress


class mplsFTNSourcePortMin(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8, 1, 3, 1, 10])
	syntaxobject = InetPortNumber


class mplsFTNSourcePortMax(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8, 1, 3, 1, 11])
	syntaxobject = InetPortNumber


class mplsFTNDestPortMin(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8, 1, 3, 1, 12])
	syntaxobject = InetPortNumber


class mplsFTNDestPortMax(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8, 1, 3, 1, 13])
	syntaxobject = InetPortNumber


class mplsFTNProtocol(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8, 1, 3, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class mplsFTNDscp(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8, 1, 3, 1, 15])
	syntaxobject = Dscp


class mplsFTNActionType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8, 1, 3, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'redirectLsp'), Enum(2, 'redirectTunnel')]


class mplsFTNActionPointer(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8, 1, 3, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.RowPointer


class mplsFTNStorageType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8, 1, 3, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


class mplsFTNMapIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8, 1, 5, 1, 1])
	syntaxobject = InterfaceIndexOrZero


class mplsFTNMapPrevIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8, 1, 5, 1, 2])
	syntaxobject = MplsFTNEntryIndexOrZero


class mplsFTNMapCurrIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8, 1, 5, 1, 3])
	syntaxobject = MplsFTNEntryIndex


class mplsFTNMapRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8, 1, 5, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class mplsFTNMapStorageType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8, 1, 5, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


class mplsFTNPerfIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8, 1, 6, 1, 1])
	syntaxobject = InterfaceIndexOrZero


class mplsFTNPerfCurrIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8, 1, 6, 1, 2])
	syntaxobject = MplsFTNEntryIndex


class mplsFTNPerfMatchedPackets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8, 1, 6, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class mplsFTNPerfMatchedOctets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8, 1, 6, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class mplsFTNPerfDiscontinuityTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8, 1, 6, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


# rows 
class mplsFTNEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([mplsFTNIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8, 1, 3, 1])
	access = 2
	rowstatus = mplsFTNRowStatus
	columns = {'mplsFTNIndex': mplsFTNIndex, 'mplsFTNRowStatus': mplsFTNRowStatus, 'mplsFTNDescr': mplsFTNDescr, 'mplsFTNMask': mplsFTNMask, 'mplsFTNAddrType': mplsFTNAddrType, 'mplsFTNSourceAddrMin': mplsFTNSourceAddrMin, 'mplsFTNSourceAddrMax': mplsFTNSourceAddrMax, 'mplsFTNDestAddrMin': mplsFTNDestAddrMin, 'mplsFTNDestAddrMax': mplsFTNDestAddrMax, 'mplsFTNSourcePortMin': mplsFTNSourcePortMin, 'mplsFTNSourcePortMax': mplsFTNSourcePortMax, 'mplsFTNDestPortMin': mplsFTNDestPortMin, 'mplsFTNDestPortMax': mplsFTNDestPortMax, 'mplsFTNProtocol': mplsFTNProtocol, 'mplsFTNDscp': mplsFTNDscp, 'mplsFTNActionType': mplsFTNActionType, 'mplsFTNActionPointer': mplsFTNActionPointer, 'mplsFTNStorageType': mplsFTNStorageType}


class mplsFTNMapEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([mplsFTNMapIndex, mplsFTNMapPrevIndex, mplsFTNMapCurrIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8, 1, 5, 1])
	access = 2
	columns = {'mplsFTNMapIndex': mplsFTNMapIndex, 'mplsFTNMapPrevIndex': mplsFTNMapPrevIndex, 'mplsFTNMapCurrIndex': mplsFTNMapCurrIndex, 'mplsFTNMapRowStatus': mplsFTNMapRowStatus, 'mplsFTNMapStorageType': mplsFTNMapStorageType}


class mplsFTNPerfEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([mplsFTNPerfIndex, mplsFTNPerfCurrIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8, 1, 6, 1])
	access = 2
	columns = {'mplsFTNPerfIndex': mplsFTNPerfIndex, 'mplsFTNPerfCurrIndex': mplsFTNPerfCurrIndex, 'mplsFTNPerfMatchedPackets': mplsFTNPerfMatchedPackets, 'mplsFTNPerfMatchedOctets': mplsFTNPerfMatchedOctets, 'mplsFTNPerfDiscontinuityTime': mplsFTNPerfDiscontinuityTime}


# notifications (traps) 
# groups 
class mplsFTNRuleGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8, 2, 1, 1])
	group = [mplsFTNIndexNext, mplsFTNTableLastChanged, mplsFTNRowStatus, mplsFTNDescr, mplsFTNMask, mplsFTNAddrType, mplsFTNSourceAddrMin, mplsFTNSourceAddrMax, mplsFTNDestAddrMin, mplsFTNDestAddrMax, mplsFTNSourcePortMin, mplsFTNSourcePortMax, mplsFTNDestPortMin, mplsFTNDestPortMax, mplsFTNProtocol, mplsFTNActionType, mplsFTNActionPointer, mplsFTNDscp, mplsFTNStorageType]

class mplsFTNMapGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8, 2, 1, 2])
	group = [mplsFTNMapTableLastChanged, mplsFTNMapRowStatus, mplsFTNMapStorageType]

class mplsFTNPerfGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 8, 2, 1, 3])
	group = [mplsFTNPerfMatchedPackets, mplsFTNPerfMatchedOctets, mplsFTNPerfDiscontinuityTime]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
