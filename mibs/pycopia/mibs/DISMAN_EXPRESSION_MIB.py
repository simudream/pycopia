# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, Integer32, Gauge32, Unsigned32, Counter32, Counter64, IpAddress, TimeTicks, mib_2, zeroDotZero
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from SNMPv2_TC import RowStatus, TruthValue, TimeStamp
from SNMPv2_MIB import sysUpTime
from SNMP_FRAMEWORK_MIB import SnmpAdminString

class DISMAN_EXPRESSION_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/DISMAN-EXPRESSION-MIB'
	conformance = 3
	name = 'DISMAN-EXPRESSION-MIB'
	language = 2
	description = 'The MIB module for defining expressions of MIB objects for\nmanagement purposes.'

# nodes
class sysUpTimeInstance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 1, 3, 0])
	name = 'sysUpTimeInstance'

class dismanExpressionMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90])
	name = 'dismanExpressionMIB'

class dismanExpressionMIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1])
	name = 'dismanExpressionMIBObjects'

class expResource(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 1])
	name = 'expResource'

class expDefine(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 2])
	name = 'expDefine'

class expValue(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 3])
	name = 'expValue'

class dismanExpressionMIBConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 3])
	name = 'dismanExpressionMIBConformance'

class dismanExpressionMIBCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 3, 1])
	name = 'dismanExpressionMIBCompliances'

class dismanExpressionMIBGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 3, 2])
	name = 'dismanExpressionMIBGroups'


# macros
# types 
# scalars 
class expResourceDeltaMinimum(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class expResourceDeltaWildcardInstanceMaximum(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32
	access = 5
	units = 'instances'


class expResourceDeltaWildcardInstances(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32
	access = 4
	units = 'instances'


class expResourceDeltaWildcardInstancesHigh(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32
	access = 4
	units = 'instances'


class expResourceDeltaWildcardInstanceResourceLacks(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'instances'


# columns
class expExpressionOwner(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 2, 1, 1, 1])
	syntaxobject = SnmpAdminString


class expExpressionName(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 2, 1, 1, 2])
	syntaxobject = SnmpAdminString


class expExpression(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 2, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class expExpressionValueType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 2, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'counter32'), Enum(2, 'unsigned32'), Enum(3, 'timeTicks'), Enum(4, 'integer32'), Enum(5, 'ipAddress'), Enum(6, 'octetString'), Enum(7, 'objectId'), Enum(8, 'counter64')]


class expExpressionComment(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 2, 1, 1, 5])
	syntaxobject = SnmpAdminString


class expExpressionDeltaInterval(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 2, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class expExpressionPrefix(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 2, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.ObjectIdentifier


class expExpressionErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 2, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class expExpressionEntryStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 2, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class expErrorTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 2, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class expErrorIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 2, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class expErrorCode(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 2, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'invalidSyntax'), Enum(2, 'undefinedObjectIndex'), Enum(3, 'unrecognizedOperator'), Enum(4, 'unrecognizedFunction'), Enum(5, 'invalidOperandType'), Enum(6, 'unmatchedParenthesis'), Enum(7, 'tooManyWildcardValues'), Enum(8, 'recursion'), Enum(9, 'deltaTooShort'), Enum(10, 'resourceUnavailable'), Enum(11, 'divideByZero')]


class expErrorInstance(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 2, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.ObjectIdentifier


class expObjectIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 2, 3, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class expObjectID(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 2, 3, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.ObjectIdentifier


class expObjectIDWildcard(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 2, 3, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class expObjectSampleType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 2, 3, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'absoluteValue'), Enum(2, 'deltaValue'), Enum(3, 'changedValue')]


class expObjectDeltaDiscontinuityID(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 2, 3, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.ObjectIdentifier


class expObjectDiscontinuityIDWildcard(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 2, 3, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class expObjectDiscontinuityIDType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 2, 3, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'timeTicks'), Enum(2, 'timeStamp'), Enum(3, 'dateAndTime')]


class expObjectConditional(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 2, 3, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.ObjectIdentifier


class expObjectConditionalWildcard(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 2, 3, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class expObjectEntryStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 2, 3, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class expValueInstance(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 3, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.ObjectIdentifier


class expValueCounter32Val(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 3, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class expValueUnsigned32Val(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 3, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class expValueTimeTicksVal(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 3, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class expValueInteger32Val(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 3, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class expValueIpAddressVal(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 3, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class expValueOctetStringVal(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 3, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class expValueOidVal(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 3, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.ObjectIdentifier


class expValueCounter64Val(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 3, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


# rows 
class expExpressionEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([expExpressionOwner, expExpressionName], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 2, 1, 1])
	access = 2
	rowstatus = expExpressionEntryStatus
	columns = {'expExpressionOwner': expExpressionOwner, 'expExpressionName': expExpressionName, 'expExpression': expExpression, 'expExpressionValueType': expExpressionValueType, 'expExpressionComment': expExpressionComment, 'expExpressionDeltaInterval': expExpressionDeltaInterval, 'expExpressionPrefix': expExpressionPrefix, 'expExpressionErrors': expExpressionErrors, 'expExpressionEntryStatus': expExpressionEntryStatus}


class expErrorEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([expExpressionOwner, expExpressionName], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 2, 2, 1])
	access = 2
	columns = {'expErrorTime': expErrorTime, 'expErrorIndex': expErrorIndex, 'expErrorCode': expErrorCode, 'expErrorInstance': expErrorInstance}


class expObjectEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([expExpressionOwner, expExpressionName, expObjectIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 2, 3, 1])
	access = 2
	rowstatus = expObjectEntryStatus
	columns = {'expObjectIndex': expObjectIndex, 'expObjectID': expObjectID, 'expObjectIDWildcard': expObjectIDWildcard, 'expObjectSampleType': expObjectSampleType, 'expObjectDeltaDiscontinuityID': expObjectDeltaDiscontinuityID, 'expObjectDiscontinuityIDWildcard': expObjectDiscontinuityIDWildcard, 'expObjectDiscontinuityIDType': expObjectDiscontinuityIDType, 'expObjectConditional': expObjectConditional, 'expObjectConditionalWildcard': expObjectConditionalWildcard, 'expObjectEntryStatus': expObjectEntryStatus}


class expValueEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([expExpressionOwner, expExpressionName, expValueInstance], True)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 1, 3, 1, 1])
	access = 2
	columns = {'expValueInstance': expValueInstance, 'expValueCounter32Val': expValueCounter32Val, 'expValueUnsigned32Val': expValueUnsigned32Val, 'expValueTimeTicksVal': expValueTimeTicksVal, 'expValueInteger32Val': expValueInteger32Val, 'expValueIpAddressVal': expValueIpAddressVal, 'expValueOctetStringVal': expValueOctetStringVal, 'expValueOidVal': expValueOidVal, 'expValueCounter64Val': expValueCounter64Val}


# notifications (traps) 
# groups 
class dismanExpressionResourceGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 3, 2, 1])
	group = [expResourceDeltaMinimum, expResourceDeltaWildcardInstanceMaximum, expResourceDeltaWildcardInstances, expResourceDeltaWildcardInstancesHigh, expResourceDeltaWildcardInstanceResourceLacks]

class dismanExpressionDefinitionGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 3, 2, 2])
	group = [expExpression, expExpressionValueType, expExpressionComment, expExpressionDeltaInterval, expExpressionPrefix, expExpressionErrors, expExpressionEntryStatus, expErrorTime, expErrorIndex, expErrorCode, expErrorInstance, expObjectID, expObjectIDWildcard, expObjectSampleType, expObjectDeltaDiscontinuityID, expObjectDiscontinuityIDWildcard, expObjectDiscontinuityIDType, expObjectConditional, expObjectConditionalWildcard, expObjectEntryStatus]

class dismanExpressionValueGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 90, 3, 2, 3])
	group = [expValueCounter32Val, expValueUnsigned32Val, expValueTimeTicksVal, expValueInteger32Val, expValueIpAddressVal, expValueOctetStringVal, expValueOidVal, expValueCounter64Val]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
