# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, Integer32, NOTIFICATION_TYPE
from SNMP_REPEATER_MIB import rptrGroupIndex, rptrPortGroupIndex, rptrPortIndex
from CISCO_SMI import ciscoExperiment
from RFC1213_MIB import PhysAddress
from SNMPv2_TC import TEXTUAL_CONVENTION, DisplayString

class CISCO_SIBU_STACKABLE_DUAL_SPEED_HUB_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/site/CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB'
	conformance = 4
	name = 'CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB'
	language = 2
	description = 'The MIB module that extends the REPEATER-MIB to\nmanage CISCO low end stackable repeater products.\nFor the purpose of this mib, a hub is a repeater\ngroup and stack is collection of one or more hubs\ninterconnected via stack bus connectors.'

# nodes
class ciscoSibuStackableDualSpeedHubMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44])
	name = 'ciscoSibuStackableDualSpeedHubMIB'

class ciscoSibuStackableDualSpeedHubMIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 1])
	name = 'ciscoSibuStackableDualSpeedHubMIBObjects'

class cssSystem(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 1])
	name = 'cssSystem'

class cssGroup(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 2])
	name = 'cssGroup'

class cssRepeaterPort(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 3])
	name = 'cssRepeaterPort'

class cssSwitchPort(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 4])
	name = 'cssSwitchPort'

class ciscoSibuStackableDualSpeedHubNotifications(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 2])
	name = 'ciscoSibuStackableDualSpeedHubNotifications'

class ciscoSibuStackableDualSpeedHubNotificationsPrefix(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 2, 0])
	name = 'ciscoSibuStackableDualSpeedHubNotificationsPrefix'

class ciscoSibuStackableDualSpeedHubMIBComformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 3])
	name = 'ciscoSibuStackableDualSpeedHubMIBComformance'

class ciscoSibuStackableDualSpeedHubMIBCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 3, 1])
	name = 'ciscoSibuStackableDualSpeedHubMIBCompliances'

class ciscoSibuStackableDualSpeedHubMIBGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 3, 2])
	name = 'ciscoSibuStackableDualSpeedHubMIBGroups'


# macros
# types 

class HubNumber(pycopia.SMI.Basetypes.Integer32):
	status = 1
	ranges = Ranges(Range(1, 2147483647))

# scalars 
class cssSystemLinkTraps(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


# columns
class cssGroupID(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 2, 1, 1, 1])
	syntaxobject = HubNumber


class cssGroupType(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 2, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'cisco1538MDS'), Enum(2, 'cisco1538UDS'), Enum(3, 'wsC412M'), Enum(4, 'wsC412'), Enum(5, 'wsC424M'), Enum(6, 'wsC424')]


class cssGroupSerialNo(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 2, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class cssGroupBoardRevision(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 2, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class cssGroupAgentBootVersion(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 2, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class cssGroupAgentFirmwareVersion(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 2, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class cssGroupAgentStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 2, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'notPresent'), Enum(2, 'primary'), Enum(3, 'backup')]


class cssGroupAgentPhysAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 2, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.PhysAddress


class cssGroupInternalPowerState(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 2, 1, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'off'), Enum(2, 'on')]


class cssGroupRedundantPowerState(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 2, 1, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'off'), Enum(2, 'healthy'), Enum(3, 'faulty')]


class cssGroupReset(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 2, 1, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'noReset'), Enum(2, 'reset')]


class cssGroupConfigDefaultReset(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 2, 1, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'noReset'), Enum(2, 'reset')]


class cssGroupIsolatedState(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 2, 1, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'isolated'), Enum(2, 'attached')]


class cssRepeaterPortName(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 3, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class cssRepeaterPortControllerRevision(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 3, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class cssRepeaterPortSpeedAdmin(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 3, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'tenMbps'), Enum(2, 'oneHundredMbps'), Enum(3, 'autoNegotiate')]


class cssRepeaterPortSpeedStatus(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 3, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'tenMbps'), Enum(2, 'oneHundredMbps')]


class cssRepeaterPortLinkStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 3, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'link'), Enum(2, 'noLink')]


class cssSwitchPortModuleID(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 4, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class cssSwitchPortPortID(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 4, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class cssSwitchPortName(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 4, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class cssSwitchPortType(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 4, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'wsX4001'), Enum(2, 'wsX4002')]


class cssSwitchPortControllerRevision(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 4, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class cssSwitchPortState(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 4, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class cssSwitchPortDuplexAdmin(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 4, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'fullDuplex'), Enum(2, 'halfDuplex'), Enum(3, 'autoNegotiate')]


class cssSwitchPortDuplexStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 4, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'fullDuplex'), Enum(2, 'halfDuplex')]


class cssSwitchPortSpeedAdmin(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 4, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'tenMbps'), Enum(2, 'oneHundredMbps'), Enum(3, 'autoNegotiate')]


class cssSwitchPortSpeedStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 4, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'tenMbps'), Enum(2, 'oneHundredMbps')]


class cssSwitchPortLinkStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 4, 1, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'link'), Enum(2, 'noLink')]


# rows 
class cssGroupEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([rptrGroupIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 2, 1, 1])
	access = 2
	columns = {'cssGroupID': cssGroupID, 'cssGroupType': cssGroupType, 'cssGroupSerialNo': cssGroupSerialNo, 'cssGroupBoardRevision': cssGroupBoardRevision, 'cssGroupAgentBootVersion': cssGroupAgentBootVersion, 'cssGroupAgentFirmwareVersion': cssGroupAgentFirmwareVersion, 'cssGroupAgentStatus': cssGroupAgentStatus, 'cssGroupAgentPhysAddress': cssGroupAgentPhysAddress, 'cssGroupInternalPowerState': cssGroupInternalPowerState, 'cssGroupRedundantPowerState': cssGroupRedundantPowerState, 'cssGroupReset': cssGroupReset, 'cssGroupConfigDefaultReset': cssGroupConfigDefaultReset, 'cssGroupIsolatedState': cssGroupIsolatedState}


class cssRepeaterPortEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([rptrPortGroupIndex, rptrPortIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 3, 1, 1])
	access = 2
	columns = {'cssRepeaterPortName': cssRepeaterPortName, 'cssRepeaterPortControllerRevision': cssRepeaterPortControllerRevision, 'cssRepeaterPortSpeedAdmin': cssRepeaterPortSpeedAdmin, 'cssRepeaterPortSpeedStatus': cssRepeaterPortSpeedStatus, 'cssRepeaterPortLinkStatus': cssRepeaterPortLinkStatus}


class cssSwitchPortEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([rptrGroupIndex, cssSwitchPortModuleID, cssSwitchPortPortID], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 4, 1, 1])
	access = 2
	columns = {'cssSwitchPortModuleID': cssSwitchPortModuleID, 'cssSwitchPortPortID': cssSwitchPortPortID, 'cssSwitchPortName': cssSwitchPortName, 'cssSwitchPortType': cssSwitchPortType, 'cssSwitchPortControllerRevision': cssSwitchPortControllerRevision, 'cssSwitchPortState': cssSwitchPortState, 'cssSwitchPortDuplexAdmin': cssSwitchPortDuplexAdmin, 'cssSwitchPortDuplexStatus': cssSwitchPortDuplexStatus, 'cssSwitchPortSpeedAdmin': cssSwitchPortSpeedAdmin, 'cssSwitchPortSpeedStatus': cssSwitchPortSpeedStatus, 'cssSwitchPortLinkStatus': cssSwitchPortLinkStatus}


# notifications (traps) 
class ciscoSibuStackableDualSpeedHubRptrPortLinkChange(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 2, 0, 1])

class ciscoSibuStackableDualSpeedHubSwitchPortLinkChange(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 2, 0, 2])

# groups 
class ciscoSibuStackableDualSpeedHubGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 3, 2, 1])
	group = [cssSystemLinkTraps, cssGroupID, cssGroupType, cssGroupSerialNo, cssGroupBoardRevision, cssGroupAgentBootVersion, cssGroupAgentFirmwareVersion, cssGroupAgentStatus, cssGroupAgentPhysAddress, cssGroupInternalPowerState, cssGroupRedundantPowerState, cssGroupReset, cssGroupConfigDefaultReset, cssGroupIsolatedState]

class ciscoSibuStackableDualSpeedHubRepeaterPortGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 3, 2, 2])
	group = [cssRepeaterPortName, cssRepeaterPortControllerRevision, cssRepeaterPortSpeedAdmin, cssRepeaterPortSpeedStatus, cssRepeaterPortLinkStatus]

class ciscoSibuStackableDualSpeedHubSwitchPortGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 44, 3, 2, 3])
	group = [cssSwitchPortModuleID, cssSwitchPortPortID, cssSwitchPortName, cssSwitchPortType, cssSwitchPortControllerRevision, cssSwitchPortState, cssSwitchPortDuplexAdmin, cssSwitchPortDuplexStatus, cssSwitchPortSpeedAdmin, cssSwitchPortSpeedStatus, cssSwitchPortLinkStatus]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
