# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, snmpModules, Counter32, Integer32
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from SNMPv2_TC import TEXTUAL_CONVENTION, TDomain, TAddress, TimeInterval, RowStatus, StorageType, TestAndIncr
from SNMP_FRAMEWORK_MIB import SnmpSecurityModel, SnmpMessageProcessingModel, SnmpSecurityLevel, SnmpAdminString

class SNMP_TARGET_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/SNMP-TARGET-MIB'
	conformance = 5
	name = 'SNMP-TARGET-MIB'
	language = 2
	description = 'This MIB module defines MIB objects which provide\nmechanisms to remotely configure the parameters used\nby an SNMP entity for the generation of SNMP messages.\n\nCopyright (C) The Internet Society (2002). This\nversion of this MIB module is part of RFC 3413;\nsee the RFC itself for full legal notices.'

# nodes
class snmpTargetMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 6, 3, 12])
	name = 'snmpTargetMIB'

class snmpTargetObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 6, 3, 12, 1])
	name = 'snmpTargetObjects'

class snmpTargetConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 6, 3, 12, 3])
	name = 'snmpTargetConformance'

class snmpTargetCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 6, 3, 12, 3, 1])
	name = 'snmpTargetCompliances'

class snmpTargetGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 6, 3, 12, 3, 2])
	name = 'snmpTargetGroups'


# macros
# types 

class SnmpTagValue(pycopia.SMI.Basetypes.OctetString):
	status = 1
	ranges = Ranges(Range(0, 255))
	format = '255t'


class SnmpTagList(pycopia.SMI.Basetypes.OctetString):
	status = 1
	ranges = Ranges(Range(0, 255))
	format = '255t'

# scalars 
class snmpTargetSpinLock(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 6, 3, 12, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.TestAndIncr


class snmpUnavailableContexts(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 6, 3, 12, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class snmpUnknownContexts(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 6, 3, 12, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


# columns
class snmpTargetAddrName(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 6, 3, 12, 1, 2, 1, 1])
	syntaxobject = SnmpAdminString


class snmpTargetAddrTDomain(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 6, 3, 12, 1, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.TDomain


class snmpTargetAddrTAddress(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 6, 3, 12, 1, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.TAddress


class snmpTargetAddrTimeout(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 6, 3, 12, 1, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.TimeInterval


class snmpTargetAddrRetryCount(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 6, 3, 12, 1, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class snmpTargetAddrTagList(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 6, 3, 12, 1, 2, 1, 6])
	syntaxobject = SnmpTagList


class snmpTargetAddrParams(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 6, 3, 12, 1, 2, 1, 7])
	syntaxobject = SnmpAdminString


class snmpTargetAddrStorageType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 6, 3, 12, 1, 2, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


class snmpTargetAddrRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 6, 3, 12, 1, 2, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class snmpTargetParamsName(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 6, 3, 12, 1, 3, 1, 1])
	syntaxobject = SnmpAdminString


class snmpTargetParamsMPModel(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 6, 3, 12, 1, 3, 1, 2])
	syntaxobject = SnmpMessageProcessingModel


class snmpTargetParamsSecurityModel(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 6, 3, 12, 1, 3, 1, 3])
	syntaxobject = SnmpSecurityModel


class snmpTargetParamsSecurityName(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 6, 3, 12, 1, 3, 1, 4])
	syntaxobject = SnmpAdminString


class snmpTargetParamsSecurityLevel(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 6, 3, 12, 1, 3, 1, 5])
	syntaxobject = SnmpSecurityLevel


class snmpTargetParamsStorageType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 6, 3, 12, 1, 3, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


class snmpTargetParamsRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 6, 3, 12, 1, 3, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


# rows 
class snmpTargetAddrEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([snmpTargetAddrName], True)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 6, 3, 12, 1, 2, 1])
	access = 2
	rowstatus = snmpTargetAddrRowStatus
	columns = {'snmpTargetAddrName': snmpTargetAddrName, 'snmpTargetAddrTDomain': snmpTargetAddrTDomain, 'snmpTargetAddrTAddress': snmpTargetAddrTAddress, 'snmpTargetAddrTimeout': snmpTargetAddrTimeout, 'snmpTargetAddrRetryCount': snmpTargetAddrRetryCount, 'snmpTargetAddrTagList': snmpTargetAddrTagList, 'snmpTargetAddrParams': snmpTargetAddrParams, 'snmpTargetAddrStorageType': snmpTargetAddrStorageType, 'snmpTargetAddrRowStatus': snmpTargetAddrRowStatus}


class snmpTargetParamsEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([snmpTargetParamsName], True)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 6, 3, 12, 1, 3, 1])
	access = 2
	rowstatus = snmpTargetParamsRowStatus
	columns = {'snmpTargetParamsName': snmpTargetParamsName, 'snmpTargetParamsMPModel': snmpTargetParamsMPModel, 'snmpTargetParamsSecurityModel': snmpTargetParamsSecurityModel, 'snmpTargetParamsSecurityName': snmpTargetParamsSecurityName, 'snmpTargetParamsSecurityLevel': snmpTargetParamsSecurityLevel, 'snmpTargetParamsStorageType': snmpTargetParamsStorageType, 'snmpTargetParamsRowStatus': snmpTargetParamsRowStatus}


# notifications (traps) 
# groups 
class snmpTargetBasicGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 6, 3, 12, 3, 2, 1])
	group = [snmpTargetSpinLock, snmpTargetAddrTDomain, snmpTargetAddrTAddress, snmpTargetAddrTagList, snmpTargetAddrParams, snmpTargetAddrStorageType, snmpTargetAddrRowStatus, snmpTargetParamsMPModel, snmpTargetParamsSecurityModel, snmpTargetParamsSecurityName, snmpTargetParamsSecurityLevel, snmpTargetParamsStorageType, snmpTargetParamsRowStatus]

class snmpTargetResponseGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 6, 3, 12, 3, 2, 2])
	group = [snmpTargetAddrTimeout, snmpTargetAddrRetryCount]

class snmpTargetCommandResponderGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 6, 3, 12, 3, 2, 3])
	group = [snmpUnavailableContexts, snmpUnknownContexts]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
