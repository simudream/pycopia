# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, Gauge32, transmission
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from IF_MIB import ifIndex
from SONET_MIB import sonetMediumStuff2, sonetSectionStuff2, sonetLineStuff2, sonetFarEndLineStuff2, sonetPathStuff2, sonetFarEndPathStuff2, sonetMediumType, sonetMediumLineCoding, sonetMediumLineType, sonetMediumCircuitIdentifier, sonetMediumLoopbackConfig, sonetSESthresholdSet, sonetPathCurrentWidth

class ETHER_WIS(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/ETHER-WIS'
	conformance = 5
	name = 'ETHER-WIS'
	language = 2
	description = "The objects in this MIB module are used in conjunction\nwith objects in the SONET-MIB and the MAU-MIB to manage\nthe Ethernet WAN Interface Sublayer (WIS).\n\nThe following reference is used throughout this MIB module:\n\n[IEEE 802.3 Std] refers to:\n   IEEE Std 802.3, 2000 Edition: 'IEEE Standard for\n   Information technology - Telecommunications and\n   information exchange between systems - Local and\n   metropolitan area networks - Specific requirements -\n   Part 3: Carrier sense multiple access with collision\n   detection (CSMA/CD) access method and physical layer\n   specifications', as amended by IEEE Std 802.3ae-2002,\n   'IEEE Standard for Carrier Sense Multiple Access with\n   Collision Detection (CSMA/CD) Access Method and\n   Physical Layer Specifications - Media Access Control\n   (MAC) Parameters, Physical Layer and Management\n   Parameters for 10 Gb/s Operation', 30 August 2002.\n\nOf particular interest are Clause 50, 'WAN Interface\nSublayer (WIS), type 10GBASE-W', Clause 30, '10Mb/s,\n100Mb/s, 1000Mb/s, and 10Gb/s MAC Control, and Link\nAggregation Management', and Clause 45, 'Management\nData Input/Output (MDIO) Interface'.\n\nCopyright (C) The Internet Society (2003).  This version\nof this MIB module is part of RFC 3637;  see the RFC\nitself for full legal notices."

# nodes
class etherWisMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 134])
	name = 'etherWisMIB'

class etherWisObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 134, 1])
	name = 'etherWisObjects'

class etherWisDevice(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 134, 1, 1])
	name = 'etherWisDevice'

class etherWisSection(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 134, 1, 2])
	name = 'etherWisSection'

class etherWisObjectsPath(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 134, 2])
	name = 'etherWisObjectsPath'

class etherWisPath(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 134, 2, 1])
	name = 'etherWisPath'

class etherWisFarEndPath(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 134, 2, 2])
	name = 'etherWisFarEndPath'

class etherWisConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 134, 3])
	name = 'etherWisConformance'

class etherWisGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 134, 3, 1])
	name = 'etherWisGroups'

class etherWisCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 134, 3, 2])
	name = 'etherWisCompliances'


# macros
# types 
# scalars 
# columns
class etherWisDeviceTxTestPatternMode(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 134, 1, 1, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'none'), Enum(2, 'squareWave'), Enum(3, 'prbs31'), Enum(4, 'mixedFrequency')]


class etherWisDeviceRxTestPatternMode(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 134, 1, 1, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'none'), Enum(3, 'prbs31'), Enum(4, 'mixedFrequency')]


class etherWisDeviceRxTestPatternErrors(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 134, 1, 1, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class etherWisSectionCurrentJ0Transmitted(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 134, 1, 2, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class etherWisSectionCurrentJ0Received(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 134, 1, 2, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class etherWisPathCurrentStatus(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 134, 2, 1, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.BITS


class etherWisPathCurrentJ1Transmitted(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 134, 2, 1, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class etherWisPathCurrentJ1Received(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 134, 2, 1, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class etherWisFarEndPathCurrentStatus(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 134, 2, 2, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.BITS


# rows 
class etherWisDeviceEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 134, 1, 1, 1, 1])
	access = 2
	columns = {'etherWisDeviceTxTestPatternMode': etherWisDeviceTxTestPatternMode, 'etherWisDeviceRxTestPatternMode': etherWisDeviceRxTestPatternMode, 'etherWisDeviceRxTestPatternErrors': etherWisDeviceRxTestPatternErrors}


class etherWisSectionCurrentEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 134, 1, 2, 1, 1])
	access = 2
	columns = {'etherWisSectionCurrentJ0Transmitted': etherWisSectionCurrentJ0Transmitted, 'etherWisSectionCurrentJ0Received': etherWisSectionCurrentJ0Received}


class etherWisPathCurrentEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 134, 2, 1, 1, 1])
	access = 2
	columns = {'etherWisPathCurrentStatus': etherWisPathCurrentStatus, 'etherWisPathCurrentJ1Transmitted': etherWisPathCurrentJ1Transmitted, 'etherWisPathCurrentJ1Received': etherWisPathCurrentJ1Received}


class etherWisFarEndPathCurrentEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 134, 2, 2, 1, 1])
	access = 2
	columns = {'etherWisFarEndPathCurrentStatus': etherWisFarEndPathCurrentStatus}


# notifications (traps) 
# groups 
class etherWisDeviceGroupBasic(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 134, 3, 1, 1])
	group = [etherWisDeviceTxTestPatternMode, etherWisDeviceRxTestPatternMode]

class etherWisDeviceGroupExtra(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 134, 3, 1, 2])
	group = [etherWisDeviceRxTestPatternErrors]

class etherWisSectionGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 134, 3, 1, 3])
	group = [etherWisSectionCurrentJ0Transmitted, etherWisSectionCurrentJ0Received]

class etherWisPathGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 134, 3, 1, 4])
	group = [etherWisPathCurrentStatus, etherWisPathCurrentJ1Transmitted, etherWisPathCurrentJ1Received]

class etherWisFarEndPathGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 134, 3, 1, 5])
	group = [etherWisFarEndPathCurrentStatus]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
