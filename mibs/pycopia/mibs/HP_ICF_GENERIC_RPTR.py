# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import Integer32, OBJECT_TYPE, MODULE_IDENTITY, NOTIFICATION_TYPE
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP, NOTIFICATION_GROUP
from SNMPv2_TC import MacAddress, DisplayString, RowStatus, TimeStamp
from HP_ICF_OID import hpicfObjectModules, hpicfGenericRepeater, icfHub, hpicfGenRptrTrapsPrefix

class HP_ICF_GENERIC_RPTR(ModuleObject):
	path = '/usr/share/snmp/mibs/site/HP-ICF-GENERIC-RPTR'
	conformance = 4
	name = 'HP-ICF-GENERIC-RPTR'
	language = 2
	description = 'This MIB module contains object definitions that\nare common to all repeater devices in the HP \nIntegrated Communication Facility product \nline.'

# nodes
class hubSecurity(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 10])
	name = 'hubSecurity'

class hpicfGenRptrMib(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 8])
	name = 'hpicfGenRptrMib'

class hpicfGenRptrConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 8, 1])
	name = 'hpicfGenRptrConformance'

class hpicfGenRptrCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 8, 1, 1])
	name = 'hpicfGenRptrCompliances'

class hpicfGenRptrGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 8, 1, 2])
	name = 'hpicfGenRptrGroups'

class hpGRpBasic(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 1])
	name = 'hpGRpBasic'

class hpGRpBasicGlobal(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 1, 1])
	name = 'hpGRpBasicGlobal'

class hpicfGRpBackupLinks(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 2])
	name = 'hpicfGRpBackupLinks'

class hpGRpPortMapping(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 3])
	name = 'hpGRpPortMapping'

class hpGRpLoadBalancing(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 4])
	name = 'hpGRpLoadBalancing'

class hpicfGRpSwitchConfig(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 5])
	name = 'hpicfGRpSwitchConfig'

class hpicfGRpBridge(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 6])
	name = 'hpicfGRpBridge'


# macros
# types 
# scalars 
class hpGRpSelfHealEnable(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class hpicfBackupLinkNextIndex(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 2, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpGRpPortMapAutoConfigEnable(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 4, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class hpGRpLoadBalanceNow(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 4, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'cantUndo'), Enum(2, 'balancing'), Enum(3, 'completed'), Enum(4, 'undoLast')]


class hpGRpLastLoadBalanceTime(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 4, 3])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class hpicfGRpCurrentPrimarySwitch(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 5, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpicfGRpDesiredPrimarySwitch(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 5, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpGRpBridgeAdminStatus(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 6, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enable'), Enum(2, 'disable')]


# columns
class hubSecPtGroupIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 10, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hubSecPtPortIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 10, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hubSecPtSecurityAddress(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 10, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.MacAddress


class hubSecPtAuthorizedAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 10, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.MacAddress


class hubSecPtPreventEavesdrop(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 10, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enable'), Enum(2, 'disable')]


class hubSecPtAlarmEnable(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 10, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enable'), Enum(2, 'disable')]


class hubSecPtIntrusionFlag(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 10, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'intrusion'), Enum(2, 'noIntrusion')]


class hubIntruderIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 10, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hubIntruderGroup(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 10, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hubIntruderPort(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 10, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hubIntruderAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 10, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.MacAddress


class hubIntruderTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 10, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class hubIntruderType(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 10, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'address'), Enum(2, 'training'), Enum(3, 'both'), Enum(4, 'none')]


class hubIntruderTrainingViolation(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 10, 2, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'noViolation'), Enum(2, 'promiscuousViolation'), Enum(3, 'repeaterViolation')]


class hpSecPtGroupIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 10, 3, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpSecPtPortIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 10, 3, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpSecPtAddressLimit(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 10, 3, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpSecPtLearnMode(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 10, 3, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'learnContinuous'), Enum(2, 'learnFirstN'), Enum(3, 'learnFirstNConditionally'), Enum(4, 'configureSpecific')]


class hpSecPtPreventEavesdrop(ColumnObject):
	status = 2
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 10, 3, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enable'), Enum(2, 'disable')]


class hpSecPtAlarmEnable(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 10, 3, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'disable'), Enum(2, 'sendTrap'), Enum(3, 'sendTrapAndDisablePort')]


class hpSecPtIntrusionFlag(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 10, 3, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'intrusion'), Enum(2, 'noIntrusion')]


class hpSecCfgAddrGroupIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 10, 4, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpSecCfgAddrPortIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 10, 4, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpSecCfgAddress(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 10, 4, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.MacAddress


class hpSecCfgStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 10, 4, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class hpSecAuthAddrGroupIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 10, 5, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpSecAuthAddrPortIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 10, 5, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpSecAuthAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 10, 5, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.MacAddress


class hpGRpRepeaterIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 1, 1, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpGRpRepeaterIfIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 1, 1, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpGRpRepeaterName(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 1, 1, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class hpGRpRepeaterVlanIndex(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 1, 1, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpicfBackupLinkIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 2, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpicfBackupLinkPrimaryGroup(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 2, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpicfBackupLinkPrimaryPort(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 2, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpicfBackupLinkBackupGroup(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 2, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpicfBackupLinkBackupPort(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 2, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpicfBackupLinkAddress(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 2, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.MacAddress


class hpicfBackupLinkTestTime(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 2, 2, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpicfBackupLinkConsecFailures(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 2, 2, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpicfBackupLinkState(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 2, 2, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'notActive'), Enum(2, 'usingPrimary'), Enum(3, 'usingBackup')]


class hpicfBackupLinkFailEventIndex(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 2, 2, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpicfBackupLinkStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 2, 2, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class hpGRpPMSegmentIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 3, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpGRpPMCurrentRptrIndex(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 3, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpGRpPMSegAllowedRptrIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 3, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpGRpPMPortGroupIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 3, 3, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpGRpPMPortIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 3, 3, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpGRpPMPortEntPhysicalIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 3, 3, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpGRpPMPortCurrentRptrIndex(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 3, 3, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpGRpPMPortAllowedRptrIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 3, 4, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpicfGRpSwitchIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 5, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpicfGRpSwitchType(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 5, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'internal'), Enum(2, 'external')]


class hpicfGRpSwitchEntPhysicalIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 5, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpicfGRpSwitchLinkCount(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 5, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpicfGRpSwitchStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 5, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class hpicfGRpSwitchLinkIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 5, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpicfGRpSwitchLinkRptrGroup(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 5, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpicfGRpSwitchLinkRptrPort(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 5, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpicfGRpSwitchLinkState(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 5, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'active'), Enum(2, 'redundant')]


# rows 
class hubSecurePortEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([hubSecPtGroupIndex, hubSecPtPortIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 10, 1, 1])
	access = 2
	columns = {'hubSecPtGroupIndex': hubSecPtGroupIndex, 'hubSecPtPortIndex': hubSecPtPortIndex, 'hubSecPtSecurityAddress': hubSecPtSecurityAddress, 'hubSecPtAuthorizedAddress': hubSecPtAuthorizedAddress, 'hubSecPtPreventEavesdrop': hubSecPtPreventEavesdrop, 'hubSecPtAlarmEnable': hubSecPtAlarmEnable, 'hubSecPtIntrusionFlag': hubSecPtIntrusionFlag}


class hubIntruderLogEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([hubIntruderIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 10, 2, 1])
	access = 2
	columns = {'hubIntruderIndex': hubIntruderIndex, 'hubIntruderGroup': hubIntruderGroup, 'hubIntruderPort': hubIntruderPort, 'hubIntruderAddress': hubIntruderAddress, 'hubIntruderTime': hubIntruderTime, 'hubIntruderType': hubIntruderType, 'hubIntruderTrainingViolation': hubIntruderTrainingViolation}


class hpSecurePortEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([hpSecPtGroupIndex, hpSecPtPortIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 10, 3, 1])
	access = 2
	columns = {'hpSecPtGroupIndex': hpSecPtGroupIndex, 'hpSecPtPortIndex': hpSecPtPortIndex, 'hpSecPtAddressLimit': hpSecPtAddressLimit, 'hpSecPtLearnMode': hpSecPtLearnMode, 'hpSecPtPreventEavesdrop': hpSecPtPreventEavesdrop, 'hpSecPtAlarmEnable': hpSecPtAlarmEnable, 'hpSecPtIntrusionFlag': hpSecPtIntrusionFlag}


class hpSecureCfgAddrEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([hpSecCfgAddrGroupIndex, hpSecCfgAddrPortIndex, hpSecCfgAddress], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 10, 4, 1])
	access = 2
	rowstatus = hpSecCfgStatus
	columns = {'hpSecCfgAddrGroupIndex': hpSecCfgAddrGroupIndex, 'hpSecCfgAddrPortIndex': hpSecCfgAddrPortIndex, 'hpSecCfgAddress': hpSecCfgAddress, 'hpSecCfgStatus': hpSecCfgStatus}


class hpSecureAuthAddrEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([hpSecAuthAddrGroupIndex, hpSecAuthAddrPortIndex, hpSecAuthAddress], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 10, 5, 1])
	access = 2
	columns = {'hpSecAuthAddrGroupIndex': hpSecAuthAddrGroupIndex, 'hpSecAuthAddrPortIndex': hpSecAuthAddrPortIndex, 'hpSecAuthAddress': hpSecAuthAddress}


class hpGRpRepeaterEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([hpGRpRepeaterIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 1, 1, 2, 1])
	access = 2
	columns = {'hpGRpRepeaterIndex': hpGRpRepeaterIndex, 'hpGRpRepeaterIfIndex': hpGRpRepeaterIfIndex, 'hpGRpRepeaterName': hpGRpRepeaterName, 'hpGRpRepeaterVlanIndex': hpGRpRepeaterVlanIndex}


class hpicfBackupLinkEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([hpicfBackupLinkIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 2, 2, 1])
	access = 2
	rowstatus = hpicfBackupLinkStatus
	columns = {'hpicfBackupLinkIndex': hpicfBackupLinkIndex, 'hpicfBackupLinkPrimaryGroup': hpicfBackupLinkPrimaryGroup, 'hpicfBackupLinkPrimaryPort': hpicfBackupLinkPrimaryPort, 'hpicfBackupLinkBackupGroup': hpicfBackupLinkBackupGroup, 'hpicfBackupLinkBackupPort': hpicfBackupLinkBackupPort, 'hpicfBackupLinkAddress': hpicfBackupLinkAddress, 'hpicfBackupLinkTestTime': hpicfBackupLinkTestTime, 'hpicfBackupLinkConsecFailures': hpicfBackupLinkConsecFailures, 'hpicfBackupLinkState': hpicfBackupLinkState, 'hpicfBackupLinkFailEventIndex': hpicfBackupLinkFailEventIndex, 'hpicfBackupLinkStatus': hpicfBackupLinkStatus}


class hpGRpPMSegmentEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([hpGRpPMSegmentIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 3, 1, 1])
	access = 2
	columns = {'hpGRpPMSegmentIndex': hpGRpPMSegmentIndex, 'hpGRpPMCurrentRptrIndex': hpGRpPMCurrentRptrIndex}


class hpGRpPMSegAllowedRptrEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([hpGRpPMSegmentIndex, hpGRpPMSegAllowedRptrIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 3, 2, 1])
	access = 2
	columns = {'hpGRpPMSegAllowedRptrIndex': hpGRpPMSegAllowedRptrIndex}


class hpGRpPMPortEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([hpGRpPMPortGroupIndex, hpGRpPMPortIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 3, 3, 1])
	access = 2
	columns = {'hpGRpPMPortGroupIndex': hpGRpPMPortGroupIndex, 'hpGRpPMPortIndex': hpGRpPMPortIndex, 'hpGRpPMPortEntPhysicalIndex': hpGRpPMPortEntPhysicalIndex, 'hpGRpPMPortCurrentRptrIndex': hpGRpPMPortCurrentRptrIndex}


class hpGRpPMPortAllowedRptrEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([hpGRpPMPortGroupIndex, hpGRpPMPortIndex, hpGRpPMPortAllowedRptrIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 3, 4, 1])
	access = 2
	columns = {'hpGRpPMPortAllowedRptrIndex': hpGRpPMPortAllowedRptrIndex}


class hpicfGRpSwitchEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([hpicfGRpSwitchIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 5, 1, 1])
	access = 2
	rowstatus = hpicfGRpSwitchStatus
	columns = {'hpicfGRpSwitchIndex': hpicfGRpSwitchIndex, 'hpicfGRpSwitchType': hpicfGRpSwitchType, 'hpicfGRpSwitchEntPhysicalIndex': hpicfGRpSwitchEntPhysicalIndex, 'hpicfGRpSwitchLinkCount': hpicfGRpSwitchLinkCount, 'hpicfGRpSwitchStatus': hpicfGRpSwitchStatus}


class hpicfGRpSwitchLinkEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([hpicfGRpSwitchIndex, hpicfGRpSwitchLinkIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 4, 5, 2, 1])
	access = 2
	columns = {'hpicfGRpSwitchLinkIndex': hpicfGRpSwitchLinkIndex, 'hpicfGRpSwitchLinkRptrGroup': hpicfGRpSwitchLinkRptrGroup, 'hpicfGRpSwitchLinkRptrPort': hpicfGRpSwitchLinkRptrPort, 'hpicfGRpSwitchLinkState': hpicfGRpSwitchLinkState}


# notifications (traps) 
class hpicfIntrusionTrap(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 12, 4, 0, 1])

class hpicfBackupLinkTrap(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 12, 4, 0, 2])

# groups 
class hpicfHubSecurityGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 8, 1, 2, 1])
	group = [hubSecPtGroupIndex, hubSecPtPortIndex, hubSecPtSecurityAddress, hubSecPtAuthorizedAddress, hubSecPtPreventEavesdrop, hubSecPtAlarmEnable, hubSecPtIntrusionFlag, hubIntruderIndex, hubIntruderGroup, hubIntruderPort, hubIntruderAddress, hubIntruderTime]

class hpicfGenRptrBasicGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 8, 1, 2, 2])
	group = [hpGRpSelfHealEnable]

class hpicfGenRptrSecPtGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 8, 1, 2, 3])
	group = [hubSecPtGroupIndex, hubSecPtPortIndex, hubSecPtSecurityAddress, hubSecPtAuthorizedAddress, hubSecPtPreventEavesdrop, hubSecPtAlarmEnable, hubSecPtIntrusionFlag, hubIntruderIndex, hubIntruderGroup, hubIntruderPort, hubIntruderAddress, hubIntruderTime, hubIntruderType, hubIntruderTrainingViolation]

class hpicfGenRptrInfoGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 8, 1, 2, 4])
	group = [hpGRpRepeaterIfIndex, hpGRpRepeaterName, hpGRpRepeaterVlanIndex]

class hpicfGenRptrBkpLinkGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 8, 1, 2, 5])
	group = [hpicfBackupLinkNextIndex, hpicfBackupLinkPrimaryGroup, hpicfBackupLinkPrimaryPort, hpicfBackupLinkBackupGroup, hpicfBackupLinkBackupPort, hpicfBackupLinkAddress, hpicfBackupLinkTestTime, hpicfBackupLinkConsecFailures, hpicfBackupLinkState, hpicfBackupLinkFailEventIndex, hpicfBackupLinkStatus]

class hpicfGenRptrPortMappingGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 8, 1, 2, 6])
	group = [hpGRpPMCurrentRptrIndex, hpGRpPMSegAllowedRptrIndex, hpGRpPMPortEntPhysicalIndex, hpGRpPMPortCurrentRptrIndex, hpGRpPMPortAllowedRptrIndex, hpGRpPortMapAutoConfigEnable]

class hpicfGenRptrLoadBalanceGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 8, 1, 2, 7])
	group = [hpGRpLoadBalanceNow, hpGRpLastLoadBalanceTime]

class hpicfGenRptrSwitchConfigGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 8, 1, 2, 8])
	group = [hpicfGRpSwitchType, hpicfGRpSwitchEntPhysicalIndex, hpicfGRpSwitchLinkCount, hpicfGRpSwitchStatus, hpicfGRpSwitchLinkRptrGroup, hpicfGRpSwitchLinkRptrPort, hpicfGRpSwitchLinkState, hpicfGRpCurrentPrimarySwitch, hpicfGRpDesiredPrimarySwitch]

class hpicfGenRptrSecNotifyGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 8, 1, 2, 9])
	group = [hpicfIntrusionTrap]

class hpicfGenRptrBkpLinkNotifyGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 8, 1, 2, 10])
	group = [hpicfBackupLinkTrap]

class hpicfSecPtGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 8, 1, 2, 11])
	group = [hpSecPtAddressLimit, hpSecPtLearnMode, hpSecPtPreventEavesdrop, hpSecPtAlarmEnable, hpSecPtIntrusionFlag, hpSecCfgStatus, hpSecAuthAddress, hubIntruderIndex, hubIntruderGroup, hubIntruderPort, hubIntruderAddress, hubIntruderTime, hubIntruderType, hubIntruderTrainingViolation]

class hpicfGenRptrBridgeGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 8, 1, 2, 12])
	group = [hpGRpBridgeAdminStatus]

class hpicfSecPtGroup2(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 8, 1, 2, 13])
	group = [hpSecPtAddressLimit, hpSecPtLearnMode, hpSecPtAlarmEnable, hpSecPtIntrusionFlag, hpSecCfgStatus, hpSecAuthAddress, hubIntruderIndex, hubIntruderGroup, hubIntruderPort, hubIntruderAddress, hubIntruderTime, hubIntruderType, hubIntruderTrainingViolation]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
