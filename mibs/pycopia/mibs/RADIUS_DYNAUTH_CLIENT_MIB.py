# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, Counter32, Gauge32, Integer32, mib_2, TimeTicks
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from INET_ADDRESS_MIB import InetAddressType, InetAddress, InetPortNumber
from SNMP_FRAMEWORK_MIB import SnmpAdminString

class RADIUS_DYNAUTH_CLIENT_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/RADIUS-DYNAUTH-CLIENT-MIB'
	conformance = 3
	name = 'RADIUS-DYNAUTH-CLIENT-MIB'
	language = 2
	description = 'The MIB module for entities implementing the client\nside of the Dynamic Authorization Extensions to the\nRemote Authentication Dial-In User Service (RADIUS)\nprotocol. Copyright (C) The Internet Society (2006).\nInitial version as published in RFC 4672;\nfor full legal notices see the RFC itself.'

# nodes
class radiusDynAuthClientMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145])
	name = 'radiusDynAuthClientMIB'

class radiusDynAuthClientMIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 1])
	name = 'radiusDynAuthClientMIBObjects'

class radiusDynAuthClientScalars(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 1, 1])
	name = 'radiusDynAuthClientScalars'

class radiusDynAuthClientMIBConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 2])
	name = 'radiusDynAuthClientMIBConformance'

class radiusDynAuthClientMIBCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 2, 1])
	name = 'radiusDynAuthClientMIBCompliances'

class radiusDynAuthClientMIBGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 2, 2])
	name = 'radiusDynAuthClientMIBGroups'


# macros
# types 
# scalars 
class radiusDynAuthClientDisconInvalidServerAddresses(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class radiusDynAuthClientCoAInvalidServerAddresses(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


# columns
class radiusDynAuthServerIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class radiusDynAuthServerAddressType(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 2])
	syntaxobject = InetAddressType


class radiusDynAuthServerAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 3])
	syntaxobject = InetAddress


class radiusDynAuthServerClientPortNumber(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 4])
	syntaxobject = InetPortNumber


class radiusDynAuthServerID(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 5])
	syntaxobject = SnmpAdminString


class radiusDynAuthClientRoundTripTime(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks
	access = 4
	units = 'hundredths of a second'


class radiusDynAuthClientDisconRequests(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'requests'


class radiusDynAuthClientDisconAuthOnlyRequests(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'requests'


class radiusDynAuthClientDisconRetransmissions(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'retransmissions'


class radiusDynAuthClientDisconAcks(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'replies'


class radiusDynAuthClientDisconNaks(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'replies'


class radiusDynAuthClientDisconNakAuthOnlyRequest(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'replies'


class radiusDynAuthClientDisconNakSessNoContext(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'replies'


class radiusDynAuthClientMalformedDisconResponses(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'replies'


class radiusDynAuthClientDisconBadAuthenticators(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'replies'


class radiusDynAuthClientDisconPendingRequests(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32
	access = 4
	units = 'requests'


class radiusDynAuthClientDisconTimeouts(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'timeouts'


class radiusDynAuthClientDisconPacketsDropped(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'replies'


class radiusDynAuthClientCoARequests(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'requests'


class radiusDynAuthClientCoAAuthOnlyRequest(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 20])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'requests'


class radiusDynAuthClientCoARetransmissions(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 21])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'retransmissions'


class radiusDynAuthClientCoAAcks(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 22])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'replies'


class radiusDynAuthClientCoANaks(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 23])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'replies'


class radiusDynAuthClientCoANakAuthOnlyRequest(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 24])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'replies'


class radiusDynAuthClientCoANakSessNoContext(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 25])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'replies'


class radiusDynAuthClientMalformedCoAResponses(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 26])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'replies'


class radiusDynAuthClientCoABadAuthenticators(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 27])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'replies'


class radiusDynAuthClientCoAPendingRequests(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 28])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32
	access = 4
	units = 'requests'


class radiusDynAuthClientCoATimeouts(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 29])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'timeouts'


class radiusDynAuthClientCoAPacketsDropped(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 30])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'replies'


class radiusDynAuthClientUnknownTypes(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 31])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'replies'


class radiusDynAuthClientCounterDiscontinuity(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 1, 2, 1, 32])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks
	access = 4
	units = 'hundredths of a second'


# rows 
class radiusDynAuthServerEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([radiusDynAuthServerIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 1, 2, 1])
	access = 2
	columns = {'radiusDynAuthServerIndex': radiusDynAuthServerIndex, 'radiusDynAuthServerAddressType': radiusDynAuthServerAddressType, 'radiusDynAuthServerAddress': radiusDynAuthServerAddress, 'radiusDynAuthServerClientPortNumber': radiusDynAuthServerClientPortNumber, 'radiusDynAuthServerID': radiusDynAuthServerID, 'radiusDynAuthClientRoundTripTime': radiusDynAuthClientRoundTripTime, 'radiusDynAuthClientDisconRequests': radiusDynAuthClientDisconRequests, 'radiusDynAuthClientDisconAuthOnlyRequests': radiusDynAuthClientDisconAuthOnlyRequests, 'radiusDynAuthClientDisconRetransmissions': radiusDynAuthClientDisconRetransmissions, 'radiusDynAuthClientDisconAcks': radiusDynAuthClientDisconAcks, 'radiusDynAuthClientDisconNaks': radiusDynAuthClientDisconNaks, 'radiusDynAuthClientDisconNakAuthOnlyRequest': radiusDynAuthClientDisconNakAuthOnlyRequest, 'radiusDynAuthClientDisconNakSessNoContext': radiusDynAuthClientDisconNakSessNoContext, 'radiusDynAuthClientMalformedDisconResponses': radiusDynAuthClientMalformedDisconResponses, 'radiusDynAuthClientDisconBadAuthenticators': radiusDynAuthClientDisconBadAuthenticators, 'radiusDynAuthClientDisconPendingRequests': radiusDynAuthClientDisconPendingRequests, 'radiusDynAuthClientDisconTimeouts': radiusDynAuthClientDisconTimeouts, 'radiusDynAuthClientDisconPacketsDropped': radiusDynAuthClientDisconPacketsDropped, 'radiusDynAuthClientCoARequests': radiusDynAuthClientCoARequests, 'radiusDynAuthClientCoAAuthOnlyRequest': radiusDynAuthClientCoAAuthOnlyRequest, 'radiusDynAuthClientCoARetransmissions': radiusDynAuthClientCoARetransmissions, 'radiusDynAuthClientCoAAcks': radiusDynAuthClientCoAAcks, 'radiusDynAuthClientCoANaks': radiusDynAuthClientCoANaks, 'radiusDynAuthClientCoANakAuthOnlyRequest': radiusDynAuthClientCoANakAuthOnlyRequest, 'radiusDynAuthClientCoANakSessNoContext': radiusDynAuthClientCoANakSessNoContext, 'radiusDynAuthClientMalformedCoAResponses': radiusDynAuthClientMalformedCoAResponses, 'radiusDynAuthClientCoABadAuthenticators': radiusDynAuthClientCoABadAuthenticators, 'radiusDynAuthClientCoAPendingRequests': radiusDynAuthClientCoAPendingRequests, 'radiusDynAuthClientCoATimeouts': radiusDynAuthClientCoATimeouts, 'radiusDynAuthClientCoAPacketsDropped': radiusDynAuthClientCoAPacketsDropped, 'radiusDynAuthClientUnknownTypes': radiusDynAuthClientUnknownTypes, 'radiusDynAuthClientCounterDiscontinuity': radiusDynAuthClientCounterDiscontinuity}


# notifications (traps) 
# groups 
class radiusDynAuthClientMIBGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 2, 2, 1])
	group = [radiusDynAuthClientDisconInvalidServerAddresses, radiusDynAuthClientCoAInvalidServerAddresses, radiusDynAuthServerAddressType, radiusDynAuthServerAddress, radiusDynAuthServerClientPortNumber, radiusDynAuthServerID, radiusDynAuthClientRoundTripTime, radiusDynAuthClientDisconRequests, radiusDynAuthClientDisconRetransmissions, radiusDynAuthClientDisconAcks, radiusDynAuthClientDisconNaks, radiusDynAuthClientMalformedDisconResponses, radiusDynAuthClientDisconBadAuthenticators, radiusDynAuthClientDisconPendingRequests, radiusDynAuthClientDisconTimeouts, radiusDynAuthClientDisconPacketsDropped, radiusDynAuthClientCoARequests, radiusDynAuthClientCoARetransmissions, radiusDynAuthClientCoAAcks, radiusDynAuthClientCoANaks, radiusDynAuthClientMalformedCoAResponses, radiusDynAuthClientCoABadAuthenticators, radiusDynAuthClientCoAPendingRequests, radiusDynAuthClientCoATimeouts, radiusDynAuthClientCoAPacketsDropped, radiusDynAuthClientUnknownTypes, radiusDynAuthClientCounterDiscontinuity]

class radiusDynAuthClientAuthOnlyGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 2, 2, 2])
	group = [radiusDynAuthClientDisconAuthOnlyRequests, radiusDynAuthClientDisconNakAuthOnlyRequest, radiusDynAuthClientCoAAuthOnlyRequest, radiusDynAuthClientCoANakAuthOnlyRequest]

class radiusDynAuthClientNoSessGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 145, 2, 2, 3])
	group = [radiusDynAuthClientDisconNakSessNoContext, radiusDynAuthClientCoANakSessNoContext]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
