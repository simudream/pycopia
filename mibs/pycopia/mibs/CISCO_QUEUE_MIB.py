# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, Counter32, Integer32, Gauge32
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from RFC1213_MIB import ifIndex
from SNMPv2_TC import TEXTUAL_CONVENTION
from CISCO_SMI import ciscoMgmt

class CISCO_QUEUE_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/site/CISCO-QUEUE-MIB'
	conformance = 2
	name = 'CISCO-QUEUE-MIB'
	language = 2
	description = 'This is the MIB module for objects used to manage\ninterface queuing in Cisco devices.'

# nodes
class ciscoQueueMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 37])
	name = 'ciscoQueueMIB'

class ciscoQueueObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 37, 1])
	name = 'ciscoQueueObjects'

class ciscoQueueTraps(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 37, 2])
	name = 'ciscoQueueTraps'

class ciscoQueueConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 37, 3])
	name = 'ciscoQueueConformance'

class cQCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 37, 3, 1])
	name = 'cQCompliances'

class cQGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 37, 3, 2])
	name = 'cQGroups'


# macros
# types 

class CQAlgorithm(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'fifo'), Enum(2, 'priority'), Enum(3, 'custom'), Enum(4, 'weightedFair')]

# scalars 
# columns
class cQIfQType(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 37, 1, 1, 1, 1])
	syntaxobject = CQAlgorithm


class cQIfTxLimit(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 37, 1, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class cQIfSubqueues(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 37, 1, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class cQStatsQNumber(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 37, 1, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class cQStatsDepth(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 37, 1, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class cQStatsMaxDepth(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 37, 1, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class cQStatsDiscards(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 37, 1, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cQRotationOctets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 37, 1, 3, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


# rows 
class cQIfEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 37, 1, 1, 1])
	access = 2
	columns = {'cQIfQType': cQIfQType, 'cQIfTxLimit': cQIfTxLimit, 'cQIfSubqueues': cQIfSubqueues}


class cQStatsEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, cQStatsQNumber], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 37, 1, 2, 1])
	access = 2
	columns = {'cQStatsQNumber': cQStatsQNumber, 'cQStatsDepth': cQStatsDepth, 'cQStatsMaxDepth': cQStatsMaxDepth, 'cQStatsDiscards': cQStatsDiscards}


class cQRotationEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, cQStatsQNumber], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 37, 1, 3, 1])
	access = 2
	columns = {'cQRotationOctets': cQRotationOctets}


# notifications (traps) 
# groups 
class cQIfGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 37, 3, 2, 1])
	group = [cQIfQType, cQIfTxLimit, cQIfSubqueues]

class cQStatsGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 37, 3, 2, 2])
	group = [cQStatsDepth, cQStatsMaxDepth, cQStatsDiscards]

class cQRotationGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 37, 3, 2, 3])
	group = [cQRotationOctets]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
