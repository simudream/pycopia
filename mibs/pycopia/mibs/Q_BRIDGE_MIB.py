# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from SNMP_FRAMEWORK_MIB import SnmpAdminString
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, Counter32, Counter64, Unsigned32, TimeTicks, Integer32
from P_BRIDGE_MIB import EnabledStatus
from RMON2_MIB import TimeFilter
from BRIDGE_MIB import dot1dBridge, dot1dBasePortEntry, dot1dBasePort
from SNMPv2_TC import RowStatus, TruthValue, TEXTUAL_CONVENTION, MacAddress

class Q_BRIDGE_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/Q-BRIDGE-MIB'
	conformance = 4
	name = 'Q-BRIDGE-MIB'
	language = 2
	description = 'The VLAN Bridge MIB module for managing Virtual Bridged\nLocal Area Networks, as defined by IEEE 802.1Q-2003,\nincluding Restricted Vlan Registration defined by\nIEEE 802.1u-2001 and Vlan Classification defined by\nIEEE 802.1v-2001.\n\nCopyright (C) The Internet Society (2006).  This version of\nthis MIB module is part of RFC 4363; See the RFC itself for\nfull legal notices.'

# nodes
class qBridgeMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7])
	name = 'qBridgeMIB'

class qBridgeMIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1])
	name = 'qBridgeMIBObjects'

class dot1qBase(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 1])
	name = 'dot1qBase'

class dot1qTp(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 2])
	name = 'dot1qTp'

class dot1qStatic(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 3])
	name = 'dot1qStatic'

class dot1qVlan(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4])
	name = 'dot1qVlan'

class dot1vProtocol(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 5])
	name = 'dot1vProtocol'

class qBridgeConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 2])
	name = 'qBridgeConformance'

class qBridgeGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 2, 1])
	name = 'qBridgeGroups'

class qBridgeCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 2, 2])
	name = 'qBridgeCompliances'


# macros
# types 

class PortList(pycopia.SMI.Basetypes.OctetString):
	status = 1


class VlanIndex(pycopia.SMI.Basetypes.Unsigned32):
	status = 1
	format = 'd'


class VlanId(pycopia.SMI.Basetypes.Integer32):
	status = 1
	ranges = Ranges(Range(1, 4094))
	format = 'd'


class VlanIdOrAny(pycopia.SMI.Basetypes.Integer32):
	status = 1
	ranges = Ranges(Range(1, 4095))
	format = 'd'


class VlanIdOrNone(pycopia.SMI.Basetypes.Integer32):
	status = 1
	ranges = Ranges(Range(0, 4094))
	format = 'd'


class VlanIdOrAnyOrNone(pycopia.SMI.Basetypes.Integer32):
	status = 1
	ranges = Ranges(Range(0, 4095))
	format = 'd'

# scalars 
class dot1qVlanVersionNumber(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'version1')]


class dot1qMaxVlanId(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 1, 2])
	syntaxobject = VlanId


class dot1qMaxSupportedVlans(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class dot1qNumVlans(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class dot1qGvrpStatus(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 1, 5])
	syntaxobject = EnabledStatus


class dot1qVlanNumDeletes(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4, 1])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dot1qNextFreeLocalVlanIndex(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dot1qConstraintSetDefault(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4, 9])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dot1qConstraintTypeDefault(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4, 10])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'independent'), Enum(2, 'shared')]


# columns
class dot1qFdbId(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 2, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class dot1qFdbDynamicCount(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 2, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dot1qTpFdbAddress(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 2, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.MacAddress


class dot1qTpFdbPort(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 2, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dot1qTpFdbStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 2, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'invalid'), Enum(3, 'learned'), Enum(4, 'self'), Enum(5, 'mgmt')]


class dot1qTpGroupAddress(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 2, 3, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.MacAddress


class dot1qTpGroupEgressPorts(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 2, 3, 1, 2])
	syntaxobject = PortList


class dot1qTpGroupLearnt(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 2, 3, 1, 3])
	syntaxobject = PortList


class dot1qForwardAllPorts(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 2, 4, 1, 1])
	syntaxobject = PortList


class dot1qForwardAllStaticPorts(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 2, 4, 1, 2])
	syntaxobject = PortList


class dot1qForwardAllForbiddenPorts(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 2, 4, 1, 3])
	syntaxobject = PortList


class dot1qForwardUnregisteredPorts(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 2, 5, 1, 1])
	syntaxobject = PortList


class dot1qForwardUnregisteredStaticPorts(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 2, 5, 1, 2])
	syntaxobject = PortList


class dot1qForwardUnregisteredForbiddenPorts(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 2, 5, 1, 3])
	syntaxobject = PortList


class dot1qStaticUnicastAddress(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 3, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.MacAddress


class dot1qStaticUnicastReceivePort(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 3, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dot1qStaticUnicastAllowedToGoTo(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 3, 1, 1, 3])
	syntaxobject = PortList


class dot1qStaticUnicastStatus(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 3, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'invalid'), Enum(3, 'permanent'), Enum(4, 'deleteOnReset'), Enum(5, 'deleteOnTimeout')]


class dot1qStaticMulticastAddress(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 3, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.MacAddress


class dot1qStaticMulticastReceivePort(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 3, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dot1qStaticMulticastStaticEgressPorts(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 3, 2, 1, 3])
	syntaxobject = PortList


class dot1qStaticMulticastForbiddenEgressPorts(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 3, 2, 1, 4])
	syntaxobject = PortList


class dot1qStaticMulticastStatus(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 3, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'invalid'), Enum(3, 'permanent'), Enum(4, 'deleteOnReset'), Enum(5, 'deleteOnTimeout')]


class dot1qVlanTimeMark(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4, 2, 1, 1])
	syntaxobject = TimeFilter


class dot1qVlanIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4, 2, 1, 2])
	syntaxobject = VlanIndex


class dot1qVlanFdbId(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class dot1qVlanCurrentEgressPorts(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4, 2, 1, 4])
	syntaxobject = PortList


class dot1qVlanCurrentUntaggedPorts(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4, 2, 1, 5])
	syntaxobject = PortList


class dot1qVlanStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'permanent'), Enum(3, 'dynamicGvrp')]


class dot1qVlanCreationTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4, 2, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class dot1qVlanStaticName(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4, 3, 1, 1])
	syntaxobject = SnmpAdminString


class dot1qVlanStaticEgressPorts(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4, 3, 1, 2])
	syntaxobject = PortList


class dot1qVlanForbiddenEgressPorts(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4, 3, 1, 3])
	syntaxobject = PortList


class dot1qVlanStaticUntaggedPorts(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4, 3, 1, 4])
	syntaxobject = PortList


class dot1qVlanStaticRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4, 3, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class dot1qPvid(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4, 5, 1, 1])
	syntaxobject = VlanIndex


class dot1qPortAcceptableFrameTypes(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4, 5, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'admitAll'), Enum(2, 'admitOnlyVlanTagged')]


class dot1qPortIngressFiltering(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4, 5, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class dot1qPortGvrpStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4, 5, 1, 4])
	syntaxobject = EnabledStatus


class dot1qPortGvrpFailedRegistrations(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4, 5, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dot1qPortGvrpLastPduOrigin(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4, 5, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.MacAddress


class dot1qPortRestrictedVlanRegistration(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4, 5, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class dot1qTpVlanPortInFrames(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4, 6, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dot1qTpVlanPortOutFrames(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4, 6, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dot1qTpVlanPortInDiscards(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4, 6, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dot1qTpVlanPortInOverflowFrames(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4, 6, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dot1qTpVlanPortOutOverflowFrames(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4, 6, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dot1qTpVlanPortInOverflowDiscards(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4, 6, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class dot1qTpVlanPortHCInFrames(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4, 7, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class dot1qTpVlanPortHCOutFrames(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4, 7, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class dot1qTpVlanPortHCInDiscards(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4, 7, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class dot1qConstraintVlan(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4, 8, 1, 1])
	syntaxobject = VlanIndex


class dot1qConstraintSet(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4, 8, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dot1qConstraintType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4, 8, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'independent'), Enum(2, 'shared')]


class dot1qConstraintStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4, 8, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class dot1vProtocolTemplateFrameType(ColumnObject):
	status = 1
	access = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 5, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'ethernet'), Enum(2, 'rfc1042'), Enum(3, 'snap8021H'), Enum(4, 'snapOther'), Enum(5, 'llcOther')]


class dot1vProtocolTemplateProtocolValue(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 5, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class dot1vProtocolGroupId(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 5, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dot1vProtocolGroupRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 5, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class dot1vProtocolPortGroupId(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 5, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dot1vProtocolPortGroupVid(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 5, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class dot1vProtocolPortRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 5, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


# rows 
class dot1qFdbEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([dot1qFdbId], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 2, 1, 1])
	access = 2
	columns = {'dot1qFdbId': dot1qFdbId, 'dot1qFdbDynamicCount': dot1qFdbDynamicCount}


class dot1qTpFdbEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([dot1qFdbId, dot1qTpFdbAddress], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 2, 2, 1])
	access = 2
	columns = {'dot1qTpFdbAddress': dot1qTpFdbAddress, 'dot1qTpFdbPort': dot1qTpFdbPort, 'dot1qTpFdbStatus': dot1qTpFdbStatus}


class dot1qTpGroupEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([dot1qVlanIndex, dot1qTpGroupAddress], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 2, 3, 1])
	access = 2
	columns = {'dot1qTpGroupAddress': dot1qTpGroupAddress, 'dot1qTpGroupEgressPorts': dot1qTpGroupEgressPorts, 'dot1qTpGroupLearnt': dot1qTpGroupLearnt}


class dot1qForwardAllEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([dot1qVlanIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 2, 4, 1])
	access = 2
	columns = {'dot1qForwardAllPorts': dot1qForwardAllPorts, 'dot1qForwardAllStaticPorts': dot1qForwardAllStaticPorts, 'dot1qForwardAllForbiddenPorts': dot1qForwardAllForbiddenPorts}


class dot1qForwardUnregisteredEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([dot1qVlanIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 2, 5, 1])
	access = 2
	columns = {'dot1qForwardUnregisteredPorts': dot1qForwardUnregisteredPorts, 'dot1qForwardUnregisteredStaticPorts': dot1qForwardUnregisteredStaticPorts, 'dot1qForwardUnregisteredForbiddenPorts': dot1qForwardUnregisteredForbiddenPorts}


class dot1qStaticUnicastEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([dot1qFdbId, dot1qStaticUnicastAddress, dot1qStaticUnicastReceivePort], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 3, 1, 1])
	access = 2
	columns = {'dot1qStaticUnicastAddress': dot1qStaticUnicastAddress, 'dot1qStaticUnicastReceivePort': dot1qStaticUnicastReceivePort, 'dot1qStaticUnicastAllowedToGoTo': dot1qStaticUnicastAllowedToGoTo, 'dot1qStaticUnicastStatus': dot1qStaticUnicastStatus}


class dot1qStaticMulticastEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([dot1qVlanIndex, dot1qStaticMulticastAddress, dot1qStaticMulticastReceivePort], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 3, 2, 1])
	access = 2
	columns = {'dot1qStaticMulticastAddress': dot1qStaticMulticastAddress, 'dot1qStaticMulticastReceivePort': dot1qStaticMulticastReceivePort, 'dot1qStaticMulticastStaticEgressPorts': dot1qStaticMulticastStaticEgressPorts, 'dot1qStaticMulticastForbiddenEgressPorts': dot1qStaticMulticastForbiddenEgressPorts, 'dot1qStaticMulticastStatus': dot1qStaticMulticastStatus}


class dot1qVlanCurrentEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([dot1qVlanTimeMark, dot1qVlanIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4, 2, 1])
	access = 2
	columns = {'dot1qVlanTimeMark': dot1qVlanTimeMark, 'dot1qVlanIndex': dot1qVlanIndex, 'dot1qVlanFdbId': dot1qVlanFdbId, 'dot1qVlanCurrentEgressPorts': dot1qVlanCurrentEgressPorts, 'dot1qVlanCurrentUntaggedPorts': dot1qVlanCurrentUntaggedPorts, 'dot1qVlanStatus': dot1qVlanStatus, 'dot1qVlanCreationTime': dot1qVlanCreationTime}


class dot1qVlanStaticEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([dot1qVlanIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4, 3, 1])
	access = 2
	rowstatus = dot1qVlanStaticRowStatus
	columns = {'dot1qVlanStaticName': dot1qVlanStaticName, 'dot1qVlanStaticEgressPorts': dot1qVlanStaticEgressPorts, 'dot1qVlanForbiddenEgressPorts': dot1qVlanForbiddenEgressPorts, 'dot1qVlanStaticUntaggedPorts': dot1qVlanStaticUntaggedPorts, 'dot1qVlanStaticRowStatus': dot1qVlanStaticRowStatus}


from BRIDGE_MIB import dot1dBasePort
class dot1qPortVlanEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([dot1dBasePort], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4, 5, 1])
	access = 2
	columns = {'dot1qPvid': dot1qPvid, 'dot1qPortAcceptableFrameTypes': dot1qPortAcceptableFrameTypes, 'dot1qPortIngressFiltering': dot1qPortIngressFiltering, 'dot1qPortGvrpStatus': dot1qPortGvrpStatus, 'dot1qPortGvrpFailedRegistrations': dot1qPortGvrpFailedRegistrations, 'dot1qPortGvrpLastPduOrigin': dot1qPortGvrpLastPduOrigin, 'dot1qPortRestrictedVlanRegistration': dot1qPortRestrictedVlanRegistration}


class dot1qPortVlanStatisticsEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([dot1dBasePort, dot1qVlanIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4, 6, 1])
	access = 2
	columns = {'dot1qTpVlanPortInFrames': dot1qTpVlanPortInFrames, 'dot1qTpVlanPortOutFrames': dot1qTpVlanPortOutFrames, 'dot1qTpVlanPortInDiscards': dot1qTpVlanPortInDiscards, 'dot1qTpVlanPortInOverflowFrames': dot1qTpVlanPortInOverflowFrames, 'dot1qTpVlanPortOutOverflowFrames': dot1qTpVlanPortOutOverflowFrames, 'dot1qTpVlanPortInOverflowDiscards': dot1qTpVlanPortInOverflowDiscards}


class dot1qPortVlanHCStatisticsEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([dot1dBasePort, dot1qVlanIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4, 7, 1])
	access = 2
	columns = {'dot1qTpVlanPortHCInFrames': dot1qTpVlanPortHCInFrames, 'dot1qTpVlanPortHCOutFrames': dot1qTpVlanPortHCOutFrames, 'dot1qTpVlanPortHCInDiscards': dot1qTpVlanPortHCInDiscards}


class dot1qLearningConstraintsEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([dot1qConstraintVlan, dot1qConstraintSet], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 4, 8, 1])
	access = 2
	rowstatus = dot1qConstraintStatus
	columns = {'dot1qConstraintVlan': dot1qConstraintVlan, 'dot1qConstraintSet': dot1qConstraintSet, 'dot1qConstraintType': dot1qConstraintType, 'dot1qConstraintStatus': dot1qConstraintStatus}


class dot1vProtocolGroupEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([dot1vProtocolTemplateFrameType, dot1vProtocolTemplateProtocolValue], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 5, 1, 1])
	access = 2
	rowstatus = dot1vProtocolGroupRowStatus
	columns = {'dot1vProtocolTemplateFrameType': dot1vProtocolTemplateFrameType, 'dot1vProtocolTemplateProtocolValue': dot1vProtocolTemplateProtocolValue, 'dot1vProtocolGroupId': dot1vProtocolGroupId, 'dot1vProtocolGroupRowStatus': dot1vProtocolGroupRowStatus}


class dot1vProtocolPortEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([dot1dBasePort, dot1vProtocolPortGroupId], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 1, 5, 2, 1])
	access = 2
	rowstatus = dot1vProtocolPortRowStatus
	columns = {'dot1vProtocolPortGroupId': dot1vProtocolPortGroupId, 'dot1vProtocolPortGroupVid': dot1vProtocolPortGroupVid, 'dot1vProtocolPortRowStatus': dot1vProtocolPortRowStatus}


# notifications (traps) 
# groups 
class qBridgeBaseGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 2, 1, 1])
	group = [dot1qVlanVersionNumber, dot1qMaxVlanId, dot1qMaxSupportedVlans, dot1qNumVlans, dot1qGvrpStatus]

class qBridgeFdbUnicastGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 2, 1, 2])
	group = [dot1qFdbDynamicCount, dot1qTpFdbPort, dot1qTpFdbStatus]

class qBridgeFdbMulticastGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 2, 1, 3])
	group = [dot1qTpGroupEgressPorts, dot1qTpGroupLearnt]

class qBridgeServiceRequirementsGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 2, 1, 4])
	group = [dot1qForwardAllPorts, dot1qForwardAllStaticPorts, dot1qForwardAllForbiddenPorts, dot1qForwardUnregisteredPorts, dot1qForwardUnregisteredStaticPorts, dot1qForwardUnregisteredForbiddenPorts]

class qBridgeFdbStaticGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 2, 1, 5])
	group = [dot1qStaticUnicastAllowedToGoTo, dot1qStaticUnicastStatus, dot1qStaticMulticastStaticEgressPorts, dot1qStaticMulticastForbiddenEgressPorts, dot1qStaticMulticastStatus]

class qBridgeVlanGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 2, 1, 6])
	group = [dot1qVlanNumDeletes, dot1qVlanFdbId, dot1qVlanCurrentEgressPorts, dot1qVlanCurrentUntaggedPorts, dot1qVlanStatus, dot1qVlanCreationTime]

class qBridgeVlanStaticGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 2, 1, 7])
	group = [dot1qVlanStaticName, dot1qVlanStaticEgressPorts, dot1qVlanForbiddenEgressPorts, dot1qVlanStaticUntaggedPorts, dot1qVlanStaticRowStatus, dot1qNextFreeLocalVlanIndex]

class qBridgePortGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 2, 1, 8])
	group = [dot1qPvid, dot1qPortAcceptableFrameTypes, dot1qPortIngressFiltering, dot1qPortGvrpStatus, dot1qPortGvrpFailedRegistrations, dot1qPortGvrpLastPduOrigin]

class qBridgeVlanStatisticsGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 2, 1, 9])
	group = [dot1qTpVlanPortInFrames, dot1qTpVlanPortOutFrames, dot1qTpVlanPortInDiscards]

class qBridgeVlanStatisticsOverflowGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 2, 1, 10])
	group = [dot1qTpVlanPortInOverflowFrames, dot1qTpVlanPortOutOverflowFrames, dot1qTpVlanPortInOverflowDiscards]

class qBridgeVlanHCStatisticsGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 2, 1, 11])
	group = [dot1qTpVlanPortHCInFrames, dot1qTpVlanPortHCOutFrames, dot1qTpVlanPortHCInDiscards]

class qBridgeLearningConstraintsGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 2, 1, 12])
	group = [dot1qConstraintType, dot1qConstraintStatus]

class qBridgeLearningConstraintDefaultGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 2, 1, 13])
	group = [dot1qConstraintSetDefault, dot1qConstraintTypeDefault]

class qBridgeClassificationDeviceGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 2, 1, 14])
	group = [dot1vProtocolGroupId, dot1vProtocolGroupRowStatus]

class qBridgeClassificationPortGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 2, 1, 15])
	group = [dot1vProtocolPortGroupVid, dot1vProtocolPortRowStatus]

class qBridgePortGroup2(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 17, 7, 2, 1, 16])
	group = [dot1qPvid, dot1qPortAcceptableFrameTypes, dot1qPortIngressFiltering, dot1qPortGvrpStatus, dot1qPortGvrpFailedRegistrations, dot1qPortGvrpLastPduOrigin, dot1qPortRestrictedVlanRegistration]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
