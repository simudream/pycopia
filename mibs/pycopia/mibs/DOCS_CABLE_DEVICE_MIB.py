# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_CONF import OBJECT_GROUP, MODULE_COMPLIANCE
from IF_MIB import InterfaceIndexOrZero
from SNMP_FRAMEWORK_MIB import SnmpAdminString
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, IpAddress, Unsigned32, Counter32, Integer32, zeroDotZero, mib_2
from RMON2_MIB import ZeroBasedCounter32
from INET_ADDRESS_MIB import InetAddressType, InetAddress
from SNMPv2_TC import RowStatus, RowPointer, DateAndTime, TruthValue, StorageType
from DIFFSERV_MIB import diffServMIBDataPathGroup, diffServMIBClfrGroup, diffServMIBClfrElementGroup, diffServMIBMultiFieldClfrGroup, diffServMIBActionGroup, diffServMIBDscpMarkActGroup, diffServMIBCounterGroup, diffServMIBAlgDropGroup, diffServDataPathStatus, diffServClfrStatus, diffServClfrElementStatus, diffServMultiFieldClfrAddrType, diffServMultiFieldClfrSrcAddr, diffServMultiFieldClfrDstAddr, diffServAlgDropStatus, diffServDataPathStorage, diffServClfrStorage, diffServClfrElementStorage, diffServMultiFieldClfrStorage, diffServActionStorage, diffServCountActStorage, diffServAlgDropStorage, diffServAlgDropType

class DOCS_CABLE_DEVICE_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/DOCS-CABLE-DEVICE-MIB'
	conformance = 5
	name = 'DOCS-CABLE-DEVICE-MIB'
	language = 2
	description = 'This is the MIB Module for DOCSIS-compliant cable modems\n\n\n\nand cable-modem termination systems.\n\nCopyright (C) The IETF Trust (2006).  This version\nof this MIB module was published in RFC 4639; for full\nlegal notices see the RFC itself.'

# nodes
class docsDev(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69])
	name = 'docsDev'

class docsDevNotifications(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 0])
	name = 'docsDevNotifications'

class docsDevMIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1])
	name = 'docsDevMIBObjects'

class docsDevBase(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 1])
	name = 'docsDevBase'

class docsDevSoftware(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 3])
	name = 'docsDevSoftware'

class docsDevServer(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 4])
	name = 'docsDevServer'

class docsDevEvent(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 5])
	name = 'docsDevEvent'

class docsDevFilter(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 6])
	name = 'docsDevFilter'

class docsDevCpe(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 7])
	name = 'docsDevCpe'

class docsDevNotification(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 2])
	name = 'docsDevNotification'

class docsDevConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 3])
	name = 'docsDevConformance'

class docsDevGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 3, 1])
	name = 'docsDevGroups'

class docsDevCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 3, 2])
	name = 'docsDevCompliances'

class docsDevGroupsV2(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 3, 3])
	name = 'docsDevGroupsV2'

class docsDevCompliancesV2(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 3, 4])
	name = 'docsDevCompliancesV2'


# macros
# types 
# scalars 
class docsDevRole(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'cm'), Enum(2, 'cmtsActive'), Enum(3, 'cmtsBackup')]


class docsDevDateTime(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.DateAndTime


class docsDevResetNow(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class docsDevSerialNumber(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 1, 4])
	syntaxobject = SnmpAdminString


class docsDevSTPControl(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'stEnabled'), Enum(2, 'noStFilterBpdu'), Enum(3, 'noStPassBpdu')]


class docsDevIgmpModeControl(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'passive'), Enum(2, 'active')]


class docsDevMaxCpe(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32
	access = 4
	units = 'CPEs'


class docsDevSwServer(ScalarObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 3, 1])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class docsDevSwFilename(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 3, 2])
	syntaxobject = SnmpAdminString


class docsDevSwAdminStatus(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 3, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'upgradeFromMgt'), Enum(2, 'allowProvisioningUpgrade'), Enum(3, 'ignoreProvisioningUpgrade')]


class docsDevSwOperStatus(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 3, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'inProgress'), Enum(2, 'completeFromProvisioning'), Enum(3, 'completeFromMgt'), Enum(4, 'failed'), Enum(5, 'other')]


class docsDevSwCurrentVers(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 3, 5])
	syntaxobject = SnmpAdminString


class docsDevSwServerAddressType(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 3, 6])
	syntaxobject = InetAddressType


class docsDevSwServerAddress(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 3, 7])
	syntaxobject = InetAddress


class docsDevSwServerTransportProtocol(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 3, 8])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'tftp'), Enum(2, 'http')]


class docsDevServerBootState(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 4, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'operational'), Enum(2, 'disabled'), Enum(3, 'waitingForDhcpOffer'), Enum(4, 'waitingForDhcpResponse'), Enum(5, 'waitingForTimeServer'), Enum(6, 'waitingForTftp'), Enum(7, 'refusedByCmts'), Enum(8, 'forwardingDenied'), Enum(9, 'other'), Enum(10, 'unknown')]


class docsDevServerDhcp(ScalarObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 4, 2])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class docsDevServerTime(ScalarObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 4, 3])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class docsDevServerTftp(ScalarObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 4, 4])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class docsDevServerConfigFile(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 4, 5])
	syntaxobject = SnmpAdminString


class docsDevServerDhcpAddressType(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 4, 6])
	syntaxobject = InetAddressType


class docsDevServerDhcpAddress(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 4, 7])
	syntaxobject = InetAddress


class docsDevServerTimeAddressType(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 4, 8])
	syntaxobject = InetAddressType


class docsDevServerTimeAddress(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 4, 9])
	syntaxobject = InetAddress


class docsDevServerConfigTftpAddressType(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 4, 10])
	syntaxobject = InetAddressType


class docsDevServerConfigTftpAddress(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 4, 11])
	syntaxobject = InetAddress


class docsDevEvControl(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 5, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'resetLog'), Enum(2, 'useDefaultReporting')]


class docsDevEvSyslog(ScalarObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 5, 2])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class docsDevEvThrottleAdminStatus(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 5, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'unconstrained'), Enum(2, 'maintainBelowThreshold'), Enum(3, 'stopAtThreshold'), Enum(4, 'inhibited')]


class docsDevEvThrottleInhibited(ScalarObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 5, 4])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class docsDevEvThrottleThreshold(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 5, 5])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32
	access = 5
	units = 'events'


class docsDevEvThrottleInterval(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 5, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class docsDevEvSyslogAddressType(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 5, 9])
	syntaxobject = InetAddressType


class docsDevEvSyslogAddress(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 5, 10])
	syntaxobject = InetAddress


class docsDevEvThrottleThresholdExceeded(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 5, 11])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class docsDevFilterLLCUnmatchedAction(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 6, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'discard'), Enum(2, 'accept')]


class docsDevFilterIpDefault(ScalarObject):
	status = 2
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 6, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'discard'), Enum(2, 'accept')]


class docsDevCpeEnroll(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 7, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'none'), Enum(2, 'any')]


class docsDevCpeIpMax(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 7, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


# columns
class docsDevNmAccessIndex(ColumnObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class docsDevNmAccessIp(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class docsDevNmAccessIpMask(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class docsDevNmAccessCommunity(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class docsDevNmAccessControl(ColumnObject):
	status = 2
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'none'), Enum(2, 'read'), Enum(3, 'readWrite'), Enum(4, 'roWithTraps'), Enum(5, 'rwWithTraps'), Enum(6, 'trapsOnly')]


class docsDevNmAccessInterfaces(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class docsDevNmAccessStatus(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 2, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class docsDevNmAccessTrapVersion(ColumnObject):
	status = 2
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 2, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'disableSNMPv2trap'), Enum(2, 'enableSNMPv2trap')]


class docsDevEvPriority(ColumnObject):
	status = 1
	access = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 5, 7, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'emergency'), Enum(2, 'alert'), Enum(3, 'critical'), Enum(4, 'error'), Enum(5, 'warning'), Enum(6, 'notice'), Enum(7, 'information'), Enum(8, 'debug')]


class docsDevEvReporting(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 5, 7, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.BITS


class docsDevEvIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 5, 8, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class docsDevEvFirstTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 5, 8, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.DateAndTime


class docsDevEvLastTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 5, 8, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.DateAndTime


class docsDevEvCounts(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 5, 8, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'events'


class docsDevEvLevel(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 5, 8, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'emergency'), Enum(2, 'alert'), Enum(3, 'critical'), Enum(4, 'error'), Enum(5, 'warning'), Enum(6, 'notice'), Enum(7, 'information'), Enum(8, 'debug')]


class docsDevEvId(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 5, 8, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class docsDevEvText(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 5, 8, 1, 7])
	syntaxobject = SnmpAdminString


class docsDevFilterLLCIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 6, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class docsDevFilterLLCStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 6, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class docsDevFilterLLCIfIndex(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 6, 2, 1, 3])
	syntaxobject = InterfaceIndexOrZero


class docsDevFilterLLCProtocolType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 6, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'ethertype'), Enum(2, 'dsap')]


class docsDevFilterLLCProtocol(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 6, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class docsDevFilterLLCMatches(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 6, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'matches'


class docsDevFilterIpIndex(ColumnObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 6, 4, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class docsDevFilterIpStatus(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 6, 4, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class docsDevFilterIpControl(ColumnObject):
	status = 2
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 6, 4, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'discard'), Enum(2, 'accept'), Enum(3, 'policy')]


class docsDevFilterIpIfIndex(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 6, 4, 1, 4])
	syntaxobject = InterfaceIndexOrZero


class docsDevFilterIpDirection(ColumnObject):
	status = 2
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 6, 4, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'inbound'), Enum(2, 'outbound'), Enum(3, 'both')]


class docsDevFilterIpBroadcast(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 6, 4, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class docsDevFilterIpSaddr(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 6, 4, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class docsDevFilterIpSmask(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 6, 4, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class docsDevFilterIpDaddr(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 6, 4, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class docsDevFilterIpDmask(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 6, 4, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class docsDevFilterIpProtocol(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 6, 4, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class docsDevFilterIpSourcePortLow(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 6, 4, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class docsDevFilterIpSourcePortHigh(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 6, 4, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class docsDevFilterIpDestPortLow(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 6, 4, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class docsDevFilterIpDestPortHigh(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 6, 4, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class docsDevFilterIpMatches(ColumnObject):
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 6, 4, 1, 16])
	syntaxobject = ZeroBasedCounter32
	access = 4
	units = 'matches'


class docsDevFilterIpTos(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 6, 4, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class docsDevFilterIpTosMask(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 6, 4, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class docsDevFilterIpContinue(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 6, 4, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class docsDevFilterIpPolicyId(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 6, 4, 1, 20])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class docsDevFilterPolicyIndex(ColumnObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 6, 5, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class docsDevFilterPolicyId(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 6, 5, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class docsDevFilterPolicyStatus(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 6, 5, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class docsDevFilterPolicyPtr(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 6, 5, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.RowPointer


class docsDevFilterTosIndex(ColumnObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 6, 6, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class docsDevFilterTosStatus(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 6, 6, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class docsDevFilterTosAndMask(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 6, 6, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class docsDevFilterTosOrMask(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 6, 6, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class docsDevCpeIp(ColumnObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 7, 3, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class docsDevCpeSource(ColumnObject):
	status = 2
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 7, 3, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'manual'), Enum(3, 'learned')]


class docsDevCpeStatus(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 7, 3, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class docsDevCpeInetType(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 7, 4, 1, 1])
	syntaxobject = InetAddressType


class docsDevCpeInetAddr(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 7, 4, 1, 2])
	syntaxobject = InetAddress


class docsDevCpeInetSource(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 7, 4, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(2, 'manual'), Enum(3, 'learned')]


class docsDevCpeInetRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 7, 4, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


# rows 
class docsDevNmAccessEntry(RowObject):
	status = 2
	index = pycopia.SMI.Objects.IndexObjects([docsDevNmAccessIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 2, 1])
	access = 2
	rowstatus = docsDevNmAccessStatus
	columns = {'docsDevNmAccessIndex': docsDevNmAccessIndex, 'docsDevNmAccessIp': docsDevNmAccessIp, 'docsDevNmAccessIpMask': docsDevNmAccessIpMask, 'docsDevNmAccessCommunity': docsDevNmAccessCommunity, 'docsDevNmAccessControl': docsDevNmAccessControl, 'docsDevNmAccessInterfaces': docsDevNmAccessInterfaces, 'docsDevNmAccessStatus': docsDevNmAccessStatus, 'docsDevNmAccessTrapVersion': docsDevNmAccessTrapVersion}


class docsDevEvControlEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([docsDevEvPriority], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 5, 7, 1])
	access = 2
	columns = {'docsDevEvPriority': docsDevEvPriority, 'docsDevEvReporting': docsDevEvReporting}


class docsDevEventEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([docsDevEvIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 5, 8, 1])
	access = 2
	columns = {'docsDevEvIndex': docsDevEvIndex, 'docsDevEvFirstTime': docsDevEvFirstTime, 'docsDevEvLastTime': docsDevEvLastTime, 'docsDevEvCounts': docsDevEvCounts, 'docsDevEvLevel': docsDevEvLevel, 'docsDevEvId': docsDevEvId, 'docsDevEvText': docsDevEvText}


class docsDevFilterLLCEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([docsDevFilterLLCIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 6, 2, 1])
	access = 2
	rowstatus = docsDevFilterLLCStatus
	columns = {'docsDevFilterLLCIndex': docsDevFilterLLCIndex, 'docsDevFilterLLCStatus': docsDevFilterLLCStatus, 'docsDevFilterLLCIfIndex': docsDevFilterLLCIfIndex, 'docsDevFilterLLCProtocolType': docsDevFilterLLCProtocolType, 'docsDevFilterLLCProtocol': docsDevFilterLLCProtocol, 'docsDevFilterLLCMatches': docsDevFilterLLCMatches}


class docsDevFilterIpEntry(RowObject):
	status = 2
	index = pycopia.SMI.Objects.IndexObjects([docsDevFilterIpIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 6, 4, 1])
	access = 2
	rowstatus = docsDevFilterIpStatus
	columns = {'docsDevFilterIpIndex': docsDevFilterIpIndex, 'docsDevFilterIpStatus': docsDevFilterIpStatus, 'docsDevFilterIpControl': docsDevFilterIpControl, 'docsDevFilterIpIfIndex': docsDevFilterIpIfIndex, 'docsDevFilterIpDirection': docsDevFilterIpDirection, 'docsDevFilterIpBroadcast': docsDevFilterIpBroadcast, 'docsDevFilterIpSaddr': docsDevFilterIpSaddr, 'docsDevFilterIpSmask': docsDevFilterIpSmask, 'docsDevFilterIpDaddr': docsDevFilterIpDaddr, 'docsDevFilterIpDmask': docsDevFilterIpDmask, 'docsDevFilterIpProtocol': docsDevFilterIpProtocol, 'docsDevFilterIpSourcePortLow': docsDevFilterIpSourcePortLow, 'docsDevFilterIpSourcePortHigh': docsDevFilterIpSourcePortHigh, 'docsDevFilterIpDestPortLow': docsDevFilterIpDestPortLow, 'docsDevFilterIpDestPortHigh': docsDevFilterIpDestPortHigh, 'docsDevFilterIpMatches': docsDevFilterIpMatches, 'docsDevFilterIpTos': docsDevFilterIpTos, 'docsDevFilterIpTosMask': docsDevFilterIpTosMask, 'docsDevFilterIpContinue': docsDevFilterIpContinue, 'docsDevFilterIpPolicyId': docsDevFilterIpPolicyId}


class docsDevFilterPolicyEntry(RowObject):
	status = 2
	index = pycopia.SMI.Objects.IndexObjects([docsDevFilterPolicyIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 6, 5, 1])
	access = 2
	rowstatus = docsDevFilterPolicyStatus
	columns = {'docsDevFilterPolicyIndex': docsDevFilterPolicyIndex, 'docsDevFilterPolicyId': docsDevFilterPolicyId, 'docsDevFilterPolicyStatus': docsDevFilterPolicyStatus, 'docsDevFilterPolicyPtr': docsDevFilterPolicyPtr}


class docsDevFilterTosEntry(RowObject):
	status = 2
	index = pycopia.SMI.Objects.IndexObjects([docsDevFilterTosIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 6, 6, 1])
	access = 2
	rowstatus = docsDevFilterTosStatus
	columns = {'docsDevFilterTosIndex': docsDevFilterTosIndex, 'docsDevFilterTosStatus': docsDevFilterTosStatus, 'docsDevFilterTosAndMask': docsDevFilterTosAndMask, 'docsDevFilterTosOrMask': docsDevFilterTosOrMask}


class docsDevCpeEntry(RowObject):
	status = 2
	index = pycopia.SMI.Objects.IndexObjects([docsDevCpeIp], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 7, 3, 1])
	access = 2
	rowstatus = docsDevCpeStatus
	columns = {'docsDevCpeIp': docsDevCpeIp, 'docsDevCpeSource': docsDevCpeSource, 'docsDevCpeStatus': docsDevCpeStatus}


class docsDevCpeInetEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([docsDevCpeInetType, docsDevCpeInetAddr], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 1, 7, 4, 1])
	access = 2
	rowstatus = docsDevCpeInetRowStatus
	columns = {'docsDevCpeInetType': docsDevCpeInetType, 'docsDevCpeInetAddr': docsDevCpeInetAddr, 'docsDevCpeInetSource': docsDevCpeInetSource, 'docsDevCpeInetRowStatus': docsDevCpeInetRowStatus}


# notifications (traps) 
# groups 
class docsDevBaseGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 3, 1, 1])
	group = [docsDevRole, docsDevDateTime, docsDevResetNow, docsDevSerialNumber, docsDevSTPControl]

class docsDevNmAccessGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 3, 1, 2])
	group = [docsDevNmAccessIp, docsDevNmAccessIpMask, docsDevNmAccessCommunity, docsDevNmAccessControl, docsDevNmAccessInterfaces, docsDevNmAccessStatus]

class docsDevSoftwareGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 3, 1, 3])
	group = [docsDevSwServer, docsDevSwFilename, docsDevSwAdminStatus, docsDevSwOperStatus, docsDevSwCurrentVers]

class docsDevServerGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 3, 1, 4])
	group = [docsDevServerBootState, docsDevServerDhcp, docsDevServerTime, docsDevServerTftp, docsDevServerConfigFile]

class docsDevEventGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 3, 1, 5])
	group = [docsDevEvControl, docsDevEvSyslog, docsDevEvThrottleAdminStatus, docsDevEvThrottleInhibited, docsDevEvThrottleThreshold, docsDevEvThrottleInterval, docsDevEvReporting, docsDevEvFirstTime, docsDevEvLastTime, docsDevEvCounts, docsDevEvLevel, docsDevEvId, docsDevEvText]

class docsDevFilterGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 3, 1, 6])
	group = [docsDevFilterLLCUnmatchedAction, docsDevFilterIpDefault, docsDevFilterLLCStatus, docsDevFilterLLCIfIndex, docsDevFilterLLCProtocolType, docsDevFilterLLCProtocol, docsDevFilterLLCMatches, docsDevFilterIpControl, docsDevFilterIpIfIndex, docsDevFilterIpStatus, docsDevFilterIpDirection, docsDevFilterIpBroadcast, docsDevFilterIpSaddr, docsDevFilterIpSmask, docsDevFilterIpDaddr, docsDevFilterIpDmask, docsDevFilterIpProtocol, docsDevFilterIpSourcePortLow, docsDevFilterIpSourcePortHigh, docsDevFilterIpDestPortLow, docsDevFilterIpDestPortHigh, docsDevFilterIpMatches, docsDevFilterIpTos, docsDevFilterIpTosMask, docsDevFilterIpContinue, docsDevFilterIpPolicyId, docsDevFilterPolicyId, docsDevFilterPolicyStatus, docsDevFilterPolicyPtr, docsDevFilterTosStatus, docsDevFilterTosAndMask, docsDevFilterTosOrMask]

class docsDevCpeGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 3, 1, 7])
	group = [docsDevCpeEnroll, docsDevCpeIpMax, docsDevCpeSource, docsDevCpeStatus]

class docsDevBaseIgmpGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 3, 3, 1])
	group = [docsDevIgmpModeControl]

class docsDevBaseMaxCpeGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 3, 3, 2])
	group = [docsDevMaxCpe]

class docsDevNmAccessExtGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 3, 3, 3])
	group = [docsDevNmAccessTrapVersion]

class docsDevSoftwareGroupV2(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 3, 3, 4])
	group = [docsDevSwFilename, docsDevSwAdminStatus, docsDevSwOperStatus, docsDevSwCurrentVers, docsDevSwServerAddressType, docsDevSwServerAddress, docsDevSwServerTransportProtocol]

class docsDevServerGroupV2(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 3, 3, 5])
	group = [docsDevServerBootState, docsDevServerDhcpAddressType, docsDevServerDhcpAddress, docsDevServerTimeAddressType, docsDevServerTimeAddress, docsDevServerConfigTftpAddressType, docsDevServerConfigTftpAddress, docsDevServerConfigFile]

class docsDevEventGroupV2(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 3, 3, 6])
	group = [docsDevEvControl, docsDevEvThrottleAdminStatus, docsDevEvThrottleThreshold, docsDevEvThrottleInterval, docsDevEvReporting, docsDevEvFirstTime, docsDevEvLastTime, docsDevEvCounts, docsDevEvLevel, docsDevEvId, docsDevEvText, docsDevEvSyslogAddressType, docsDevEvSyslogAddress, docsDevEvThrottleThresholdExceeded]

class docsDevFilterLLCGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 3, 3, 7])
	group = [docsDevFilterLLCUnmatchedAction, docsDevFilterLLCStatus, docsDevFilterLLCIfIndex, docsDevFilterLLCProtocolType, docsDevFilterLLCProtocol, docsDevFilterLLCMatches]

class docsDevInetCpeGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 69, 3, 3, 8])
	group = [docsDevCpeEnroll, docsDevCpeIpMax, docsDevCpeInetSource, docsDevCpeInetRowStatus]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
