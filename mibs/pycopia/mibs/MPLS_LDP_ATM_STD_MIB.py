# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from IF_MIB import InterfaceIndexOrZero
from SNMPv2_SMI import OBJECT_TYPE, MODULE_IDENTITY, Unsigned32
from MPLS_TC_STD_MIB import mplsStdMIB, MplsAtmVcIdentifier
from ATM_TC_MIB import AtmVpIdentifier
from MPLS_LDP_STD_MIB import mplsLdpEntityLdpId, mplsLdpEntityIndex, mplsLdpPeerLdpId
from SNMPv2_TC import RowStatus, StorageType

class MPLS_LDP_ATM_STD_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/MPLS-LDP-ATM-STD-MIB'
	conformance = 4
	name = 'MPLS-LDP-ATM-STD-MIB'
	language = 2
	description = 'Copyright (C) The Internet Society (2004). The\ninitial version of this MIB module was published\nin RFC 3815. For full legal notices see the RFC\nitself or see:\nhttp://www.ietf.org/copyrights/ianamib.html\n\nThis MIB contains managed object definitions for\nconfiguring and monitoring the Multiprotocol Label\nSwitching (MPLS), Label Distribution Protocol (LDP),\nutilizing Asynchronous Transfer Mode (ATM) as the Layer 2\nmedia.'

# nodes
class mplsLdpAtmStdMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 5])
	name = 'mplsLdpAtmStdMIB'

class mplsLdpAtmObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 5, 1])
	name = 'mplsLdpAtmObjects'

class mplsLdpEntityAtmObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 5, 1, 1])
	name = 'mplsLdpEntityAtmObjects'

class mplsLdpAtmSessionObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 5, 1, 2])
	name = 'mplsLdpAtmSessionObjects'

class mplsLdpAtmConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 5, 2])
	name = 'mplsLdpAtmConformance'

class mplsLdpAtmGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 5, 2, 1])
	name = 'mplsLdpAtmGroups'

class mplsLdpAtmCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 5, 2, 2])
	name = 'mplsLdpAtmCompliances'


# macros
# types 
# scalars 
# columns
class mplsLdpEntityAtmIfIndexOrZero(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 5, 1, 1, 1, 1, 1])
	syntaxobject = InterfaceIndexOrZero


class mplsLdpEntityAtmMergeCap(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 5, 1, 1, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(0, 'notSupported'), Enum(1, 'vpMerge'), Enum(2, 'vcMerge'), Enum(3, 'vpAndVcMerge')]


class mplsLdpEntityAtmLRComponents(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 5, 1, 1, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class mplsLdpEntityAtmVcDirectionality(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 5, 1, 1, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(0, 'bidirectional'), Enum(1, 'unidirectional')]


class mplsLdpEntityAtmLsrConnectivity(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 5, 1, 1, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'direct'), Enum(2, 'indirect')]


class mplsLdpEntityAtmDefaultControlVpi(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 5, 1, 1, 1, 1, 6])
	syntaxobject = AtmVpIdentifier


class mplsLdpEntityAtmDefaultControlVci(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 5, 1, 1, 1, 1, 7])
	syntaxobject = MplsAtmVcIdentifier


class mplsLdpEntityAtmUnlabTrafVpi(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 5, 1, 1, 1, 1, 8])
	syntaxobject = AtmVpIdentifier


class mplsLdpEntityAtmUnlabTrafVci(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 5, 1, 1, 1, 1, 9])
	syntaxobject = MplsAtmVcIdentifier


class mplsLdpEntityAtmStorageType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 5, 1, 1, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


class mplsLdpEntityAtmRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 5, 1, 1, 1, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class mplsLdpEntityAtmLRMinVpi(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 5, 1, 1, 2, 1, 1])
	syntaxobject = AtmVpIdentifier


class mplsLdpEntityAtmLRMinVci(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 5, 1, 1, 2, 1, 2])
	syntaxobject = MplsAtmVcIdentifier


class mplsLdpEntityAtmLRMaxVpi(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 5, 1, 1, 2, 1, 3])
	syntaxobject = AtmVpIdentifier


class mplsLdpEntityAtmLRMaxVci(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 5, 1, 1, 2, 1, 4])
	syntaxobject = MplsAtmVcIdentifier


class mplsLdpEntityAtmLRStorageType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 5, 1, 1, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


class mplsLdpEntityAtmLRRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 5, 1, 1, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class mplsLdpSessionAtmLRLowerBoundVpi(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 5, 1, 2, 1, 1, 1])
	syntaxobject = AtmVpIdentifier


class mplsLdpSessionAtmLRLowerBoundVci(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 5, 1, 2, 1, 1, 2])
	syntaxobject = MplsAtmVcIdentifier


class mplsLdpSessionAtmLRUpperBoundVpi(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 5, 1, 2, 1, 1, 3])
	syntaxobject = AtmVpIdentifier


class mplsLdpSessionAtmLRUpperBoundVci(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 5, 1, 2, 1, 1, 4])
	syntaxobject = MplsAtmVcIdentifier


# rows 
class mplsLdpEntityAtmEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([mplsLdpEntityLdpId, mplsLdpEntityIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 5, 1, 1, 1, 1])
	access = 2
	rowstatus = mplsLdpEntityAtmRowStatus
	columns = {'mplsLdpEntityAtmIfIndexOrZero': mplsLdpEntityAtmIfIndexOrZero, 'mplsLdpEntityAtmMergeCap': mplsLdpEntityAtmMergeCap, 'mplsLdpEntityAtmLRComponents': mplsLdpEntityAtmLRComponents, 'mplsLdpEntityAtmVcDirectionality': mplsLdpEntityAtmVcDirectionality, 'mplsLdpEntityAtmLsrConnectivity': mplsLdpEntityAtmLsrConnectivity, 'mplsLdpEntityAtmDefaultControlVpi': mplsLdpEntityAtmDefaultControlVpi, 'mplsLdpEntityAtmDefaultControlVci': mplsLdpEntityAtmDefaultControlVci, 'mplsLdpEntityAtmUnlabTrafVpi': mplsLdpEntityAtmUnlabTrafVpi, 'mplsLdpEntityAtmUnlabTrafVci': mplsLdpEntityAtmUnlabTrafVci, 'mplsLdpEntityAtmStorageType': mplsLdpEntityAtmStorageType, 'mplsLdpEntityAtmRowStatus': mplsLdpEntityAtmRowStatus}


class mplsLdpEntityAtmLREntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([mplsLdpEntityLdpId, mplsLdpEntityIndex, mplsLdpEntityAtmLRMinVpi, mplsLdpEntityAtmLRMinVci], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 5, 1, 1, 2, 1])
	access = 2
	rowstatus = mplsLdpEntityAtmLRRowStatus
	columns = {'mplsLdpEntityAtmLRMinVpi': mplsLdpEntityAtmLRMinVpi, 'mplsLdpEntityAtmLRMinVci': mplsLdpEntityAtmLRMinVci, 'mplsLdpEntityAtmLRMaxVpi': mplsLdpEntityAtmLRMaxVpi, 'mplsLdpEntityAtmLRMaxVci': mplsLdpEntityAtmLRMaxVci, 'mplsLdpEntityAtmLRStorageType': mplsLdpEntityAtmLRStorageType, 'mplsLdpEntityAtmLRRowStatus': mplsLdpEntityAtmLRRowStatus}


class mplsLdpAtmSessionEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([mplsLdpEntityLdpId, mplsLdpEntityIndex, mplsLdpPeerLdpId, mplsLdpSessionAtmLRLowerBoundVpi, mplsLdpSessionAtmLRLowerBoundVci], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 5, 1, 2, 1, 1])
	access = 2
	columns = {'mplsLdpSessionAtmLRLowerBoundVpi': mplsLdpSessionAtmLRLowerBoundVpi, 'mplsLdpSessionAtmLRLowerBoundVci': mplsLdpSessionAtmLRLowerBoundVci, 'mplsLdpSessionAtmLRUpperBoundVpi': mplsLdpSessionAtmLRUpperBoundVpi, 'mplsLdpSessionAtmLRUpperBoundVci': mplsLdpSessionAtmLRUpperBoundVci}


# notifications (traps) 
# groups 
class mplsLdpAtmGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 5, 2, 1, 1])
	group = [mplsLdpEntityAtmIfIndexOrZero, mplsLdpEntityAtmMergeCap, mplsLdpEntityAtmLRComponents, mplsLdpEntityAtmVcDirectionality, mplsLdpEntityAtmLsrConnectivity, mplsLdpEntityAtmDefaultControlVpi, mplsLdpEntityAtmDefaultControlVci, mplsLdpEntityAtmUnlabTrafVpi, mplsLdpEntityAtmUnlabTrafVci, mplsLdpEntityAtmStorageType, mplsLdpEntityAtmRowStatus, mplsLdpEntityAtmLRMaxVpi, mplsLdpEntityAtmLRMaxVci, mplsLdpEntityAtmLRStorageType, mplsLdpEntityAtmLRRowStatus, mplsLdpSessionAtmLRUpperBoundVpi, mplsLdpSessionAtmLRUpperBoundVci]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
