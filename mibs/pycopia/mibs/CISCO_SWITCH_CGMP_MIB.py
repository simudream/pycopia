# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from BRIDGE_MIB import dot1dBasePort
from SNMPv2_TC import TEXTUAL_CONVENTION, RowStatus, MacAddress
from CISCO_SMI import ciscoMgmt

class CISCO_SWITCH_CGMP_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/site/CISCO-SWITCH-CGMP-MIB'
	conformance = 5
	name = 'CISCO-SWITCH-CGMP-MIB'
	language = 2
	description = 'Switch-side Cisco Group Management Protocol MIB for  \nLayer 2 Switch devices.'

# nodes
class ciscoSwitchCgmpMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 101])
	name = 'ciscoSwitchCgmpMIB'

class ciscoSwitchCgmpMIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 101, 1])
	name = 'ciscoSwitchCgmpMIBObjects'

class sCgmpInfo(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 101, 1, 1])
	name = 'sCgmpInfo'

class ciscoSwitchCgmpMIBConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 101, 3])
	name = 'ciscoSwitchCgmpMIBConformance'

class ciscoSwitchCgmpMIBCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 101, 3, 1])
	name = 'ciscoSwitchCgmpMIBCompliances'

class ciscoSwitchCgmpMIBGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 101, 3, 2])
	name = 'ciscoSwitchCgmpMIBGroups'


# macros
# types 

class SCgmpVlanIndex(pycopia.SMI.Basetypes.Integer32):
	status = 1
	ranges = Ranges(Range(0, 1023))

# scalars 
class sCgmpEnable(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 101, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class sCgmpFastLeaveEnable(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 101, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enabled'), Enum(2, 'disabled')]


class sCgmpRouterHoldTime(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 101, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


# columns
class sCgmpRouterVlanIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 101, 1, 1, 4, 1, 1])
	syntaxobject = SCgmpVlanIndex


class sCgmpRouterMacAddress(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 101, 1, 1, 4, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.MacAddress


class sCgmpRouterEntryStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 101, 1, 1, 4, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


# rows 
class sCgmpRouterEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([sCgmpRouterVlanIndex, dot1dBasePort, sCgmpRouterMacAddress], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 101, 1, 1, 4, 1])
	access = 2
	rowstatus = sCgmpRouterEntryStatus
	columns = {'sCgmpRouterVlanIndex': sCgmpRouterVlanIndex, 'sCgmpRouterMacAddress': sCgmpRouterMacAddress, 'sCgmpRouterEntryStatus': sCgmpRouterEntryStatus}


# notifications (traps) 
# groups 
class sCgmpGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 101, 3, 2, 1])
	group = [sCgmpEnable, sCgmpFastLeaveEnable, sCgmpRouterHoldTime, sCgmpRouterEntryStatus]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
