# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, Counter32, Integer32, IpAddress
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from RFC1213_MIB import transmission, ifIndex, mib_2
from SNMPv2_TC import TimeStamp, TEXTUAL_CONVENTION

class SIP_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/SIP-MIB'
	conformance = 2
	name = 'SIP-MIB'
	language = 2
	description = 'The MIB module to describe\nSMDS interfaces objects.'

# nodes
class sip(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31])
	name = 'sip'

class sipPLCP(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 3])
	name = 'sipPLCP'

class smdsApplications(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 4])
	name = 'smdsApplications'

class ipOverSMDS(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 4, 1])
	name = 'ipOverSMDS'

class smdsCarrierSelection(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 5])
	name = 'smdsCarrierSelection'

class sipErrorLog(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 6])
	name = 'sipErrorLog'

class sipMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 36])
	name = 'sipMIB'

class sipMIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 36, 1])
	name = 'sipMIBObjects'

class smdsConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 36, 2])
	name = 'smdsConformance'

class smdsGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 36, 2, 1])
	name = 'smdsGroups'

class smdsCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 36, 2, 2])
	name = 'smdsCompliances'


# macros
# types 

class SMDSAddress(pycopia.SMI.Basetypes.OctetString):
	status = 1
	ranges = Ranges(Range(8, 8))
	format = '1x:'


class IfIndex(pycopia.SMI.Basetypes.Integer32):
	status = 1

# scalars 
# columns
class sipL3Index(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 1, 1, 1])
	syntaxobject = IfIndex


class sipL3ReceivedIndividualDAs(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class sipL3ReceivedGAs(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class sipL3UnrecognizedIndividualDAs(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class sipL3UnrecognizedGAs(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class sipL3SentIndividualDAs(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class sipL3SentGAs(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class sipL3Errors(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class sipL3InvalidSMDSAddressTypes(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class sipL3VersionSupport(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class sipL2Index(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 2, 1, 1])
	syntaxobject = IfIndex


class sipL2ReceivedCounts(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class sipL2SentCounts(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class sipL2HcsOrCRCErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class sipL2PayloadLengthErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class sipL2SequenceNumberErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class sipL2MidCurrentlyActiveErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 2, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class sipL2BomOrSSMsMIDErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 2, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class sipL2EomsMIDErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 2, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class sipDS1PLCPIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 3, 1, 1, 1])
	syntaxobject = IfIndex


class sipDS1PLCPSEFSs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 3, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class sipDS1PLCPAlarmState(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 3, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'noAlarm'), Enum(2, 'receivedFarEndAlarm'), Enum(3, 'incomingLOF')]


class sipDS1PLCPUASs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 3, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class sipDS3PLCPIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 3, 2, 1, 1])
	syntaxobject = IfIndex


class sipDS3PLCPSEFSs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 3, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class sipDS3PLCPAlarmState(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 3, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'noAlarm'), Enum(2, 'receivedFarEndAlarm'), Enum(3, 'incomingLOF')]


class sipDS3PLCPUASs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 3, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ipOverSMDSIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 4, 1, 1, 1, 1])
	syntaxobject = IfIndex


class ipOverSMDSAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 4, 1, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ipOverSMDSHA(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 4, 1, 1, 1, 3])
	syntaxobject = SMDSAddress


class ipOverSMDSLISGA(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 4, 1, 1, 1, 4])
	syntaxobject = SMDSAddress


class ipOverSMDSARPReq(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 4, 1, 1, 1, 5])
	syntaxobject = SMDSAddress


class sipL3PDUErrorIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 6, 1, 1, 1])
	syntaxobject = IfIndex


class sipL3PDUErrorType(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 6, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'erroredDAFieldFormat'), Enum(2, 'erroredSAFieldFormat'), Enum(3, 'invalidBAsizeFieldValue'), Enum(4, 'invalidHdrExtLength'), Enum(5, 'invalidHdrExtElementLength'), Enum(6, 'invalidHdrExtVersionElementPositionLenthOrValue'), Enum(7, 'invalidHdrExtCarSelectElementPositionLenghtValueOrFormat'), Enum(8, 'hePADError'), Enum(9, 'beTagMismatch'), Enum(10, 'baSizeFieldNotEqualToLengthField'), Enum(11, 'incorrectLength'), Enum(12, 'mriTimeout')]


class sipL3PDUErrorSA(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 6, 1, 1, 3])
	syntaxobject = SMDSAddress


class sipL3PDUErrorDA(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 6, 1, 1, 4])
	syntaxobject = SMDSAddress


class sipL3PDUErrorTimeStamp(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 6, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class sipDxiCrc(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 36, 1, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'crc16'), Enum(2, 'crc32')]


class sipDxiOutDiscards(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 36, 1, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class sipDxiInErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 36, 1, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class sipDxiInAborts(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 36, 1, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class sipDxiInTestFrames(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 36, 1, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class sipDxiOutTestFrames(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 36, 1, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class sipDxiHbpNoAcks(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 36, 1, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


# rows 
class sipL3Entry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([sipL3Index], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 1, 1])
	access = 2
	columns = {'sipL3Index': sipL3Index, 'sipL3ReceivedIndividualDAs': sipL3ReceivedIndividualDAs, 'sipL3ReceivedGAs': sipL3ReceivedGAs, 'sipL3UnrecognizedIndividualDAs': sipL3UnrecognizedIndividualDAs, 'sipL3UnrecognizedGAs': sipL3UnrecognizedGAs, 'sipL3SentIndividualDAs': sipL3SentIndividualDAs, 'sipL3SentGAs': sipL3SentGAs, 'sipL3Errors': sipL3Errors, 'sipL3InvalidSMDSAddressTypes': sipL3InvalidSMDSAddressTypes, 'sipL3VersionSupport': sipL3VersionSupport}


class sipL2Entry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([sipL2Index], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 2, 1])
	access = 2
	columns = {'sipL2Index': sipL2Index, 'sipL2ReceivedCounts': sipL2ReceivedCounts, 'sipL2SentCounts': sipL2SentCounts, 'sipL2HcsOrCRCErrors': sipL2HcsOrCRCErrors, 'sipL2PayloadLengthErrors': sipL2PayloadLengthErrors, 'sipL2SequenceNumberErrors': sipL2SequenceNumberErrors, 'sipL2MidCurrentlyActiveErrors': sipL2MidCurrentlyActiveErrors, 'sipL2BomOrSSMsMIDErrors': sipL2BomOrSSMsMIDErrors, 'sipL2EomsMIDErrors': sipL2EomsMIDErrors}


class sipDS1PLCPEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([sipDS1PLCPIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 3, 1, 1])
	access = 2
	columns = {'sipDS1PLCPIndex': sipDS1PLCPIndex, 'sipDS1PLCPSEFSs': sipDS1PLCPSEFSs, 'sipDS1PLCPAlarmState': sipDS1PLCPAlarmState, 'sipDS1PLCPUASs': sipDS1PLCPUASs}


class sipDS3PLCPEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([sipDS3PLCPIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 3, 2, 1])
	access = 2
	columns = {'sipDS3PLCPIndex': sipDS3PLCPIndex, 'sipDS3PLCPSEFSs': sipDS3PLCPSEFSs, 'sipDS3PLCPAlarmState': sipDS3PLCPAlarmState, 'sipDS3PLCPUASs': sipDS3PLCPUASs}


class ipOverSMDSEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ipOverSMDSIndex, ipOverSMDSAddress], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 4, 1, 1, 1])
	access = 2
	columns = {'ipOverSMDSIndex': ipOverSMDSIndex, 'ipOverSMDSAddress': ipOverSMDSAddress, 'ipOverSMDSHA': ipOverSMDSHA, 'ipOverSMDSLISGA': ipOverSMDSLISGA, 'ipOverSMDSARPReq': ipOverSMDSARPReq}


class sipL3PDUErrorEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([sipL3PDUErrorIndex, sipL3PDUErrorType], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 31, 6, 1, 1])
	access = 2
	columns = {'sipL3PDUErrorIndex': sipL3PDUErrorIndex, 'sipL3PDUErrorType': sipL3PDUErrorType, 'sipL3PDUErrorSA': sipL3PDUErrorSA, 'sipL3PDUErrorDA': sipL3PDUErrorDA, 'sipL3PDUErrorTimeStamp': sipL3PDUErrorTimeStamp}


class sipDxiEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 36, 1, 1, 1])
	access = 2
	columns = {'sipDxiCrc': sipDxiCrc, 'sipDxiOutDiscards': sipDxiOutDiscards, 'sipDxiInErrors': sipDxiInErrors, 'sipDxiInAborts': sipDxiInAborts, 'sipDxiInTestFrames': sipDxiInTestFrames, 'sipDxiOutTestFrames': sipDxiOutTestFrames, 'sipDxiHbpNoAcks': sipDxiHbpNoAcks}


# notifications (traps) 
# groups 
class sipLevel3Stuff(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 36, 2, 1, 1])
	group = [sipL3Index, sipL3VersionSupport, sipL3PDUErrorIndex, sipL3PDUErrorType, sipL3PDUErrorSA, sipL3PDUErrorDA, sipL3PDUErrorTimeStamp]

class sipLevel2Stuff(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 36, 2, 1, 2])
	group = [sipL2Index, sipL2HcsOrCRCErrors, sipL2PayloadLengthErrors, sipL2SequenceNumberErrors, sipL2MidCurrentlyActiveErrors, sipL2BomOrSSMsMIDErrors, sipL2EomsMIDErrors]

class sipDS1PLCPStuff(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 36, 2, 1, 3])
	group = [sipDS1PLCPIndex, sipDS1PLCPSEFSs, sipDS1PLCPAlarmState, sipDS1PLCPUASs]

class sipDS3PLCPStuff(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 36, 2, 1, 4])
	group = [sipDS3PLCPIndex, sipDS3PLCPSEFSs, sipDS3PLCPAlarmState, sipDS3PLCPUASs]

class sipIPApplicationsStuff(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 36, 2, 1, 5])
	group = [ipOverSMDSIndex, ipOverSMDSAddress, ipOverSMDSHA, ipOverSMDSLISGA, ipOverSMDSARPReq]

class sipDxiStuff(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 36, 2, 1, 6])
	group = [sipDxiCrc, sipDxiOutDiscards, sipDxiInErrors, sipDxiInAborts, sipDxiInTestFrames, sipDxiOutTestFrames, sipDxiHbpNoAcks]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
