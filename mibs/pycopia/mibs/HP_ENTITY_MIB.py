# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, NOTIFICATION_TYPE
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP, NOTIFICATION_GROUP
from SNMPv2_TC import TDomain, TAddress, DisplayString, TEXTUAL_CONVENTION, AutonomousType, RowPointer, TimeStamp
from HP_ICF_OID import icf

class HP_ENTITY_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/site/HP-ENTITY-MIB'
	conformance = 5
	name = 'HP-ENTITY-MIB'
	language = 2
	description = 'The MIB module for representing multiple logical\nentities supported by a single SNMP agent.\n\nThis is an exact copy of draft 7 of the IETF\nEntity MIB.  The only changes are to actually\nassign an OID to it, and add hp to the beginning\nof all the labels.  This was done only because\na product that uses this MIB is scheduled to ship\nbefore the IETF MIB will be published as an RFC,\nand we needed to give it an OID.\n\nIt is expected that this MIB module will only be\nsupported until the IETF actually publishes the\nofficial version as an RFC.  At that time, we will\nsupport the IETF version of this MIB.'

# nodes
class hpEntityMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 9])
	name = 'hpEntityMIB'

class hpEntityMIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 9, 1])
	name = 'hpEntityMIBObjects'

class hpEntityPhysical(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 9, 1, 1])
	name = 'hpEntityPhysical'

class hpEntityLogical(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 9, 1, 2])
	name = 'hpEntityLogical'

class hpEntityMapping(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 9, 1, 3])
	name = 'hpEntityMapping'

class hpEntityGeneral(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 9, 1, 4])
	name = 'hpEntityGeneral'

class hpEntityMIBTraps(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 9, 2])
	name = 'hpEntityMIBTraps'

class hpEntityMIBTrapPrefix(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 9, 2, 0])
	name = 'hpEntityMIBTrapPrefix'

class hpEntityConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 9, 3])
	name = 'hpEntityConformance'

class hpEntityCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 9, 3, 1])
	name = 'hpEntityCompliances'

class hpEntityGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 9, 3, 2])
	name = 'hpEntityGroups'


# macros
# types 

class PhysicalIndex(pycopia.SMI.Basetypes.Integer32):
	status = 1
	ranges = Ranges(Range(1, 2147483647))


class PhysicalClass(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'other'), Enum(2, 'unknown'), Enum(3, 'chassis'), Enum(4, 'backplane'), Enum(5, 'container'), Enum(6, 'powerSupply'), Enum(7, 'fan'), Enum(8, 'sensor'), Enum(9, 'module'), Enum(10, 'port')]

# scalars 
# columns
class hpEntPhysicalIndex(ColumnObject):
	access = 2
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 9, 1, 1, 1, 1, 1])
	syntaxobject = PhysicalIndex


class hpEntPhysicalDescr(ColumnObject):
	access = 4
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 9, 1, 1, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class hpEntPhysicalVendorType(ColumnObject):
	access = 4
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 9, 1, 1, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.AutonomousType


class hpEntPhysicalContainedIn(ColumnObject):
	access = 4
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 9, 1, 1, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpEntPhysicalClass(ColumnObject):
	access = 4
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 9, 1, 1, 1, 1, 5])
	syntaxobject = PhysicalClass


class hpEntPhysicalParentRelPos(ColumnObject):
	access = 4
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 9, 1, 1, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpEntPhysicalName(ColumnObject):
	access = 4
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 9, 1, 1, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class hpEntLogicalIndex(ColumnObject):
	access = 2
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 9, 1, 2, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpEntLogicalDescr(ColumnObject):
	access = 4
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 9, 1, 2, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class hpEntLogicalType(ColumnObject):
	access = 4
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 9, 1, 2, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.AutonomousType


class hpEntLogicalCommunity(ColumnObject):
	access = 4
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 9, 1, 2, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class hpEntLogicalTAddress(ColumnObject):
	access = 4
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 9, 1, 2, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.TAddress


class hpEntLogicalTDomain(ColumnObject):
	access = 4
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 9, 1, 2, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.TDomain


class hpEntLPPhysicalIndex(ColumnObject):
	access = 4
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 9, 1, 3, 1, 1, 1])
	syntaxobject = PhysicalIndex


class hpEntAliasLogicalIndexOrZero(ColumnObject):
	access = 2
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 9, 1, 3, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class hpEntAliasMappingIdentifier(ColumnObject):
	access = 4
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 9, 1, 3, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.RowPointer


class hpEntPhysicalChildIndex(ColumnObject):
	access = 4
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 9, 1, 3, 3, 1, 1])
	syntaxobject = PhysicalIndex


# rows 
# notifications (traps) 
class hpEntConfigChange(NotificationObject):
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 11, 2, 14, 9, 2, 0, 1])

# groups 
# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
