# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, Integer32, Gauge32, Counter32
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from CISCO_SMI import ciscoMgmt
from SNMPv2_TC import TEXTUAL_CONVENTION
from IF_MIB import ifIndex

class CISCO_CAR_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/site/CISCO-CAR-MIB'
	name = 'CISCO-CAR-MIB'
	language = 2
	description = 'Cisco CAR MIB - Overview\n\nCisco Weighted Rate-limit, known as Commited Access Rate (CAR),\nis a traffic control method which uses a set of rate limits\nto be applied to an interface for packet switching purpose.\nEach rate limit has a configurable action to be taken\nwhen a condition suffices.\n\nThis MIB incorporates objects from the Cisco Rate-limit line interfaces.\nIts purpose is to provide Weighted Rate-Limit packet filtering information.'

# nodes
class ciscoCarMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 113])
	name = 'ciscoCarMIB'

class ciscoCarMIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 113, 1])
	name = 'ciscoCarMIBObjects'

class ccarConfigs(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 1])
	name = 'ccarConfigs'

class ccarStats(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 2])
	name = 'ccarStats'

class ciscoCarMIBConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 113, 3])
	name = 'ciscoCarMIBConformance'

class ciscoCarMIBCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 113, 3, 1])
	name = 'ciscoCarMIBCompliances'

class ciscoCarMIBGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 113, 3, 2])
	name = 'ciscoCarMIBGroups'


# macros
# types 

class PacketSource(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'input'), Enum(2, 'output')]


class RateLimitType(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'all'), Enum(2, 'quickAcc'), Enum(3, 'standardAcc')]


class RateLimitAction(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'drop'), Enum(2, 'xmit'), Enum(3, 'continue'), Enum(4, 'precedXmit'), Enum(5, 'precedCont')]

# scalars 
# columns
class ccarConfigDirection(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 1, 1, 1, 1])
	syntaxobject = PacketSource


class ccarConfigRowIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 1, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ccarConfigType(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 1, 1, 1, 3])
	syntaxobject = RateLimitType


class ccarConfigAccIdx(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 1, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ccarConfigRate(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 1, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = 'bits/second'


class ccarConfigLimit(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 1, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = 'bytes'


class ccarConfigExtLimit(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 1, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = 'bytes'


class ccarConfigConformAction(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 1, 1, 1, 8])
	syntaxobject = RateLimitAction


class ccarConfigExceedAction(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 1, 1, 1, 9])
	syntaxobject = RateLimitAction


class ccarStatSwitchedPkts(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 2, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'packets'


class ccarStatSwitchedBytes(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 2, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'bytes'


class ccarStatFilteredPkts(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 2, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'packets'


class ccarStatFilteredBytes(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 2, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'bytes'


class ccarStatCurBurst(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 2, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32
	access = 4
	units = 'bytes'


# rows 
class ccarConfigEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, ccarConfigDirection, ccarConfigRowIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 1, 1, 1])
	access = 2
	columns = {'ccarConfigDirection': ccarConfigDirection, 'ccarConfigRowIndex': ccarConfigRowIndex, 'ccarConfigType': ccarConfigType, 'ccarConfigAccIdx': ccarConfigAccIdx, 'ccarConfigRate': ccarConfigRate, 'ccarConfigLimit': ccarConfigLimit, 'ccarConfigExtLimit': ccarConfigExtLimit, 'ccarConfigConformAction': ccarConfigConformAction, 'ccarConfigExceedAction': ccarConfigExceedAction}


from IF_MIB import ifIndex
from CISCO_CAR_MIB import ccarConfigDirection
from CISCO_CAR_MIB import ccarConfigRowIndex
class ccarStatEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, ccarConfigDirection, ccarConfigRowIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 113, 1, 2, 1, 1])
	access = 2
	columns = {'ccarStatSwitchedPkts': ccarStatSwitchedPkts, 'ccarStatSwitchedBytes': ccarStatSwitchedBytes, 'ccarStatFilteredPkts': ccarStatFilteredPkts, 'ccarStatFilteredBytes': ccarStatFilteredBytes, 'ccarStatCurBurst': ccarStatCurBurst}


# notifications (traps) 
# groups 
class ciscoCarMIBGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 113, 3, 2, 1])
	group = [ccarConfigType, ccarConfigAccIdx, ccarConfigRate, ccarConfigLimit, ccarConfigExtLimit, ccarConfigConformAction, ccarConfigExceedAction, ccarStatSwitchedPkts, ccarStatSwitchedBytes, ccarStatFilteredPkts, ccarStatFilteredBytes, ccarStatCurBurst]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
