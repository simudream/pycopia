# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, NOTIFICATION_TYPE, IpAddress, Integer32, Counter32, Gauge32, mib_2
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP, NOTIFICATION_GROUP

class BGP4_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/BGP4-MIB'
	conformance = 5
	name = 'BGP4-MIB'
	language = 2
	description = 'The MIB module for the BGP-4 protocol.\n\nCopyright (C) The Internet Society (2006).  This\nversion of this MIB module is part of RFC 4273;\nsee the RFC itself for full legal notices.'

# nodes
class bgp(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15])
	name = 'bgp'

class bgpNotification(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 0])
	name = 'bgpNotification'

class bgpTraps(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 7])
	name = 'bgpTraps'

class bgp4MIBConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 8])
	name = 'bgp4MIBConformance'

class bgp4MIBCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 8, 1])
	name = 'bgp4MIBCompliances'

class bgp4MIBGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 8, 2])
	name = 'bgp4MIBGroups'


# macros
# types 
# scalars 
class bgpVersion(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 1])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class bgpLocalAs(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class bgpIdentifier(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 4])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


# columns
class bgpPeerIdentifier(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 3, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class bgpPeerState(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 3, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'idle'), Enum(2, 'connect'), Enum(3, 'active'), Enum(4, 'opensent'), Enum(5, 'openconfirm'), Enum(6, 'established')]


class bgpPeerAdminStatus(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 3, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'stop'), Enum(2, 'start')]


class bgpPeerNegotiatedVersion(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 3, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class bgpPeerLocalAddr(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 3, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class bgpPeerLocalPort(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 3, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class bgpPeerRemoteAddr(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 3, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class bgpPeerRemotePort(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 3, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class bgpPeerRemoteAs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 3, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class bgpPeerInUpdates(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 3, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class bgpPeerOutUpdates(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 3, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class bgpPeerInTotalMessages(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 3, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class bgpPeerOutTotalMessages(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 3, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class bgpPeerLastError(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 3, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class bgpPeerFsmEstablishedTransitions(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 3, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class bgpPeerFsmEstablishedTime(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 3, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32
	access = 4
	units = 'seconds'


class bgpPeerConnectRetryInterval(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 3, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class bgpPeerHoldTime(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 3, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = 'seconds'


class bgpPeerKeepAlive(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 3, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = 'seconds'


class bgpPeerHoldTimeConfigured(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 3, 1, 20])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class bgpPeerKeepAliveConfigured(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 3, 1, 21])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class bgpPeerMinASOriginationInterval(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 3, 1, 22])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class bgpPeerMinRouteAdvertisementInterval(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 3, 1, 23])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class bgpPeerInUpdateElapsedTime(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 3, 1, 24])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32
	access = 4
	units = 'seconds'


class bgpPathAttrPeer(ColumnObject):
	access = 4
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 5, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class bgpPathAttrDestNetwork(ColumnObject):
	access = 4
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 5, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class bgpPathAttrOrigin(ColumnObject):
	status = 5
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 5, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'igp'), Enum(2, 'egp'), Enum(3, 'incomplete')]


class bgpPathAttrASPath(ColumnObject):
	access = 4
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 5, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class bgpPathAttrNextHop(ColumnObject):
	access = 4
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 5, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class bgpPathAttrInterASMetric(ColumnObject):
	access = 4
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 5, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class bgp4PathAttrPeer(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 6, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class bgp4PathAttrIpAddrPrefixLen(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 6, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class bgp4PathAttrIpAddrPrefix(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 6, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class bgp4PathAttrOrigin(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 6, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'igp'), Enum(2, 'egp'), Enum(3, 'incomplete')]


class bgp4PathAttrASPathSegment(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 6, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class bgp4PathAttrNextHop(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 6, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class bgp4PathAttrMultiExitDisc(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 6, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class bgp4PathAttrLocalPref(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 6, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class bgp4PathAttrAtomicAggregate(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 6, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'lessSpecificRouteNotSelected'), Enum(2, 'lessSpecificRouteSelected')]


class bgp4PathAttrAggregatorAS(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 6, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class bgp4PathAttrAggregatorAddr(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 6, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class bgp4PathAttrCalcLocalPref(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 6, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class bgp4PathAttrBest(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 6, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'false'), Enum(2, 'true')]


class bgp4PathAttrUnknown(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 6, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


# rows 
class bgpPeerEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([bgpPeerRemoteAddr], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 3, 1])
	access = 2
	columns = {'bgpPeerIdentifier': bgpPeerIdentifier, 'bgpPeerState': bgpPeerState, 'bgpPeerAdminStatus': bgpPeerAdminStatus, 'bgpPeerNegotiatedVersion': bgpPeerNegotiatedVersion, 'bgpPeerLocalAddr': bgpPeerLocalAddr, 'bgpPeerLocalPort': bgpPeerLocalPort, 'bgpPeerRemoteAddr': bgpPeerRemoteAddr, 'bgpPeerRemotePort': bgpPeerRemotePort, 'bgpPeerRemoteAs': bgpPeerRemoteAs, 'bgpPeerInUpdates': bgpPeerInUpdates, 'bgpPeerOutUpdates': bgpPeerOutUpdates, 'bgpPeerInTotalMessages': bgpPeerInTotalMessages, 'bgpPeerOutTotalMessages': bgpPeerOutTotalMessages, 'bgpPeerLastError': bgpPeerLastError, 'bgpPeerFsmEstablishedTransitions': bgpPeerFsmEstablishedTransitions, 'bgpPeerFsmEstablishedTime': bgpPeerFsmEstablishedTime, 'bgpPeerConnectRetryInterval': bgpPeerConnectRetryInterval, 'bgpPeerHoldTime': bgpPeerHoldTime, 'bgpPeerKeepAlive': bgpPeerKeepAlive, 'bgpPeerHoldTimeConfigured': bgpPeerHoldTimeConfigured, 'bgpPeerKeepAliveConfigured': bgpPeerKeepAliveConfigured, 'bgpPeerMinASOriginationInterval': bgpPeerMinASOriginationInterval, 'bgpPeerMinRouteAdvertisementInterval': bgpPeerMinRouteAdvertisementInterval, 'bgpPeerInUpdateElapsedTime': bgpPeerInUpdateElapsedTime}


class bgp4PathAttrEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([bgp4PathAttrIpAddrPrefix, bgp4PathAttrIpAddrPrefixLen, bgp4PathAttrPeer], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 6, 1])
	access = 2
	columns = {'bgp4PathAttrPeer': bgp4PathAttrPeer, 'bgp4PathAttrIpAddrPrefixLen': bgp4PathAttrIpAddrPrefixLen, 'bgp4PathAttrIpAddrPrefix': bgp4PathAttrIpAddrPrefix, 'bgp4PathAttrOrigin': bgp4PathAttrOrigin, 'bgp4PathAttrASPathSegment': bgp4PathAttrASPathSegment, 'bgp4PathAttrNextHop': bgp4PathAttrNextHop, 'bgp4PathAttrMultiExitDisc': bgp4PathAttrMultiExitDisc, 'bgp4PathAttrLocalPref': bgp4PathAttrLocalPref, 'bgp4PathAttrAtomicAggregate': bgp4PathAttrAtomicAggregate, 'bgp4PathAttrAggregatorAS': bgp4PathAttrAggregatorAS, 'bgp4PathAttrAggregatorAddr': bgp4PathAttrAggregatorAddr, 'bgp4PathAttrCalcLocalPref': bgp4PathAttrCalcLocalPref, 'bgp4PathAttrBest': bgp4PathAttrBest, 'bgp4PathAttrUnknown': bgp4PathAttrUnknown}


# notifications (traps) 
class bgpEstablishedNotification(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 0, 1])

class bgpBackwardTransNotification(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 0, 2])

class bgpEstablished(NotificationObject):
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 7, 1])

class bgpBackwardTransition(NotificationObject):
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 7, 2])

# groups 
class bgp4MIBGlobalsGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 8, 2, 1])
	group = [bgpVersion, bgpLocalAs, bgpIdentifier]

class bgp4MIBPeerGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 8, 2, 2])
	group = [bgpPeerIdentifier, bgpPeerState, bgpPeerAdminStatus, bgpPeerNegotiatedVersion, bgpPeerLocalAddr, bgpPeerLocalPort, bgpPeerRemoteAddr, bgpPeerRemotePort, bgpPeerRemoteAs, bgpPeerInUpdates, bgpPeerOutUpdates, bgpPeerInTotalMessages, bgpPeerOutTotalMessages, bgpPeerLastError, bgpPeerFsmEstablishedTransitions, bgpPeerFsmEstablishedTime, bgpPeerConnectRetryInterval, bgpPeerHoldTime, bgpPeerKeepAlive, bgpPeerHoldTimeConfigured, bgpPeerKeepAliveConfigured, bgpPeerMinASOriginationInterval, bgpPeerMinRouteAdvertisementInterval, bgpPeerInUpdateElapsedTime]

class bgp4MIBPathAttrGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 8, 2, 4])
	group = [bgp4PathAttrPeer, bgp4PathAttrIpAddrPrefixLen, bgp4PathAttrIpAddrPrefix, bgp4PathAttrOrigin, bgp4PathAttrASPathSegment, bgp4PathAttrNextHop, bgp4PathAttrMultiExitDisc, bgp4PathAttrLocalPref, bgp4PathAttrAtomicAggregate, bgp4PathAttrAggregatorAS, bgp4PathAttrAggregatorAddr, bgp4PathAttrCalcLocalPref, bgp4PathAttrBest, bgp4PathAttrUnknown]

class bgp4MIBTrapGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 8, 2, 5])
	group = [bgpEstablished, bgpBackwardTransition]

class bgp4MIBNotificationGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 15, 8, 2, 6])
	group = [bgpEstablishedNotification, bgpBackwardTransNotification]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
