# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, Integer32, Gauge32, Counter32
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from CISCO_SMI import ciscoMgmt
from IF_MIB import ifIndex

class CISCO_WRED_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/site/CISCO-WRED-MIB'
	conformance = 132
	name = 'CISCO-WRED-MIB'
	language = 2
	description = 'Cisco WRED MIB - Overview\n\nCisco Weighted Random Early Detection/Drop is a method which avoids\ntraffic congestion on an output interface.  Congestion is\ndetected by computing the average output queue size against preset\nthresholds. WRED support are on the IP fast switching and\nIP flow switching only.  It does not apply to IP process switching.\n\nThis MIB incorporates objects from the Cisco WRED line interfaces.\nIts purpose is to provide Weighted Random Early Detection/Drop\npacket configuration and packet filtering information.\n\nWRED are configured/enabled through the CLI command.\nDefaults configuration values are assigned and values can be\nmodified through additional CLI commands.'

# nodes
class ciscoWredMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 83])
	name = 'ciscoWredMIB'

class ciscoWredMIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 83, 1])
	name = 'ciscoWredMIBObjects'

class cwredConfig(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 83, 1, 1])
	name = 'cwredConfig'

class cwredStats(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 83, 1, 2])
	name = 'cwredStats'

class ciscoWredMIBConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 83, 3])
	name = 'ciscoWredMIBConformance'

class ciscoWredMIBCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 83, 3, 1])
	name = 'ciscoWredMIBCompliances'

class ciscoWredMIBGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 83, 3, 2])
	name = 'ciscoWredMIBGroups'


# macros
# types 
# scalars 
# columns
class cwredConfigGlobQueueWeight(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 83, 1, 1, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class cwredConfigPrecedPrecedence(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 83, 1, 1, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class cwredConfigPrecedMinDepthThreshold(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 83, 1, 1, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = 'packets'


class cwredConfigPrecedMaxDepthThreshold(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 83, 1, 1, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = 'packets'


class cwredConfigPrecedPktsDropFraction(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 83, 1, 1, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class cwredQueueAverage(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 83, 1, 2, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32
	access = 4
	units = 'packets'


class cwredQueueDepth(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 83, 1, 2, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32
	access = 4
	units = 'packets'


class cwredStatSwitchedPkts(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 83, 1, 2, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'packets'


class cwredStatRandomFilteredPkts(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 83, 1, 2, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'packets'


class cwredStatMaxFilteredPkts(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 83, 1, 2, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'packets'


# rows 
class cwredConfigGlobEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 83, 1, 1, 1, 1])
	access = 2
	columns = {'cwredConfigGlobQueueWeight': cwredConfigGlobQueueWeight}


class cwredConfigPrecedEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, cwredConfigPrecedPrecedence], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 83, 1, 1, 2, 1])
	access = 2
	columns = {'cwredConfigPrecedPrecedence': cwredConfigPrecedPrecedence, 'cwredConfigPrecedMinDepthThreshold': cwredConfigPrecedMinDepthThreshold, 'cwredConfigPrecedMaxDepthThreshold': cwredConfigPrecedMaxDepthThreshold, 'cwredConfigPrecedPktsDropFraction': cwredConfigPrecedPktsDropFraction}


from IF_MIB import ifIndex
class cwredQueueEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 83, 1, 2, 1, 1])
	access = 2
	columns = {'cwredQueueAverage': cwredQueueAverage, 'cwredQueueDepth': cwredQueueDepth}


from IF_MIB import ifIndex
from CISCO_WRED_MIB import cwredConfigPrecedPrecedence
class cwredStatEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, cwredConfigPrecedPrecedence], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 83, 1, 2, 2, 1])
	access = 2
	columns = {'cwredStatSwitchedPkts': cwredStatSwitchedPkts, 'cwredStatRandomFilteredPkts': cwredStatRandomFilteredPkts, 'cwredStatMaxFilteredPkts': cwredStatMaxFilteredPkts}


# notifications (traps) 
# groups 
class ciscoWredMIBGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 83, 3, 2, 1])
	group = [cwredConfigGlobQueueWeight, cwredConfigPrecedMinDepthThreshold, cwredConfigPrecedMaxDepthThreshold, cwredConfigPrecedPktsDropFraction, cwredQueueAverage, cwredQueueDepth, cwredStatSwitchedPkts, cwredStatRandomFilteredPkts, cwredStatMaxFilteredPkts]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
