# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, Integer32, Counter32, NOTIFICATION_TYPE, transmission
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP, NOTIFICATION_GROUP
from SNMPv2_TC import TEXTUAL_CONVENTION, TestAndIncr, RowStatus
from IF_MIB import InterfaceIndex, ifIndex
from SNMP_FRAMEWORK_MIB import SnmpAdminString

class FR_MFR_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/FR-MFR-MIB'
	conformance = 5
	name = 'FR-MFR-MIB'
	language = 2
	description = 'This is the MIB used to control and monitor the multilink\nframe relay (MFR) function described in FRF.16.'

# nodes
class mfrMib(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47])
	name = 'mfrMib'

class mfrMibScalarObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 1])
	name = 'mfrMibScalarObjects'

class mfrMibBundleObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 2])
	name = 'mfrMibBundleObjects'

class mfrMibBundleLinkObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 3])
	name = 'mfrMibBundleLinkObjects'

class mfrMibTraps(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 4])
	name = 'mfrMibTraps'

class mfrMibTrapsPrefix(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 4, 0])
	name = 'mfrMibTrapsPrefix'

class mfrMibConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 5])
	name = 'mfrMibConformance'

class mfrMibGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 5, 1])
	name = 'mfrMibGroups'

class mfrMibCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 5, 2])
	name = 'mfrMibCompliances'


# macros
# types 

class MfrBundleLinkState(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'mfrBundleLinkStateAddSent'), Enum(2, 'mfrBundleLinkStateAddRx'), Enum(3, 'mfrBundleLinkStateAddAckRx'), Enum(4, 'mfrBundleLinkStateUp'), Enum(5, 'mfrBundleLinkStateIdlePending'), Enum(6, 'mfrBundleLinkStateIdle'), Enum(7, 'mfrBundleLinkStateDown'), Enum(8, 'mfrBundleLinkStateDownIdle')]

# scalars 
class mfrBundleMaxNumBundles(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class mfrBundleNextIndex(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.TestAndIncr


# columns
class mfrBundleIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 2, 3, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class mfrBundleIfIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 2, 3, 1, 2])
	syntaxobject = InterfaceIndex


class mfrBundleRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 2, 3, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class mfrBundleNearEndName(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 2, 3, 1, 4])
	syntaxobject = SnmpAdminString


class mfrBundleFragmentation(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 2, 3, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'enable'), Enum(2, 'disable')]


class mfrBundleMaxFragSize(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 2, 3, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'Octets'


class mfrBundleTimerHello(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 2, 3, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'Seconds'


class mfrBundleTimerAck(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 2, 3, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'Seconds'


class mfrBundleCountMaxRetry(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 2, 3, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class mfrBundleActivationClass(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 2, 3, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'mfrBundleActivationClassA'), Enum(2, 'mfrBundleActivationClassB'), Enum(3, 'mfrBundleActivationClassC'), Enum(4, 'mfrBundleActivationClassD')]


class mfrBundleThreshold(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 2, 3, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'Bundle Links'


class mfrBundleMaxDiffDelay(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 2, 3, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'Milliseconds'


class mfrBundleSeqNumSize(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 2, 3, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'seqNumSize12bit'), Enum(2, 'seqNumSize24bit')]


class mfrBundleMaxBundleLinks(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 2, 3, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = 'Bundle Links'


class mfrBundleLinksConfigured(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 2, 3, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = 'Bundle Links'


class mfrBundleLinksActive(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 2, 3, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = 'Bundle Links'


class mfrBundleBandwidth(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 2, 3, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = 'Bits/Sec'


class mfrBundleFarEndName(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 2, 3, 1, 18])
	syntaxobject = SnmpAdminString


class mfrBundleResequencingErrors(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 2, 3, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'Error Events'


class mfrBundleIfIndexMappingIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 2, 4, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class mfrBundleLinkRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 3, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class mfrBundleLinkConfigBundleIndex(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 3, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class mfrBundleLinkNearEndName(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 3, 1, 1, 3])
	syntaxobject = SnmpAdminString


class mfrBundleLinkState(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 3, 1, 1, 4])
	syntaxobject = MfrBundleLinkState


class mfrBundleLinkFarEndName(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 3, 1, 1, 5])
	syntaxobject = SnmpAdminString


class mfrBundleLinkFarEndBundleName(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 3, 1, 1, 6])
	syntaxobject = SnmpAdminString


class mfrBundleLinkDelay(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 3, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 4
	units = 'Milliseconds'


class mfrBundleLinkFramesControlTx(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 3, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'Frames'


class mfrBundleLinkFramesControlRx(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 3, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'Frames'


class mfrBundleLinkFramesControlInvalid(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 3, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'Frames'


class mfrBundleLinkTimerExpiredCount(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 3, 1, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'Timer Expiration Events'


class mfrBundleLinkLoopbackSuspected(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 3, 1, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'Loopback Suspected Events'


class mfrBundleLinkUnexpectedSequence(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 3, 1, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'Frames'


class mfrBundleLinkMismatch(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 3, 1, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'Bundle Name Mismatch Events'


# rows 
class mfrBundleEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([mfrBundleIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 2, 3, 1])
	access = 2
	rowstatus = mfrBundleRowStatus
	columns = {'mfrBundleIndex': mfrBundleIndex, 'mfrBundleIfIndex': mfrBundleIfIndex, 'mfrBundleRowStatus': mfrBundleRowStatus, 'mfrBundleNearEndName': mfrBundleNearEndName, 'mfrBundleFragmentation': mfrBundleFragmentation, 'mfrBundleMaxFragSize': mfrBundleMaxFragSize, 'mfrBundleTimerHello': mfrBundleTimerHello, 'mfrBundleTimerAck': mfrBundleTimerAck, 'mfrBundleCountMaxRetry': mfrBundleCountMaxRetry, 'mfrBundleActivationClass': mfrBundleActivationClass, 'mfrBundleThreshold': mfrBundleThreshold, 'mfrBundleMaxDiffDelay': mfrBundleMaxDiffDelay, 'mfrBundleSeqNumSize': mfrBundleSeqNumSize, 'mfrBundleMaxBundleLinks': mfrBundleMaxBundleLinks, 'mfrBundleLinksConfigured': mfrBundleLinksConfigured, 'mfrBundleLinksActive': mfrBundleLinksActive, 'mfrBundleBandwidth': mfrBundleBandwidth, 'mfrBundleFarEndName': mfrBundleFarEndName, 'mfrBundleResequencingErrors': mfrBundleResequencingErrors}


class mfrBundleIfIndexMappingEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 2, 4, 1])
	access = 2
	columns = {'mfrBundleIfIndexMappingIndex': mfrBundleIfIndexMappingIndex}


class mfrBundleLinkEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 3, 1, 1])
	access = 2
	rowstatus = mfrBundleLinkRowStatus
	columns = {'mfrBundleLinkRowStatus': mfrBundleLinkRowStatus, 'mfrBundleLinkConfigBundleIndex': mfrBundleLinkConfigBundleIndex, 'mfrBundleLinkNearEndName': mfrBundleLinkNearEndName, 'mfrBundleLinkState': mfrBundleLinkState, 'mfrBundleLinkFarEndName': mfrBundleLinkFarEndName, 'mfrBundleLinkFarEndBundleName': mfrBundleLinkFarEndBundleName, 'mfrBundleLinkDelay': mfrBundleLinkDelay, 'mfrBundleLinkFramesControlTx': mfrBundleLinkFramesControlTx, 'mfrBundleLinkFramesControlRx': mfrBundleLinkFramesControlRx, 'mfrBundleLinkFramesControlInvalid': mfrBundleLinkFramesControlInvalid, 'mfrBundleLinkTimerExpiredCount': mfrBundleLinkTimerExpiredCount, 'mfrBundleLinkLoopbackSuspected': mfrBundleLinkLoopbackSuspected, 'mfrBundleLinkUnexpectedSequence': mfrBundleLinkUnexpectedSequence, 'mfrBundleLinkMismatch': mfrBundleLinkMismatch}


# notifications (traps) 
class mfrMibTrapBundleLinkMismatch(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 4, 0, 1])

# groups 
class mfrMibBundleGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 5, 1, 1])
	group = [mfrBundleMaxNumBundles, mfrBundleNextIndex, mfrBundleIfIndex, mfrBundleRowStatus, mfrBundleNearEndName, mfrBundleFragmentation, mfrBundleMaxFragSize, mfrBundleTimerHello, mfrBundleTimerAck, mfrBundleCountMaxRetry, mfrBundleActivationClass, mfrBundleThreshold, mfrBundleMaxDiffDelay, mfrBundleMaxBundleLinks, mfrBundleLinksConfigured, mfrBundleLinksActive, mfrBundleBandwidth, mfrBundleSeqNumSize, mfrBundleFarEndName, mfrBundleResequencingErrors, mfrBundleIfIndexMappingIndex]

class mfrMibBundleLinkGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 5, 1, 2])
	group = [mfrBundleLinkRowStatus, mfrBundleLinkConfigBundleIndex, mfrBundleLinkNearEndName, mfrBundleLinkState, mfrBundleLinkFarEndName, mfrBundleLinkFarEndBundleName, mfrBundleLinkDelay, mfrBundleLinkFramesControlTx, mfrBundleLinkFramesControlRx, mfrBundleLinkFramesControlInvalid, mfrBundleLinkTimerExpiredCount, mfrBundleLinkLoopbackSuspected, mfrBundleLinkUnexpectedSequence, mfrBundleLinkMismatch]

class mfrMibTrapGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 47, 5, 1, 3])
	group = [mfrMibTrapBundleLinkMismatch]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
