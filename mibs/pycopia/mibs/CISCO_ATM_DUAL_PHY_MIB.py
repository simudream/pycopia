# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from IF_MIB import ifIndex, InterfaceIndex
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, NOTIFICATION_TYPE, Counter32
from CISCO_TC import InterfaceIndexOrZero
from CISCO_SMI import ciscoMgmt
from SNMPv2_TC import TruthValue

class CISCO_ATM_DUAL_PHY_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/site/CISCO-ATM-DUAL-PHY-MIB'
	conformance = 3
	name = 'CISCO-ATM-DUAL-PHY-MIB'
	language = 2
	description = 'Initial version of this MIB module.\n\n\nPhy definition\n\nThroughout this document phy is used as an abbreviation\nfor Physical Interface.  In particular it refers to a\nphysical ATM jack on a Catalyst 5000 ATM card.  This card\ncan be fitted with either one or two physical jacks, only\none of which may be active at any given moment.  The second\nphy serves as a redundant connector to the ATM backbone.\nNote, however, that for logistical reasons, each phy has\na separate ifIndex.\n\n\nSupport of the phy by ifTable\n\nThe dual phy entity on the c5K ATM line card is managed\nusing the ifTable.  Specific interpretations of ifTable\nfor the dual phy entity are as follows.\n\nObject   Use for dual phy entity\n======   =======================\n\nifIndex  Each phy entity is represented by an ifEntry.\n\nifDescr  Description of the phy entity.\n\nifType   The value for the phy entity is other(1).\n\nifSpeed  See [1].\n\nifPhysAddress   An octet string of zero length, per [1].\n\nifAdminStatus   See [1].\n\nifOperStatus    See [1].  In addition, note that a phy can\n         be in the up state but still not be the\n         active phy.  However, the active phy will\n         always be up.\n\nifLastChange    See [1].\n\nifName   See [1].\n\nifLinkUpDownTrapEnable     disabled(2).\n\nifHighSpeed      See [1]. \n\nifConnectorPresent\ttrue(1).\n\n\nReferences\n\n[1] McCloghrie, K. and F. Kastenholz, Evolution of the\nInterfaces Group of MIB-II, RFC 1573, Hughes LAN Systems,\nFTP Software, January 1994.'

# nodes
class ciscoAtmDualPhyMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 60])
	name = 'ciscoAtmDualPhyMIB'

class ciscoAtmDualPhyMIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 60, 1])
	name = 'ciscoAtmDualPhyMIBObjects'

class cadpStatistics(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 60, 1, 1])
	name = 'cadpStatistics'

class ciscoAtmDualPhyMIBTrapPrefix(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 60, 2])
	name = 'ciscoAtmDualPhyMIBTrapPrefix'

class ciscoAtmDualPhyMIBTraps(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 60, 2, 0])
	name = 'ciscoAtmDualPhyMIBTraps'

class ciscoAtmDualPhyMIBConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 60, 3])
	name = 'ciscoAtmDualPhyMIBConformance'

class ciscoAtmDualPhyMIBCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 60, 3, 1])
	name = 'ciscoAtmDualPhyMIBCompliances'

class ciscoAtmDualPhyMIBGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 60, 3, 2])
	name = 'ciscoAtmDualPhyMIBGroups'


# macros
# types 
# scalars 
class cadpStatOperActivePhy(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 60, 1, 1, 2])
	syntaxobject = InterfaceIndexOrZero


class cadpStatAdminActivePhy(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 60, 1, 1, 3])
	syntaxobject = InterfaceIndex


# columns
class cadpStatLossOfSignal(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 60, 1, 1, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class cadpStatFarEndReceiveFailure(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 60, 1, 1, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class cadpStatActive(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 60, 1, 1, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class cadpStatSectionBIP8Errors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 60, 1, 1, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cadpStatLineBIP824Errors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 60, 1, 1, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cadpStatLineFEBErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 60, 1, 1, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cadpStatPathBIP8Errors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 60, 1, 1, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cadpStatPathFEBErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 60, 1, 1, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cadpStatCorrectableHCSErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 60, 1, 1, 1, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class cadpStatUncorrectableHCSErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 60, 1, 1, 1, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


# rows 
class cadpStatEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 60, 1, 1, 1, 1])
	access = 2
	columns = {'cadpStatLossOfSignal': cadpStatLossOfSignal, 'cadpStatFarEndReceiveFailure': cadpStatFarEndReceiveFailure, 'cadpStatActive': cadpStatActive, 'cadpStatSectionBIP8Errors': cadpStatSectionBIP8Errors, 'cadpStatLineBIP824Errors': cadpStatLineBIP824Errors, 'cadpStatLineFEBErrors': cadpStatLineFEBErrors, 'cadpStatPathBIP8Errors': cadpStatPathBIP8Errors, 'cadpStatPathFEBErrors': cadpStatPathFEBErrors, 'cadpStatCorrectableHCSErrors': cadpStatCorrectableHCSErrors, 'cadpStatUncorrectableHCSErrors': cadpStatUncorrectableHCSErrors}


# notifications (traps) 
class ciscoAtmDualPhyChange(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 60, 2, 0, 1])

# groups 
class ciscoAtmDualPhyMIBGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 60, 3, 2, 1])
	group = [cadpStatLossOfSignal, cadpStatFarEndReceiveFailure, cadpStatActive, cadpStatSectionBIP8Errors, cadpStatLineBIP824Errors, cadpStatLineFEBErrors, cadpStatPathBIP8Errors, cadpStatPathFEBErrors, cadpStatCorrectableHCSErrors, cadpStatUncorrectableHCSErrors, cadpStatAdminActivePhy, cadpStatOperActivePhy]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
