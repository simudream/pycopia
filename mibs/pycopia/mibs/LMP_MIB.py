# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP, NOTIFICATION_GROUP
from IF_MIB import InterfaceIndexOrZero, ifIndex
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, NOTIFICATION_TYPE, transmission, Unsigned32, Counter32, TimeTicks
from INET_ADDRESS_MIB import InetAddressType, InetAddress
from TE_LINK_STD_MIB import teLinkRemoteIpAddr, teLinkIncomingIfId, TeLinkEncodingType
from SNMPv2_TC import TEXTUAL_CONVENTION, TruthValue, RowStatus, StorageType, TimeStamp

class LMP_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/LMP-MIB'
	conformance = 132
	name = 'LMP-MIB'
	language = 2
	description = "Copyright (C) 2006 The Internet Society.  This version of\nthe MIB module is part of RFC 4631; see the RFC itself\nfor full legal notices.\n\nThis MIB module contains managed object definitions for\nthe Link Management Protocol (LMP) as\ndefined in 'Link Management Protocol'."

# nodes
class lmpMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227])
	name = 'lmpMIB'

class lmpNotifications(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 0])
	name = 'lmpNotifications'

class lmpObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1])
	name = 'lmpObjects'

class lmpConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 2])
	name = 'lmpConformance'

class lmpCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 2, 1])
	name = 'lmpCompliances'

class lmpGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 2, 2])
	name = 'lmpGroups'


# macros
# types 

class LmpInterval(pycopia.SMI.Basetypes.Unsigned32):
	status = 1
	ranges = Ranges(Range(1, 65535))
	format = 'd'


class LmpRetransmitInterval(pycopia.SMI.Basetypes.Unsigned32):
	status = 1
	ranges = Ranges(Range(1, -1))
	format = 'd'


class LmpNodeId(pycopia.SMI.Basetypes.OctetString):
	status = 1
	ranges = Ranges(Range(4, 4))
	format = '1d.1d.1d.1d'

# scalars 
class lmpAdminStatus(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'up'), Enum(2, 'down')]


class lmpOperStatus(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'up'), Enum(2, 'down')]


class lmpCcHelloIntervalDefault(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 4])
	syntaxobject = LmpInterval


class lmpCcHelloIntervalDefaultMin(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 5])
	syntaxobject = LmpInterval


class lmpCcHelloIntervalDefaultMax(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 6])
	syntaxobject = LmpInterval


class lmpCcHelloDeadIntervalDefault(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 7])
	syntaxobject = LmpInterval


class lmpCcHelloDeadIntervalDefaultMin(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 8])
	syntaxobject = LmpInterval


class lmpCcHelloDeadIntervalDefaultMax(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 9])
	syntaxobject = LmpInterval


class lmpGlobalLinkVerificationInterval(ScalarObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32
	access = 5
	units = 'milliseconds'


class lmpNotificationMaxRate(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class lmpLinkPropertyNotificationsEnabled(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class lmpUnprotectedNotificationsEnabled(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 20])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class lmpCcUpDownNotificationsEnabled(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 21])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class lmpTeLinkNotificationsEnabled(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 22])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class lmpDataLinkNotificationsEnabled(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 23])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


# columns
class lmpNbrNodeId(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 3, 1, 1])
	syntaxobject = LmpNodeId


class lmpNbrRetransmitInterval(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 3, 1, 2])
	syntaxobject = LmpRetransmitInterval


class lmpNbrRetryLimit(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 3, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class lmpNbrRetransmitDelta(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 3, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class lmpNbrAdminStatus(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 3, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'up'), Enum(2, 'down')]


class lmpNbrOperStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 3, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'up'), Enum(2, 'down')]


class lmpNbrRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 3, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class lmpNbrStorageType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 3, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


class lmpCcId(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class lmpCcUnderlyingIfIndex(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 2])
	syntaxobject = InterfaceIndexOrZero


class lmpCcIsIf(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class lmpCcNbrNodeId(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 4])
	syntaxobject = LmpNodeId


class lmpCcRemoteId(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class lmpCcRemoteAddressType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 6])
	syntaxobject = InetAddressType


class lmpCcRemoteIpAddr(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 7])
	syntaxobject = InetAddress


class lmpCcSetupRole(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'active'), Enum(2, 'passive')]


class lmpCcAuthentication(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class lmpCcHelloInterval(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 10])
	syntaxobject = LmpInterval


class lmpCcHelloIntervalMin(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 11])
	syntaxobject = LmpInterval


class lmpCcHelloIntervalMax(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 12])
	syntaxobject = LmpInterval


class lmpCcHelloIntervalNegotiated(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 13])
	syntaxobject = LmpInterval


class lmpCcHelloDeadInterval(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 14])
	syntaxobject = LmpInterval


class lmpCcHelloDeadIntervalMin(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 15])
	syntaxobject = LmpInterval


class lmpCcHelloDeadIntervalMax(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 16])
	syntaxobject = LmpInterval


class lmpCcHelloDeadIntervalNegotiated(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 17])
	syntaxobject = LmpInterval


class lmpCcLastChange(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class lmpCcAdminStatus(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'up'), Enum(2, 'down')]


class lmpCcOperStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 20])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'up'), Enum(2, 'down'), Enum(3, 'configSnd'), Enum(4, 'configRcv'), Enum(5, 'active'), Enum(6, 'goingDown')]


class lmpCcRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 21])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class lmpCcStorageType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1, 22])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


class lmpCcInOctets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcInDiscards(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcInErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcOutOctets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcOutDiscards(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcOutErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcConfigReceived(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcConfigSent(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcConfigRetransmit(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcConfigAckReceived(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcConfigAckSent(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcConfigNackReceived(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcConfigNackSent(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcHelloReceived(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcHelloSent(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcBeginVerifyReceived(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcBeginVerifySent(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcBeginVerifyRetransmit(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcBeginVerifyAckReceived(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcBeginVerifyAckSent(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 20])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcBeginVerifyNackReceived(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 21])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcBeginVerifyNackSent(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 22])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcEndVerifyReceived(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 23])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcEndVerifySent(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 24])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcEndVerifyRetransmit(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 25])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcEndVerifyAckReceived(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 26])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcEndVerifyAckSent(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 27])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcTestStatusSuccessReceived(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 28])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcTestStatusSuccessSent(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 29])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcTestStatusSuccessRetransmit(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 30])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcTestStatusFailureReceived(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 31])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcTestStatusFailureSent(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 32])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcTestStatusFailureRetransmit(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 33])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcTestStatusAckReceived(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 34])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcTestStatusAckSent(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 35])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcLinkSummaryReceived(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 36])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcLinkSummarySent(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 37])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcLinkSummaryRetransmit(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 38])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcLinkSummaryAckReceived(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 39])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcLinkSummaryAckSent(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 40])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcLinkSummaryNackReceived(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 41])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcLinkSummaryNackSent(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 42])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcChannelStatusReceived(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 43])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcChannelStatusSent(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 44])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcChannelStatusRetransmit(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 45])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcChannelStatusAckReceived(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 46])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcChannelStatusAckSent(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 47])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcChannelStatusReqReceived(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 48])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcChannelStatusReqSent(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 49])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcChannelStatusReqRetransmit(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 50])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcChannelStatusRspReceived(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 51])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcChannelStatusRspSent(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 52])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpCcCounterDiscontinuityTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1, 53])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class lmpTeLinkNbrRemoteNodeId(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 12, 1, 1])
	syntaxobject = LmpNodeId


class lmpTeLinkVerification(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 12, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class lmpTeLinkFaultManagement(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 12, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class lmpTeLinkDwdm(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 12, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class lmpTeLinkOperStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 12, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'up'), Enum(2, 'down'), Enum(3, 'testing'), Enum(4, 'init'), Enum(5, 'degraded')]


class lmpTeLinkRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 12, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class lmpTeLinkStorageType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 12, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


class lmpLinkVerifyInterval(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 14, 1, 1])
	syntaxobject = LmpInterval


class lmpLinkVerifyDeadInterval(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 14, 1, 2])
	syntaxobject = LmpInterval


class lmpLinkVerifyTransportMechanism(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 14, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.BITS


class lmpLinkVerifyAllLinks(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 14, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class lmpLinkVerifyTransmissionRate(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 14, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32
	access = 5
	units = 'bytes per second'


class lmpLinkVerifyWavelength(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 14, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32
	access = 5
	units = 'nanometers'


class lmpLinkVerifyRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 14, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class lmpLinkVerifyStorageType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 14, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


class lmpTeInOctets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpTeOutOctets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpTeBeginVerifyReceived(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpTeBeginVerifySent(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpTeBeginVerifyRetransmit(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpTeBeginVerifyAckReceived(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpTeBeginVerifyAckSent(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpTeBeginVerifyNackReceived(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpTeBeginVerifyNackSent(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpTeEndVerifyReceived(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpTeEndVerifySent(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpTeEndVerifyRetransmit(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpTeEndVerifyAckReceived(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpTeEndVerifyAckSent(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpTeTestStatusSuccessReceived(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpTeTestStatusSuccessSent(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpTeTestStatusSuccessRetransmit(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpTeTestStatusFailureReceived(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpTeTestStatusFailureSent(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpTeTestStatusFailureRetransmit(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 20])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpTeTestStatusAckReceived(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 21])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpTeTestStatusAckSent(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 22])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpTeLinkSummaryReceived(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 23])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpTeLinkSummarySent(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 24])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpTeLinkSummaryRetransmit(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 25])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpTeLinkSummaryAckReceived(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 26])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpTeLinkSummaryAckSent(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 27])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpTeLinkSummaryNackReceived(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 28])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpTeLinkSummaryNackSent(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 29])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpTeChannelStatusReceived(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 30])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpTeChannelStatusSent(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 31])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpTeChannelStatusRetransmit(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 32])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpTeChannelStatusAckReceived(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 33])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpTeChannelStatusAckSent(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 34])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpTeChannelStatusReqReceived(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 35])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpTeChannelStatusReqSent(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 36])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpTeChannelStatusReqRetransmit(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 37])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpTeChannelStatusRspReceived(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 38])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpTeChannelStatusRspSent(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 39])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpTeCounterDiscontinuityTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1, 40])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class lmpDataLinkType(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 16, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'port'), Enum(2, 'componentLink')]


class lmpDataLinkAddressType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 16, 1, 2])
	syntaxobject = InetAddressType


class lmpDataLinkIpAddr(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 16, 1, 3])
	syntaxobject = InetAddress


class lmpDataLinkRemoteIpAddress(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 16, 1, 4])
	syntaxobject = InetAddress


class lmpDataLinkRemoteIfId(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 16, 1, 5])
	syntaxobject = InterfaceIndexOrZero


class lmpDataLinkEncodingType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 16, 1, 6])
	syntaxobject = TeLinkEncodingType


class lmpDataLinkActiveOperStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 16, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'upAlloc'), Enum(2, 'upFree'), Enum(3, 'down'), Enum(4, 'testing')]


class lmpDataLinkPassiveOperStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 16, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'upAlloc'), Enum(2, 'upFree'), Enum(3, 'down'), Enum(4, 'psvTst')]


class lmpDataLinkRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 16, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class lmpDataLinkStorageType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 16, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


class lmpDataLinkTestReceived(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 17, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpDataLinkTestSent(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 17, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpDataLinkActiveTestSuccess(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 17, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpDataLinkActiveTestFailure(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 17, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpDataLinkPassiveTestSuccess(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 17, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpDataLinkPassiveTestFailure(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 17, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lmpDataLinkDiscontinuityTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 17, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


# rows 
class lmpNbrEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([lmpNbrNodeId], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 3, 1])
	access = 2
	rowstatus = lmpNbrRowStatus
	columns = {'lmpNbrNodeId': lmpNbrNodeId, 'lmpNbrRetransmitInterval': lmpNbrRetransmitInterval, 'lmpNbrRetryLimit': lmpNbrRetryLimit, 'lmpNbrRetransmitDelta': lmpNbrRetransmitDelta, 'lmpNbrAdminStatus': lmpNbrAdminStatus, 'lmpNbrOperStatus': lmpNbrOperStatus, 'lmpNbrRowStatus': lmpNbrRowStatus, 'lmpNbrStorageType': lmpNbrStorageType}


class lmpControlChannelEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([lmpCcId], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 10, 1])
	access = 2
	rowstatus = lmpCcRowStatus
	columns = {'lmpCcId': lmpCcId, 'lmpCcUnderlyingIfIndex': lmpCcUnderlyingIfIndex, 'lmpCcIsIf': lmpCcIsIf, 'lmpCcNbrNodeId': lmpCcNbrNodeId, 'lmpCcRemoteId': lmpCcRemoteId, 'lmpCcRemoteAddressType': lmpCcRemoteAddressType, 'lmpCcRemoteIpAddr': lmpCcRemoteIpAddr, 'lmpCcSetupRole': lmpCcSetupRole, 'lmpCcAuthentication': lmpCcAuthentication, 'lmpCcHelloInterval': lmpCcHelloInterval, 'lmpCcHelloIntervalMin': lmpCcHelloIntervalMin, 'lmpCcHelloIntervalMax': lmpCcHelloIntervalMax, 'lmpCcHelloIntervalNegotiated': lmpCcHelloIntervalNegotiated, 'lmpCcHelloDeadInterval': lmpCcHelloDeadInterval, 'lmpCcHelloDeadIntervalMin': lmpCcHelloDeadIntervalMin, 'lmpCcHelloDeadIntervalMax': lmpCcHelloDeadIntervalMax, 'lmpCcHelloDeadIntervalNegotiated': lmpCcHelloDeadIntervalNegotiated, 'lmpCcLastChange': lmpCcLastChange, 'lmpCcAdminStatus': lmpCcAdminStatus, 'lmpCcOperStatus': lmpCcOperStatus, 'lmpCcRowStatus': lmpCcRowStatus, 'lmpCcStorageType': lmpCcStorageType}


class lmpControlChannelPerfEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([lmpCcId], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 11, 1])
	access = 2
	columns = {'lmpCcInOctets': lmpCcInOctets, 'lmpCcInDiscards': lmpCcInDiscards, 'lmpCcInErrors': lmpCcInErrors, 'lmpCcOutOctets': lmpCcOutOctets, 'lmpCcOutDiscards': lmpCcOutDiscards, 'lmpCcOutErrors': lmpCcOutErrors, 'lmpCcConfigReceived': lmpCcConfigReceived, 'lmpCcConfigSent': lmpCcConfigSent, 'lmpCcConfigRetransmit': lmpCcConfigRetransmit, 'lmpCcConfigAckReceived': lmpCcConfigAckReceived, 'lmpCcConfigAckSent': lmpCcConfigAckSent, 'lmpCcConfigNackReceived': lmpCcConfigNackReceived, 'lmpCcConfigNackSent': lmpCcConfigNackSent, 'lmpCcHelloReceived': lmpCcHelloReceived, 'lmpCcHelloSent': lmpCcHelloSent, 'lmpCcBeginVerifyReceived': lmpCcBeginVerifyReceived, 'lmpCcBeginVerifySent': lmpCcBeginVerifySent, 'lmpCcBeginVerifyRetransmit': lmpCcBeginVerifyRetransmit, 'lmpCcBeginVerifyAckReceived': lmpCcBeginVerifyAckReceived, 'lmpCcBeginVerifyAckSent': lmpCcBeginVerifyAckSent, 'lmpCcBeginVerifyNackReceived': lmpCcBeginVerifyNackReceived, 'lmpCcBeginVerifyNackSent': lmpCcBeginVerifyNackSent, 'lmpCcEndVerifyReceived': lmpCcEndVerifyReceived, 'lmpCcEndVerifySent': lmpCcEndVerifySent, 'lmpCcEndVerifyRetransmit': lmpCcEndVerifyRetransmit, 'lmpCcEndVerifyAckReceived': lmpCcEndVerifyAckReceived, 'lmpCcEndVerifyAckSent': lmpCcEndVerifyAckSent, 'lmpCcTestStatusSuccessReceived': lmpCcTestStatusSuccessReceived, 'lmpCcTestStatusSuccessSent': lmpCcTestStatusSuccessSent, 'lmpCcTestStatusSuccessRetransmit': lmpCcTestStatusSuccessRetransmit, 'lmpCcTestStatusFailureReceived': lmpCcTestStatusFailureReceived, 'lmpCcTestStatusFailureSent': lmpCcTestStatusFailureSent, 'lmpCcTestStatusFailureRetransmit': lmpCcTestStatusFailureRetransmit, 'lmpCcTestStatusAckReceived': lmpCcTestStatusAckReceived, 'lmpCcTestStatusAckSent': lmpCcTestStatusAckSent, 'lmpCcLinkSummaryReceived': lmpCcLinkSummaryReceived, 'lmpCcLinkSummarySent': lmpCcLinkSummarySent, 'lmpCcLinkSummaryRetransmit': lmpCcLinkSummaryRetransmit, 'lmpCcLinkSummaryAckReceived': lmpCcLinkSummaryAckReceived, 'lmpCcLinkSummaryAckSent': lmpCcLinkSummaryAckSent, 'lmpCcLinkSummaryNackReceived': lmpCcLinkSummaryNackReceived, 'lmpCcLinkSummaryNackSent': lmpCcLinkSummaryNackSent, 'lmpCcChannelStatusReceived': lmpCcChannelStatusReceived, 'lmpCcChannelStatusSent': lmpCcChannelStatusSent, 'lmpCcChannelStatusRetransmit': lmpCcChannelStatusRetransmit, 'lmpCcChannelStatusAckReceived': lmpCcChannelStatusAckReceived, 'lmpCcChannelStatusAckSent': lmpCcChannelStatusAckSent, 'lmpCcChannelStatusReqReceived': lmpCcChannelStatusReqReceived, 'lmpCcChannelStatusReqSent': lmpCcChannelStatusReqSent, 'lmpCcChannelStatusReqRetransmit': lmpCcChannelStatusReqRetransmit, 'lmpCcChannelStatusRspReceived': lmpCcChannelStatusRspReceived, 'lmpCcChannelStatusRspSent': lmpCcChannelStatusRspSent, 'lmpCcCounterDiscontinuityTime': lmpCcCounterDiscontinuityTime}


class lmpTeLinkEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 12, 1])
	access = 2
	rowstatus = lmpTeLinkRowStatus
	columns = {'lmpTeLinkNbrRemoteNodeId': lmpTeLinkNbrRemoteNodeId, 'lmpTeLinkVerification': lmpTeLinkVerification, 'lmpTeLinkFaultManagement': lmpTeLinkFaultManagement, 'lmpTeLinkDwdm': lmpTeLinkDwdm, 'lmpTeLinkOperStatus': lmpTeLinkOperStatus, 'lmpTeLinkRowStatus': lmpTeLinkRowStatus, 'lmpTeLinkStorageType': lmpTeLinkStorageType}


class lmpLinkVerificationEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 14, 1])
	access = 2
	rowstatus = lmpLinkVerifyRowStatus
	columns = {'lmpLinkVerifyInterval': lmpLinkVerifyInterval, 'lmpLinkVerifyDeadInterval': lmpLinkVerifyDeadInterval, 'lmpLinkVerifyTransportMechanism': lmpLinkVerifyTransportMechanism, 'lmpLinkVerifyAllLinks': lmpLinkVerifyAllLinks, 'lmpLinkVerifyTransmissionRate': lmpLinkVerifyTransmissionRate, 'lmpLinkVerifyWavelength': lmpLinkVerifyWavelength, 'lmpLinkVerifyRowStatus': lmpLinkVerifyRowStatus, 'lmpLinkVerifyStorageType': lmpLinkVerifyStorageType}


class lmpTeLinkPerfEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 15, 1])
	access = 2
	columns = {'lmpTeInOctets': lmpTeInOctets, 'lmpTeOutOctets': lmpTeOutOctets, 'lmpTeBeginVerifyReceived': lmpTeBeginVerifyReceived, 'lmpTeBeginVerifySent': lmpTeBeginVerifySent, 'lmpTeBeginVerifyRetransmit': lmpTeBeginVerifyRetransmit, 'lmpTeBeginVerifyAckReceived': lmpTeBeginVerifyAckReceived, 'lmpTeBeginVerifyAckSent': lmpTeBeginVerifyAckSent, 'lmpTeBeginVerifyNackReceived': lmpTeBeginVerifyNackReceived, 'lmpTeBeginVerifyNackSent': lmpTeBeginVerifyNackSent, 'lmpTeEndVerifyReceived': lmpTeEndVerifyReceived, 'lmpTeEndVerifySent': lmpTeEndVerifySent, 'lmpTeEndVerifyRetransmit': lmpTeEndVerifyRetransmit, 'lmpTeEndVerifyAckReceived': lmpTeEndVerifyAckReceived, 'lmpTeEndVerifyAckSent': lmpTeEndVerifyAckSent, 'lmpTeTestStatusSuccessReceived': lmpTeTestStatusSuccessReceived, 'lmpTeTestStatusSuccessSent': lmpTeTestStatusSuccessSent, 'lmpTeTestStatusSuccessRetransmit': lmpTeTestStatusSuccessRetransmit, 'lmpTeTestStatusFailureReceived': lmpTeTestStatusFailureReceived, 'lmpTeTestStatusFailureSent': lmpTeTestStatusFailureSent, 'lmpTeTestStatusFailureRetransmit': lmpTeTestStatusFailureRetransmit, 'lmpTeTestStatusAckReceived': lmpTeTestStatusAckReceived, 'lmpTeTestStatusAckSent': lmpTeTestStatusAckSent, 'lmpTeLinkSummaryReceived': lmpTeLinkSummaryReceived, 'lmpTeLinkSummarySent': lmpTeLinkSummarySent, 'lmpTeLinkSummaryRetransmit': lmpTeLinkSummaryRetransmit, 'lmpTeLinkSummaryAckReceived': lmpTeLinkSummaryAckReceived, 'lmpTeLinkSummaryAckSent': lmpTeLinkSummaryAckSent, 'lmpTeLinkSummaryNackReceived': lmpTeLinkSummaryNackReceived, 'lmpTeLinkSummaryNackSent': lmpTeLinkSummaryNackSent, 'lmpTeChannelStatusReceived': lmpTeChannelStatusReceived, 'lmpTeChannelStatusSent': lmpTeChannelStatusSent, 'lmpTeChannelStatusRetransmit': lmpTeChannelStatusRetransmit, 'lmpTeChannelStatusAckReceived': lmpTeChannelStatusAckReceived, 'lmpTeChannelStatusAckSent': lmpTeChannelStatusAckSent, 'lmpTeChannelStatusReqReceived': lmpTeChannelStatusReqReceived, 'lmpTeChannelStatusReqSent': lmpTeChannelStatusReqSent, 'lmpTeChannelStatusReqRetransmit': lmpTeChannelStatusReqRetransmit, 'lmpTeChannelStatusRspReceived': lmpTeChannelStatusRspReceived, 'lmpTeChannelStatusRspSent': lmpTeChannelStatusRspSent, 'lmpTeCounterDiscontinuityTime': lmpTeCounterDiscontinuityTime}


class lmpDataLinkEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 16, 1])
	access = 2
	rowstatus = lmpDataLinkRowStatus
	columns = {'lmpDataLinkType': lmpDataLinkType, 'lmpDataLinkAddressType': lmpDataLinkAddressType, 'lmpDataLinkIpAddr': lmpDataLinkIpAddr, 'lmpDataLinkRemoteIpAddress': lmpDataLinkRemoteIpAddress, 'lmpDataLinkRemoteIfId': lmpDataLinkRemoteIfId, 'lmpDataLinkEncodingType': lmpDataLinkEncodingType, 'lmpDataLinkActiveOperStatus': lmpDataLinkActiveOperStatus, 'lmpDataLinkPassiveOperStatus': lmpDataLinkPassiveOperStatus, 'lmpDataLinkRowStatus': lmpDataLinkRowStatus, 'lmpDataLinkStorageType': lmpDataLinkStorageType}


class lmpDataLinkPerfEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 1, 17, 1])
	access = 2
	columns = {'lmpDataLinkTestReceived': lmpDataLinkTestReceived, 'lmpDataLinkTestSent': lmpDataLinkTestSent, 'lmpDataLinkActiveTestSuccess': lmpDataLinkActiveTestSuccess, 'lmpDataLinkActiveTestFailure': lmpDataLinkActiveTestFailure, 'lmpDataLinkPassiveTestSuccess': lmpDataLinkPassiveTestSuccess, 'lmpDataLinkPassiveTestFailure': lmpDataLinkPassiveTestFailure, 'lmpDataLinkDiscontinuityTime': lmpDataLinkDiscontinuityTime}


# notifications (traps) 
class lmpTeLinkPropertyMismatch(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 0, 1])

class lmpDataLinkPropertyMismatch(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 0, 2])

class lmpUnprotected(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 0, 3])

class lmpControlChannelUp(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 0, 4])

class lmpControlChannelDown(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 0, 5])

class lmpTeLinkDegraded(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 0, 6])

class lmpTeLinkNotDegraded(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 0, 7])

class lmpDataLinkVerificationFailure(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 0, 8])

# groups 
class lmpNodeGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 2, 2, 1])
	group = [lmpAdminStatus, lmpOperStatus, lmpNbrAdminStatus, lmpNbrOperStatus, lmpNbrRowStatus, lmpNbrStorageType, lmpUnprotectedNotificationsEnabled, lmpNotificationMaxRate]

class lmpControlChannelGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 2, 2, 2])
	group = [lmpNbrRetransmitInterval, lmpNbrRetryLimit, lmpNbrRetransmitDelta, lmpNbrAdminStatus, lmpNbrOperStatus, lmpNbrRowStatus, lmpNbrStorageType, lmpCcHelloIntervalDefault, lmpCcHelloIntervalDefaultMin, lmpCcHelloIntervalDefaultMax, lmpCcHelloDeadIntervalDefault, lmpCcHelloDeadIntervalDefaultMin, lmpCcHelloDeadIntervalDefaultMax, lmpCcNbrNodeId, lmpCcRemoteId, lmpCcRemoteAddressType, lmpCcRemoteIpAddr, lmpCcSetupRole, lmpCcAuthentication, lmpCcHelloInterval, lmpCcHelloIntervalMin, lmpCcHelloIntervalMax, lmpCcHelloIntervalNegotiated, lmpCcHelloDeadInterval, lmpCcHelloDeadIntervalMin, lmpCcHelloDeadIntervalMax, lmpCcHelloDeadIntervalNegotiated, lmpCcOperStatus, lmpCcRowStatus, lmpCcStorageType, lmpCcUpDownNotificationsEnabled]

class lmpCcIsInterfaceGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 2, 2, 3])
	group = [lmpCcIsIf]

class lmpCcIsNotInterfaceGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 2, 2, 4])
	group = [lmpCcUnderlyingIfIndex, lmpCcIsIf, lmpCcLastChange, lmpCcAdminStatus]

class lmpLinkPropertyCorrelationGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 2, 2, 5])
	group = [lmpLinkPropertyNotificationsEnabled]

class lmpLinkVerificationGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 2, 2, 6])
	group = [lmpGlobalLinkVerificationInterval, lmpLinkVerifyInterval, lmpLinkVerifyDeadInterval, lmpLinkVerifyTransportMechanism, lmpLinkVerifyAllLinks, lmpLinkVerifyTransmissionRate, lmpLinkVerifyWavelength, lmpLinkVerifyRowStatus, lmpLinkVerifyStorageType, lmpDataLinkNotificationsEnabled]

class lmpPerfGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 2, 2, 7])
	group = [lmpCcInOctets, lmpCcInDiscards, lmpCcInErrors, lmpCcOutOctets, lmpCcOutDiscards, lmpCcOutErrors, lmpCcConfigReceived, lmpCcConfigSent, lmpCcConfigRetransmit, lmpCcConfigAckReceived, lmpCcConfigAckSent, lmpCcConfigNackSent, lmpCcConfigNackReceived, lmpCcHelloReceived, lmpCcHelloSent, lmpCcBeginVerifyReceived, lmpCcBeginVerifySent, lmpCcBeginVerifyRetransmit, lmpCcBeginVerifyAckReceived, lmpCcBeginVerifyAckSent, lmpCcBeginVerifyNackReceived, lmpCcBeginVerifyNackSent, lmpCcEndVerifyReceived, lmpCcEndVerifySent, lmpCcEndVerifyRetransmit, lmpCcEndVerifyAckReceived, lmpCcEndVerifyAckSent, lmpCcTestStatusSuccessReceived, lmpCcTestStatusSuccessSent, lmpCcTestStatusSuccessRetransmit, lmpCcTestStatusFailureReceived, lmpCcTestStatusFailureSent, lmpCcTestStatusFailureRetransmit, lmpCcTestStatusAckReceived, lmpCcTestStatusAckSent, lmpCcLinkSummaryReceived, lmpCcLinkSummarySent, lmpCcLinkSummaryRetransmit, lmpCcLinkSummaryAckReceived, lmpCcLinkSummaryAckSent, lmpCcLinkSummaryNackReceived, lmpCcLinkSummaryNackSent, lmpCcChannelStatusReceived, lmpCcChannelStatusSent, lmpCcChannelStatusRetransmit, lmpCcChannelStatusAckReceived, lmpCcChannelStatusAckSent, lmpCcChannelStatusReqReceived, lmpCcChannelStatusReqSent, lmpCcChannelStatusReqRetransmit, lmpCcChannelStatusRspReceived, lmpCcChannelStatusRspSent, lmpCcCounterDiscontinuityTime, lmpTeInOctets, lmpTeOutOctets, lmpTeBeginVerifyReceived, lmpTeBeginVerifySent, lmpTeBeginVerifyRetransmit, lmpTeBeginVerifyAckReceived, lmpTeBeginVerifyAckSent, lmpTeBeginVerifyNackReceived, lmpTeBeginVerifyNackSent, lmpTeEndVerifyReceived, lmpTeEndVerifySent, lmpTeEndVerifyRetransmit, lmpTeEndVerifyAckReceived, lmpTeEndVerifyAckSent, lmpTeTestStatusSuccessReceived, lmpTeTestStatusSuccessSent, lmpTeTestStatusSuccessRetransmit, lmpTeTestStatusFailureReceived, lmpTeTestStatusFailureSent, lmpTeTestStatusFailureRetransmit, lmpTeTestStatusAckReceived, lmpTeTestStatusAckSent, lmpTeLinkSummaryReceived, lmpTeLinkSummarySent, lmpTeLinkSummaryRetransmit, lmpTeLinkSummaryAckReceived, lmpTeLinkSummaryAckSent, lmpTeLinkSummaryNackReceived, lmpTeLinkSummaryNackSent, lmpTeChannelStatusReceived, lmpTeChannelStatusSent, lmpTeChannelStatusRetransmit, lmpTeChannelStatusAckReceived, lmpTeChannelStatusAckSent, lmpTeChannelStatusReqReceived, lmpTeChannelStatusReqSent, lmpTeChannelStatusReqRetransmit, lmpTeChannelStatusRspSent, lmpTeChannelStatusRspReceived, lmpTeCounterDiscontinuityTime, lmpDataLinkTestReceived, lmpDataLinkTestSent, lmpDataLinkActiveTestSuccess, lmpDataLinkActiveTestFailure, lmpDataLinkPassiveTestSuccess, lmpDataLinkPassiveTestFailure, lmpDataLinkDiscontinuityTime]

class lmpTeLinkGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 2, 2, 8])
	group = [lmpTeLinkNbrRemoteNodeId, lmpTeLinkVerification, lmpTeLinkFaultManagement, lmpTeLinkDwdm, lmpTeLinkOperStatus, lmpTeLinkRowStatus, lmpTeLinkStorageType, lmpTeLinkNotificationsEnabled]

class lmpDataLinkGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 2, 2, 9])
	group = [lmpDataLinkType, lmpDataLinkAddressType, lmpDataLinkIpAddr, lmpDataLinkRemoteIpAddress, lmpDataLinkRemoteIfId, lmpDataLinkEncodingType, lmpDataLinkActiveOperStatus, lmpDataLinkPassiveOperStatus, lmpDataLinkRowStatus, lmpDataLinkStorageType]

class lmpNotificationGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 227, 2, 2, 10])
	group = [lmpTeLinkPropertyMismatch, lmpDataLinkPropertyMismatch, lmpUnprotected, lmpControlChannelUp, lmpControlChannelDown, lmpTeLinkDegraded, lmpTeLinkNotDegraded, lmpDataLinkVerificationFailure]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
