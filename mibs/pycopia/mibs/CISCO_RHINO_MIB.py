# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from IF_MIB import InterfaceIndex
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, NOTIFICATION_TYPE, Counter32, Gauge32, Integer32
from CISCO_SMI import workgroup
from RFC1213_MIB import ifIndex
from SNMPv2_TC import TEXTUAL_CONVENTION, TimeStamp, DisplayString, TruthValue

class CISCO_RHINO_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/site/CISCO-RHINO-MIB'
	conformance = 2
	name = 'CISCO-RHINO-MIB'
	language = 2
	description = 'Consolidate changes from C6400, C8500, FR-PAM, new modules.'

# nodes
class ciscoLS1010ChassisMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11])
	name = 'ciscoLS1010ChassisMIB'

class ciscoLS1010ChassisMIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1])
	name = 'ciscoLS1010ChassisMIBObjects'

class ciscoLS1010ChassisGroup(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1])
	name = 'ciscoLS1010ChassisGroup'

class ciscoLS1010ModuleGroup(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 2])
	name = 'ciscoLS1010ModuleGroup'

class ciscoLS1010SubModuleGroup(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 3])
	name = 'ciscoLS1010SubModuleGroup'

class ciscoLS1010PortGroup(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 4])
	name = 'ciscoLS1010PortGroup'

class ciscoLS1010CpuSwitchGroup(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 5])
	name = 'ciscoLS1010CpuSwitchGroup'

class clsEnetPortGroup(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 6])
	name = 'clsEnetPortGroup'

class clsPortLedGroup(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 7])
	name = 'clsPortLedGroup'

class ciscoLS1010ChassisMIBNotificationPrefix(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 2])
	name = 'ciscoLS1010ChassisMIBNotificationPrefix'

class ciscoLS1010ChassisMIBNotifications(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 2, 0])
	name = 'ciscoLS1010ChassisMIBNotifications'

class ciscoLS1010ChassisMIBConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 3])
	name = 'ciscoLS1010ChassisMIBConformance'

class ciscoLS1010ChassisMIBCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 1])
	name = 'ciscoLS1010ChassisMIBCompliances'

class ciscoLS1010ChassisMIBGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 2])
	name = 'ciscoLS1010ChassisMIBGroups'


# macros
# types 

class PsType(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(0, 'powerone'), Enum(1, 'astec'), Enum(2, 'minus48VDC'), Enum(3, 'empty'), Enum(4, 'ac1100W'), Enum(5, 'ac1200W'), Enum(6, 'dc1200W'), Enum(7, 'pem'), Enum(8, 'ac1360W'), Enum(9, 'dc1360W'), Enum(10, 'ac2000W'), Enum(11, 'dc2000W')]


class OperStatus(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'unknown'), Enum(2, 'ok'), Enum(3, 'fault'), Enum(4, 'fanAlarm'), Enum(5, 'partialFault'), Enum(6, 'empty')]


class AdminStatus(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'enable'), Enum(2, 'disable'), Enum(3, 'reset')]


class Led(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'off'), Enum(2, 'green'), Enum(3, 'red'), Enum(4, 'yellow'), Enum(5, 'blinkgreen'), Enum(6, 'blinkyellow'), Enum(7, 'blinkred'), Enum(8, 'unknown')]


class PcmciaType(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'unknown'), Enum(2, 'empty'), Enum(3, 'flash'), Enum(4, 'disk')]

# scalars 
class ciscoLS1010ChassisSysType(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'ls1010'), Enum(3, 'c8510'), Enum(4, 'cisco6400'), Enum(5, 'c8540')]


class ciscoLS1010ChassisBkplType(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'atm'), Enum(3, 'c5500'), Enum(4, 'cisco6400'), Enum(5, 'c8510'), Enum(6, 'c8540')]


class ciscoLS1010ChassisPs0Type(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 3])
	syntaxobject = PsType


class ciscoLS1010ChassisPs0AdminStatus(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 4])
	syntaxobject = AdminStatus


class ciscoLS1010ChassisPs0Status(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 5])
	syntaxobject = OperStatus


class ciscoLS1010ChassisPs0Led(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 6])
	syntaxobject = Led


class ciscoLS1010ChassisPs1Type(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 7])
	syntaxobject = PsType


class ciscoLS1010ChassisPs1AdminStatus(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 8])
	syntaxobject = AdminStatus


class ciscoLS1010ChassisPs1Status(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 9])
	syntaxobject = OperStatus


class ciscoLS1010ChassisPs1Led(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 10])
	syntaxobject = Led


class ciscoLS1010ChassisFanStatus(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 11])
	syntaxobject = OperStatus


class ciscoLS1010ChassisFanLed(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 12])
	syntaxobject = Led


class ciscoLS1010ChassisCardStatusLed(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 13])
	syntaxobject = Led


class ciscoLS1010ChassisEnetLinkLed(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 14])
	syntaxobject = Led


class ciscoLS1010Chassis12VoltStatus(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'ok'), Enum(2, 'outOfTolerance'), Enum(3, 'unknown')]


class ciscoLS1010ChassisTempStatus(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'ok'), Enum(2, 'overTemperature'), Enum(3, 'minorWarning'), Enum(4, 'majorWarning'), Enum(5, 'criticalWarning')]


class ciscoLS1010ChassisPcmciaSlot0Type(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 17])
	syntaxobject = PcmciaType


class ciscoLS1010ChassisPcmciaSlot1Type(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 18])
	syntaxobject = PcmciaType


class ciscoLS1010ChassisNumSlots(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoLS1010ChassisLastChange(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 20])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class ciscoLS1010ChassisFailureAction(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 21])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'nothing'), Enum(2, 'sendTrap'), Enum(3, 'shutdown'), Enum(4, 'sendTrapAndShutdown')]


class ciscoLS1010ChassisChangeAction(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 22])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'nothing'), Enum(2, 'sendTrap')]


class ciscoLS1010ChassisClockingMode(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 23])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'revertive'), Enum(2, 'nonRevertive')]


class ciscols1010SystemClockSourceStatus(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 24])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'notSelected'), Enum(2, 'selected')]


class ciscols1010SystemClockSourcePriority(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 25])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'priority1'), Enum(2, 'priority2'), Enum(3, 'priority3'), Enum(4, 'priority4'), Enum(5, 'priority5')]


class ciscoLS1010ChassisInletTempStatus(ScalarObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 26])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'ok'), Enum(2, 'overTemperature'), Enum(3, 'minorWarning'), Enum(4, 'majorWarning'), Enum(5, 'criticalWarning'), Enum(6, 'unknown')]


class ciscoAtmCpuAdminStatus(ScalarObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 5, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'reset'), Enum(2, 'ok')]


class ciscoAtmSwitchTotalBuffer(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 5, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoAtmSwitchFreeBuffer(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 5, 3])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class ciscoAtmSwitchDiscardCells(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 5, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmSwitchInvalidCells(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 5, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class ciscoAtmInterceptEndToEndOamFlow(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 5, 8])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


# columns
class ciscoLS1010ModuleIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 2, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoLS1010ModuleType(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 2, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'carrier'), Enum(3, 'cpuSwitchAndFeature'), Enum(4, 'cpuSwitchAndFeaturePFQ'), Enum(5, 'superCarrier'), Enum(6, 'cpuRoute'), Enum(7, 'switch10GAndFC'), Enum(8, 'switch10GNoFC'), Enum(9, 'atmFabricIntegration')]


class ciscoLS1010ModuleSerialNumber(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 2, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoLS1010ModuleHwVersion(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 2, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoLS1010ModuleSwVersion(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 2, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoLS1010ModuleDescr(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 2, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class ciscoLS1010ModuleNumSubModules(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 2, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoLS1010ModuleAdminStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 2, 1, 1, 8])
	syntaxobject = AdminStatus


class ciscoLS1010ModuleOperStatus(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 2, 1, 1, 9])
	syntaxobject = OperStatus


class ciscoLS1010SubModuleIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 3, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoLS1010SubModuleType(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 3, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'oc3Utp5'), Enum(3, 'oc3SingleModeFiber'), Enum(4, 'oc3MultiModeFiber'), Enum(5, 'oc12SingleModeFiber'), Enum(6, 'oc12MultiModeFiber'), Enum(7, 'ds3'), Enum(8, 'e3'), Enum(9, 'cpuSwitch'), Enum(10, 'featureFpga'), Enum(11, 'featureAsic'), Enum(12, 't1'), Enum(13, 'e1'), Enum(14, 'e1bnc'), Enum(15, 'oc3Mixed'), Enum(16, 'cbrt1'), Enum(17, 'cbr120e1'), Enum(18, 'cbr75e1'), Enum(19, 'quadDs3'), Enum(20, 'quadE3'), Enum(21, 'dualDs3'), Enum(22, 'dualE3'), Enum(23, 'oc12Mixed'), Enum(24, 'atm25'), Enum(25, 'featurePVC'), Enum(26, 'routerProcessorAlpha'), Enum(27, 'dualOC3SingleModeIRFiber'), Enum(30, 'fratm1CT3'), Enum(31, 'fratm4CE1'), Enum(40, 'feUTP8p16k'), Enum(41, 'feUTP8p64k'), Enum(42, 'feMMF8p16k'), Enum(43, 'feMMF8p64k'), Enum(44, 'feUTP16p16k'), Enum(45, 'feUTP16p64k'), Enum(46, 'feMMF16p16k'), Enum(47, 'feMMF16p64k'), Enum(48, 'geF1p16k'), Enum(49, 'geF1p64k'), Enum(50, 'geF2p16k'), Enum(51, 'geF2p64k'), Enum(52, 'feBridge4p'), Enum(53, 'feUTP8p16kFullDup'), Enum(54, 'feUTP8p64kFullDup'), Enum(55, 'routeProc'), Enum(56, 'switch10GProc'), Enum(57, 'featureNetClock'), Enum(58, 'featureABR'), Enum(60, 'featureLite'), Enum(61, 's16pOC3MM'), Enum(62, 's16pOC3SM'), Enum(63, 's4pOC12MM'), Enum(64, 's4pOC12SM'), Enum(70, 'atmFIMBridge'), Enum(71, 'atmFIMoc12MM')]


class ciscoLS1010SubModuleSerialNumber(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 3, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoLS1010SubModuleHwVersion(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 3, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoLS1010SubModuleSwVersion(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 3, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoLS1010SubModuleDescr(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 3, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class ciscoLS1010SubModuleNumPorts(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 3, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoLS1010SubModuleAdminStatus(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 3, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'reset'), Enum(2, 'ok')]


class ciscoLS1010SubModuleHwVersionMinor(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 3, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoLS1010SubModuleOperStatus(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 3, 1, 1, 10])
	syntaxobject = OperStatus


class ciscoLS1010PortIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 4, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoLS1010PortIfIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 4, 1, 1, 2])
	syntaxobject = InterfaceIndex


class ciscoAtmSwitchInvalidCellHeaderIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 5, 6, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ciscoAtmSwitchInvalidCellHeader(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 5, 6, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class clsEnetPortDuplex(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 6, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'unknown'), Enum(2, 'auto'), Enum(3, 'half'), Enum(4, 'full')]


class clsEnetPortAdminSpeed(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 6, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'unknown'), Enum(2, 'auto'), Enum(3, 'e10Mbps'), Enum(4, 'e100Mbps'), Enum(5, 'e1000Mbps')]


class clsEnetPortType(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 6, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'unknown'), Enum(2, 'e100BaseTX'), Enum(3, 'e100BaseFX'), Enum(4, 'e1000BaseLX'), Enum(5, 'e1000BaseSX'), Enum(6, 'empty')]


class clsEnetPortLinkStatus(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 6, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'unknown'), Enum(2, 'autoNegotiate'), Enum(3, 'forceUp')]


class clsPortLedIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 7, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class clsPortLedType(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 7, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'ledTx'), Enum(2, 'ledRx'), Enum(3, 'ledLink'), Enum(4, 'led100Mbps'), Enum(5, 'ledRxLoss'), Enum(6, 'ledRxFullOut'), Enum(7, 'ledRxSync'), Enum(8, 'ledFullDuplex'), Enum(9, 'ledOptDetect')]


class clsPortLedStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 7, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'unknown'), Enum(2, 'on'), Enum(3, 'off')]


# rows 
class ciscoLS1010ModuleEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ciscoLS1010ModuleIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 2, 1, 1])
	access = 2
	columns = {'ciscoLS1010ModuleIndex': ciscoLS1010ModuleIndex, 'ciscoLS1010ModuleType': ciscoLS1010ModuleType, 'ciscoLS1010ModuleSerialNumber': ciscoLS1010ModuleSerialNumber, 'ciscoLS1010ModuleHwVersion': ciscoLS1010ModuleHwVersion, 'ciscoLS1010ModuleSwVersion': ciscoLS1010ModuleSwVersion, 'ciscoLS1010ModuleDescr': ciscoLS1010ModuleDescr, 'ciscoLS1010ModuleNumSubModules': ciscoLS1010ModuleNumSubModules, 'ciscoLS1010ModuleAdminStatus': ciscoLS1010ModuleAdminStatus, 'ciscoLS1010ModuleOperStatus': ciscoLS1010ModuleOperStatus}


class ciscoLS1010SubModuleEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ciscoLS1010ModuleIndex, ciscoLS1010SubModuleIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 3, 1, 1])
	access = 2
	columns = {'ciscoLS1010SubModuleIndex': ciscoLS1010SubModuleIndex, 'ciscoLS1010SubModuleType': ciscoLS1010SubModuleType, 'ciscoLS1010SubModuleSerialNumber': ciscoLS1010SubModuleSerialNumber, 'ciscoLS1010SubModuleHwVersion': ciscoLS1010SubModuleHwVersion, 'ciscoLS1010SubModuleSwVersion': ciscoLS1010SubModuleSwVersion, 'ciscoLS1010SubModuleDescr': ciscoLS1010SubModuleDescr, 'ciscoLS1010SubModuleNumPorts': ciscoLS1010SubModuleNumPorts, 'ciscoLS1010SubModuleAdminStatus': ciscoLS1010SubModuleAdminStatus, 'ciscoLS1010SubModuleHwVersionMinor': ciscoLS1010SubModuleHwVersionMinor, 'ciscoLS1010SubModuleOperStatus': ciscoLS1010SubModuleOperStatus}


class ciscoLS1010PortEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ciscoLS1010ModuleIndex, ciscoLS1010SubModuleIndex, ciscoLS1010PortIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 4, 1, 1])
	access = 2
	columns = {'ciscoLS1010PortIndex': ciscoLS1010PortIndex, 'ciscoLS1010PortIfIndex': ciscoLS1010PortIfIndex}


class ciscoAtmSwitchInvalidCellHeaderEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ciscoAtmSwitchInvalidCellHeaderIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 5, 6, 1])
	access = 2
	columns = {'ciscoAtmSwitchInvalidCellHeaderIndex': ciscoAtmSwitchInvalidCellHeaderIndex, 'ciscoAtmSwitchInvalidCellHeader': ciscoAtmSwitchInvalidCellHeader}


class clsEnetPortEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 6, 1, 1])
	access = 2
	columns = {'clsEnetPortDuplex': clsEnetPortDuplex, 'clsEnetPortAdminSpeed': clsEnetPortAdminSpeed, 'clsEnetPortType': clsEnetPortType, 'clsEnetPortLinkStatus': clsEnetPortLinkStatus}


class clsPortLedEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, clsPortLedIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 7, 1, 1])
	access = 2
	columns = {'clsPortLedIndex': clsPortLedIndex, 'clsPortLedType': clsPortLedType, 'clsPortLedStatus': clsPortLedStatus}


# notifications (traps) 
class ciscoLS1010ChassisFailureNotification(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 2, 0, 1])

class ciscoLS1010ChassisChangeNotification(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 2, 0, 2])

# groups 
class ciscoLS1010ChassisMIBGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 2, 1])
	group = [ciscoLS1010ChassisSysType, ciscoLS1010ChassisBkplType, ciscoLS1010ChassisPs0Type, ciscoLS1010ChassisPs0AdminStatus, ciscoLS1010ChassisPs0Status, ciscoLS1010ChassisPs0Led, ciscoLS1010ChassisPs1Type, ciscoLS1010ChassisPs1AdminStatus, ciscoLS1010ChassisPs1Status, ciscoLS1010ChassisPs1Led, ciscoLS1010ChassisFanStatus, ciscoLS1010ChassisFanLed, ciscoLS1010ChassisCardStatusLed, ciscoLS1010ChassisEnetLinkLed, ciscoLS1010Chassis12VoltStatus, ciscoLS1010ChassisTempStatus, ciscoLS1010ChassisPcmciaSlot0Type, ciscoLS1010ChassisPcmciaSlot1Type, ciscoLS1010ChassisNumSlots, ciscoLS1010ChassisLastChange, ciscoLS1010ChassisFailureAction, ciscoLS1010ChassisChangeAction, ciscoLS1010ModuleType, ciscoLS1010ModuleSerialNumber, ciscoLS1010ModuleHwVersion, ciscoLS1010ModuleSwVersion, ciscoLS1010ModuleDescr, ciscoLS1010ModuleNumSubModules, ciscoLS1010ModuleAdminStatus, ciscoLS1010SubModuleType, ciscoLS1010SubModuleSerialNumber, ciscoLS1010SubModuleHwVersion, ciscoLS1010SubModuleSwVersion, ciscoLS1010SubModuleDescr, ciscoLS1010SubModuleNumPorts, ciscoLS1010SubModuleAdminStatus, ciscoLS1010PortIfIndex, ciscoAtmCpuAdminStatus, ciscoAtmSwitchTotalBuffer, ciscoAtmSwitchFreeBuffer, ciscoAtmSwitchDiscardCells, ciscoAtmSwitchInvalidCells, ciscoAtmSwitchInvalidCellHeader]

class ciscoLS1010ChassisMIBRev1Group(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 2, 3])
	group = [ciscoLS1010SubModuleHwVersionMinor]

class ciscoLS1010ChassisMIBClockingGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 2, 4])
	group = [ciscoLS1010ChassisClockingMode, ciscols1010SystemClockSourceStatus, ciscols1010SystemClockSourcePriority]

class ciscoLS1010ChassisMIBGroup1(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 2, 5])
	group = [ciscoLS1010ChassisSysType, ciscoLS1010ChassisBkplType, ciscoLS1010ChassisPs0Type, ciscoLS1010ChassisPs0AdminStatus, ciscoLS1010ChassisPs0Status, ciscoLS1010ChassisPs0Led, ciscoLS1010ChassisPs1Type, ciscoLS1010ChassisPs1AdminStatus, ciscoLS1010ChassisPs1Status, ciscoLS1010ChassisPs1Led, ciscoLS1010ChassisFanStatus, ciscoLS1010ChassisFanLed, ciscoLS1010ChassisCardStatusLed, ciscoLS1010ChassisEnetLinkLed, ciscoLS1010Chassis12VoltStatus, ciscoLS1010ChassisTempStatus, ciscoLS1010ChassisPcmciaSlot0Type, ciscoLS1010ChassisPcmciaSlot1Type, ciscoLS1010ChassisNumSlots, ciscoLS1010ChassisLastChange, ciscoLS1010ChassisFailureAction, ciscoLS1010ChassisChangeAction, ciscoLS1010ModuleType, ciscoLS1010ModuleSerialNumber, ciscoLS1010ModuleHwVersion, ciscoLS1010ModuleSwVersion, ciscoLS1010ModuleDescr, ciscoLS1010ModuleNumSubModules, ciscoLS1010ModuleAdminStatus, ciscoLS1010SubModuleType, ciscoLS1010SubModuleSerialNumber, ciscoLS1010SubModuleHwVersion, ciscoLS1010SubModuleSwVersion, ciscoLS1010SubModuleDescr, ciscoLS1010SubModuleNumPorts, ciscoLS1010SubModuleAdminStatus, ciscoLS1010SubModuleHwVersionMinor, ciscoLS1010PortIfIndex, ciscoAtmCpuAdminStatus, ciscoAtmSwitchTotalBuffer, ciscoAtmSwitchFreeBuffer, ciscoAtmSwitchDiscardCells, ciscoAtmSwitchInvalidCells, ciscoAtmSwitchInvalidCellHeader, ciscoAtmInterceptEndToEndOamFlow]

class clsEnetPortGroup1(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 2, 6])
	group = [clsEnetPortDuplex, clsEnetPortAdminSpeed, clsEnetPortType, clsEnetPortLinkStatus]

class clsPortLedGroup1(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 2, 7])
	group = [clsPortLedType, clsPortLedStatus]

class clsOperStatusGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 2, 8])
	group = [ciscoLS1010ModuleOperStatus, ciscoLS1010SubModuleOperStatus]

class clsInletTempGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 2, 9])
	group = [ciscoLS1010ChassisInletTempStatus]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
