# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, mib_2, NOTIFICATION_TYPE, Integer32
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP, NOTIFICATION_GROUP
from SNMPv2_TC import TDomain, TAddress, TEXTUAL_CONVENTION, AutonomousType, RowPointer, TimeStamp, TruthValue, DateAndTime
from SNMP_FRAMEWORK_MIB import SnmpAdminString

class ENTITY_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/ENTITY-MIB'
	name = 'ENTITY-MIB'
	language = 2
	description = 'The MIB module for representing multiple logical\nentities supported by a single SNMP agent.\n\nCopyright (C) The Internet Society (2005).  This\nversion of this MIB module is part of RFC 4133; see\nthe RFC itself for full legal notices.'

# nodes
class entityMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47])
	name = 'entityMIB'

class entityMIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 1])
	name = 'entityMIBObjects'

class entityPhysical(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 1, 1])
	name = 'entityPhysical'

class entityLogical(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 1, 2])
	name = 'entityLogical'

class entityMapping(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 1, 3])
	name = 'entityMapping'

class entityGeneral(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 1, 4])
	name = 'entityGeneral'

class entityMIBTraps(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 2])
	name = 'entityMIBTraps'

class entityMIBTrapPrefix(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 2, 0])
	name = 'entityMIBTrapPrefix'

class entityConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 3])
	name = 'entityConformance'

class entityCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 3, 1])
	name = 'entityCompliances'

class entityGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 3, 2])
	name = 'entityGroups'


# macros
# types 

class PhysicalIndex(pycopia.SMI.Basetypes.Integer32):
	status = 1
	ranges = Ranges(Range(1, 2147483647))
	format = 'd'


class PhysicalIndexOrZero(pycopia.SMI.Basetypes.Integer32):
	status = 1
	ranges = Ranges(Range(0, 2147483647))
	format = 'd'


class PhysicalClass(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'other'), Enum(2, 'unknown'), Enum(3, 'chassis'), Enum(4, 'backplane'), Enum(5, 'container'), Enum(6, 'powerSupply'), Enum(7, 'fan'), Enum(8, 'sensor'), Enum(9, 'module'), Enum(10, 'port'), Enum(11, 'stack'), Enum(12, 'cpu')]


class SnmpEngineIdOrNone(pycopia.SMI.Basetypes.OctetString):
	status = 1
	ranges = Ranges(Range(0, 32))

# scalars 
class entLastChangeTime(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 1, 4, 1])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


# columns
class entPhysicalIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 1, 1, 1, 1, 1])
	syntaxobject = PhysicalIndex


class entPhysicalDescr(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 1, 1, 1, 1, 2])
	syntaxobject = SnmpAdminString


class entPhysicalVendorType(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 1, 1, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.AutonomousType


class entPhysicalContainedIn(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 1, 1, 1, 1, 4])
	syntaxobject = PhysicalIndexOrZero


class entPhysicalClass(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 1, 1, 1, 1, 5])
	syntaxobject = PhysicalClass


class entPhysicalParentRelPos(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 1, 1, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class entPhysicalName(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 1, 1, 1, 1, 7])
	syntaxobject = SnmpAdminString


class entPhysicalHardwareRev(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 1, 1, 1, 1, 8])
	syntaxobject = SnmpAdminString


class entPhysicalFirmwareRev(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 1, 1, 1, 1, 9])
	syntaxobject = SnmpAdminString


class entPhysicalSoftwareRev(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 1, 1, 1, 1, 10])
	syntaxobject = SnmpAdminString


class entPhysicalSerialNum(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 1, 1, 1, 1, 11])
	syntaxobject = SnmpAdminString


class entPhysicalMfgName(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 1, 1, 1, 1, 12])
	syntaxobject = SnmpAdminString


class entPhysicalModelName(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 1, 1, 1, 1, 13])
	syntaxobject = SnmpAdminString


class entPhysicalAlias(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 1, 1, 1, 1, 14])
	syntaxobject = SnmpAdminString


class entPhysicalAssetID(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 1, 1, 1, 1, 15])
	syntaxobject = SnmpAdminString


class entPhysicalIsFRU(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 1, 1, 1, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class entPhysicalMfgDate(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 1, 1, 1, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.DateAndTime


class entPhysicalUris(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 1, 1, 1, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class entLogicalIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 1, 2, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class entLogicalDescr(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 1, 2, 1, 1, 2])
	syntaxobject = SnmpAdminString


class entLogicalType(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 1, 2, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.AutonomousType


class entLogicalCommunity(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 1, 2, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class entLogicalTAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 1, 2, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.TAddress


class entLogicalTDomain(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 1, 2, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.TDomain


class entLogicalContextEngineID(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 1, 2, 1, 1, 7])
	syntaxobject = SnmpEngineIdOrNone


class entLogicalContextName(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 1, 2, 1, 1, 8])
	syntaxobject = SnmpAdminString


class entLPPhysicalIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 1, 3, 1, 1, 1])
	syntaxobject = PhysicalIndex


class entAliasLogicalIndexOrZero(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 1, 3, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class entAliasMappingIdentifier(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 1, 3, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.RowPointer


class entPhysicalChildIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 1, 3, 3, 1, 1])
	syntaxobject = PhysicalIndex


# rows 
class entPhysicalEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([entPhysicalIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 1, 1, 1, 1])
	access = 2
	columns = {'entPhysicalIndex': entPhysicalIndex, 'entPhysicalDescr': entPhysicalDescr, 'entPhysicalVendorType': entPhysicalVendorType, 'entPhysicalContainedIn': entPhysicalContainedIn, 'entPhysicalClass': entPhysicalClass, 'entPhysicalParentRelPos': entPhysicalParentRelPos, 'entPhysicalName': entPhysicalName, 'entPhysicalHardwareRev': entPhysicalHardwareRev, 'entPhysicalFirmwareRev': entPhysicalFirmwareRev, 'entPhysicalSoftwareRev': entPhysicalSoftwareRev, 'entPhysicalSerialNum': entPhysicalSerialNum, 'entPhysicalMfgName': entPhysicalMfgName, 'entPhysicalModelName': entPhysicalModelName, 'entPhysicalAlias': entPhysicalAlias, 'entPhysicalAssetID': entPhysicalAssetID, 'entPhysicalIsFRU': entPhysicalIsFRU, 'entPhysicalMfgDate': entPhysicalMfgDate, 'entPhysicalUris': entPhysicalUris}


class entLogicalEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([entLogicalIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 1, 2, 1, 1])
	access = 2
	columns = {'entLogicalIndex': entLogicalIndex, 'entLogicalDescr': entLogicalDescr, 'entLogicalType': entLogicalType, 'entLogicalCommunity': entLogicalCommunity, 'entLogicalTAddress': entLogicalTAddress, 'entLogicalTDomain': entLogicalTDomain, 'entLogicalContextEngineID': entLogicalContextEngineID, 'entLogicalContextName': entLogicalContextName}


class entLPMappingEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([entLogicalIndex, entLPPhysicalIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 1, 3, 1, 1])
	access = 2
	columns = {'entLPPhysicalIndex': entLPPhysicalIndex}


class entAliasMappingEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([entPhysicalIndex, entAliasLogicalIndexOrZero], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 1, 3, 2, 1])
	access = 2
	columns = {'entAliasLogicalIndexOrZero': entAliasLogicalIndexOrZero, 'entAliasMappingIdentifier': entAliasMappingIdentifier}


class entPhysicalContainsEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([entPhysicalIndex, entPhysicalChildIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 1, 3, 3, 1])
	access = 2
	columns = {'entPhysicalChildIndex': entPhysicalChildIndex}


# notifications (traps) 
class entConfigChange(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 2, 0, 1])

# groups 
class entityPhysicalGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 3, 2, 1])
	group = [entPhysicalDescr, entPhysicalVendorType, entPhysicalContainedIn, entPhysicalClass, entPhysicalParentRelPos, entPhysicalName]

class entityLogicalGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 3, 2, 2])
	group = [entLogicalDescr, entLogicalType, entLogicalCommunity, entLogicalTAddress, entLogicalTDomain]

class entityMappingGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 3, 2, 3])
	group = [entLPPhysicalIndex, entAliasMappingIdentifier, entPhysicalChildIndex]

class entityGeneralGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 3, 2, 4])
	group = [entLastChangeTime]

class entityNotificationsGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 3, 2, 5])
	group = [entConfigChange]

class entityPhysical2Group(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 3, 2, 6])
	group = [entPhysicalHardwareRev, entPhysicalFirmwareRev, entPhysicalSoftwareRev, entPhysicalSerialNum, entPhysicalMfgName, entPhysicalModelName, entPhysicalAlias, entPhysicalAssetID, entPhysicalIsFRU]

class entityLogical2Group(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 3, 2, 7])
	group = [entLogicalDescr, entLogicalType, entLogicalTAddress, entLogicalTDomain, entLogicalContextEngineID, entLogicalContextName]

class entityPhysical3Group(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 47, 3, 2, 8])
	group = [entPhysicalMfgDate, entPhysicalUris]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
