# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, Counter32, Integer32
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from CISCO_SMI import ciscoExperiment

class CISCO_QLLC01_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/site/CISCO-QLLC01-MIB'
	conformance = 3
	name = 'CISCO-QLLC01-MIB'
	language = 2
	description = 'This is the MIB module for objects used to \nmanage the QLLC protocol.'

# nodes
class snaqllc01(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6])
	name = 'snaqllc01'

class qllc(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 1])
	name = 'qllc'

class qllcMibConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 2])
	name = 'qllcMibConformance'

class qllcMibCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 2, 1])
	name = 'qllcMibCompliances'

class qllcMibGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 2, 2])
	name = 'qllcMibGroups'


# macros
# types 

class IfIndexType(pycopia.SMI.Basetypes.Integer32):
	ranges = Ranges(Range(0, 2147483647))


class X121Address(pycopia.SMI.Basetypes.OctetString):
	ranges = Ranges(Range(0, 17))

# scalars 
# columns
class qllcLSAdminIfIndex(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 1, 1, 1])
	syntaxobject = IfIndexType


class qllcLSAdminLciVcIndex(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 1, 1, 2])
	syntaxobject = IfIndexType


class qllcLSAdminCircuitType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'switchedVC'), Enum(2, 'permanentVC')]


class qllcLSAdminRole(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'primary'), Enum(2, 'secondary'), Enum(3, 'peerToPeer')]


class qllcLSAdminX25Add(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 1, 1, 5])
	syntaxobject = X121Address


class qllcLSAdminModulo(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'modulo8'), Enum(2, 'modulo128')]


class qllcLSAdminLgX25(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class qllcLSOperIfIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 2, 1, 1])
	syntaxobject = IfIndexType


class qllcLSOperLciVcIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 2, 1, 2])
	syntaxobject = IfIndexType


class qllcLSOperCircuitType(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'switchedVC'), Enum(2, 'permanentVC')]


class qllcLSOperRole(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'primary'), Enum(2, 'secondary'), Enum(3, 'peerToPeer')]


class qllcLSOperX25Add(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 2, 1, 5])
	syntaxobject = X121Address


class qllcLSOperModulo(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'modulo8'), Enum(2, 'modulo128')]


class qllcLSOperState(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 2, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'lsStateInop'), Enum(2, 'lsStateClosed'), Enum(3, 'lsStateOpening'), Enum(4, 'lsStateClosing'), Enum(5, 'lsStateRecovery'), Enum(6, 'lsStateOpened')]


class qllcLSOperLgX25(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 2, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class qllcLSStatsIfIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 1])
	syntaxobject = IfIndexType


class qllcLSStatsLciVcIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 2])
	syntaxobject = IfIndexType


class qllcLSStatsXidIn(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class qllcLSStatsXidOut(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class qllcLSStatsTestIn(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class qllcLSStatsTestOut(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class qllcLSStatsQuenchOff(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class qllcLSStatsQuenchOn(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class qllcLSStatsInPaks(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class qllcLSStatsOutPaks(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class qllcLSStatsInBytes(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class qllcLSStatsOutBytes(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class qllcLSStatsNumRcvQsms(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class qllcLSStatsNumSndQsms(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class qllcLSStatsNumRcvDiscs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class qllcLSStatsNumSndDiscs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class qllcLSStatsNumRcvDms(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class qllcLSStatsNumSndDms(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class qllcLSStatsNumRcvFrmrs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class qllcLSStatsNumSndFrmrs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 20])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class qllcLSStatsNumDrops(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 21])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class qllcLSStatsNumErrs(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 22])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


# rows 
class qllcLSAdminEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([qllcLSAdminIfIndex, qllcLSAdminLciVcIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 1, 1])
	access = 2
	columns = {'qllcLSAdminIfIndex': qllcLSAdminIfIndex, 'qllcLSAdminLciVcIndex': qllcLSAdminLciVcIndex, 'qllcLSAdminCircuitType': qllcLSAdminCircuitType, 'qllcLSAdminRole': qllcLSAdminRole, 'qllcLSAdminX25Add': qllcLSAdminX25Add, 'qllcLSAdminModulo': qllcLSAdminModulo, 'qllcLSAdminLgX25': qllcLSAdminLgX25}


class qllcLSOperEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([qllcLSOperIfIndex, qllcLSOperLciVcIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 2, 1])
	access = 2
	columns = {'qllcLSOperIfIndex': qllcLSOperIfIndex, 'qllcLSOperLciVcIndex': qllcLSOperLciVcIndex, 'qllcLSOperCircuitType': qllcLSOperCircuitType, 'qllcLSOperRole': qllcLSOperRole, 'qllcLSOperX25Add': qllcLSOperX25Add, 'qllcLSOperModulo': qllcLSOperModulo, 'qllcLSOperState': qllcLSOperState, 'qllcLSOperLgX25': qllcLSOperLgX25}


class qllcLSStatsEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([qllcLSStatsIfIndex, qllcLSStatsLciVcIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1])
	access = 2
	columns = {'qllcLSStatsIfIndex': qllcLSStatsIfIndex, 'qllcLSStatsLciVcIndex': qllcLSStatsLciVcIndex, 'qllcLSStatsXidIn': qllcLSStatsXidIn, 'qllcLSStatsXidOut': qllcLSStatsXidOut, 'qllcLSStatsTestIn': qllcLSStatsTestIn, 'qllcLSStatsTestOut': qllcLSStatsTestOut, 'qllcLSStatsQuenchOff': qllcLSStatsQuenchOff, 'qllcLSStatsQuenchOn': qllcLSStatsQuenchOn, 'qllcLSStatsInPaks': qllcLSStatsInPaks, 'qllcLSStatsOutPaks': qllcLSStatsOutPaks, 'qllcLSStatsInBytes': qllcLSStatsInBytes, 'qllcLSStatsOutBytes': qllcLSStatsOutBytes, 'qllcLSStatsNumRcvQsms': qllcLSStatsNumRcvQsms, 'qllcLSStatsNumSndQsms': qllcLSStatsNumSndQsms, 'qllcLSStatsNumRcvDiscs': qllcLSStatsNumRcvDiscs, 'qllcLSStatsNumSndDiscs': qllcLSStatsNumSndDiscs, 'qllcLSStatsNumRcvDms': qllcLSStatsNumRcvDms, 'qllcLSStatsNumSndDms': qllcLSStatsNumSndDms, 'qllcLSStatsNumRcvFrmrs': qllcLSStatsNumRcvFrmrs, 'qllcLSStatsNumSndFrmrs': qllcLSStatsNumSndFrmrs, 'qllcLSStatsNumDrops': qllcLSStatsNumDrops, 'qllcLSStatsNumErrs': qllcLSStatsNumErrs}


# notifications (traps) 
# groups 
class qllcLSAdminGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 2, 2, 1])
	group = [qllcLSAdminIfIndex, qllcLSAdminLciVcIndex, qllcLSAdminRole, qllcLSAdminCircuitType, qllcLSAdminX25Add, qllcLSAdminModulo, qllcLSAdminLgX25]

class qllcLSOperGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 2, 2, 2])
	group = [qllcLSOperIfIndex, qllcLSOperLciVcIndex, qllcLSOperCircuitType, qllcLSOperRole, qllcLSOperX25Add, qllcLSOperModulo, qllcLSOperState, qllcLSOperLgX25]

class qllcLSStatsGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 10, 6, 2, 2, 3])
	group = [qllcLSStatsIfIndex, qllcLSStatsLciVcIndex, qllcLSStatsXidIn, qllcLSStatsXidOut, qllcLSStatsTestIn, qllcLSStatsTestOut, qllcLSStatsQuenchOff, qllcLSStatsQuenchOn, qllcLSStatsInPaks, qllcLSStatsOutPaks, qllcLSStatsInBytes, qllcLSStatsOutBytes, qllcLSStatsNumRcvQsms, qllcLSStatsNumSndQsms, qllcLSStatsNumRcvDiscs, qllcLSStatsNumSndDiscs, qllcLSStatsNumRcvDms, qllcLSStatsNumSndDms, qllcLSStatsNumRcvFrmrs, qllcLSStatsNumSndFrmrs, qllcLSStatsNumDrops, qllcLSStatsNumErrs]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
