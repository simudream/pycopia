# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from IF_MIB import InterfaceIndexOrZero
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, IpAddress, Integer32, Gauge32, Counter32
from INET_ADDRESS_MIB import InetAddress, InetAddressType, InetAddressPrefixLength, InetAutonomousSystemNumber
from IANA_RTPROTO_MIB import IANAipRouteProtocol
from IP_MIB import ip
from SNMPv2_TC import RowStatus

class IP_FORWARD_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/IP-FORWARD-MIB'
	conformance = 3
	name = 'IP-FORWARD-MIB'
	language = 2
	description = 'The MIB module for the management of CIDR multipath IP\nRoutes.\n\nCopyright (C) The Internet Society (2006).  This version\nof this MIB module is a part of RFC 4292; see the RFC\nitself for full legal notices.'

# nodes
class ipForward(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24])
	name = 'ipForward'

class ipForwardConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 5])
	name = 'ipForwardConformance'

class ipForwardGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 5, 1])
	name = 'ipForwardGroups'

class ipForwardCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 5, 2])
	name = 'ipForwardCompliances'


# macros
# types 
# scalars 
class ipCidrRouteNumber(ScalarObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 3])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class inetCidrRouteNumber(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 6])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class inetCidrRouteDiscards(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


# columns
class ipForwardDest(ColumnObject):
	access = 4
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ipForwardMask(ColumnObject):
	access = 5
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ipForwardPolicy(ColumnObject):
	access = 4
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ipForwardNextHop(ColumnObject):
	access = 4
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ipForwardIfIndex(ColumnObject):
	access = 5
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ipForwardType(ColumnObject):
	status = 5
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'invalid'), Enum(3, 'local'), Enum(4, 'remote')]


class ipForwardProto(ColumnObject):
	status = 5
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 2, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'local'), Enum(3, 'netmgmt'), Enum(4, 'icmp'), Enum(5, 'egp'), Enum(6, 'ggp'), Enum(7, 'hello'), Enum(8, 'rip'), Enum(9, 'is-is'), Enum(10, 'es-is'), Enum(11, 'ciscoIgrp'), Enum(12, 'bbnSpfIgp'), Enum(13, 'ospf'), Enum(14, 'bgp'), Enum(15, 'idpr')]


class ipForwardAge(ColumnObject):
	access = 4
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 2, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ipForwardInfo(ColumnObject):
	access = 5
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 2, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.ObjectIdentifier


class ipForwardNextHopAS(ColumnObject):
	access = 5
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 2, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ipForwardMetric1(ColumnObject):
	access = 5
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 2, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ipForwardMetric2(ColumnObject):
	access = 5
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 2, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ipForwardMetric3(ColumnObject):
	access = 5
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 2, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ipForwardMetric4(ColumnObject):
	access = 5
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 2, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ipForwardMetric5(ColumnObject):
	access = 5
	status = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 2, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ipCidrRouteDest(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 4, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ipCidrRouteMask(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 4, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ipCidrRouteTos(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 4, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ipCidrRouteNextHop(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 4, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class ipCidrRouteIfIndex(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 4, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ipCidrRouteType(ColumnObject):
	status = 2
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 4, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'reject'), Enum(3, 'local'), Enum(4, 'remote')]


class ipCidrRouteProto(ColumnObject):
	status = 2
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 4, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'local'), Enum(3, 'netmgmt'), Enum(4, 'icmp'), Enum(5, 'egp'), Enum(6, 'ggp'), Enum(7, 'hello'), Enum(8, 'rip'), Enum(9, 'isIs'), Enum(10, 'esIs'), Enum(11, 'ciscoIgrp'), Enum(12, 'bbnSpfIgp'), Enum(13, 'ospf'), Enum(14, 'bgp'), Enum(15, 'idpr'), Enum(16, 'ciscoEigrp')]


class ipCidrRouteAge(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 4, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ipCidrRouteInfo(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 4, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.ObjectIdentifier


class ipCidrRouteNextHopAS(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 4, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ipCidrRouteMetric1(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 4, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ipCidrRouteMetric2(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 4, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ipCidrRouteMetric3(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 4, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ipCidrRouteMetric4(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 4, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ipCidrRouteMetric5(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 4, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class ipCidrRouteStatus(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 4, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class inetCidrRouteDestType(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 7, 1, 1])
	syntaxobject = InetAddressType


class inetCidrRouteDest(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 7, 1, 2])
	syntaxobject = InetAddress


class inetCidrRoutePfxLen(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 7, 1, 3])
	syntaxobject = InetAddressPrefixLength


class inetCidrRoutePolicy(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 7, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.ObjectIdentifier


class inetCidrRouteNextHopType(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 7, 1, 5])
	syntaxobject = InetAddressType


class inetCidrRouteNextHop(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 7, 1, 6])
	syntaxobject = InetAddress


class inetCidrRouteIfIndex(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 7, 1, 7])
	syntaxobject = InterfaceIndexOrZero


class inetCidrRouteType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 7, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'other'), Enum(2, 'reject'), Enum(3, 'local'), Enum(4, 'remote'), Enum(5, 'blackhole')]


class inetCidrRouteProto(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 7, 1, 9])
	syntaxobject = IANAipRouteProtocol


class inetCidrRouteAge(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 7, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class inetCidrRouteNextHopAS(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 7, 1, 11])
	syntaxobject = InetAutonomousSystemNumber


class inetCidrRouteMetric1(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 7, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class inetCidrRouteMetric2(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 7, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class inetCidrRouteMetric3(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 7, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class inetCidrRouteMetric4(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 7, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class inetCidrRouteMetric5(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 7, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class inetCidrRouteStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 7, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


# rows 
class ipCidrRouteEntry(RowObject):
	status = 2
	index = pycopia.SMI.Objects.IndexObjects([ipCidrRouteDest, ipCidrRouteMask, ipCidrRouteTos, ipCidrRouteNextHop], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 4, 1])
	access = 2
	rowstatus = ipCidrRouteStatus
	columns = {'ipCidrRouteDest': ipCidrRouteDest, 'ipCidrRouteMask': ipCidrRouteMask, 'ipCidrRouteTos': ipCidrRouteTos, 'ipCidrRouteNextHop': ipCidrRouteNextHop, 'ipCidrRouteIfIndex': ipCidrRouteIfIndex, 'ipCidrRouteType': ipCidrRouteType, 'ipCidrRouteProto': ipCidrRouteProto, 'ipCidrRouteAge': ipCidrRouteAge, 'ipCidrRouteInfo': ipCidrRouteInfo, 'ipCidrRouteNextHopAS': ipCidrRouteNextHopAS, 'ipCidrRouteMetric1': ipCidrRouteMetric1, 'ipCidrRouteMetric2': ipCidrRouteMetric2, 'ipCidrRouteMetric3': ipCidrRouteMetric3, 'ipCidrRouteMetric4': ipCidrRouteMetric4, 'ipCidrRouteMetric5': ipCidrRouteMetric5, 'ipCidrRouteStatus': ipCidrRouteStatus}


class inetCidrRouteEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([inetCidrRouteDestType, inetCidrRouteDest, inetCidrRoutePfxLen, inetCidrRoutePolicy, inetCidrRouteNextHopType, inetCidrRouteNextHop], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 7, 1])
	access = 2
	rowstatus = inetCidrRouteStatus
	columns = {'inetCidrRouteDestType': inetCidrRouteDestType, 'inetCidrRouteDest': inetCidrRouteDest, 'inetCidrRoutePfxLen': inetCidrRoutePfxLen, 'inetCidrRoutePolicy': inetCidrRoutePolicy, 'inetCidrRouteNextHopType': inetCidrRouteNextHopType, 'inetCidrRouteNextHop': inetCidrRouteNextHop, 'inetCidrRouteIfIndex': inetCidrRouteIfIndex, 'inetCidrRouteType': inetCidrRouteType, 'inetCidrRouteProto': inetCidrRouteProto, 'inetCidrRouteAge': inetCidrRouteAge, 'inetCidrRouteNextHopAS': inetCidrRouteNextHopAS, 'inetCidrRouteMetric1': inetCidrRouteMetric1, 'inetCidrRouteMetric2': inetCidrRouteMetric2, 'inetCidrRouteMetric3': inetCidrRouteMetric3, 'inetCidrRouteMetric4': inetCidrRouteMetric4, 'inetCidrRouteMetric5': inetCidrRouteMetric5, 'inetCidrRouteStatus': inetCidrRouteStatus}


# notifications (traps) 
# groups 
class ipForwardCidrRouteGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 5, 1, 3])
	group = [ipCidrRouteNumber, ipCidrRouteDest, ipCidrRouteMask, ipCidrRouteTos, ipCidrRouteNextHop, ipCidrRouteIfIndex, ipCidrRouteType, ipCidrRouteProto, ipCidrRouteAge, ipCidrRouteInfo, ipCidrRouteNextHopAS, ipCidrRouteMetric1, ipCidrRouteMetric2, ipCidrRouteMetric3, ipCidrRouteMetric4, ipCidrRouteMetric5, ipCidrRouteStatus]

class inetForwardCidrRouteGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 4, 24, 5, 1, 4])
	group = [inetCidrRouteDiscards, inetCidrRouteIfIndex, inetCidrRouteType, inetCidrRouteProto, inetCidrRouteAge, inetCidrRouteNextHopAS, inetCidrRouteMetric1, inetCidrRouteMetric2, inetCidrRouteMetric3, inetCidrRouteMetric4, inetCidrRouteMetric5, inetCidrRouteStatus, inetCidrRouteNumber]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
