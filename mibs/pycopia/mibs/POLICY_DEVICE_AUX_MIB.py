# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, experimental
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from SNMPv2_TC import TEXTUAL_CONVENTION, RowStatus, StorageType
from IF_MIB import InterfaceIndex
from SNMP_FRAMEWORK_MIB import SnmpAdminString

class POLICY_DEVICE_AUX_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/tubs/POLICY-DEVICE-AUX-MIB'
	conformance = 3
	name = 'POLICY-DEVICE-AUX-MIB'
	language = 2
	description = 'This module defines an infrastructure used\nfor support of policy-based provisioning of\na network device.'

# nodes
class policyDeviceAuxMib(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 999])
	name = 'policyDeviceAuxMib'

class policyDeviceAuxObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 999, 1])
	name = 'policyDeviceAuxObjects'

class policyDeviceConfig(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 999, 1, 1])
	name = 'policyDeviceConfig'

class policyDeviceAuxConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 999, 2])
	name = 'policyDeviceAuxConformance'

class policyDeviceCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 999, 2, 1])
	name = 'policyDeviceCompliances'

class policyDeviceGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 999, 2, 2])
	name = 'policyDeviceGroups'


# macros
# types 

class Role(pycopia.SMI.Basetypes.OctetString):
	status = 1
	ranges = Ranges(Range(1, 31))


class RoleCombination(pycopia.SMI.Basetypes.OctetString):
	status = 1
	ranges = Ranges(Range(0, 255))

# scalars 
# columns
class policyInterfaceIfIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 999, 1, 1, 1, 1, 1])
	syntaxobject = InterfaceIndex


class policyInterfaceRoleCombo(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 999, 1, 1, 1, 1, 2])
	syntaxobject = RoleCombination


class policyInterfaceStorage(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 999, 1, 1, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


class policyInterfaceStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 999, 1, 1, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


# rows 
class policyInterfaceEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([policyInterfaceIfIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 999, 1, 1, 1, 1])
	access = 2
	rowstatus = policyInterfaceStatus
	columns = {'policyInterfaceIfIndex': policyInterfaceIfIndex, 'policyInterfaceRoleCombo': policyInterfaceRoleCombo, 'policyInterfaceStorage': policyInterfaceStorage, 'policyInterfaceStatus': policyInterfaceStatus}


# notifications (traps) 
# groups 
class policyInterfaceGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 3, 999, 2, 2, 1])
	group = [policyInterfaceRoleCombo, policyInterfaceStorage, policyInterfaceStatus]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
