# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from IF_MIB import ifIndex
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, Counter32, Integer32
from CISCO_TC import InterfaceIndexOrZero
from CISCO_SMI import ciscoMgmt
from SNMPv2_TC import TEXTUAL_CONVENTION, MacAddress, TimeStamp, DisplayString

class CISCO_PAGP_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/site/CISCO-PAGP-MIB'
	conformance = 3
	name = 'CISCO-PAGP-MIB'
	language = 2
	description = 'The MIB module for configuration of Fast Etherchannel\nand the operation of the Port Aggregation Protocol (PAgP).\nThese features allow two or more physical interfaces to\nbe aggregated together to form a single agport.  This\nagport behaves like a single interface with improved\nbandwidth and/or availability over each of its component\nphysical interfaces.\n\nYou can monitor interfaces, agports, and related statistics\nthrough the ifStackTable and ifTable entries.'

# nodes
class ciscoPagpMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 98])
	name = 'ciscoPagpMIB'

class ciscoPagpMIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 98, 1])
	name = 'ciscoPagpMIBObjects'

class pagpGroupCapabilityConfiguration(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 98, 1, 1])
	name = 'pagpGroupCapabilityConfiguration'

class pagpProtocol(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 98, 1, 2])
	name = 'pagpProtocol'

class ciscoPagpMIBConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 98, 3])
	name = 'ciscoPagpMIBConformance'

class ciscoPagpMIBCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 98, 3, 1])
	name = 'ciscoPagpMIBCompliances'

class ciscoPagpMIBGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 98, 3, 2])
	name = 'ciscoPagpMIBGroups'


# macros
# types 

class PagpGroupCapability(pycopia.SMI.Basetypes.Integer32):
	status = 1


class PagpEthcOperationMode(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'off'), Enum(2, 'manual'), Enum(3, 'pagpOn')]


class PagpPortPriority(pycopia.SMI.Basetypes.Integer32):
	status = 1
	ranges = Ranges(Range(0, 255))


class PagpOperationMode(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'desirable'), Enum(2, 'desirableSilent'), Enum(3, 'automatic'), Enum(4, 'automaticSilent')]


class PagpLearnMethod(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'physPort'), Enum(2, 'agPort'), Enum(3, 'undefined')]

# scalars 
# columns
class pagpEthcOperationMode(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 98, 1, 1, 1, 1, 1])
	syntaxobject = PagpEthcOperationMode


class pagpDeviceId(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 98, 1, 1, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.MacAddress


class pagpPhysGroupCapability(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 98, 1, 1, 1, 1, 3])
	syntaxobject = PagpGroupCapability


class pagpOperGroupCapability(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 98, 1, 1, 1, 1, 4])
	syntaxobject = PagpGroupCapability


class pagpAdminGroupCapability(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 98, 1, 1, 1, 1, 5])
	syntaxobject = PagpGroupCapability


class pagpPortPriority(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 98, 1, 1, 1, 1, 6])
	syntaxobject = PagpPortPriority


class pagpLearnMethod(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 98, 1, 1, 1, 1, 7])
	syntaxobject = PagpLearnMethod


class pagpGroupIfIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 98, 1, 1, 1, 1, 8])
	syntaxobject = InterfaceIndexOrZero


class pagpOperationMode(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 98, 1, 2, 1, 1, 1])
	syntaxobject = PagpOperationMode


class pagpPortState(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 98, 1, 2, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'portDown'), Enum(2, 'portUp'), Enum(3, 'dataReceived'), Enum(4, 'upData'), Enum(5, 'pagpReceived'), Enum(6, 'biDirectional'), Enum(7, 'upPagp'), Enum(8, 'upMult')]


class pagpLastStateChange(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 98, 1, 2, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class pagpHelloFrequency(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 98, 1, 2, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'fast'), Enum(2, 'slow')]


class pagpDistributionAlgorithm(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 98, 1, 2, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class pagpPartnerCount(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 98, 1, 2, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'none'), Enum(2, 'one'), Enum(3, 'many')]


class pagpPartnerDeviceId(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 98, 1, 2, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.MacAddress


class pagpPartnerLearnMethod(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 98, 1, 2, 1, 1, 8])
	syntaxobject = PagpLearnMethod


class pagpPartnerPortPriority(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 98, 1, 2, 1, 1, 9])
	syntaxobject = PagpPortPriority


class pagpPartnerIfIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 98, 1, 2, 1, 1, 10])
	syntaxobject = InterfaceIndexOrZero


class pagpPartnerGroupCapability(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 98, 1, 2, 1, 1, 11])
	syntaxobject = PagpGroupCapability


class pagpPartnerGroupIfIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 98, 1, 2, 1, 1, 12])
	syntaxobject = InterfaceIndexOrZero


class pagpPartnerDeviceName(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 98, 1, 2, 1, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class pagpPartnerPortName(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 98, 1, 2, 1, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class pagpPartnerAgportMACAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 98, 1, 2, 1, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.MacAddress


class pagpInPackets(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 98, 1, 2, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'packets'


class pagpOutPackets(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 98, 1, 2, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'packets'


class pagpInFlushes(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 98, 1, 2, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'packets'


class pagpReturnedFlushes(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 98, 1, 2, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'packets'


class pagpOutFlushes(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 98, 1, 2, 2, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'packets'


class pagpInErrors(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 98, 1, 2, 2, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32
	access = 4
	units = 'packets'


# rows 
class pagpEtherChannelEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 98, 1, 1, 1, 1])
	access = 2
	columns = {'pagpEthcOperationMode': pagpEthcOperationMode, 'pagpDeviceId': pagpDeviceId, 'pagpPhysGroupCapability': pagpPhysGroupCapability, 'pagpOperGroupCapability': pagpOperGroupCapability, 'pagpAdminGroupCapability': pagpAdminGroupCapability, 'pagpPortPriority': pagpPortPriority, 'pagpLearnMethod': pagpLearnMethod, 'pagpGroupIfIndex': pagpGroupIfIndex}


class pagpProtocolConfigEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 98, 1, 2, 1, 1])
	access = 2
	columns = {'pagpOperationMode': pagpOperationMode, 'pagpPortState': pagpPortState, 'pagpLastStateChange': pagpLastStateChange, 'pagpHelloFrequency': pagpHelloFrequency, 'pagpDistributionAlgorithm': pagpDistributionAlgorithm, 'pagpPartnerCount': pagpPartnerCount, 'pagpPartnerDeviceId': pagpPartnerDeviceId, 'pagpPartnerLearnMethod': pagpPartnerLearnMethod, 'pagpPartnerPortPriority': pagpPartnerPortPriority, 'pagpPartnerIfIndex': pagpPartnerIfIndex, 'pagpPartnerGroupCapability': pagpPartnerGroupCapability, 'pagpPartnerGroupIfIndex': pagpPartnerGroupIfIndex, 'pagpPartnerDeviceName': pagpPartnerDeviceName, 'pagpPartnerPortName': pagpPartnerPortName, 'pagpPartnerAgportMACAddress': pagpPartnerAgportMACAddress}


class pagpProtocolStatsEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 98, 1, 2, 2, 1])
	access = 2
	columns = {'pagpInPackets': pagpInPackets, 'pagpOutPackets': pagpOutPackets, 'pagpInFlushes': pagpInFlushes, 'pagpReturnedFlushes': pagpReturnedFlushes, 'pagpOutFlushes': pagpOutFlushes, 'pagpInErrors': pagpInErrors}


# notifications (traps) 
# groups 
class ciscoPagpEthcGroupV1R1(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 98, 3, 2, 1])
	group = [pagpEthcOperationMode, pagpDeviceId, pagpPhysGroupCapability, pagpOperGroupCapability, pagpAdminGroupCapability, pagpPortPriority, pagpLearnMethod, pagpGroupIfIndex]

class ciscoPagpPagpGroupV1R1(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 98, 3, 2, 2])
	group = [pagpOperationMode, pagpPortState, pagpLastStateChange, pagpHelloFrequency, pagpDistributionAlgorithm, pagpPartnerCount, pagpPartnerDeviceId, pagpPartnerLearnMethod, pagpPartnerPortPriority, pagpPartnerIfIndex, pagpPartnerGroupCapability, pagpPartnerGroupIfIndex, pagpPartnerDeviceName, pagpPartnerPortName, pagpPartnerAgportMACAddress, pagpInPackets, pagpOutPackets, pagpInFlushes, pagpReturnedFlushes, pagpOutFlushes, pagpInErrors]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
