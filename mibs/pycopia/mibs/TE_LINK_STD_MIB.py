# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, transmission, Integer32, Unsigned32
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from INET_ADDRESS_MIB import InetAddressType, InetAddress
from SNMPv2_TC import TEXTUAL_CONVENTION, RowStatus, StorageType
from IF_MIB import InterfaceIndexOrZero, ifIndex

class TE_LINK_STD_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/TE-LINK-STD-MIB'
	conformance = 132
	name = 'TE-LINK-STD-MIB'
	language = 2
	description = "Copyright (C) 2005 The Internet Society.  This version of\nthis MIB module is part of RFC 4220; see the RFC\nitself for full legal notices.\n\nThis MIB module contains managed object definitions for\nMPLS traffic engineering links as defined in\n'Link Bundling in MPLS Traffic Engineering (TE)'."

# nodes
class teLinkStdMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200])
	name = 'teLinkStdMIB'

class teLinkNotifications(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 0])
	name = 'teLinkNotifications'

class teLinkObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1])
	name = 'teLinkObjects'

class teLinkConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 2])
	name = 'teLinkConformance'

class teLinkCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 2, 1])
	name = 'teLinkCompliances'

class teLinkGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 2, 2])
	name = 'teLinkGroups'


# macros
# types 

class TeLinkBandwidth(pycopia.SMI.Basetypes.OctetString):
	status = 1
	ranges = Ranges(Range(4, 4))


class TeLinkPriority(pycopia.SMI.Basetypes.Unsigned32):
	status = 1
	ranges = Ranges(Range(0, 7))
	format = 'd'


class TeLinkProtection(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'primary'), Enum(2, 'secondary')]


class TeLinkSwitchingCapability(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'packetSwitch1'), Enum(2, 'packetSwitch2'), Enum(3, 'packetSwitch3'), Enum(4, 'packetSwitch4'), Enum(51, 'layer2Switch'), Enum(100, 'tdm'), Enum(150, 'lambdaSwitch'), Enum(200, 'fiberSwitch')]


class TeLinkEncodingType(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'packet'), Enum(2, 'ethernet'), Enum(3, 'ansiEtsiPdh'), Enum(5, 'sdhItuSonetAnsi'), Enum(7, 'digitalWrapper'), Enum(8, 'lambda'), Enum(9, 'fiber'), Enum(11, 'fiberChannel')]


class TeLinkSonetSdhIndication(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(0, 'standard'), Enum(1, 'arbitrary')]

# scalars 
# columns
class teLinkAddressType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 1, 1, 1])
	syntaxobject = InetAddressType


class teLinkLocalIpAddr(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 1, 1, 2])
	syntaxobject = InetAddress


class teLinkRemoteIpAddr(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 1, 1, 3])
	syntaxobject = InetAddress


class teLinkMetric(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class teLinkMaximumReservableBandwidth(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 1, 1, 5])
	syntaxobject = TeLinkBandwidth
	access = 4
	units = 'bps'


class teLinkProtectionType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'extraTraffic'), Enum(2, 'unprotected'), Enum(3, 'shared'), Enum(4, 'dedicated1For1'), Enum(5, 'dedicated1Plus1'), Enum(6, 'enhanced')]


class teLinkWorkingPriority(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 1, 1, 7])
	syntaxobject = TeLinkPriority


class teLinkResourceClass(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class teLinkIncomingIfId(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class teLinkOutgoingIfId(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 1, 1, 10])
	syntaxobject = InterfaceIndexOrZero


class teLinkRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 1, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class teLinkStorageType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 1, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


class teLinkDescriptorId(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class teLinkDescrSwitchingCapability(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 2, 1, 2])
	syntaxobject = TeLinkSwitchingCapability


class teLinkDescrEncodingType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 2, 1, 3])
	syntaxobject = TeLinkEncodingType


class teLinkDescrMinLspBandwidth(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 2, 1, 4])
	syntaxobject = TeLinkBandwidth
	access = 5
	units = 'bps'


class teLinkDescrMaxLspBandwidthPrio0(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 2, 1, 5])
	syntaxobject = TeLinkBandwidth
	access = 5
	units = 'bps'


class teLinkDescrMaxLspBandwidthPrio1(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 2, 1, 6])
	syntaxobject = TeLinkBandwidth
	access = 5
	units = 'bps'


class teLinkDescrMaxLspBandwidthPrio2(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 2, 1, 7])
	syntaxobject = TeLinkBandwidth
	access = 5
	units = 'bps'


class teLinkDescrMaxLspBandwidthPrio3(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 2, 1, 8])
	syntaxobject = TeLinkBandwidth
	access = 5
	units = 'bps'


class teLinkDescrMaxLspBandwidthPrio4(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 2, 1, 9])
	syntaxobject = TeLinkBandwidth
	access = 5
	units = 'bps'


class teLinkDescrMaxLspBandwidthPrio5(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 2, 1, 10])
	syntaxobject = TeLinkBandwidth
	access = 5
	units = 'bps'


class teLinkDescrMaxLspBandwidthPrio6(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 2, 1, 11])
	syntaxobject = TeLinkBandwidth
	access = 5
	units = 'bps'


class teLinkDescrMaxLspBandwidthPrio7(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 2, 1, 12])
	syntaxobject = TeLinkBandwidth
	access = 5
	units = 'bps'


class teLinkDescrInterfaceMtu(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 2, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class teLinkDescrIndication(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 2, 1, 14])
	syntaxobject = TeLinkSonetSdhIndication


class teLinkDescrRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 2, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class teLinkDescrStorageType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 2, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


class teLinkSrlg(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 3, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class teLinkSrlgRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 3, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class teLinkSrlgStorageType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 3, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


class teLinkBandwidthPriority(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 4, 1, 1])
	syntaxobject = TeLinkPriority


class teLinkBandwidthUnreserved(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 4, 1, 2])
	syntaxobject = TeLinkBandwidth
	access = 4
	units = 'bps'


class teLinkBandwidthRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 4, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class teLinkBandwidthStorageType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 4, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


class componentLinkMaxResBandwidth(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 5, 1, 1])
	syntaxobject = TeLinkBandwidth
	access = 5
	units = 'bps'


class componentLinkPreferredProtection(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 5, 1, 2])
	syntaxobject = TeLinkProtection


class componentLinkCurrentProtection(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 5, 1, 3])
	syntaxobject = TeLinkProtection


class componentLinkRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 5, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class componentLinkStorageType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 5, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


class componentLinkDescrId(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 6, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class componentLinkDescrSwitchingCapability(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 6, 1, 2])
	syntaxobject = TeLinkSwitchingCapability


class componentLinkDescrEncodingType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 6, 1, 3])
	syntaxobject = TeLinkEncodingType


class componentLinkDescrMinLspBandwidth(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 6, 1, 4])
	syntaxobject = TeLinkBandwidth
	access = 5
	units = 'bps'


class componentLinkDescrMaxLspBandwidthPrio0(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 6, 1, 5])
	syntaxobject = TeLinkBandwidth
	access = 5
	units = 'bps'


class componentLinkDescrMaxLspBandwidthPrio1(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 6, 1, 6])
	syntaxobject = TeLinkBandwidth
	access = 5
	units = 'bps'


class componentLinkDescrMaxLspBandwidthPrio2(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 6, 1, 7])
	syntaxobject = TeLinkBandwidth
	access = 5
	units = 'bps'


class componentLinkDescrMaxLspBandwidthPrio3(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 6, 1, 8])
	syntaxobject = TeLinkBandwidth
	access = 5
	units = 'bps'


class componentLinkDescrMaxLspBandwidthPrio4(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 6, 1, 9])
	syntaxobject = TeLinkBandwidth
	access = 5
	units = 'bps'


class componentLinkDescrMaxLspBandwidthPrio5(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 6, 1, 10])
	syntaxobject = TeLinkBandwidth
	access = 5
	units = 'thousand bps'


class componentLinkDescrMaxLspBandwidthPrio6(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 6, 1, 11])
	syntaxobject = TeLinkBandwidth
	access = 5
	units = 'bps'


class componentLinkDescrMaxLspBandwidthPrio7(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 6, 1, 12])
	syntaxobject = TeLinkBandwidth
	access = 5
	units = 'bps'


class componentLinkDescrInterfaceMtu(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 6, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class componentLinkDescrIndication(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 6, 1, 14])
	syntaxobject = TeLinkSonetSdhIndication


class componentLinkDescrRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 6, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class componentLinkDescrStorageType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 6, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


class componentLinkBandwidthPriority(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 7, 1, 1])
	syntaxobject = TeLinkPriority


class componentLinkBandwidthUnreserved(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 7, 1, 2])
	syntaxobject = TeLinkBandwidth
	access = 4
	units = 'bps'


class componentLinkBandwidthRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 7, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class componentLinkBandwidthStorageType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 7, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


# rows 
class teLinkEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 1, 1])
	access = 2
	rowstatus = teLinkRowStatus
	columns = {'teLinkAddressType': teLinkAddressType, 'teLinkLocalIpAddr': teLinkLocalIpAddr, 'teLinkRemoteIpAddr': teLinkRemoteIpAddr, 'teLinkMetric': teLinkMetric, 'teLinkMaximumReservableBandwidth': teLinkMaximumReservableBandwidth, 'teLinkProtectionType': teLinkProtectionType, 'teLinkWorkingPriority': teLinkWorkingPriority, 'teLinkResourceClass': teLinkResourceClass, 'teLinkIncomingIfId': teLinkIncomingIfId, 'teLinkOutgoingIfId': teLinkOutgoingIfId, 'teLinkRowStatus': teLinkRowStatus, 'teLinkStorageType': teLinkStorageType}


class teLinkDescriptorEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, teLinkDescriptorId], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 2, 1])
	access = 2
	rowstatus = teLinkDescrRowStatus
	columns = {'teLinkDescriptorId': teLinkDescriptorId, 'teLinkDescrSwitchingCapability': teLinkDescrSwitchingCapability, 'teLinkDescrEncodingType': teLinkDescrEncodingType, 'teLinkDescrMinLspBandwidth': teLinkDescrMinLspBandwidth, 'teLinkDescrMaxLspBandwidthPrio0': teLinkDescrMaxLspBandwidthPrio0, 'teLinkDescrMaxLspBandwidthPrio1': teLinkDescrMaxLspBandwidthPrio1, 'teLinkDescrMaxLspBandwidthPrio2': teLinkDescrMaxLspBandwidthPrio2, 'teLinkDescrMaxLspBandwidthPrio3': teLinkDescrMaxLspBandwidthPrio3, 'teLinkDescrMaxLspBandwidthPrio4': teLinkDescrMaxLspBandwidthPrio4, 'teLinkDescrMaxLspBandwidthPrio5': teLinkDescrMaxLspBandwidthPrio5, 'teLinkDescrMaxLspBandwidthPrio6': teLinkDescrMaxLspBandwidthPrio6, 'teLinkDescrMaxLspBandwidthPrio7': teLinkDescrMaxLspBandwidthPrio7, 'teLinkDescrInterfaceMtu': teLinkDescrInterfaceMtu, 'teLinkDescrIndication': teLinkDescrIndication, 'teLinkDescrRowStatus': teLinkDescrRowStatus, 'teLinkDescrStorageType': teLinkDescrStorageType}


class teLinkSrlgEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, teLinkSrlg], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 3, 1])
	access = 2
	rowstatus = teLinkSrlgRowStatus
	columns = {'teLinkSrlg': teLinkSrlg, 'teLinkSrlgRowStatus': teLinkSrlgRowStatus, 'teLinkSrlgStorageType': teLinkSrlgStorageType}


class teLinkBandwidthEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, teLinkBandwidthPriority], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 4, 1])
	access = 2
	rowstatus = teLinkBandwidthRowStatus
	columns = {'teLinkBandwidthPriority': teLinkBandwidthPriority, 'teLinkBandwidthUnreserved': teLinkBandwidthUnreserved, 'teLinkBandwidthRowStatus': teLinkBandwidthRowStatus, 'teLinkBandwidthStorageType': teLinkBandwidthStorageType}


class componentLinkEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 5, 1])
	access = 2
	rowstatus = componentLinkRowStatus
	columns = {'componentLinkMaxResBandwidth': componentLinkMaxResBandwidth, 'componentLinkPreferredProtection': componentLinkPreferredProtection, 'componentLinkCurrentProtection': componentLinkCurrentProtection, 'componentLinkRowStatus': componentLinkRowStatus, 'componentLinkStorageType': componentLinkStorageType}


class componentLinkDescriptorEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, componentLinkDescrId], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 6, 1])
	access = 2
	rowstatus = componentLinkDescrRowStatus
	columns = {'componentLinkDescrId': componentLinkDescrId, 'componentLinkDescrSwitchingCapability': componentLinkDescrSwitchingCapability, 'componentLinkDescrEncodingType': componentLinkDescrEncodingType, 'componentLinkDescrMinLspBandwidth': componentLinkDescrMinLspBandwidth, 'componentLinkDescrMaxLspBandwidthPrio0': componentLinkDescrMaxLspBandwidthPrio0, 'componentLinkDescrMaxLspBandwidthPrio1': componentLinkDescrMaxLspBandwidthPrio1, 'componentLinkDescrMaxLspBandwidthPrio2': componentLinkDescrMaxLspBandwidthPrio2, 'componentLinkDescrMaxLspBandwidthPrio3': componentLinkDescrMaxLspBandwidthPrio3, 'componentLinkDescrMaxLspBandwidthPrio4': componentLinkDescrMaxLspBandwidthPrio4, 'componentLinkDescrMaxLspBandwidthPrio5': componentLinkDescrMaxLspBandwidthPrio5, 'componentLinkDescrMaxLspBandwidthPrio6': componentLinkDescrMaxLspBandwidthPrio6, 'componentLinkDescrMaxLspBandwidthPrio7': componentLinkDescrMaxLspBandwidthPrio7, 'componentLinkDescrInterfaceMtu': componentLinkDescrInterfaceMtu, 'componentLinkDescrIndication': componentLinkDescrIndication, 'componentLinkDescrRowStatus': componentLinkDescrRowStatus, 'componentLinkDescrStorageType': componentLinkDescrStorageType}


class componentLinkBandwidthEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex, componentLinkBandwidthPriority], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 1, 7, 1])
	access = 2
	rowstatus = componentLinkBandwidthRowStatus
	columns = {'componentLinkBandwidthPriority': componentLinkBandwidthPriority, 'componentLinkBandwidthUnreserved': componentLinkBandwidthUnreserved, 'componentLinkBandwidthRowStatus': componentLinkBandwidthRowStatus, 'componentLinkBandwidthStorageType': componentLinkBandwidthStorageType}


# notifications (traps) 
# groups 
class teLinkGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 2, 2, 1])
	group = [teLinkAddressType, teLinkLocalIpAddr, teLinkRemoteIpAddr, teLinkMetric, teLinkProtectionType, teLinkWorkingPriority, teLinkResourceClass, teLinkIncomingIfId, teLinkOutgoingIfId, teLinkRowStatus, teLinkStorageType, teLinkDescrSwitchingCapability, teLinkDescrEncodingType, teLinkDescrRowStatus, teLinkDescrStorageType, componentLinkPreferredProtection, componentLinkCurrentProtection, componentLinkRowStatus, componentLinkStorageType, componentLinkDescrSwitchingCapability, componentLinkDescrEncodingType, componentLinkDescrRowStatus, componentLinkDescrStorageType]

class teLinkSrlgGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 2, 2, 2])
	group = [teLinkSrlgRowStatus, teLinkSrlgStorageType]

class teLinkBandwidthGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 2, 2, 3])
	group = [teLinkMaximumReservableBandwidth, teLinkDescrMaxLspBandwidthPrio0, teLinkDescrMaxLspBandwidthPrio1, teLinkDescrMaxLspBandwidthPrio2, teLinkDescrMaxLspBandwidthPrio3, teLinkDescrMaxLspBandwidthPrio4, teLinkDescrMaxLspBandwidthPrio5, teLinkDescrMaxLspBandwidthPrio6, teLinkDescrMaxLspBandwidthPrio7, teLinkBandwidthUnreserved, teLinkBandwidthRowStatus, teLinkBandwidthStorageType]

class componentLinkBandwidthGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 2, 2, 4])
	group = [componentLinkMaxResBandwidth, componentLinkDescrMaxLspBandwidthPrio0, componentLinkDescrMaxLspBandwidthPrio1, componentLinkDescrMaxLspBandwidthPrio2, componentLinkDescrMaxLspBandwidthPrio3, componentLinkDescrMaxLspBandwidthPrio4, componentLinkDescrMaxLspBandwidthPrio5, componentLinkDescrMaxLspBandwidthPrio6, componentLinkDescrMaxLspBandwidthPrio7, componentLinkBandwidthUnreserved, componentLinkBandwidthRowStatus, componentLinkBandwidthStorageType]

class teLinkPscGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 2, 2, 5])
	group = [teLinkDescrMinLspBandwidth, teLinkDescrInterfaceMtu, componentLinkDescrMinLspBandwidth, componentLinkDescrInterfaceMtu]

class teLinkTdmGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 200, 2, 2, 6])
	group = [teLinkDescrMinLspBandwidth, teLinkDescrIndication, componentLinkDescrMinLspBandwidth, componentLinkDescrIndication]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
