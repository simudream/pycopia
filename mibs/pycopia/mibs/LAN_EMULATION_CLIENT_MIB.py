# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, enterprises, Counter32, Integer32
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from RFC1213_MIB import ifIndex
from SNMPv2_TC import TEXTUAL_CONVENTION, MacAddress, RowStatus, TruthValue, DisplayString

class LAN_EMULATION_CLIENT_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/site/LAN-EMULATION-CLIENT-MIB'
	conformance = 2
	name = 'LAN-EMULATION-CLIENT-MIB'
	language = 2
	description = "This module defines a portion of the management \ninformation base (MIB) for managing ATM LAN Emulation\nClient nodes.  It is meant to be used in connection with\nthe AToM MIB and MIB-II / RFC 1573 'ifTable' entries\nfor each LEC / emulated 802.x network interface."

# nodes
class atmfLanEmulation(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3])
	name = 'atmfLanEmulation'

class leClientMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1])
	name = 'leClientMIB'

class leClientMIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1])
	name = 'leClientMIBObjects'

class leClientMIBConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 2])
	name = 'leClientMIBConformance'

class leClientMIBGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 2, 1])
	name = 'leClientMIBGroups'

class leClientMIBCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 2, 2])
	name = 'leClientMIBCompliances'


# macros
# types 

class OwnerString(pycopia.SMI.Basetypes.OctetString):
	status = 1


class AtmLaneAddress(pycopia.SMI.Basetypes.OctetString):
	status = 1
	ranges = Ranges(Range(0, 0), Range(20, 20))


class VpiInteger(pycopia.SMI.Basetypes.Integer32):
	status = 1
	ranges = Ranges(Range(0, 255))


class VciInteger(pycopia.SMI.Basetypes.Integer32):
	status = 1
	ranges = Ranges(Range(0, 65535))


class LeConnectionInterface(pycopia.SMI.Basetypes.Integer32):
	status = 1
	ranges = Ranges(Range(0, 2147483647))


class LecState(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'initialState'), Enum(2, 'lecsConnect'), Enum(3, 'configure'), Enum(4, 'join'), Enum(5, 'initialRegistration'), Enum(6, 'busConnect'), Enum(7, 'operational')]


class LecDataFrameFormat(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'unspecified'), Enum(2, 'aflane8023'), Enum(3, 'aflane8025')]


class LecDataFrameSize(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'unspecified'), Enum(2, 'max1516'), Enum(3, 'max4544'), Enum(4, 'max9234'), Enum(5, 'max18190')]


class LeArpTableEntryType(pycopia.SMI.Basetypes.Enumeration):
	status = 1
	enumerations = [Enum(1, 'other'), Enum(2, 'learnedViaControl'), Enum(3, 'learnedViaData'), Enum(4, 'staticVolatile'), Enum(5, 'staticNonVolatile')]

# scalars 
# columns
class lecIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class lecRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class lecOwner(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 3])
	syntaxobject = OwnerString


class lecConfigMode(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'automatic'), Enum(2, 'manual')]


class lecConfigLanType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 5])
	syntaxobject = LecDataFrameFormat


class lecConfigMaxDataFrameSize(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 6])
	syntaxobject = LecDataFrameSize


class lecConfigLanName(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class lecConfigLesAtmAddress(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 8])
	syntaxobject = AtmLaneAddress


class lecControlTimeout(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class lecMaxUnknownFrameCount(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'frames'


class lecMaxUnknownFrameTime(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class lecVccTimeoutPeriod(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class lecMaxRetryCount(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class lecAgingTime(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class lecForwardDelayTime(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class lecExpectedArpResponseTime(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class lecFlushTimeOut(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class lecPathSwitchingDelay(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class lecLocalSegmentID(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class lecMulticastSendType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 20])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'bestEffort'), Enum(2, 'variableBitRate'), Enum(3, 'constantBitRate')]


class lecMulticastSendAvgRate(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 21])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'cells per second'


class lecMulticastSendPeakRate(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 22])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'cells per second'


class lecConnectionCompleteTimer(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1, 23])
	syntaxobject = pycopia.SMI.Basetypes.Integer32
	access = 5
	units = 'seconds'


class lecIfIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class lecPrimaryAtmAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 2, 1, 2])
	syntaxobject = AtmLaneAddress


class lecID(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class lecInterfaceState(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 2, 1, 4])
	syntaxobject = LecState


class lecLastFailureRespCode(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 2, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'none'), Enum(2, 'timeout'), Enum(3, 'undefinedError'), Enum(4, 'versionNotSupported'), Enum(5, 'invalidRequestParameters'), Enum(6, 'duplicateLanDestination'), Enum(7, 'duplicateAtmAddress'), Enum(8, 'insufficientResources'), Enum(9, 'accessDenied'), Enum(10, 'invalidRequesterId'), Enum(11, 'invalidLanDestination'), Enum(12, 'invalidAtmAddress'), Enum(13, 'noConfiguration'), Enum(14, 'leConfigureError'), Enum(15, 'insufficientInformation')]


class lecLastFailureState(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 2, 1, 6])
	syntaxobject = LecState


class lecProtocol(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 2, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class lecVersion(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 2, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class lecTopologyChange(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 2, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class lecConfigServerAtmAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 2, 1, 10])
	syntaxobject = AtmLaneAddress


class lecConfigSource(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 2, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'gotAddressViaIlmi'), Enum(2, 'usedWellKnownAddress'), Enum(3, 'usedLecsPvc'), Enum(4, 'didNotUseLecs')]


class lecActualLanType(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 2, 1, 12])
	syntaxobject = LecDataFrameFormat


class lecActualMaxDataFrameSize(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 2, 1, 13])
	syntaxobject = LecDataFrameSize


class lecActualLanName(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 2, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class lecActualLesAtmAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 2, 1, 15])
	syntaxobject = AtmLaneAddress


class lecProxyClient(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 2, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class lecMappingIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 3, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class lecArpRequestsOut(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 4, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lecArpRequestsIn(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 4, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lecArpRepliesOut(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 4, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lecArpRepliesIn(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 4, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lecControlFramesOut(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 4, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lecControlFramesIn(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 4, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lecSvcFailures(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 4, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class lecConfigDirectInterface(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 5, 1, 1])
	syntaxobject = LeConnectionInterface


class lecConfigDirectVpi(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 5, 1, 2])
	syntaxobject = VpiInteger


class lecConfigDirectVci(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 5, 1, 3])
	syntaxobject = VciInteger


class lecControlDirectInterface(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 5, 1, 4])
	syntaxobject = LeConnectionInterface


class lecControlDirectVpi(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 5, 1, 5])
	syntaxobject = VpiInteger


class lecControlDirectVci(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 5, 1, 6])
	syntaxobject = VciInteger


class lecControlDistributeInterface(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 5, 1, 7])
	syntaxobject = LeConnectionInterface


class lecControlDistributeVpi(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 5, 1, 8])
	syntaxobject = VpiInteger


class lecControlDistributeVci(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 5, 1, 9])
	syntaxobject = VciInteger


class lecMulticastSendInterface(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 5, 1, 10])
	syntaxobject = LeConnectionInterface


class lecMulticastSendVpi(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 5, 1, 11])
	syntaxobject = VpiInteger


class lecMulticastSendVci(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 5, 1, 12])
	syntaxobject = VciInteger


class lecMulticastForwardInterface(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 5, 1, 13])
	syntaxobject = LeConnectionInterface


class lecMulticastForwardVpi(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 5, 1, 14])
	syntaxobject = VpiInteger


class lecMulticastForwardVci(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 5, 1, 15])
	syntaxobject = VciInteger


class lecAtmAddress(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 6, 1, 1])
	syntaxobject = AtmLaneAddress


class lecAtmAddressStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 6, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class lecMacAddress(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 7, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.MacAddress


class lecMacAddressAtmBinding(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 7, 1, 2])
	syntaxobject = AtmLaneAddress


class lecRouteDescrSegmentID(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 8, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class lecRouteDescrBridgeNumber(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 8, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class lecRouteDescrAtmBinding(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 8, 1, 3])
	syntaxobject = AtmLaneAddress


class leArpMacAddress(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 9, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.MacAddress


class leArpAtmAddress(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 9, 1, 2])
	syntaxobject = AtmLaneAddress


class leArpIsRemoteAddress(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 9, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class leArpEntryType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 9, 1, 4])
	syntaxobject = LeArpTableEntryType


class leArpRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 9, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class leRDArpSegmentID(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 10, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class leRDArpBridgeNumber(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 10, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class leRDArpAtmAddress(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 10, 1, 3])
	syntaxobject = AtmLaneAddress


class leRDArpEntryType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 10, 1, 4])
	syntaxobject = LeArpTableEntryType


class leRDArpRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 10, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


# rows 
class lecConfigEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([lecIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 1, 1])
	access = 2
	rowstatus = lecRowStatus
	columns = {'lecIndex': lecIndex, 'lecRowStatus': lecRowStatus, 'lecOwner': lecOwner, 'lecConfigMode': lecConfigMode, 'lecConfigLanType': lecConfigLanType, 'lecConfigMaxDataFrameSize': lecConfigMaxDataFrameSize, 'lecConfigLanName': lecConfigLanName, 'lecConfigLesAtmAddress': lecConfigLesAtmAddress, 'lecControlTimeout': lecControlTimeout, 'lecMaxUnknownFrameCount': lecMaxUnknownFrameCount, 'lecMaxUnknownFrameTime': lecMaxUnknownFrameTime, 'lecVccTimeoutPeriod': lecVccTimeoutPeriod, 'lecMaxRetryCount': lecMaxRetryCount, 'lecAgingTime': lecAgingTime, 'lecForwardDelayTime': lecForwardDelayTime, 'lecExpectedArpResponseTime': lecExpectedArpResponseTime, 'lecFlushTimeOut': lecFlushTimeOut, 'lecPathSwitchingDelay': lecPathSwitchingDelay, 'lecLocalSegmentID': lecLocalSegmentID, 'lecMulticastSendType': lecMulticastSendType, 'lecMulticastSendAvgRate': lecMulticastSendAvgRate, 'lecMulticastSendPeakRate': lecMulticastSendPeakRate, 'lecConnectionCompleteTimer': lecConnectionCompleteTimer}


class lecStatusEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([lecIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 2, 1])
	access = 2
	columns = {'lecIfIndex': lecIfIndex, 'lecPrimaryAtmAddress': lecPrimaryAtmAddress, 'lecID': lecID, 'lecInterfaceState': lecInterfaceState, 'lecLastFailureRespCode': lecLastFailureRespCode, 'lecLastFailureState': lecLastFailureState, 'lecProtocol': lecProtocol, 'lecVersion': lecVersion, 'lecTopologyChange': lecTopologyChange, 'lecConfigServerAtmAddress': lecConfigServerAtmAddress, 'lecConfigSource': lecConfigSource, 'lecActualLanType': lecActualLanType, 'lecActualMaxDataFrameSize': lecActualMaxDataFrameSize, 'lecActualLanName': lecActualLanName, 'lecActualLesAtmAddress': lecActualLesAtmAddress, 'lecProxyClient': lecProxyClient}


class lecMappingEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 3, 1])
	access = 2
	columns = {'lecMappingIndex': lecMappingIndex}


class lecStatisticsEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([lecIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 4, 1])
	access = 2
	columns = {'lecArpRequestsOut': lecArpRequestsOut, 'lecArpRequestsIn': lecArpRequestsIn, 'lecArpRepliesOut': lecArpRepliesOut, 'lecArpRepliesIn': lecArpRepliesIn, 'lecControlFramesOut': lecControlFramesOut, 'lecControlFramesIn': lecControlFramesIn, 'lecSvcFailures': lecSvcFailures}


class lecServerVccEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([lecIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 5, 1])
	access = 2
	columns = {'lecConfigDirectInterface': lecConfigDirectInterface, 'lecConfigDirectVpi': lecConfigDirectVpi, 'lecConfigDirectVci': lecConfigDirectVci, 'lecControlDirectInterface': lecControlDirectInterface, 'lecControlDirectVpi': lecControlDirectVpi, 'lecControlDirectVci': lecControlDirectVci, 'lecControlDistributeInterface': lecControlDistributeInterface, 'lecControlDistributeVpi': lecControlDistributeVpi, 'lecControlDistributeVci': lecControlDistributeVci, 'lecMulticastSendInterface': lecMulticastSendInterface, 'lecMulticastSendVpi': lecMulticastSendVpi, 'lecMulticastSendVci': lecMulticastSendVci, 'lecMulticastForwardInterface': lecMulticastForwardInterface, 'lecMulticastForwardVpi': lecMulticastForwardVpi, 'lecMulticastForwardVci': lecMulticastForwardVci}


class lecAtmAddressEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([lecIndex, lecAtmAddress], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 6, 1])
	access = 2
	rowstatus = lecAtmAddressStatus
	columns = {'lecAtmAddress': lecAtmAddress, 'lecAtmAddressStatus': lecAtmAddressStatus}


class lecMacAddressEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([lecIndex, lecMacAddress], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 7, 1])
	access = 2
	columns = {'lecMacAddress': lecMacAddress, 'lecMacAddressAtmBinding': lecMacAddressAtmBinding}


class lecRouteDescrEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([lecIndex, lecRouteDescrSegmentID, lecRouteDescrBridgeNumber], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 8, 1])
	access = 2
	columns = {'lecRouteDescrSegmentID': lecRouteDescrSegmentID, 'lecRouteDescrBridgeNumber': lecRouteDescrBridgeNumber, 'lecRouteDescrAtmBinding': lecRouteDescrAtmBinding}


class leArpEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([lecIndex, leArpMacAddress], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 9, 1])
	access = 2
	rowstatus = leArpRowStatus
	columns = {'leArpMacAddress': leArpMacAddress, 'leArpAtmAddress': leArpAtmAddress, 'leArpIsRemoteAddress': leArpIsRemoteAddress, 'leArpEntryType': leArpEntryType, 'leArpRowStatus': leArpRowStatus}


class leRDArpEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([lecIndex, leRDArpSegmentID, leRDArpBridgeNumber], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 1, 10, 1])
	access = 2
	rowstatus = leRDArpRowStatus
	columns = {'leRDArpSegmentID': leRDArpSegmentID, 'leRDArpBridgeNumber': leRDArpBridgeNumber, 'leRDArpAtmAddress': leRDArpAtmAddress, 'leRDArpEntryType': leRDArpEntryType, 'leRDArpRowStatus': leRDArpRowStatus}


# notifications (traps) 
# groups 
class leClientConfigGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 2, 1, 1])
	group = [lecRowStatus, lecOwner, lecConfigMode, lecConfigLanType, lecConfigMaxDataFrameSize, lecConfigLanName, lecConfigLesAtmAddress, lecControlTimeout, lecMaxUnknownFrameCount, lecMaxUnknownFrameTime, lecVccTimeoutPeriod, lecMaxRetryCount, lecAgingTime, lecForwardDelayTime, lecExpectedArpResponseTime, lecFlushTimeOut, lecPathSwitchingDelay, lecLocalSegmentID, lecMulticastSendType, lecMulticastSendAvgRate, lecMulticastSendPeakRate, lecConnectionCompleteTimer]

class leClientStatusGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 2, 1, 2])
	group = [lecIfIndex, lecPrimaryAtmAddress, lecID, lecInterfaceState, lecLastFailureRespCode, lecLastFailureState, lecProtocol, lecVersion, lecTopologyChange, lecConfigServerAtmAddress, lecConfigSource, lecActualLanType, lecActualMaxDataFrameSize, lecActualLanName, lecActualLesAtmAddress, lecProxyClient]

class leClientMappingGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 2, 1, 3])
	group = [lecMappingIndex]

class leClientStatisticsGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 2, 1, 4])
	group = [lecArpRequestsOut, lecArpRequestsIn, lecArpRepliesOut, lecArpRepliesIn, lecControlFramesOut, lecControlFramesIn, lecSvcFailures]

class leClientServerVccGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 2, 1, 5])
	group = [lecConfigDirectInterface, lecConfigDirectVpi, lecConfigDirectVci, lecControlDirectInterface, lecControlDirectVpi, lecControlDirectVci, lecControlDistributeInterface, lecControlDistributeVpi, lecControlDistributeVci, lecMulticastSendInterface, lecMulticastSendVpi, lecMulticastSendVci, lecMulticastForwardInterface, lecMulticastForwardVpi, lecMulticastForwardVci]

class leClientAtmAddressesGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 2, 1, 6])
	group = [lecAtmAddressStatus]

class leClientMacAddressesGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 2, 1, 7])
	group = [lecMacAddressAtmBinding]

class leClientRouteDescriptorsGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 2, 1, 8])
	group = [lecRouteDescrAtmBinding]

class leClientArpGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 2, 1, 9])
	group = [leArpAtmAddress, leArpIsRemoteAddress, leArpEntryType, leArpRowStatus]

class leClientRDArpGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 353, 5, 3, 1, 2, 1, 10])
	group = [leRDArpAtmAddress, leRDArpEntryType, leRDArpRowStatus]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
