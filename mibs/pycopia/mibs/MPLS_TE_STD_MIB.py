# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP, NOTIFICATION_GROUP
from IF_MIB import InterfaceIndexOrZero, ifGeneralInformationGroup, ifCounterDiscontinuityGroup
from SNMP_FRAMEWORK_MIB import SnmpAdminString
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, NOTIFICATION_TYPE, Integer32, Unsigned32, Counter32, Counter64, TimeTicks, zeroDotZero
from MPLS_TC_STD_MIB import mplsStdMIB, MplsBitRate, MplsBurstSize, MplsLSPID, MplsTunnelIndex, MplsTunnelInstanceIndex, MplsTunnelAffinity, MplsExtendedTunnelId, MplsPathIndex, MplsPathIndexOrZero, MplsOwner, TeHopAddressType, TeHopAddress, TeHopAddressAS, TeHopAddressUnnum
from INET_ADDRESS_MIB import InetAddressPrefixLength
from SNMPv2_TC import TruthValue, RowStatus, RowPointer, StorageType, TimeStamp
from DIFFSERV_MIB import IndexIntegerNextFree

class MPLS_TE_STD_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/MPLS-TE-STD-MIB'
	conformance = 4
	name = 'MPLS-TE-STD-MIB'
	language = 2
	description = "Copyright (C) The Internet Society (2004). The\ninitial version of this MIB module was published\nin RFC 3812. For full legal notices see the RFC\nitself or see: http://www.ietf.org/copyrights/ianamib.html\n\nThis MIB module contains managed object definitions\n for MPLS Traffic Engineering (TE) as defined in:\n1. Extensions to RSVP for LSP Tunnels, Awduche et\n al, RFC 3209, December 2001\n2. Constraint-Based LSP Setup using LDP, Jamoussi\n\n\n\n (Editor), RFC 3212, January 2002\n3. Requirements for Traffic Engineering Over MPLS,\n Awduche, D., Malcolm, J., Agogbua, J., O'Dell, M.,\n and J. McManus, [RFC2702], September 1999"

# nodes
class mplsTeStdMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3])
	name = 'mplsTeStdMIB'

class mplsTeNotifications(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 0])
	name = 'mplsTeNotifications'

class mplsTeScalars(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 1])
	name = 'mplsTeScalars'

class mplsTeObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2])
	name = 'mplsTeObjects'

class mplsTeConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 3])
	name = 'mplsTeConformance'

class mplsTeGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 3, 1])
	name = 'mplsTeGroups'

class mplsTeCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 3, 2])
	name = 'mplsTeCompliances'


# macros
# types 
# scalars 
class mplsTunnelConfigured(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class mplsTunnelActive(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class mplsTunnelTEDistProto(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.BITS


class mplsTunnelMaxHops(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class mplsTunnelNotificationMaxRate(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class mplsTunnelIndexNext(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 1])
	syntaxobject = IndexIntegerNextFree


class mplsTunnelHopListIndexNext(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 3])
	syntaxobject = MplsPathIndexOrZero


class mplsTunnelResourceIndexNext(ScalarObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 5])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class mplsTunnelNotificationEnable(ScalarObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 11])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


# columns
class mplsTunnelIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 1])
	syntaxobject = MplsTunnelIndex


class mplsTunnelInstance(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 2])
	syntaxobject = MplsTunnelInstanceIndex


class mplsTunnelIngressLSRId(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 3])
	syntaxobject = MplsExtendedTunnelId


class mplsTunnelEgressLSRId(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 4])
	syntaxobject = MplsExtendedTunnelId


class mplsTunnelName(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 5])
	syntaxobject = SnmpAdminString


class mplsTunnelDescr(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 6])
	syntaxobject = SnmpAdminString


class mplsTunnelIsIf(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class mplsTunnelIfIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 8])
	syntaxobject = InterfaceIndexOrZero


class mplsTunnelOwner(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 9])
	syntaxobject = MplsOwner


class mplsTunnelRole(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'head'), Enum(2, 'transit'), Enum(3, 'tail'), Enum(4, 'headTail')]


class mplsTunnelXCPointer(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.RowPointer


class mplsTunnelSignallingProto(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'none'), Enum(2, 'rsvp'), Enum(3, 'crldp'), Enum(4, 'other')]


class mplsTunnelSetupPrio(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class mplsTunnelHoldingPrio(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class mplsTunnelSessionAttributes(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.BITS


class mplsTunnelLocalProtectInUse(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class mplsTunnelResourcePointer(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.RowPointer


class mplsTunnelPrimaryInstance(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 18])
	syntaxobject = MplsTunnelInstanceIndex


class mplsTunnelInstancePriority(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class mplsTunnelHopTableIndex(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 20])
	syntaxobject = MplsPathIndexOrZero


class mplsTunnelPathInUse(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 21])
	syntaxobject = MplsPathIndexOrZero


class mplsTunnelARHopTableIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 22])
	syntaxobject = MplsPathIndexOrZero


class mplsTunnelCHopTableIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 23])
	syntaxobject = MplsPathIndexOrZero


class mplsTunnelIncludeAnyAffinity(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 24])
	syntaxobject = MplsTunnelAffinity


class mplsTunnelIncludeAllAffinity(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 25])
	syntaxobject = MplsTunnelAffinity


class mplsTunnelExcludeAnyAffinity(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 26])
	syntaxobject = MplsTunnelAffinity


class mplsTunnelTotalUpTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 27])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class mplsTunnelInstanceUpTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 28])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class mplsTunnelPrimaryUpTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 29])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class mplsTunnelPathChanges(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 30])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class mplsTunnelLastPathChange(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 31])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class mplsTunnelCreationTime(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 32])
	syntaxobject = pycopia.SMI.Basetypes.TimeStamp


class mplsTunnelStateTransitions(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 33])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class mplsTunnelAdminStatus(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 34])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'up'), Enum(2, 'down'), Enum(3, 'testing')]


class mplsTunnelOperStatus(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 35])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'up'), Enum(2, 'down'), Enum(3, 'testing'), Enum(4, 'unknown'), Enum(5, 'dormant'), Enum(6, 'notPresent'), Enum(7, 'lowerLayerDown')]


class mplsTunnelRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 36])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class mplsTunnelStorageType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 37])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


class mplsTunnelHopListIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 1])
	syntaxobject = MplsPathIndex


class mplsTunnelHopPathOptionIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 2])
	syntaxobject = MplsPathIndex


class mplsTunnelHopIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 3])
	syntaxobject = MplsPathIndex


class mplsTunnelHopAddrType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 4])
	syntaxobject = TeHopAddressType


class mplsTunnelHopIpAddr(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 5])
	syntaxobject = TeHopAddress


class mplsTunnelHopIpPrefixLen(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 6])
	syntaxobject = InetAddressPrefixLength


class mplsTunnelHopAsNumber(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 7])
	syntaxobject = TeHopAddressAS


class mplsTunnelHopAddrUnnum(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 8])
	syntaxobject = TeHopAddressUnnum


class mplsTunnelHopLspId(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 9])
	syntaxobject = MplsLSPID


class mplsTunnelHopType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'strict'), Enum(2, 'loose')]


class mplsTunnelHopInclude(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class mplsTunnelHopPathOptionName(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 12])
	syntaxobject = SnmpAdminString


class mplsTunnelHopEntryPathComp(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'dynamic'), Enum(2, 'explicit')]


class mplsTunnelHopRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class mplsTunnelHopStorageType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


class mplsTunnelResourceIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 6, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class mplsTunnelResourceMaxRate(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 6, 1, 2])
	syntaxobject = MplsBitRate
	access = 5
	units = 'kilobits per second'


class mplsTunnelResourceMeanRate(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 6, 1, 3])
	syntaxobject = MplsBitRate
	access = 5
	units = 'kilobits per second'


class mplsTunnelResourceMaxBurstSize(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 6, 1, 4])
	syntaxobject = MplsBurstSize
	access = 5
	units = 'bytes'


class mplsTunnelResourceMeanBurstSize(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 6, 1, 5])
	syntaxobject = MplsBurstSize
	access = 5
	units = 'bytes'


class mplsTunnelResourceExBurstSize(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 6, 1, 6])
	syntaxobject = MplsBurstSize
	access = 5
	units = 'bytes'


class mplsTunnelResourceFrequency(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 6, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'unspecified'), Enum(2, 'frequent'), Enum(3, 'veryFrequent')]


class mplsTunnelResourceWeight(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 6, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class mplsTunnelResourceRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 6, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class mplsTunnelResourceStorageType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 6, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


class mplsTunnelARHopListIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 7, 1, 1])
	syntaxobject = MplsPathIndex


class mplsTunnelARHopIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 7, 1, 2])
	syntaxobject = MplsPathIndex


class mplsTunnelARHopAddrType(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 7, 1, 3])
	syntaxobject = TeHopAddressType


class mplsTunnelARHopIpAddr(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 7, 1, 4])
	syntaxobject = TeHopAddress


class mplsTunnelARHopAddrUnnum(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 7, 1, 5])
	syntaxobject = TeHopAddressUnnum


class mplsTunnelARHopLspId(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 7, 1, 6])
	syntaxobject = MplsLSPID


class mplsTunnelCHopListIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 8, 1, 1])
	syntaxobject = MplsPathIndex


class mplsTunnelCHopIndex(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 8, 1, 2])
	syntaxobject = MplsPathIndex


class mplsTunnelCHopAddrType(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 8, 1, 3])
	syntaxobject = TeHopAddressType


class mplsTunnelCHopIpAddr(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 8, 1, 4])
	syntaxobject = TeHopAddress


class mplsTunnelCHopIpPrefixLen(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 8, 1, 5])
	syntaxobject = InetAddressPrefixLength


class mplsTunnelCHopAsNumber(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 8, 1, 6])
	syntaxobject = TeHopAddressAS


class mplsTunnelCHopAddrUnnum(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 8, 1, 7])
	syntaxobject = TeHopAddressUnnum


class mplsTunnelCHopLspId(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 8, 1, 8])
	syntaxobject = MplsLSPID


class mplsTunnelCHopType(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 8, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'strict'), Enum(2, 'loose')]


class mplsTunnelPerfPackets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 9, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class mplsTunnelPerfHCPackets(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 9, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class mplsTunnelPerfErrors(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 9, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class mplsTunnelPerfBytes(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 9, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class mplsTunnelPerfHCBytes(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 9, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter64


class mplsTunnelCRLDPResMeanBurstSize(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 10, 1, 1])
	syntaxobject = MplsBurstSize
	access = 5
	units = 'bytes'


class mplsTunnelCRLDPResExBurstSize(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 10, 1, 2])
	syntaxobject = MplsBurstSize
	access = 5
	units = 'bytes'


class mplsTunnelCRLDPResFrequency(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 10, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'unspecified'), Enum(2, 'frequent'), Enum(3, 'veryFrequent')]


class mplsTunnelCRLDPResWeight(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 10, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class mplsTunnelCRLDPResFlags(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 10, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class mplsTunnelCRLDPResRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 10, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class mplsTunnelCRLDPResStorageType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 10, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


# rows 
class mplsTunnelEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([mplsTunnelIndex, mplsTunnelInstance, mplsTunnelIngressLSRId, mplsTunnelEgressLSRId], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1])
	access = 2
	rowstatus = mplsTunnelRowStatus
	columns = {'mplsTunnelIndex': mplsTunnelIndex, 'mplsTunnelInstance': mplsTunnelInstance, 'mplsTunnelIngressLSRId': mplsTunnelIngressLSRId, 'mplsTunnelEgressLSRId': mplsTunnelEgressLSRId, 'mplsTunnelName': mplsTunnelName, 'mplsTunnelDescr': mplsTunnelDescr, 'mplsTunnelIsIf': mplsTunnelIsIf, 'mplsTunnelIfIndex': mplsTunnelIfIndex, 'mplsTunnelOwner': mplsTunnelOwner, 'mplsTunnelRole': mplsTunnelRole, 'mplsTunnelXCPointer': mplsTunnelXCPointer, 'mplsTunnelSignallingProto': mplsTunnelSignallingProto, 'mplsTunnelSetupPrio': mplsTunnelSetupPrio, 'mplsTunnelHoldingPrio': mplsTunnelHoldingPrio, 'mplsTunnelSessionAttributes': mplsTunnelSessionAttributes, 'mplsTunnelLocalProtectInUse': mplsTunnelLocalProtectInUse, 'mplsTunnelResourcePointer': mplsTunnelResourcePointer, 'mplsTunnelPrimaryInstance': mplsTunnelPrimaryInstance, 'mplsTunnelInstancePriority': mplsTunnelInstancePriority, 'mplsTunnelHopTableIndex': mplsTunnelHopTableIndex, 'mplsTunnelPathInUse': mplsTunnelPathInUse, 'mplsTunnelARHopTableIndex': mplsTunnelARHopTableIndex, 'mplsTunnelCHopTableIndex': mplsTunnelCHopTableIndex, 'mplsTunnelIncludeAnyAffinity': mplsTunnelIncludeAnyAffinity, 'mplsTunnelIncludeAllAffinity': mplsTunnelIncludeAllAffinity, 'mplsTunnelExcludeAnyAffinity': mplsTunnelExcludeAnyAffinity, 'mplsTunnelTotalUpTime': mplsTunnelTotalUpTime, 'mplsTunnelInstanceUpTime': mplsTunnelInstanceUpTime, 'mplsTunnelPrimaryUpTime': mplsTunnelPrimaryUpTime, 'mplsTunnelPathChanges': mplsTunnelPathChanges, 'mplsTunnelLastPathChange': mplsTunnelLastPathChange, 'mplsTunnelCreationTime': mplsTunnelCreationTime, 'mplsTunnelStateTransitions': mplsTunnelStateTransitions, 'mplsTunnelAdminStatus': mplsTunnelAdminStatus, 'mplsTunnelOperStatus': mplsTunnelOperStatus, 'mplsTunnelRowStatus': mplsTunnelRowStatus, 'mplsTunnelStorageType': mplsTunnelStorageType}


class mplsTunnelHopEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([mplsTunnelHopListIndex, mplsTunnelHopPathOptionIndex, mplsTunnelHopIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1])
	access = 2
	rowstatus = mplsTunnelHopRowStatus
	columns = {'mplsTunnelHopListIndex': mplsTunnelHopListIndex, 'mplsTunnelHopPathOptionIndex': mplsTunnelHopPathOptionIndex, 'mplsTunnelHopIndex': mplsTunnelHopIndex, 'mplsTunnelHopAddrType': mplsTunnelHopAddrType, 'mplsTunnelHopIpAddr': mplsTunnelHopIpAddr, 'mplsTunnelHopIpPrefixLen': mplsTunnelHopIpPrefixLen, 'mplsTunnelHopAsNumber': mplsTunnelHopAsNumber, 'mplsTunnelHopAddrUnnum': mplsTunnelHopAddrUnnum, 'mplsTunnelHopLspId': mplsTunnelHopLspId, 'mplsTunnelHopType': mplsTunnelHopType, 'mplsTunnelHopInclude': mplsTunnelHopInclude, 'mplsTunnelHopPathOptionName': mplsTunnelHopPathOptionName, 'mplsTunnelHopEntryPathComp': mplsTunnelHopEntryPathComp, 'mplsTunnelHopRowStatus': mplsTunnelHopRowStatus, 'mplsTunnelHopStorageType': mplsTunnelHopStorageType}


class mplsTunnelResourceEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([mplsTunnelResourceIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 6, 1])
	access = 2
	rowstatus = mplsTunnelResourceRowStatus
	columns = {'mplsTunnelResourceIndex': mplsTunnelResourceIndex, 'mplsTunnelResourceMaxRate': mplsTunnelResourceMaxRate, 'mplsTunnelResourceMeanRate': mplsTunnelResourceMeanRate, 'mplsTunnelResourceMaxBurstSize': mplsTunnelResourceMaxBurstSize, 'mplsTunnelResourceMeanBurstSize': mplsTunnelResourceMeanBurstSize, 'mplsTunnelResourceExBurstSize': mplsTunnelResourceExBurstSize, 'mplsTunnelResourceFrequency': mplsTunnelResourceFrequency, 'mplsTunnelResourceWeight': mplsTunnelResourceWeight, 'mplsTunnelResourceRowStatus': mplsTunnelResourceRowStatus, 'mplsTunnelResourceStorageType': mplsTunnelResourceStorageType}


class mplsTunnelARHopEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([mplsTunnelARHopListIndex, mplsTunnelARHopIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 7, 1])
	access = 2
	columns = {'mplsTunnelARHopListIndex': mplsTunnelARHopListIndex, 'mplsTunnelARHopIndex': mplsTunnelARHopIndex, 'mplsTunnelARHopAddrType': mplsTunnelARHopAddrType, 'mplsTunnelARHopIpAddr': mplsTunnelARHopIpAddr, 'mplsTunnelARHopAddrUnnum': mplsTunnelARHopAddrUnnum, 'mplsTunnelARHopLspId': mplsTunnelARHopLspId}


class mplsTunnelCHopEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([mplsTunnelCHopListIndex, mplsTunnelCHopIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 8, 1])
	access = 2
	columns = {'mplsTunnelCHopListIndex': mplsTunnelCHopListIndex, 'mplsTunnelCHopIndex': mplsTunnelCHopIndex, 'mplsTunnelCHopAddrType': mplsTunnelCHopAddrType, 'mplsTunnelCHopIpAddr': mplsTunnelCHopIpAddr, 'mplsTunnelCHopIpPrefixLen': mplsTunnelCHopIpPrefixLen, 'mplsTunnelCHopAsNumber': mplsTunnelCHopAsNumber, 'mplsTunnelCHopAddrUnnum': mplsTunnelCHopAddrUnnum, 'mplsTunnelCHopLspId': mplsTunnelCHopLspId, 'mplsTunnelCHopType': mplsTunnelCHopType}


from MPLS_TE_STD_MIB import mplsTunnelIndex
from MPLS_TE_STD_MIB import mplsTunnelInstance
from MPLS_TE_STD_MIB import mplsTunnelIngressLSRId
from MPLS_TE_STD_MIB import mplsTunnelEgressLSRId
class mplsTunnelPerfEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([mplsTunnelIndex, mplsTunnelInstance, mplsTunnelIngressLSRId, mplsTunnelEgressLSRId], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 9, 1])
	access = 2
	columns = {'mplsTunnelPerfPackets': mplsTunnelPerfPackets, 'mplsTunnelPerfHCPackets': mplsTunnelPerfHCPackets, 'mplsTunnelPerfErrors': mplsTunnelPerfErrors, 'mplsTunnelPerfBytes': mplsTunnelPerfBytes, 'mplsTunnelPerfHCBytes': mplsTunnelPerfHCBytes}


class mplsTunnelCRLDPResEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([mplsTunnelResourceIndex], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 10, 1])
	access = 2
	rowstatus = mplsTunnelCRLDPResRowStatus
	columns = {'mplsTunnelCRLDPResMeanBurstSize': mplsTunnelCRLDPResMeanBurstSize, 'mplsTunnelCRLDPResExBurstSize': mplsTunnelCRLDPResExBurstSize, 'mplsTunnelCRLDPResFrequency': mplsTunnelCRLDPResFrequency, 'mplsTunnelCRLDPResWeight': mplsTunnelCRLDPResWeight, 'mplsTunnelCRLDPResFlags': mplsTunnelCRLDPResFlags, 'mplsTunnelCRLDPResRowStatus': mplsTunnelCRLDPResRowStatus, 'mplsTunnelCRLDPResStorageType': mplsTunnelCRLDPResStorageType}


# notifications (traps) 
class mplsTunnelUp(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 0, 1])

class mplsTunnelDown(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 0, 2])

class mplsTunnelRerouted(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 0, 3])

class mplsTunnelReoptimized(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 0, 4])

# groups 
class mplsTunnelGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 3, 1, 1])
	group = [mplsTunnelIndexNext, mplsTunnelName, mplsTunnelDescr, mplsTunnelOwner, mplsTunnelXCPointer, mplsTunnelIfIndex, mplsTunnelHopTableIndex, mplsTunnelARHopTableIndex, mplsTunnelCHopTableIndex, mplsTunnelAdminStatus, mplsTunnelOperStatus, mplsTunnelRowStatus, mplsTunnelNotificationEnable, mplsTunnelStorageType, mplsTunnelConfigured, mplsTunnelActive, mplsTunnelPrimaryInstance, mplsTunnelPrimaryUpTime, mplsTunnelPathChanges, mplsTunnelLastPathChange, mplsTunnelCreationTime, mplsTunnelStateTransitions, mplsTunnelIncludeAnyAffinity, mplsTunnelIncludeAllAffinity, mplsTunnelExcludeAnyAffinity, mplsTunnelPerfPackets, mplsTunnelPerfHCPackets, mplsTunnelPerfErrors, mplsTunnelPerfBytes, mplsTunnelPerfHCBytes, mplsTunnelResourcePointer, mplsTunnelInstancePriority, mplsTunnelPathInUse, mplsTunnelRole, mplsTunnelTotalUpTime, mplsTunnelInstanceUpTime, mplsTunnelResourceIndexNext, mplsTunnelResourceMaxRate, mplsTunnelResourceMeanRate, mplsTunnelResourceMaxBurstSize, mplsTunnelResourceMeanBurstSize, mplsTunnelResourceExBurstSize, mplsTunnelResourceFrequency, mplsTunnelResourceWeight, mplsTunnelResourceRowStatus, mplsTunnelResourceStorageType, mplsTunnelARHopAddrType, mplsTunnelARHopIpAddr, mplsTunnelARHopAddrUnnum, mplsTunnelARHopLspId, mplsTunnelCHopAddrType, mplsTunnelCHopIpAddr, mplsTunnelCHopIpPrefixLen, mplsTunnelCHopAsNumber, mplsTunnelCHopAddrUnnum, mplsTunnelCHopLspId, mplsTunnelCHopType]

class mplsTunnelManualGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 3, 1, 2])
	group = [mplsTunnelSignallingProto]

class mplsTunnelSignaledGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 3, 1, 3])
	group = [mplsTunnelSetupPrio, mplsTunnelHoldingPrio, mplsTunnelSignallingProto, mplsTunnelLocalProtectInUse, mplsTunnelSessionAttributes, mplsTunnelHopListIndexNext, mplsTunnelHopAddrType, mplsTunnelHopIpAddr, mplsTunnelHopIpPrefixLen, mplsTunnelHopAddrUnnum, mplsTunnelHopAsNumber, mplsTunnelHopLspId, mplsTunnelHopType, mplsTunnelHopInclude, mplsTunnelHopPathOptionName, mplsTunnelHopEntryPathComp, mplsTunnelHopRowStatus, mplsTunnelHopStorageType]

class mplsTunnelScalarGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 3, 1, 4])
	group = [mplsTunnelConfigured, mplsTunnelActive, mplsTunnelTEDistProto, mplsTunnelMaxHops, mplsTunnelNotificationMaxRate]

class mplsTunnelIsIntfcGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 3, 1, 5])
	group = [mplsTunnelIsIf]

class mplsTunnelIsNotIntfcGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 3, 1, 6])
	group = [mplsTunnelIsIf]

class mplsTunnelCRLDPResOptionalGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 3, 1, 7])
	group = [mplsTunnelCRLDPResMeanBurstSize, mplsTunnelCRLDPResExBurstSize, mplsTunnelCRLDPResFrequency, mplsTunnelCRLDPResWeight, mplsTunnelCRLDPResFlags, mplsTunnelCRLDPResRowStatus, mplsTunnelCRLDPResStorageType]

class mplsTeNotificationGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 166, 3, 3, 1, 8])
	group = [mplsTunnelUp, mplsTunnelDown, mplsTunnelRerouted, mplsTunnelReoptimized]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
