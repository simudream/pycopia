# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from CISCO_SMI import ciscoMgmt
from SNMPv2_TC import RowStatus, TruthValue
from CISCO_TC import Unsigned32

class CISCO_ATM_PVC_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/site/CISCO-ATM-PVC-MIB'
	name = 'CISCO-ATM-PVC-MIB'
	language = 2
	description = " PVC's (Permanent Virtual Channel)\ncan carry bridged PDUs (BPDUs)\nusing the encapsulation method \ndetailed in RFC1483. This is an \nalternative to using LAN Emulation \nto transfer BPDUs.\nThis MIB allows users to configure \na PVC on an ATM uplink card of a \n\t  Catalyst 5000 device, and then bind \n\t  that PVC to a Virtual LAN (VLAN). "

# nodes
class ciscoAtmPvcMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 94])
	name = 'ciscoAtmPvcMIB'

class ciscoAtmPvcMIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 94, 1])
	name = 'ciscoAtmPvcMIBObjects'

class ciscoAtmPvcCreateBindGroup(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 94, 1, 1])
	name = 'ciscoAtmPvcCreateBindGroup'

class ciscoAtmPvcMIBConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 94, 3])
	name = 'ciscoAtmPvcMIBConformance'

class ciscoAtmPvcMIBCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 94, 3, 1])
	name = 'ciscoAtmPvcMIBCompliances'

class ciscoAtmPvcMIBGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 94, 3, 2])
	name = 'ciscoAtmPvcMIBGroups'


# macros
# types 
# scalars 
# columns
class capvcPort(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 94, 1, 1, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class capvcVPI(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 94, 1, 1, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class capvcVCI(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 94, 1, 1, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class capvcVCD(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 94, 1, 1, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class capvcType(ColumnObject):
	status = 1
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 94, 1, 1, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'aal5snap'), Enum(2, 'ilmi'), Enum(3, 'qsaal')]


class capvcPCR(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 94, 1, 1, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32
	access = 5
	units = 'kbps'


class capvcOAM(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 94, 1, 1, 1, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.TruthValue


class capvcFrequency(ColumnObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 94, 1, 1, 1, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32
	access = 5
	units = 'seconds'


class capvcVlanId(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 94, 1, 1, 1, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Unsigned32


class capvcRowStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 94, 1, 1, 1, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


# rows 
class capvcEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([capvcPort, capvcVPI, capvcVCI], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 94, 1, 1, 1, 1])
	access = 2
	rowstatus = capvcRowStatus
	columns = {'capvcPort': capvcPort, 'capvcVPI': capvcVPI, 'capvcVCI': capvcVCI, 'capvcVCD': capvcVCD, 'capvcType': capvcType, 'capvcPCR': capvcPCR, 'capvcOAM': capvcOAM, 'capvcFrequency': capvcFrequency, 'capvcVlanId': capvcVlanId, 'capvcRowStatus': capvcRowStatus}


# notifications (traps) 
# groups 
class ciscoAtmPvcMIBGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 4, 1, 9, 9, 94, 3, 2, 1])
	group = [capvcVCD, capvcType, capvcPCR, capvcOAM, capvcFrequency, capvcVlanId, capvcRowStatus]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
