# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from RFC1381_MIB import PositiveInteger, IfIndexType
from RFC1155_SMI import Counter, Gauge, TimeTicks
from RFC_1212 import OBJECT_TYPE
from RFC1271_MIB import EntryStatus
from RFC_1215 import TRAP_TYPE
from RFC1213_MIB import DisplayString, transmission

class RFC1382_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/RFC1382-MIB'
	conformance = 4
	name = 'RFC1382-MIB'
	language = 1

# nodes
class x25(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5])
	name = 'x25'

class x25ProtocolVersion(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 10])
	name = 'x25ProtocolVersion'

class x25protocolCcittV1976(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 10, 1])
	name = 'x25protocolCcittV1976'

class x25protocolCcittV1980(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 10, 2])
	name = 'x25protocolCcittV1980'

class x25protocolCcittV1984(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 10, 3])
	name = 'x25protocolCcittV1984'

class x25protocolCcittV1988(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 10, 4])
	name = 'x25protocolCcittV1988'

class x25protocolIso8208V1987(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 10, 5])
	name = 'x25protocolIso8208V1987'

class x25protocolIso8208V1989(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 10, 6])
	name = 'x25protocolIso8208V1989'


# macros
# types 

class X121Address(pycopia.SMI.Basetypes.OctetString):
	ranges = Ranges(Range(0, 17))

# scalars 
class x25ClearedCircuitEntriesRequested(ScalarObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 6])
	syntaxobject = PositiveInteger


class x25ClearedCircuitEntriesGranted(ScalarObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 7])
	syntaxobject = PositiveInteger


# columns
class x25AdmnIndex(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 1, 1, 1])
	syntaxobject = IfIndexType


class x25AdmnInterfaceMode(ColumnObject):
	status = 3
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'dte'), Enum(2, 'dce'), Enum(3, 'dxe')]


class x25AdmnMaxActiveCircuits(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 1, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class x25AdmnPacketSequencing(ColumnObject):
	status = 3
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'modulo8'), Enum(2, 'modulo128')]


class x25AdmnRestartTimer(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 1, 1, 5])
	syntaxobject = PositiveInteger


class x25AdmnCallTimer(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 1, 1, 6])
	syntaxobject = PositiveInteger


class x25AdmnResetTimer(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 1, 1, 7])
	syntaxobject = PositiveInteger


class x25AdmnClearTimer(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 1, 1, 8])
	syntaxobject = PositiveInteger


class x25AdmnWindowTimer(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 1, 1, 9])
	syntaxobject = PositiveInteger


class x25AdmnDataRxmtTimer(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 1, 1, 10])
	syntaxobject = PositiveInteger


class x25AdmnInterruptTimer(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 1, 1, 11])
	syntaxobject = PositiveInteger


class x25AdmnRejectTimer(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 1, 1, 12])
	syntaxobject = PositiveInteger


class x25AdmnRegistrationRequestTimer(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 1, 1, 13])
	syntaxobject = PositiveInteger


class x25AdmnMinimumRecallTimer(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 1, 1, 14])
	syntaxobject = PositiveInteger


class x25AdmnRestartCount(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 1, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class x25AdmnResetCount(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 1, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class x25AdmnClearCount(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 1, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class x25AdmnDataRxmtCount(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 1, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class x25AdmnRejectCount(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 1, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class x25AdmnRegistrationRequestCount(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 1, 1, 20])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class x25AdmnNumberPVCs(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 1, 1, 21])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class x25AdmnDefCallParamId(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 1, 1, 22])
	syntaxobject = pycopia.SMI.Basetypes.ObjectIdentifier


class x25AdmnLocalAddress(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 1, 1, 23])
	syntaxobject = X121Address


class x25AdmnProtocolVersionSupported(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 1, 1, 24])
	syntaxobject = pycopia.SMI.Basetypes.ObjectIdentifier


class x25OperIndex(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 2, 1, 1])
	syntaxobject = IfIndexType


class x25OperInterfaceMode(ColumnObject):
	status = 3
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'dte'), Enum(2, 'dce'), Enum(3, 'dxe')]


class x25OperMaxActiveCircuits(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 2, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class x25OperPacketSequencing(ColumnObject):
	status = 3
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'modulo8'), Enum(2, 'modulo128')]


class x25OperRestartTimer(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 2, 1, 5])
	syntaxobject = PositiveInteger


class x25OperCallTimer(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 2, 1, 6])
	syntaxobject = PositiveInteger


class x25OperResetTimer(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 2, 1, 7])
	syntaxobject = PositiveInteger


class x25OperClearTimer(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 2, 1, 8])
	syntaxobject = PositiveInteger


class x25OperWindowTimer(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 2, 1, 9])
	syntaxobject = PositiveInteger


class x25OperDataRxmtTimer(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 2, 1, 10])
	syntaxobject = PositiveInteger


class x25OperInterruptTimer(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 2, 1, 11])
	syntaxobject = PositiveInteger


class x25OperRejectTimer(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 2, 1, 12])
	syntaxobject = PositiveInteger


class x25OperRegistrationRequestTimer(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 2, 1, 13])
	syntaxobject = PositiveInteger


class x25OperMinimumRecallTimer(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 2, 1, 14])
	syntaxobject = PositiveInteger


class x25OperRestartCount(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 2, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class x25OperResetCount(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 2, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class x25OperClearCount(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 2, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class x25OperDataRxmtCount(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 2, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class x25OperRejectCount(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 2, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class x25OperRegistrationRequestCount(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 2, 1, 20])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class x25OperNumberPVCs(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 2, 1, 21])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class x25OperDefCallParamId(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 2, 1, 22])
	syntaxobject = pycopia.SMI.Basetypes.ObjectIdentifier


class x25OperLocalAddress(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 2, 1, 23])
	syntaxobject = X121Address


class x25OperDataLinkId(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 2, 1, 24])
	syntaxobject = pycopia.SMI.Basetypes.ObjectIdentifier


class x25OperProtocolVersionSupported(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 2, 1, 25])
	syntaxobject = pycopia.SMI.Basetypes.ObjectIdentifier


class x25StatIndex(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 3, 1, 1])
	syntaxobject = IfIndexType


class x25StatInCalls(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 3, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class x25StatInCallRefusals(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 3, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class x25StatInProviderInitiatedClears(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 3, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class x25StatInRemotelyInitiatedResets(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 3, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class x25StatInProviderInitiatedResets(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 3, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class x25StatInRestarts(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 3, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class x25StatInDataPackets(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 3, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class x25StatInAccusedOfProtocolErrors(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 3, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class x25StatInInterrupts(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 3, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class x25StatOutCallAttempts(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 3, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class x25StatOutCallFailures(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 3, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class x25StatOutInterrupts(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 3, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class x25StatOutDataPackets(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 3, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class x25StatOutgoingCircuits(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 3, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class x25StatIncomingCircuits(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 3, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class x25StatTwowayCircuits(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 3, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.Gauge32


class x25StatRestartTimeouts(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 3, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class x25StatCallTimeouts(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 3, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class x25StatResetTimeouts(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 3, 1, 20])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class x25StatClearTimeouts(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 3, 1, 21])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class x25StatDataRxmtTimeouts(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 3, 1, 22])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class x25StatInterruptTimeouts(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 3, 1, 23])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class x25StatRetryCountExceededs(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 3, 1, 24])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class x25StatClearCountExceededs(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 3, 1, 25])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class x25ChannelIndex(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 4, 1, 1])
	syntaxobject = IfIndexType


class x25ChannelLIC(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 4, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class x25ChannelHIC(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 4, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class x25ChannelLTC(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 4, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class x25ChannelHTC(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 4, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class x25ChannelLOC(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 4, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class x25ChannelHOC(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 4, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class x25CircuitIndex(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 5, 1, 1])
	syntaxobject = IfIndexType


class x25CircuitChannel(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 5, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class x25CircuitStatus(ColumnObject):
	status = 3
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 5, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'invalid'), Enum(2, 'closed'), Enum(3, 'calling'), Enum(4, 'open'), Enum(5, 'clearing'), Enum(6, 'pvc'), Enum(7, 'pvcResetting'), Enum(8, 'startClear'), Enum(9, 'startPvcResetting'), Enum(10, 'other')]


class x25CircuitEstablishTime(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 5, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class x25CircuitDirection(ColumnObject):
	status = 3
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 5, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'incoming'), Enum(2, 'outgoing'), Enum(3, 'pvc')]


class x25CircuitInOctets(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 5, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class x25CircuitInPdus(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 5, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class x25CircuitInRemotelyInitiatedResets(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 5, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class x25CircuitInProviderInitiatedResets(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 5, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class x25CircuitInInterrupts(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 5, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class x25CircuitOutOctets(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 5, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class x25CircuitOutPdus(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 5, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class x25CircuitOutInterrupts(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 5, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class x25CircuitDataRetransmissionTimeouts(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 5, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class x25CircuitResetTimeouts(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 5, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class x25CircuitInterruptTimeouts(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 5, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class x25CircuitCallParamId(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 5, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.ObjectIdentifier


class x25CircuitCalledDteAddress(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 5, 1, 18])
	syntaxobject = X121Address


class x25CircuitCallingDteAddress(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 5, 1, 19])
	syntaxobject = X121Address


class x25CircuitOriginallyCalledAddress(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 5, 1, 20])
	syntaxobject = X121Address


class x25CircuitDescr(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 5, 1, 21])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class x25ClearedCircuitIndex(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 8, 1, 1])
	syntaxobject = PositiveInteger


class x25ClearedCircuitPleIndex(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 8, 1, 2])
	syntaxobject = IfIndexType


class x25ClearedCircuitTimeEstablished(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 8, 1, 3])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class x25ClearedCircuitTimeCleared(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 8, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.TimeTicks


class x25ClearedCircuitChannel(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 8, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class x25ClearedCircuitClearingCause(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 8, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class x25ClearedCircuitDiagnosticCode(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 8, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class x25ClearedCircuitInPdus(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 8, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class x25ClearedCircuitOutPdus(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 8, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Counter32


class x25ClearedCircuitCalledAddress(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 8, 1, 10])
	syntaxobject = X121Address


class x25ClearedCircuitCallingAddress(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 8, 1, 11])
	syntaxobject = X121Address


class x25ClearedCircuitClearFacilities(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 8, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class x25CallParmIndex(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 9, 1, 1])
	syntaxobject = PositiveInteger


class x25CallParmStatus(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 9, 1, 2])
	syntaxobject = EntryStatus


class x25CallParmRefCount(ColumnObject):
	access = 4
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 9, 1, 3])
	syntaxobject = PositiveInteger


class x25CallParmInPacketSize(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 9, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class x25CallParmOutPacketSize(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 9, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class x25CallParmInWindowSize(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 9, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class x25CallParmOutWindowSize(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 9, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class x25CallParmAcceptReverseCharging(ColumnObject):
	status = 3
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 9, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'default'), Enum(2, 'accept'), Enum(3, 'refuse'), Enum(4, 'neverAccept')]


class x25CallParmProposeReverseCharging(ColumnObject):
	status = 3
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 9, 1, 9])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'default'), Enum(2, 'reverse'), Enum(3, 'local')]


class x25CallParmFastSelect(ColumnObject):
	status = 3
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 9, 1, 10])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'default'), Enum(2, 'notSpecified'), Enum(3, 'fastSelect'), Enum(4, 'restrictedFastResponse'), Enum(5, 'noFastSelect'), Enum(6, 'noRestrictedFastResponse')]


class x25CallParmInThruPutClasSize(ColumnObject):
	status = 3
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 9, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'tcReserved1'), Enum(2, 'tcReserved2'), Enum(3, 'tc75'), Enum(4, 'tc150'), Enum(5, 'tc300'), Enum(6, 'tc600'), Enum(7, 'tc1200'), Enum(8, 'tc2400'), Enum(9, 'tc4800'), Enum(10, 'tc9600'), Enum(11, 'tc19200'), Enum(12, 'tc48000'), Enum(13, 'tc64000'), Enum(14, 'tcReserved14'), Enum(15, 'tcReserved15'), Enum(16, 'tcReserved0'), Enum(17, 'tcNone'), Enum(18, 'tcDefault')]


class x25CallParmOutThruPutClasSize(ColumnObject):
	status = 3
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 9, 1, 12])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'tcReserved1'), Enum(2, 'tcReserved2'), Enum(3, 'tc75'), Enum(4, 'tc150'), Enum(5, 'tc300'), Enum(6, 'tc600'), Enum(7, 'tc1200'), Enum(8, 'tc2400'), Enum(9, 'tc4800'), Enum(10, 'tc9600'), Enum(11, 'tc19200'), Enum(12, 'tc48000'), Enum(13, 'tc64000'), Enum(14, 'tcReserved14'), Enum(15, 'tcReserved15'), Enum(16, 'tcReserved0'), Enum(17, 'tcNone'), Enum(18, 'tcDefault')]


class x25CallParmCug(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 9, 1, 13])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class x25CallParmCugoa(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 9, 1, 14])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class x25CallParmBcug(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 9, 1, 15])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class x25CallParmNui(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 9, 1, 16])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class x25CallParmChargingInfo(ColumnObject):
	status = 3
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 9, 1, 17])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'default'), Enum(2, 'noFacility'), Enum(3, 'noChargingInfo'), Enum(4, 'chargingInfo')]


class x25CallParmRpoa(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 9, 1, 18])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class x25CallParmTrnstDly(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 9, 1, 19])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class x25CallParmCallingExt(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 9, 1, 20])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class x25CallParmCalledExt(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 9, 1, 21])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class x25CallParmInMinThuPutCls(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 9, 1, 22])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class x25CallParmOutMinThuPutCls(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 9, 1, 23])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class x25CallParmEndTrnsDly(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 9, 1, 24])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class x25CallParmPriority(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 9, 1, 25])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class x25CallParmProtection(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 9, 1, 26])
	syntaxobject = pycopia.SMI.Basetypes.DisplayString


class x25CallParmExptData(ColumnObject):
	status = 3
	access = 5
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 9, 1, 27])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'default'), Enum(2, 'noExpeditedData'), Enum(3, 'expeditedData')]


class x25CallParmUserData(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 9, 1, 28])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class x25CallParmCallingNetworkFacilities(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 9, 1, 29])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


class x25CallParmCalledNetworkFacilities(ColumnObject):
	access = 5
	status = 3
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 9, 1, 30])
	syntaxobject = pycopia.SMI.Basetypes.OctetString


# rows 
class x25AdmnEntry(RowObject):
	status = 3
	index = pycopia.SMI.Objects.IndexObjects([x25AdmnIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 1, 1])
	access = 2
	columns = {'x25AdmnIndex': x25AdmnIndex, 'x25AdmnInterfaceMode': x25AdmnInterfaceMode, 'x25AdmnMaxActiveCircuits': x25AdmnMaxActiveCircuits, 'x25AdmnPacketSequencing': x25AdmnPacketSequencing, 'x25AdmnRestartTimer': x25AdmnRestartTimer, 'x25AdmnCallTimer': x25AdmnCallTimer, 'x25AdmnResetTimer': x25AdmnResetTimer, 'x25AdmnClearTimer': x25AdmnClearTimer, 'x25AdmnWindowTimer': x25AdmnWindowTimer, 'x25AdmnDataRxmtTimer': x25AdmnDataRxmtTimer, 'x25AdmnInterruptTimer': x25AdmnInterruptTimer, 'x25AdmnRejectTimer': x25AdmnRejectTimer, 'x25AdmnRegistrationRequestTimer': x25AdmnRegistrationRequestTimer, 'x25AdmnMinimumRecallTimer': x25AdmnMinimumRecallTimer, 'x25AdmnRestartCount': x25AdmnRestartCount, 'x25AdmnResetCount': x25AdmnResetCount, 'x25AdmnClearCount': x25AdmnClearCount, 'x25AdmnDataRxmtCount': x25AdmnDataRxmtCount, 'x25AdmnRejectCount': x25AdmnRejectCount, 'x25AdmnRegistrationRequestCount': x25AdmnRegistrationRequestCount, 'x25AdmnNumberPVCs': x25AdmnNumberPVCs, 'x25AdmnDefCallParamId': x25AdmnDefCallParamId, 'x25AdmnLocalAddress': x25AdmnLocalAddress, 'x25AdmnProtocolVersionSupported': x25AdmnProtocolVersionSupported}


class x25OperEntry(RowObject):
	status = 3
	index = pycopia.SMI.Objects.IndexObjects([x25OperIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 2, 1])
	access = 2
	columns = {'x25OperIndex': x25OperIndex, 'x25OperInterfaceMode': x25OperInterfaceMode, 'x25OperMaxActiveCircuits': x25OperMaxActiveCircuits, 'x25OperPacketSequencing': x25OperPacketSequencing, 'x25OperRestartTimer': x25OperRestartTimer, 'x25OperCallTimer': x25OperCallTimer, 'x25OperResetTimer': x25OperResetTimer, 'x25OperClearTimer': x25OperClearTimer, 'x25OperWindowTimer': x25OperWindowTimer, 'x25OperDataRxmtTimer': x25OperDataRxmtTimer, 'x25OperInterruptTimer': x25OperInterruptTimer, 'x25OperRejectTimer': x25OperRejectTimer, 'x25OperRegistrationRequestTimer': x25OperRegistrationRequestTimer, 'x25OperMinimumRecallTimer': x25OperMinimumRecallTimer, 'x25OperRestartCount': x25OperRestartCount, 'x25OperResetCount': x25OperResetCount, 'x25OperClearCount': x25OperClearCount, 'x25OperDataRxmtCount': x25OperDataRxmtCount, 'x25OperRejectCount': x25OperRejectCount, 'x25OperRegistrationRequestCount': x25OperRegistrationRequestCount, 'x25OperNumberPVCs': x25OperNumberPVCs, 'x25OperDefCallParamId': x25OperDefCallParamId, 'x25OperLocalAddress': x25OperLocalAddress, 'x25OperDataLinkId': x25OperDataLinkId, 'x25OperProtocolVersionSupported': x25OperProtocolVersionSupported}


class x25StatEntry(RowObject):
	status = 3
	index = pycopia.SMI.Objects.IndexObjects([x25StatIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 3, 1])
	access = 2
	columns = {'x25StatIndex': x25StatIndex, 'x25StatInCalls': x25StatInCalls, 'x25StatInCallRefusals': x25StatInCallRefusals, 'x25StatInProviderInitiatedClears': x25StatInProviderInitiatedClears, 'x25StatInRemotelyInitiatedResets': x25StatInRemotelyInitiatedResets, 'x25StatInProviderInitiatedResets': x25StatInProviderInitiatedResets, 'x25StatInRestarts': x25StatInRestarts, 'x25StatInDataPackets': x25StatInDataPackets, 'x25StatInAccusedOfProtocolErrors': x25StatInAccusedOfProtocolErrors, 'x25StatInInterrupts': x25StatInInterrupts, 'x25StatOutCallAttempts': x25StatOutCallAttempts, 'x25StatOutCallFailures': x25StatOutCallFailures, 'x25StatOutInterrupts': x25StatOutInterrupts, 'x25StatOutDataPackets': x25StatOutDataPackets, 'x25StatOutgoingCircuits': x25StatOutgoingCircuits, 'x25StatIncomingCircuits': x25StatIncomingCircuits, 'x25StatTwowayCircuits': x25StatTwowayCircuits, 'x25StatRestartTimeouts': x25StatRestartTimeouts, 'x25StatCallTimeouts': x25StatCallTimeouts, 'x25StatResetTimeouts': x25StatResetTimeouts, 'x25StatClearTimeouts': x25StatClearTimeouts, 'x25StatDataRxmtTimeouts': x25StatDataRxmtTimeouts, 'x25StatInterruptTimeouts': x25StatInterruptTimeouts, 'x25StatRetryCountExceededs': x25StatRetryCountExceededs, 'x25StatClearCountExceededs': x25StatClearCountExceededs}


class x25ChannelEntry(RowObject):
	status = 3
	index = pycopia.SMI.Objects.IndexObjects([x25ChannelIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 4, 1])
	access = 2
	columns = {'x25ChannelIndex': x25ChannelIndex, 'x25ChannelLIC': x25ChannelLIC, 'x25ChannelHIC': x25ChannelHIC, 'x25ChannelLTC': x25ChannelLTC, 'x25ChannelHTC': x25ChannelHTC, 'x25ChannelLOC': x25ChannelLOC, 'x25ChannelHOC': x25ChannelHOC}


class x25CircuitEntry(RowObject):
	status = 3
	index = pycopia.SMI.Objects.IndexObjects([x25CircuitIndex, x25CircuitChannel], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 5, 1])
	access = 2
	columns = {'x25CircuitIndex': x25CircuitIndex, 'x25CircuitChannel': x25CircuitChannel, 'x25CircuitStatus': x25CircuitStatus, 'x25CircuitEstablishTime': x25CircuitEstablishTime, 'x25CircuitDirection': x25CircuitDirection, 'x25CircuitInOctets': x25CircuitInOctets, 'x25CircuitInPdus': x25CircuitInPdus, 'x25CircuitInRemotelyInitiatedResets': x25CircuitInRemotelyInitiatedResets, 'x25CircuitInProviderInitiatedResets': x25CircuitInProviderInitiatedResets, 'x25CircuitInInterrupts': x25CircuitInInterrupts, 'x25CircuitOutOctets': x25CircuitOutOctets, 'x25CircuitOutPdus': x25CircuitOutPdus, 'x25CircuitOutInterrupts': x25CircuitOutInterrupts, 'x25CircuitDataRetransmissionTimeouts': x25CircuitDataRetransmissionTimeouts, 'x25CircuitResetTimeouts': x25CircuitResetTimeouts, 'x25CircuitInterruptTimeouts': x25CircuitInterruptTimeouts, 'x25CircuitCallParamId': x25CircuitCallParamId, 'x25CircuitCalledDteAddress': x25CircuitCalledDteAddress, 'x25CircuitCallingDteAddress': x25CircuitCallingDteAddress, 'x25CircuitOriginallyCalledAddress': x25CircuitOriginallyCalledAddress, 'x25CircuitDescr': x25CircuitDescr}


class x25ClearedCircuitEntry(RowObject):
	status = 3
	index = pycopia.SMI.Objects.IndexObjects([x25ClearedCircuitIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 8, 1])
	access = 2
	columns = {'x25ClearedCircuitIndex': x25ClearedCircuitIndex, 'x25ClearedCircuitPleIndex': x25ClearedCircuitPleIndex, 'x25ClearedCircuitTimeEstablished': x25ClearedCircuitTimeEstablished, 'x25ClearedCircuitTimeCleared': x25ClearedCircuitTimeCleared, 'x25ClearedCircuitChannel': x25ClearedCircuitChannel, 'x25ClearedCircuitClearingCause': x25ClearedCircuitClearingCause, 'x25ClearedCircuitDiagnosticCode': x25ClearedCircuitDiagnosticCode, 'x25ClearedCircuitInPdus': x25ClearedCircuitInPdus, 'x25ClearedCircuitOutPdus': x25ClearedCircuitOutPdus, 'x25ClearedCircuitCalledAddress': x25ClearedCircuitCalledAddress, 'x25ClearedCircuitCallingAddress': x25ClearedCircuitCallingAddress, 'x25ClearedCircuitClearFacilities': x25ClearedCircuitClearFacilities}


class x25CallParmEntry(RowObject):
	status = 3
	index = pycopia.SMI.Objects.IndexObjects([x25CallParmIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 9, 1])
	access = 2
	columns = {'x25CallParmIndex': x25CallParmIndex, 'x25CallParmStatus': x25CallParmStatus, 'x25CallParmRefCount': x25CallParmRefCount, 'x25CallParmInPacketSize': x25CallParmInPacketSize, 'x25CallParmOutPacketSize': x25CallParmOutPacketSize, 'x25CallParmInWindowSize': x25CallParmInWindowSize, 'x25CallParmOutWindowSize': x25CallParmOutWindowSize, 'x25CallParmAcceptReverseCharging': x25CallParmAcceptReverseCharging, 'x25CallParmProposeReverseCharging': x25CallParmProposeReverseCharging, 'x25CallParmFastSelect': x25CallParmFastSelect, 'x25CallParmInThruPutClasSize': x25CallParmInThruPutClasSize, 'x25CallParmOutThruPutClasSize': x25CallParmOutThruPutClasSize, 'x25CallParmCug': x25CallParmCug, 'x25CallParmCugoa': x25CallParmCugoa, 'x25CallParmBcug': x25CallParmBcug, 'x25CallParmNui': x25CallParmNui, 'x25CallParmChargingInfo': x25CallParmChargingInfo, 'x25CallParmRpoa': x25CallParmRpoa, 'x25CallParmTrnstDly': x25CallParmTrnstDly, 'x25CallParmCallingExt': x25CallParmCallingExt, 'x25CallParmCalledExt': x25CallParmCalledExt, 'x25CallParmInMinThuPutCls': x25CallParmInMinThuPutCls, 'x25CallParmOutMinThuPutCls': x25CallParmOutMinThuPutCls, 'x25CallParmEndTrnsDly': x25CallParmEndTrnsDly, 'x25CallParmPriority': x25CallParmPriority, 'x25CallParmProtection': x25CallParmProtection, 'x25CallParmExptData': x25CallParmExptData, 'x25CallParmUserData': x25CallParmUserData, 'x25CallParmCallingNetworkFacilities': x25CallParmCallingNetworkFacilities, 'x25CallParmCalledNetworkFacilities': x25CallParmCalledNetworkFacilities}


# notifications (traps) 
class x25Restart(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 0, 1])

class x25Reset(NotificationObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 5, 0, 2])

# groups 
# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
