# python
# This file is generated by a program (mib2py). Any edits will be lost.

from pycopia.aid import Enum
import pycopia.SMI.Basetypes
Range = pycopia.SMI.Basetypes.Range
Ranges = pycopia.SMI.Basetypes.Ranges

from pycopia.SMI.Objects import ColumnObject, MacroObject, NotificationObject, RowObject, ScalarObject, NodeObject, ModuleObject, GroupObject

# imports 
from SNMPv2_CONF import MODULE_COMPLIANCE, OBJECT_GROUP
from IF_MIB import ifIndex, InterfaceIndexOrZero
from IPV6_FLOW_LABEL_MIB import IPv6FlowLabelOrAny
from SNMPv2_SMI import MODULE_IDENTITY, OBJECT_TYPE, transmission, Integer32, IpAddress
from IANAifType_MIB import IANAtunnelType
from INET_ADDRESS_MIB import InetAddressType, InetAddress
from SNMPv2_TC import RowStatus, StorageType

class TUNNEL_MIB(ModuleObject):
	path = '/usr/share/snmp/mibs/ietf/TUNNEL-MIB'
	conformance = 5
	name = 'TUNNEL-MIB'
	language = 2
	description = 'The MIB module for management of IP Tunnels,\nindependent of the specific encapsulation scheme in\nuse.\n\nCopyright (C) The Internet Society (2005).  This\nversion of this MIB module is part of RFC 4087;  see\nthe RFC itself for full legal notices.'

# nodes
class tunnelMIB(NodeObject):
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 131])
	name = 'tunnelMIB'

class tunnelMIBObjects(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 131, 1])
	name = 'tunnelMIBObjects'

class tunnel(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 131, 1, 1])
	name = 'tunnel'

class tunnelMIBConformance(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 131, 2])
	name = 'tunnelMIBConformance'

class tunnelMIBCompliances(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 131, 2, 1])
	name = 'tunnelMIBCompliances'

class tunnelMIBGroups(NodeObject):
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 131, 2, 2])
	name = 'tunnelMIBGroups'


# macros
# types 
# scalars 
# columns
class tunnelIfLocalAddress(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 1, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class tunnelIfRemoteAddress(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 1, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class tunnelIfEncapsMethod(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 1, 1, 3])
	syntaxobject = IANAtunnelType


class tunnelIfHopLimit(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 1, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class tunnelIfSecurity(ColumnObject):
	status = 1
	access = 4
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 1, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Enumeration
	enumerations = [Enum(1, 'none'), Enum(2, 'ipsec'), Enum(3, 'other')]


class tunnelIfTOS(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 1, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class tunnelIfFlowLabel(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 1, 1, 7])
	syntaxobject = IPv6FlowLabelOrAny


class tunnelIfAddressType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 1, 1, 8])
	syntaxobject = InetAddressType


class tunnelIfLocalInetAddress(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 1, 1, 9])
	syntaxobject = InetAddress


class tunnelIfRemoteInetAddress(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 1, 1, 10])
	syntaxobject = InetAddress


class tunnelIfEncapsLimit(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 1, 1, 11])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class tunnelConfigLocalAddress(ColumnObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 2, 1, 1])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class tunnelConfigRemoteAddress(ColumnObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 2, 1, 2])
	syntaxobject = pycopia.SMI.Basetypes.IpAddress


class tunnelConfigEncapsMethod(ColumnObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 2, 1, 3])
	syntaxobject = IANAtunnelType


class tunnelConfigID(ColumnObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 2, 1, 4])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class tunnelConfigIfIndex(ColumnObject):
	access = 4
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 2, 1, 5])
	syntaxobject = InterfaceIndexOrZero


class tunnelConfigStatus(ColumnObject):
	access = 5
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 2, 1, 6])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class tunnelInetConfigAddressType(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 3, 1, 1])
	syntaxobject = InetAddressType


class tunnelInetConfigLocalAddress(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 3, 1, 2])
	syntaxobject = InetAddress


class tunnelInetConfigRemoteAddress(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 3, 1, 3])
	syntaxobject = InetAddress


class tunnelInetConfigEncapsMethod(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 3, 1, 4])
	syntaxobject = IANAtunnelType


class tunnelInetConfigID(ColumnObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 3, 1, 5])
	syntaxobject = pycopia.SMI.Basetypes.Integer32


class tunnelInetConfigIfIndex(ColumnObject):
	access = 4
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 3, 1, 6])
	syntaxobject = InterfaceIndexOrZero


class tunnelInetConfigStatus(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 3, 1, 7])
	syntaxobject = pycopia.SMI.Basetypes.RowStatus


class tunnelInetConfigStorageType(ColumnObject):
	access = 5
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 3, 1, 8])
	syntaxobject = pycopia.SMI.Basetypes.StorageType


# rows 
class tunnelIfEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([ifIndex], False)
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 1, 1])
	access = 2
	columns = {'tunnelIfLocalAddress': tunnelIfLocalAddress, 'tunnelIfRemoteAddress': tunnelIfRemoteAddress, 'tunnelIfEncapsMethod': tunnelIfEncapsMethod, 'tunnelIfHopLimit': tunnelIfHopLimit, 'tunnelIfSecurity': tunnelIfSecurity, 'tunnelIfTOS': tunnelIfTOS, 'tunnelIfFlowLabel': tunnelIfFlowLabel, 'tunnelIfAddressType': tunnelIfAddressType, 'tunnelIfLocalInetAddress': tunnelIfLocalInetAddress, 'tunnelIfRemoteInetAddress': tunnelIfRemoteInetAddress, 'tunnelIfEncapsLimit': tunnelIfEncapsLimit}


class tunnelConfigEntry(RowObject):
	status = 2
	index = pycopia.SMI.Objects.IndexObjects([tunnelConfigLocalAddress, tunnelConfigRemoteAddress, tunnelConfigEncapsMethod, tunnelConfigID], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 2, 1])
	access = 2
	rowstatus = tunnelConfigStatus
	columns = {'tunnelConfigLocalAddress': tunnelConfigLocalAddress, 'tunnelConfigRemoteAddress': tunnelConfigRemoteAddress, 'tunnelConfigEncapsMethod': tunnelConfigEncapsMethod, 'tunnelConfigID': tunnelConfigID, 'tunnelConfigIfIndex': tunnelConfigIfIndex, 'tunnelConfigStatus': tunnelConfigStatus}


class tunnelInetConfigEntry(RowObject):
	status = 1
	index = pycopia.SMI.Objects.IndexObjects([tunnelInetConfigAddressType, tunnelInetConfigLocalAddress, tunnelInetConfigRemoteAddress, tunnelInetConfigEncapsMethod, tunnelInetConfigID], False)
	create = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 131, 1, 1, 3, 1])
	access = 2
	rowstatus = tunnelInetConfigStatus
	columns = {'tunnelInetConfigAddressType': tunnelInetConfigAddressType, 'tunnelInetConfigLocalAddress': tunnelInetConfigLocalAddress, 'tunnelInetConfigRemoteAddress': tunnelInetConfigRemoteAddress, 'tunnelInetConfigEncapsMethod': tunnelInetConfigEncapsMethod, 'tunnelInetConfigID': tunnelInetConfigID, 'tunnelInetConfigIfIndex': tunnelInetConfigIfIndex, 'tunnelInetConfigStatus': tunnelInetConfigStatus, 'tunnelInetConfigStorageType': tunnelInetConfigStorageType}


# notifications (traps) 
# groups 
class tunnelMIBBasicGroup(GroupObject):
	access = 2
	status = 2
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 131, 2, 2, 1])
	group = [tunnelIfLocalAddress, tunnelIfRemoteAddress, tunnelIfEncapsMethod, tunnelIfHopLimit, tunnelIfTOS, tunnelIfSecurity, tunnelConfigIfIndex, tunnelConfigStatus]

class tunnelMIBInetGroup(GroupObject):
	access = 2
	status = 1
	OID = pycopia.SMI.Basetypes.ObjectIdentifier([1, 3, 6, 1, 2, 1, 10, 131, 2, 2, 2])
	group = [tunnelIfAddressType, tunnelIfLocalInetAddress, tunnelIfRemoteInetAddress, tunnelIfEncapsMethod, tunnelIfEncapsLimit, tunnelIfHopLimit, tunnelIfTOS, tunnelIfFlowLabel, tunnelIfSecurity, tunnelInetConfigIfIndex, tunnelInetConfigStatus, tunnelInetConfigStorageType]

# capabilities 

# special additions

# Add to master OIDMAP.
from pycopia import SMI
SMI.update_oidmap(__name__)
