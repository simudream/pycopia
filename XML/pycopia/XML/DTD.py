#!/usr/bin/python
# vim:ts=4:sw=4:softtabstop=0:smarttab
#
#    This library is free software; you can redistribute it and/or
#    modify it under the terms of the GNU Lesser General Public
#    License as published by the Free Software Foundation; either
#    version 2.1 of the License, or (at your option) any later version.
#
#    This library is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    Lesser General Public License for more details.

"""
Deals with DTD files. Primarily, provides the DTD parser and Python
"compiler".
"""

import sys, os

from pycopia import sourcegen
from pycopia.textutils import identifier

import pycopia.XML.POM
from pycopia.XML.POM import (ContentModel, XMLAttribute, AttributeList,
                             ElementNode, Notation, ValidationError,
                             ANY, PCDATA, EMPTY)

### DTD compiler components ###

def get_dtd_compiler(fo, mixinmodule=None, doctype=None):
    from xml.parsers.xmlproc.dtdparser import DTDParser
    generator = sourcegen.get_sourcefile(fo)
    dh = DTDConsumerForSourceGeneration(generator, mixinmodule, doctype)
    parser = DTDParser()
    parser.set_dtd_consumer(dh)
    return parser

# this DTD parser consumer generates the Python source code from the DTD.
class DTDConsumerForSourceGeneration(object):
    def __init__(self, generator, mixins=None, doctype=None):
        self.generator = generator
        self.elements = {}
        self.parameter_entities = {}
        self.general_entities = {}
        self._forwardattributes = {}
        self.mixins = mixins # should be a module object
        self.doctype = doctype

    def dtd_start(self):
        print "Starting to parse DTD...",
        self.generator.add_comment("This file generated by a program. do not edit.")
        self.generator.add_import(pycopia.XML.POM)
        if self.mixins:
            self.generator.add_import(self.mixins)

    def dtd_end(self):
        print "done parsing. Writing file."
        self.generator.add_instance("GENERAL_ENTITIES", self.general_entities)
        self.generator.write()

    def new_element_type(self, elem_name, elem_cont):
        "Receives the declaration of an element type."
        try:
            element = self.elements[elem_name]
        except KeyError:
            self.make_new_element(elem_name, elem_cont)

    def make_new_element(self, elem_name, contentmodel):
        parents = [ElementNode]
        mixinname = "%sMixin" % ( elem_name )
        if self.mixins and hasattr(self.mixins, mixinname):
            parents.insert(0, getattr(self.mixins, mixinname))
        # class name is capitalized to avoid clashes with Python key words.
        ch = self.generator.add_class(identifier(elem_name), tuple(parents))
        ch.add_attribute("_name", elem_name)
        ch.add_attribute("CONTENTMODEL", _ContentModelGenerator(contentmodel))
        self.elements[elem_name] = ch
        # add any previously seen attributes
        try:
            fwdlist = self._forwardattributes[elem_name]
        except KeyError:
            pass
        else:
            ch.add_attribute("ATTLIST", fwdlist)
            del self._forwardattributes[elem_name]
        # identify the root element with a generic name (Root).
        if self.doctype and elem_name.lower() == self.doctype.name.lower():
            self.generator.add_code("\nRoot = %s\n" % (identifier(elem_name),))

    def new_attribute(self, elem, a_name, a_type, a_decl, a_def):
        "Receives the declaration of a new attribute."
        attr = XMLAttribute(a_name, a_type, a_decl, a_def)
        try:
            element = self.elements[elem]
            self._add_element_attlist(element, attr)
        except KeyError:
            # Got a forward attribute definition (defined before element)
            try:
                fwdlist = self._forwardattributes[elem]
            except KeyError:
                fwdlist = AttributeList()
                self._forwardattributes[elem] = fwdlist
            fwdlist.append(attr)

    def _add_element_attlist(self, element, xmlattribute):
        try:
            attlist = element.get_attribute("ATTLIST")
        except KeyError:
            element.add_attribute("ATTLIST", AttributeList())
            attlist = element.get_attribute("ATTLIST")
        attlist.append(xmlattribute)

    def handle_comment(self, contents):
        "Receives the contents of a comment."
        self.generator.add_comment(contents)

    def new_parameter_entity(self,name,val):
        "Receives internal parameter entity declarations."
        # these are handled internally by the DTD parser. but.. save it anyway.
        self.parameter_entities[name] = val

    def new_external_pe(self, name, pubid, sysid):
        "Receives external parameter entity declarations."
        # these are handled internally by the DTD parser.

    def new_general_entity(self, name, val):
        "Receives internal general entity declarations."
        self.general_entities[name] = val

    def new_external_entity(self, ent_name, pub_id, sys_id, ndata):
        """Receives external general entity declarations. 'ndata' is the
        empty string if the entity is parsed."""
        # XXX do we need to handle this?
        print "XXX external entity:"
        print ent_name, pub_id, sys_id, ndata

    def new_notation(self,name, pubid, sysid):
        "Receives notation declarations."
        n = Notation(name, pubid, sysid)
        self.generator.add_instance(identifier(name), n)

    def handle_pi(self, target, data):
        "Receives the target and data of processing instructions."
        # XXX do we need to handle this?
        print "XXX unhandled PI:",
        print "target=%r; data=%r" % (target, data)


class _ContentModelGenerator(object):
    """_ContentModelGenerator(rawmodel)
    The DTD parser generated and final content model are so different that a
    different content model generator is used for this object.

    """
    def __init__(self, rawmodel=None):
        tm_type = type(rawmodel)
        if tm_type is str:
            if rawmodel == "EMPTY":
                self.model = EMPTY
            elif rawmodel == "#PCDATA":
                self.model = PCDATA
            elif rawmodel == "ANY":
                self.model = ANY
            else:
                raise ValidationError, "ContentModelGenerator: unknown special type"
        elif tm_type is tuple:
            self.model = (ANY,) # rawmodel # XXX
        elif tm_type is type(None):
            self.model = None
        else:
            raise RuntimeError, "Unknown content model type: %r" % (rawmodel,)

    def __repr__(self):
        return "%s.%s(%r)" % (ContentModel.__module__, ContentModel.__name__, self.model)



