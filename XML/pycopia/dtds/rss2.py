#!/usr/bin/python

# This file generated by a program. do not edit.


import pycopia.XML.POM

#  RSS 2.0 DTD
# 
#      This version Copyright 2003 Silmaril Consultants
#      Licensed for use under the terms of the XL 1.1
# 
#      Peter Flynn <peter@silmaril.ie>, August 2003
# 
#      This is a real, working DTD for RSS 2.0.
# 
#      This replaces an earlier version which misinterpreted
#      the specification. The header of the earlier version
#      is reproduced here: 
# /**
# * rss.xml
# * Copyright: David Shafik and The Explosive Network
# * Began: 08:33 PM 01/14/03
# * Desc: RSS 2.0 DTD
# * Build #: 0003
# * Version number: 1.0 RC2
# * E-Mail: davey@i...
# * URL: www.its-explosive.net
# * License: XL 1.1
# */
# 
#      Comments and questions about the RSS2.0 Spec should be posted
#      to the Yahoo! group RSS2-Support, *NOT* sent to me. Contact me
#      only about bugs in this DTD!
# 
#      This version is based on the specification provided by 
#      Userland at http://feeds.archive.org/validator/docs/rss2.html 


class Rss(pycopia.XML.POM.ElementNode):
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	ATTLIST = pycopia.XML.POM.AttributeList([
         pycopia.XML.POM.XMLAttribute('version', 1, 14, u'2.0'), 
         ])
	_name = u'rss'


#  A channel can apparently either have one or more items, 
#      or just a title, link, and description of its own 


class Channel(pycopia.XML.POM.ElementNode):
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'channel'


class Item(pycopia.XML.POM.ElementNode):
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'item'


class Author(pycopia.XML.POM.ElementNode):
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'author'


class Category(pycopia.XML.POM.ElementNode):
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	ATTLIST = pycopia.XML.POM.AttributeList([
         pycopia.XML.POM.XMLAttribute('domain', 1, 12, None), 
         ])
	_name = u'category'


class Cloud(pycopia.XML.POM.ElementNode):
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	ATTLIST = pycopia.XML.POM.AttributeList([
         pycopia.XML.POM.XMLAttribute('domain', 1, 12, None), 
         pycopia.XML.POM.XMLAttribute('port', 1, 12, None), 
         pycopia.XML.POM.XMLAttribute('path', 1, 12, None), 
         pycopia.XML.POM.XMLAttribute('registerProcedure', 1, 12, None), 
         pycopia.XML.POM.XMLAttribute('protocol', 1, 12, None), 
         ])
	_name = u'cloud'


class Comments(pycopia.XML.POM.ElementNode):
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'comments'


class Copyright(pycopia.XML.POM.ElementNode):
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'copyright'


class Description(pycopia.XML.POM.ElementNode):
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'description'


class Docs(pycopia.XML.POM.ElementNode):
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'docs'


class Enclosure(pycopia.XML.POM.ElementNode):
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	ATTLIST = pycopia.XML.POM.AttributeList([
         pycopia.XML.POM.XMLAttribute('url', 1, 11, None), 
         pycopia.XML.POM.XMLAttribute('length', 1, 11, None), 
         pycopia.XML.POM.XMLAttribute('type', 1, 11, None), 
         ])
	_name = u'enclosure'


class Generator(pycopia.XML.POM.ElementNode):
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'generator'


class Guid(pycopia.XML.POM.ElementNode):
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	ATTLIST = pycopia.XML.POM.AttributeList([
         pycopia.XML.POM.XMLAttribute('isPermaLink', pycopia.XML.POM.Enumeration(['true', 'false']), 13, u'true'), 
         ])
	_name = u'guid'


class Height(pycopia.XML.POM.ElementNode):
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'height'


class Image(pycopia.XML.POM.ElementNode):
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'image'


class Language(pycopia.XML.POM.ElementNode):
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'language'


class Lastbuilddate(pycopia.XML.POM.ElementNode):
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'lastBuildDate'


class Link(pycopia.XML.POM.ElementNode):
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'link'


class Managingeditor(pycopia.XML.POM.ElementNode):
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'managingEditor'


class Name(pycopia.XML.POM.ElementNode):
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'name'


class Pubdate(pycopia.XML.POM.ElementNode):
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'pubDate'


class Skipdays(pycopia.XML.POM.ElementNode):
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'skipDays'


class Skiphours(pycopia.XML.POM.ElementNode):
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'skipHours'


class Source(pycopia.XML.POM.ElementNode):
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	ATTLIST = pycopia.XML.POM.AttributeList([
         pycopia.XML.POM.XMLAttribute('url', 1, 11, None), 
         ])
	_name = u'source'


class Textinput(pycopia.XML.POM.ElementNode):
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'textInput'


class Title(pycopia.XML.POM.ElementNode):
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'title'


class Ttl(pycopia.XML.POM.ElementNode):
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'ttl'


class Url(pycopia.XML.POM.ElementNode):
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'url'


class Webmaster(pycopia.XML.POM.ElementNode):
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'webMaster'


class Width(pycopia.XML.POM.ElementNode):
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'width'


GENERAL_ENTITIES = {}
