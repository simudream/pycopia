#!/usr/bin/python

# This file generated by a program. do not edit.


import pycopia.XML.POM

attribName_1939937075622105121 = pycopia.XML.POM.XMLAttribute(u'name', 7, 12, None)


attribBlockdefault_2388562210315765201 = pycopia.XML.POM.XMLAttribute(u'blockDefault', 1, 13, u'')


attribBase_4067928618489278244 = pycopia.XML.POM.XMLAttribute(u'base', 7, 11, None)


attribMaxoccurs_2635762036467084196 = pycopia.XML.POM.XMLAttribute(u'maxOccurs', 1, 12, None)


attribMinoccurs_3448318498702679044 = pycopia.XML.POM.XMLAttribute(u'minOccurs', pycopia.XML.POM.Enumeration((u'1',)), 12, None)


attribRef_1513066398975169600 = pycopia.XML.POM.XMLAttribute(u'ref', 7, 12, None)


attribUse_837291069793426609 = pycopia.XML.POM.XMLAttribute(u'use', pycopia.XML.POM.Enumeration((u'prohibited', u'optional', u'required')), 12, None)


attribXmlns_92858189217657889 = pycopia.XML.POM.XMLAttribute(u'xmlns', 1, 12, None)


attribSource_3875251958556381225 = pycopia.XML.POM.XMLAttribute(u'source', 1, 12, None)


attribForm_110819381296493401 = pycopia.XML.POM.XMLAttribute(u'form', pycopia.XML.POM.Enumeration((u'qualified', u'unqualified')), 12, None)


attribTargetnamespace_98563049709415729 = pycopia.XML.POM.XMLAttribute(u'targetNamespace', 1, 12, None)


attribProcesscontents_2594902936561138564 = pycopia.XML.POM.XMLAttribute(u'processContents', pycopia.XML.POM.Enumeration((u'skip', u'lax', u'strict')), 13, u'strict')


attribMaxoccurs_1005860178358304481 = pycopia.XML.POM.XMLAttribute(u'maxOccurs', 1, 13, u'1')


attribFinal_4042113406485616225 = pycopia.XML.POM.XMLAttribute(u'final', 1, 12, None)


attribFixed_999547109289113841 = pycopia.XML.POM.XMLAttribute(u'fixed', 1, 12, None)


attribXpath_569229373432813921 = pycopia.XML.POM.XMLAttribute(u'xpath', 1, 11, None)


attribType_1221480214019521600 = pycopia.XML.POM.XMLAttribute(u'type', 7, 12, None)


attribAbstract_1927589966619520644 = pycopia.XML.POM.XMLAttribute(u'abstract', pycopia.XML.POM.Enumeration((u'true', u'false')), 12, None)


attribXmlns_xs_558026015295709321 = pycopia.XML.POM.XMLAttribute(u'xmlns:xs', 1, 14, u'http://www.w3.org/2001/XMLSchema')


attribBase_4088963046051587025 = pycopia.XML.POM.XMLAttribute(u'base', 7, 12, None)


attribMinoccurs_3515802384737479204 = pycopia.XML.POM.XMLAttribute(u'minOccurs', 7, 12, None)


attribXml_lang_3812812596121276225 = pycopia.XML.POM.XMLAttribute(u'xml:lang', 1, 12, None)


attribValue_94788037157002281 = pycopia.XML.POM.XMLAttribute(u'value', 1, 11, None)


attribMembertypes_1859748649442684289 = pycopia.XML.POM.XMLAttribute(u'memberTypes', 8, 12, None)


attribSchemalocation_386465377926252816 = pycopia.XML.POM.XMLAttribute(u'schemaLocation', 1, 12, None)


attribNamespace_809216084559556996 = pycopia.XML.POM.XMLAttribute(u'namespace', 1, 13, u'##any')


attribFinaldefault_3880612109539224900 = pycopia.XML.POM.XMLAttribute(u'finalDefault', 1, 13, u'')


attribFixed_3889665877119146569 = pycopia.XML.POM.XMLAttribute(u'fixed', pycopia.XML.POM.Enumeration((u'true', u'false')), 12, None)


attribNillable_617688626061846249 = pycopia.XML.POM.XMLAttribute(u'nillable', pycopia.XML.POM.Enumeration((u'true', u'false')), 12, None)


attribVersion_440306481527947969 = pycopia.XML.POM.XMLAttribute(u'version', 1, 12, None)


attribNamespace_1943882797323936676 = pycopia.XML.POM.XMLAttribute(u'namespace', 1, 12, None)


attribItemtype_746377092415504225 = pycopia.XML.POM.XMLAttribute(u'itemType', 7, 12, None)


attribPublic_2963329996656581764 = pycopia.XML.POM.XMLAttribute(u'public', 1, 11, None)


attribElementformdefault_1699274912443886449 = pycopia.XML.POM.XMLAttribute(u'elementFormDefault', pycopia.XML.POM.Enumeration((u'qualified', u'unqualified')), 13, u'unqualified')


attribAttributeformdefault_141148993966564081 = pycopia.XML.POM.XMLAttribute(u'attributeFormDefault', pycopia.XML.POM.Enumeration((u'qualified', u'unqualified')), 13, u'unqualified')


attribSystem_2295138509464817025 = pycopia.XML.POM.XMLAttribute(u'system', 1, 12, None)


attribId_4002951160133423716 = pycopia.XML.POM.XMLAttribute(u'id', 2, 12, None)


attribDefault_2927111106656685796 = pycopia.XML.POM.XMLAttribute(u'default', 1, 12, None)


attribMinoccurs_271680201052381081 = pycopia.XML.POM.XMLAttribute(u'minOccurs', 7, 13, u'1')


attribSubstitutiongroup_1565265269893373161 = pycopia.XML.POM.XMLAttribute(u'substitutionGroup', 7, 12, None)


attribMixed_3290927172172038400 = pycopia.XML.POM.XMLAttribute(u'mixed', pycopia.XML.POM.Enumeration((u'true', u'false')), 12, None)


attribRefer_2031594030079600900 = pycopia.XML.POM.XMLAttribute(u'refer', 7, 11, None)


attribSchemalocation_2066361535366895809 = pycopia.XML.POM.XMLAttribute(u'schemaLocation', 1, 11, None)


attribBlock_1173253193515024384 = pycopia.XML.POM.XMLAttribute(u'block', 1, 12, None)


attribName_3478465917411609744 = pycopia.XML.POM.XMLAttribute(u'name', 7, 11, None)


attribMixed_823651025861041 = pycopia.XML.POM.XMLAttribute(u'mixed', pycopia.XML.POM.Enumeration((u'true', u'false')), 13, u'false')


attribMaxoccurs_513492537333252096 = pycopia.XML.POM.XMLAttribute(u'maxOccurs', pycopia.XML.POM.Enumeration((u'1',)), 12, None)




#  DTD for XML Schemas: Part 1: Structures
#      Public Identifier: "-//W3C//DTD XMLSCHEMA 200102//EN"
#      Official Location: http://www.w3.org/2001/XMLSchema.dtd 


#  $Id$ 


#  Note this DTD is NOT normative, or even definitive. 


# d


#  prose copy in the structures REC is the definitive version 


# d


#  (which shouldn't differ from this one except for this 


# d


#  comment and entity expansions, but just in case) 


# d


#  With the exception of cases with multiple namespace
#      prefixes for the XML Schema namespace, any XML document which is
#      not valid per this DTD given redefinitions in its internal subset of the
#      'p' and 's' parameter entities below appropriate to its namespace
#      declaration of the XML Schema namespace is almost certainly not
#      a valid schema. 


#  The simpleType element and its constituent parts
#      are defined in XML Schema: Part 2: Datatypes 


#  can be overriden in the internal subset of a
#                          schema document to establish a different
#                          namespace prefix 


#  if %p is defined (e.g. as foo:) then you must
#                          also define %s as the suffix for the appropriate
#                          namespace declaration (e.g. :foo) 


#  Define all the element names, with optional prefix 


#  annotation elements 


#  Customisation entities for the ATTLIST of each element type.
#      Define one of these if your schema takes advantage of the
#      anyAttribute='##other' in the schema for schemas 


#  #all or space-separated list drawn from derivationChoice 


#  #all or space-separated list drawn from
#                       derivationChoice + 'substitution' 


#  This is used in part2 


# 
#         DTD for XML Schemas: Part 2: Datatypes
#         $Id$
#         Note this DTD is NOT normative, or even definitive. - - the
#         prose copy in the datatypes REC is the definitive version
#         (which shouldn't differ from this one except for this comment
#         and entity expansions, but just in case)
#   


# 
#         This DTD cannot be used on its own, it is intended
#         only for incorporation in XMLSchema.dtd, q.v.
#   


#  Define all the element names, with optional prefix 


# 
#         Customisation entities for the ATTLIST of each element
#         type. Define one of these if your schema takes advantage
#         of the anyAttribute='##other' in the schema for schemas
#   


#  Define some entities for informative use as attribute
#         types 


# 
#         #all or space-separated list drawn from derivationChoice
#   


# 
#         Note that the use of 'facet' below is less restrictive
#         than is really intended:  There should in fact be no
#         more than one of each of minInclusive, minExclusive,
#         maxInclusive, maxExclusive, totalDigits, fractionDigits,
#         length, maxLength, minLength within datatype,
#         and the min- and max- variants of Inclusive and Exclusive
#         are mutually exclusive. On the other hand,  pattern and
#         enumeration may repeat.
#   


class Xs_simpletype(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         u'id': attribId_4002951160133423716, 
         u'name': attribName_1939937075622105121, 
         u'final': attribFinal_4042113406485616225, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	KWATTRIBUTES = {
         'id': attribId_4002951160133423716, 
         'name': attribName_1939937075622105121, 
         'final': attribFinal_4042113406485616225, 
         }
	_name = u'xs:simpleType'


#  name is required at top level 


class Xs_restriction(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         u'base': attribBase_4088963046051587025, 
         u'id': attribId_4002951160133423716, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	KWATTRIBUTES = {
         'base': attribBase_4088963046051587025, 
         'id': attribId_4002951160133423716, 
         }
	_name = u'xs:restriction'


# 
#         base and simpleType child are mutually exclusive,
#         one is required.
# 
#         restriction is shared between simpleType and
#         simpleContent and complexContent (in XMLSchema.xsd).
#         restriction1 is for the latter cases, when this
#         is restricting a complex type, as is attrDecls.
#   


class Xs_list(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         u'itemType': attribItemtype_746377092415504225, 
         u'id': attribId_4002951160133423716, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	KWATTRIBUTES = {
         'itemType': attribItemtype_746377092415504225, 
         'id': attribId_4002951160133423716, 
         }
	_name = u'xs:list'


# 
#         itemType and simpleType child are mutually exclusive,
#         one is required
#   


class Xs_union(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         u'memberTypes': attribMembertypes_1859748649442684289, 
         u'id': attribId_4002951160133423716, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	KWATTRIBUTES = {
         'memberTypes': attribMembertypes_1859748649442684289, 
         'id': attribId_4002951160133423716, 
         }
	_name = u'xs:union'


# 
#         At least one item in memberTypes or one simpleType
#         child is required
#   


class Xs_maxexclusive(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         u'fixed': attribFixed_3889665877119146569, 
         u'id': attribId_4002951160133423716, 
         u'value': attribValue_94788037157002281, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	KWATTRIBUTES = {
         'fixed': attribFixed_3889665877119146569, 
         'id': attribId_4002951160133423716, 
         'value': attribValue_94788037157002281, 
         }
	_name = u'xs:maxExclusive'


class Xs_minexclusive(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         u'fixed': attribFixed_3889665877119146569, 
         u'id': attribId_4002951160133423716, 
         u'value': attribValue_94788037157002281, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	KWATTRIBUTES = {
         'fixed': attribFixed_3889665877119146569, 
         'id': attribId_4002951160133423716, 
         'value': attribValue_94788037157002281, 
         }
	_name = u'xs:minExclusive'


class Xs_maxinclusive(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         u'fixed': attribFixed_3889665877119146569, 
         u'id': attribId_4002951160133423716, 
         u'value': attribValue_94788037157002281, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	KWATTRIBUTES = {
         'fixed': attribFixed_3889665877119146569, 
         'id': attribId_4002951160133423716, 
         'value': attribValue_94788037157002281, 
         }
	_name = u'xs:maxInclusive'


class Xs_mininclusive(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         u'fixed': attribFixed_3889665877119146569, 
         u'id': attribId_4002951160133423716, 
         u'value': attribValue_94788037157002281, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	KWATTRIBUTES = {
         'fixed': attribFixed_3889665877119146569, 
         'id': attribId_4002951160133423716, 
         'value': attribValue_94788037157002281, 
         }
	_name = u'xs:minInclusive'


class Xs_totaldigits(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         u'fixed': attribFixed_3889665877119146569, 
         u'id': attribId_4002951160133423716, 
         u'value': attribValue_94788037157002281, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	KWATTRIBUTES = {
         'fixed': attribFixed_3889665877119146569, 
         'id': attribId_4002951160133423716, 
         'value': attribValue_94788037157002281, 
         }
	_name = u'xs:totalDigits'


class Xs_fractiondigits(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         u'fixed': attribFixed_3889665877119146569, 
         u'id': attribId_4002951160133423716, 
         u'value': attribValue_94788037157002281, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	KWATTRIBUTES = {
         'fixed': attribFixed_3889665877119146569, 
         'id': attribId_4002951160133423716, 
         'value': attribValue_94788037157002281, 
         }
	_name = u'xs:fractionDigits'


class Xs_length(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         u'fixed': attribFixed_3889665877119146569, 
         u'id': attribId_4002951160133423716, 
         u'value': attribValue_94788037157002281, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	KWATTRIBUTES = {
         'fixed': attribFixed_3889665877119146569, 
         'id': attribId_4002951160133423716, 
         'value': attribValue_94788037157002281, 
         }
	_name = u'xs:length'


class Xs_minlength(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         u'fixed': attribFixed_3889665877119146569, 
         u'id': attribId_4002951160133423716, 
         u'value': attribValue_94788037157002281, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	KWATTRIBUTES = {
         'fixed': attribFixed_3889665877119146569, 
         'id': attribId_4002951160133423716, 
         'value': attribValue_94788037157002281, 
         }
	_name = u'xs:minLength'


class Xs_maxlength(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         u'fixed': attribFixed_3889665877119146569, 
         u'id': attribId_4002951160133423716, 
         u'value': attribValue_94788037157002281, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	KWATTRIBUTES = {
         'fixed': attribFixed_3889665877119146569, 
         'id': attribId_4002951160133423716, 
         'value': attribValue_94788037157002281, 
         }
	_name = u'xs:maxLength'


#  This one can be repeated 


class Xs_enumeration(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         u'id': attribId_4002951160133423716, 
         u'value': attribValue_94788037157002281, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	KWATTRIBUTES = {
         'id': attribId_4002951160133423716, 
         'value': attribValue_94788037157002281, 
         }
	_name = u'xs:enumeration'


class Xs_whitespace(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         u'fixed': attribFixed_3889665877119146569, 
         u'id': attribId_4002951160133423716, 
         u'value': attribValue_94788037157002281, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	KWATTRIBUTES = {
         'fixed': attribFixed_3889665877119146569, 
         'id': attribId_4002951160133423716, 
         'value': attribValue_94788037157002281, 
         }
	_name = u'xs:whiteSpace'


#  This one can be repeated 


class Xs_pattern(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         u'id': attribId_4002951160133423716, 
         u'value': attribValue_94788037157002281, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	KWATTRIBUTES = {
         'id': attribId_4002951160133423716, 
         'value': attribValue_94788037157002281, 
         }
	_name = u'xs:pattern'


#  the duplication below is to produce an unambiguous content model
#      which allows annotation everywhere 


class Xs_schema(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         u'targetNamespace': attribTargetnamespace_98563049709415729, 
         u'elementFormDefault': attribElementformdefault_1699274912443886449, 
         u'finalDefault': attribFinaldefault_3880612109539224900, 
         u'xml:lang': attribXml_lang_3812812596121276225, 
         u'xmlns': attribXmlns_92858189217657889, 
         u'attributeFormDefault': attribAttributeformdefault_141148993966564081, 
         u'version': attribVersion_440306481527947969, 
         u'blockDefault': attribBlockdefault_2388562210315765201, 
         u'xmlns:xs': attribXmlns_xs_558026015295709321, 
         u'id': attribId_4002951160133423716, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	KWATTRIBUTES = {
         'xml_lang': attribXml_lang_3812812596121276225, 
         'xmlns': attribXmlns_92858189217657889, 
         'xmlns_xs': attribXmlns_xs_558026015295709321, 
         'finalDefault': attribFinaldefault_3880612109539224900, 
         'attributeFormDefault': attribAttributeformdefault_141148993966564081, 
         'version': attribVersion_440306481527947969, 
         'elementFormDefault': attribElementformdefault_1699274912443886449, 
         'blockDefault': attribBlockdefault_2388562210315765201, 
         'targetNamespace': attribTargetnamespace_98563049709415729, 
         'id': attribId_4002951160133423716, 
         }
	_name = u'xs:schema'



_Root = Xs_schema



#  Note the xmlns declaration is NOT in the Schema for Schemas,
#      because at the Infoset level where schemas operate,
#      xmlns(:prefix) is NOT an attribute! 


#  The declaration of xmlns is a convenience for schema authors 


#  The id attribute here and below is for use in external references
#      from non-schemas using simple fragment identifiers.
#      It is NOT used for schema-to-schema reference, internal or
#      external. 


#  a type is a named content type specification which allows attribute
#      declarations


#  


class Xs_complextype(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         u'name': attribName_1939937075622105121, 
         u'abstract': attribAbstract_1927589966619520644, 
         u'id': attribId_4002951160133423716, 
         u'mixed': attribMixed_823651025861041, 
         u'final': attribFinal_4042113406485616225, 
         u'block': attribBlock_1173253193515024384, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	KWATTRIBUTES = {
         'name': attribName_1939937075622105121, 
         'abstract': attribAbstract_1927589966619520644, 
         'id': attribId_4002951160133423716, 
         'mixed': attribMixed_823651025861041, 
         'final': attribFinal_4042113406485616225, 
         'block': attribBlock_1173253193515024384, 
         }
	_name = u'xs:complexType'


#  particleAndAttrs is shorthand for a root type 


#  mixed is disallowed if simpleContent, overriden if complexContent
#      has one too. 


#  If anyAttribute appears in one or more referenced attributeGroups
#      and/or explicitly, the intersection of the permissions is used 


class Xs_complexcontent(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         u'mixed': attribMixed_3290927172172038400, 
         u'id': attribId_4002951160133423716, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	KWATTRIBUTES = {
         'mixed': attribMixed_3290927172172038400, 
         'id': attribId_4002951160133423716, 
         }
	_name = u'xs:complexContent'


#  restriction should use the branch defined above, not the simple
#      one from part2; extension should use the full model  


class Xs_simplecontent(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         u'id': attribId_4002951160133423716, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	KWATTRIBUTES = {
         'id': attribId_4002951160133423716, 
         }
	_name = u'xs:simpleContent'


#  restriction should use the simple branch from part2, not the 
#      one defined above; extension should have no particle  


class Xs_extension(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         u'base': attribBase_4067928618489278244, 
         u'id': attribId_4002951160133423716, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	KWATTRIBUTES = {
         'base': attribBase_4067928618489278244, 
         'id': attribId_4002951160133423716, 
         }
	_name = u'xs:extension'


#  an element is declared by either:
#  a name and a type (either nested or referenced via the type attribute)
#  or a ref to an existing element declaration 


class Xs_element(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         u'name': attribName_1939937075622105121, 
         u'minOccurs': attribMinoccurs_3515802384737479204, 
         u'default': attribDefault_2927111106656685796, 
         u'ref': attribRef_1513066398975169600, 
         u'abstract': attribAbstract_1927589966619520644, 
         u'nillable': attribNillable_617688626061846249, 
         u'final': attribFinal_4042113406485616225, 
         u'form': attribForm_110819381296493401, 
         u'maxOccurs': attribMaxoccurs_2635762036467084196, 
         u'substitutionGroup': attribSubstitutiongroup_1565265269893373161, 
         u'fixed': attribFixed_999547109289113841, 
         u'type': attribType_1221480214019521600, 
         u'id': attribId_4002951160133423716, 
         u'block': attribBlock_1173253193515024384, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	KWATTRIBUTES = {
         'name': attribName_1939937075622105121, 
         'minOccurs': attribMinoccurs_3515802384737479204, 
         'default': attribDefault_2927111106656685796, 
         'ref': attribRef_1513066398975169600, 
         'abstract': attribAbstract_1927589966619520644, 
         'nillable': attribNillable_617688626061846249, 
         'final': attribFinal_4042113406485616225, 
         'form': attribForm_110819381296493401, 
         'maxOccurs': attribMaxoccurs_2635762036467084196, 
         'substitutionGroup': attribSubstitutiongroup_1565265269893373161, 
         'fixed': attribFixed_999547109289113841, 
         'type': attribType_1221480214019521600, 
         'id': attribId_4002951160133423716, 
         'block': attribBlock_1173253193515024384, 
         }
	_name = u'xs:element'


#  simpleType or complexType only if no type|ref attribute 


#  ref not allowed at top level 


#  type and ref are mutually exclusive.
#      name and ref are mutually exclusive, one is required 


#  In the absence of type AND ref, type defaults to type of
#      substitutionGroup, if any, else the ur-type, i.e. unconstrained 


#  default and fixed are mutually exclusive 


class Xs_group(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         u'maxOccurs': attribMaxoccurs_2635762036467084196, 
         u'ref': attribRef_1513066398975169600, 
         u'name': attribName_1939937075622105121, 
         u'minOccurs': attribMinoccurs_3515802384737479204, 
         u'id': attribId_4002951160133423716, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	KWATTRIBUTES = {
         'maxOccurs': attribMaxoccurs_2635762036467084196, 
         'ref': attribRef_1513066398975169600, 
         'name': attribName_1939937075622105121, 
         'minOccurs': attribMinoccurs_3515802384737479204, 
         'id': attribId_4002951160133423716, 
         }
	_name = u'xs:group'


class Xs_all(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         u'maxOccurs': attribMaxoccurs_513492537333252096, 
         u'id': attribId_4002951160133423716, 
         u'minOccurs': attribMinoccurs_3448318498702679044, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	KWATTRIBUTES = {
         'maxOccurs': attribMaxoccurs_513492537333252096, 
         'id': attribId_4002951160133423716, 
         'minOccurs': attribMinoccurs_3448318498702679044, 
         }
	_name = u'xs:all'


class Xs_choice(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         u'maxOccurs': attribMaxoccurs_2635762036467084196, 
         u'id': attribId_4002951160133423716, 
         u'minOccurs': attribMinoccurs_3515802384737479204, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	KWATTRIBUTES = {
         'maxOccurs': attribMaxoccurs_2635762036467084196, 
         'id': attribId_4002951160133423716, 
         'minOccurs': attribMinoccurs_3515802384737479204, 
         }
	_name = u'xs:choice'


class Xs_sequence(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         u'maxOccurs': attribMaxoccurs_2635762036467084196, 
         u'id': attribId_4002951160133423716, 
         u'minOccurs': attribMinoccurs_3515802384737479204, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	KWATTRIBUTES = {
         'maxOccurs': attribMaxoccurs_2635762036467084196, 
         'id': attribId_4002951160133423716, 
         'minOccurs': attribMinoccurs_3515802384737479204, 
         }
	_name = u'xs:sequence'


#  an anonymous grouping in a model, or
#      a top-level named group definition, or a reference to same 


#  Note that if order is 'all', group is not allowed inside.
#      If order is 'all' THIS group must be alone (or referenced alone) at
#      the top level of a content model 


#  If order is 'all', minOccurs==maxOccurs==1 on element/any inside 


#  Should allow minOccurs=0 inside order='all' . . . 


class Xs_any(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         u'maxOccurs': attribMaxoccurs_1005860178358304481, 
         u'namespace': attribNamespace_809216084559556996, 
         u'minOccurs': attribMinoccurs_271680201052381081, 
         u'processContents': attribProcesscontents_2594902936561138564, 
         u'id': attribId_4002951160133423716, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	KWATTRIBUTES = {
         'maxOccurs': attribMaxoccurs_1005860178358304481, 
         'namespace': attribNamespace_809216084559556996, 
         'minOccurs': attribMinoccurs_271680201052381081, 
         'processContents': attribProcesscontents_2594902936561138564, 
         'id': attribId_4002951160133423716, 
         }
	_name = u'xs:any'


#  namespace is interpreted as follows:
#                   ##any      - - any non-conflicting WFXML at all
# 
#                   ##other    - - any non-conflicting WFXML from namespace other
#                                   than targetNamespace
# 
#                   ##local    - - any unqualified non-conflicting WFXML/attribute
#                   one or     - - any non-conflicting WFXML from
#                   more URI        the listed namespaces
#                   references
# 
#                   ##targetNamespace ##local may appear in the above list,
#                     with the obvious meaning 


class Xs_anyattribute(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         u'namespace': attribNamespace_809216084559556996, 
         u'id': attribId_4002951160133423716, 
         u'processContents': attribProcesscontents_2594902936561138564, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	KWATTRIBUTES = {
         'namespace': attribNamespace_809216084559556996, 
         'id': attribId_4002951160133423716, 
         'processContents': attribProcesscontents_2594902936561138564, 
         }
	_name = u'xs:anyAttribute'


#  namespace is interpreted as for 'any' above 


#  simpleType only if no type|ref attribute 


#  ref not allowed at top level, name iff at top level 


class Xs_attribute(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         u'use': attribUse_837291069793426609, 
         u'name': attribName_1939937075622105121, 
         u'form': attribForm_110819381296493401, 
         u'default': attribDefault_2927111106656685796, 
         u'ref': attribRef_1513066398975169600, 
         u'fixed': attribFixed_999547109289113841, 
         u'type': attribType_1221480214019521600, 
         u'id': attribId_4002951160133423716, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	KWATTRIBUTES = {
         'use': attribUse_837291069793426609, 
         'name': attribName_1939937075622105121, 
         'form': attribForm_110819381296493401, 
         'default': attribDefault_2927111106656685796, 
         'ref': attribRef_1513066398975169600, 
         'fixed': attribFixed_999547109289113841, 
         'type': attribType_1221480214019521600, 
         'id': attribId_4002951160133423716, 
         }
	_name = u'xs:attribute'


#  type and ref are mutually exclusive.
#      name and ref are mutually exclusive, one is required 


#  default for use is optional when nested, none otherwise 


#  default and fixed are mutually exclusive 


#  type attr and simpleType content are mutually exclusive 


#  an attributeGroup is a named collection of attribute decls, or a
#      reference thereto 


class Xs_attributegroup(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         u'ref': attribRef_1513066398975169600, 
         u'name': attribName_1939937075622105121, 
         u'id': attribId_4002951160133423716, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	KWATTRIBUTES = {
         'ref': attribRef_1513066398975169600, 
         'name': attribName_1939937075622105121, 
         'id': attribId_4002951160133423716, 
         }
	_name = u'xs:attributeGroup'


#  ref iff no content, no name.  ref iff not top level 


#  better reference mechanisms 


class Xs_unique(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         u'name': attribName_3478465917411609744, 
         u'id': attribId_4002951160133423716, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	KWATTRIBUTES = {
         'name': attribName_3478465917411609744, 
         'id': attribId_4002951160133423716, 
         }
	_name = u'xs:unique'


class Xs_key(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         u'name': attribName_3478465917411609744, 
         u'id': attribId_4002951160133423716, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	KWATTRIBUTES = {
         'name': attribName_3478465917411609744, 
         'id': attribId_4002951160133423716, 
         }
	_name = u'xs:key'


class Xs_keyref(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         u'id': attribId_4002951160133423716, 
         u'name': attribName_3478465917411609744, 
         u'refer': attribRefer_2031594030079600900, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	KWATTRIBUTES = {
         'id': attribId_4002951160133423716, 
         'name': attribName_3478465917411609744, 
         'refer': attribRefer_2031594030079600900, 
         }
	_name = u'xs:keyref'


class Xs_selector(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         u'xpath': attribXpath_569229373432813921, 
         u'id': attribId_4002951160133423716, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	KWATTRIBUTES = {
         'xpath': attribXpath_569229373432813921, 
         'id': attribId_4002951160133423716, 
         }
	_name = u'xs:selector'


class Xs_field(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         u'xpath': attribXpath_569229373432813921, 
         u'id': attribId_4002951160133423716, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	KWATTRIBUTES = {
         'xpath': attribXpath_569229373432813921, 
         'id': attribId_4002951160133423716, 
         }
	_name = u'xs:field'


#  Schema combination mechanisms 


class Xs_include(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         u'schemaLocation': attribSchemalocation_2066361535366895809, 
         u'id': attribId_4002951160133423716, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	KWATTRIBUTES = {
         'schemaLocation': attribSchemalocation_2066361535366895809, 
         'id': attribId_4002951160133423716, 
         }
	_name = u'xs:include'


class Xs_import(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         u'schemaLocation': attribSchemalocation_386465377926252816, 
         u'namespace': attribNamespace_1943882797323936676, 
         u'id': attribId_4002951160133423716, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	KWATTRIBUTES = {
         'schemaLocation': attribSchemalocation_386465377926252816, 
         'namespace': attribNamespace_1943882797323936676, 
         'id': attribId_4002951160133423716, 
         }
	_name = u'xs:import'


class Xs_redefine(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         u'schemaLocation': attribSchemalocation_2066361535366895809, 
         u'id': attribId_4002951160133423716, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	KWATTRIBUTES = {
         'schemaLocation': attribSchemalocation_2066361535366895809, 
         'id': attribId_4002951160133423716, 
         }
	_name = u'xs:redefine'


class Xs_notation(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         u'system': attribSystem_2295138509464817025, 
         u'public': attribPublic_2963329996656581764, 
         u'name': attribName_3478465917411609744, 
         u'id': attribId_4002951160133423716, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	KWATTRIBUTES = {
         'system': attribSystem_2295138509464817025, 
         'public': attribPublic_2963329996656581764, 
         'name': attribName_3478465917411609744, 
         'id': attribId_4002951160133423716, 
         }
	_name = u'xs:notation'


#  Annotation is either application information or documentation 


#  By having these here they are available for datatypes as well
#      as all the structures elements 


class Xs_annotation(pycopia.XML.POM.ElementNode):
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'xs:annotation'


#  User must define annotation elements in internal subset for this
#      to work 


class Xs_appinfo(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         u'source': attribSource_3875251958556381225, 
         u'id': attribId_4002951160133423716, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel(True)
	KWATTRIBUTES = {
         'source': attribSource_3875251958556381225, 
         'id': attribId_4002951160133423716, 
         }
	_name = u'xs:appinfo'


#  too restrictive 


class Xs_documentation(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         u'source': attribSource_3875251958556381225, 
         u'xml:lang': attribXml_lang_3812812596121276225, 
         u'id': attribId_4002951160133423716, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel(True)
	KWATTRIBUTES = {
         'source': attribSource_3875251958556381225, 
         'xml_lang': attribXml_lang_3812812596121276225, 
         'id': attribId_4002951160133423716, 
         }
	_name = u'xs:documentation'


#  too restrictive 


Xmlschemastructures = pycopia.XML.POM.Notation(u'XMLSchemaStructures', u'structures', u'http://www.w3.org/2001/XMLSchema.xsd')

Xml = pycopia.XML.POM.Notation(u'XML', u'REC-xml-1998-0210', u'http://www.w3.org/TR/1998/REC-xml-19980210')

GENERAL_ENTITIES = {}

# Cache for dynamic classes for this dtd.


_CLASSCACHE = {}


