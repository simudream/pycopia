#!/usr/bin/python

# This file generated by a program. do not edit.


import pycopia.XML.POM

attribArchive_2029791469104495009 = pycopia.XML.POM.XMLAttribute(u'archive', 1, 12, None)


attribRowspan_824571289138210084 = pycopia.XML.POM.XMLAttribute(u'rowspan', 1, 13, u'1')


attribCite_2366926375086749281 = pycopia.XML.POM.XMLAttribute(u'cite', 1, 12, None)


attribTitle_4254840287891469241 = pycopia.XML.POM.XMLAttribute(u'title', 1, 12, None)


attribAlt_1162895347347825025 = pycopia.XML.POM.XMLAttribute(u'alt', 1, 11, None)


attribTabindex_1924349933320454025 = pycopia.XML.POM.XMLAttribute(u'tabindex', 1, 12, None)


attribName_1246620389478747364 = pycopia.XML.POM.XMLAttribute(u'name', 1, 11, None)


attribHreflang_96177259461920569 = pycopia.XML.POM.XMLAttribute(u'hreflang', 7, 12, None)


attribStart_37096382094932521 = pycopia.XML.POM.XMLAttribute(u'start', 1, 12, None)


attribLabel_1260736214172610816 = pycopia.XML.POM.XMLAttribute(u'label', 1, 11, None)


attribVersion_1798756531258807849 = pycopia.XML.POM.XMLAttribute(u'version', 1, 14, u'-//WAPFORUM//DTD XHTML Mobile 1.0//EN')


attribDeclare_857178368687561284 = pycopia.XML.POM.XMLAttribute(u'declare', pycopia.XML.POM.Enumeration((u'declare',)), 12, None)


attribType_3598646553109970404 = pycopia.XML.POM.XMLAttribute(u'type', 1, 12, None)


attribAlign_1920212820748718721 = pycopia.XML.POM.XMLAttribute(u'align', pycopia.XML.POM.Enumeration((u'left', u'center', u'right')), 12, None)


attribScheme_305738970983549041 = pycopia.XML.POM.XMLAttribute(u'scheme', 1, 12, None)


attribStandby_275913609211742436 = pycopia.XML.POM.XMLAttribute(u'standby', 1, 12, None)


attribName_1423564487243335089 = pycopia.XML.POM.XMLAttribute(u'name', 1, 12, None)


attribClassid_1288014720321799044 = pycopia.XML.POM.XMLAttribute(u'classid', 1, 12, None)


attribSize_1540036912549524169 = pycopia.XML.POM.XMLAttribute(u'size', 1, 12, None)


attribSrc_3104320399512748900 = pycopia.XML.POM.XMLAttribute(u'src', 1, 11, None)


attribMedia_1916838375387458329 = pycopia.XML.POM.XMLAttribute(u'media', 1, 12, None)


attribHttp_equiv_1245057564071175625 = pycopia.XML.POM.XMLAttribute(u'http-equiv', 7, 12, None)


attribMethod_1594070884251040000 = pycopia.XML.POM.XMLAttribute(u'method', pycopia.XML.POM.Enumeration((u'get', u'post')), 13, u'get')


attribAccesskey_2737575848648385424 = pycopia.XML.POM.XMLAttribute(u'accesskey', 1, 12, None)


attribProfile_3085446061595951089 = pycopia.XML.POM.XMLAttribute(u'profile', 1, 13, u'')


attribMaxlength_604742143183339225 = pycopia.XML.POM.XMLAttribute(u'maxlength', 1, 12, None)


attribValuetype_3058020386316608164 = pycopia.XML.POM.XMLAttribute(u'valuetype', pycopia.XML.POM.Enumeration((u'data', u'ref', u'object')), 13, u'data')


attribAction_142350502103259025 = pycopia.XML.POM.XMLAttribute(u'action', 1, 11, None)


attribXmlns_2523611023564185025 = pycopia.XML.POM.XMLAttribute(u'xmlns', 1, 14, u'http://www.w3.org/1999/xhtml')


attribType_291473665566426121 = pycopia.XML.POM.XMLAttribute(u'type', 1, 11, None)


attribValign_2142455386295617129 = pycopia.XML.POM.XMLAttribute(u'valign', pycopia.XML.POM.Enumeration((u'top', u'middle', u'bottom')), 12, None)


attribLongdesc_551606211785669089 = pycopia.XML.POM.XMLAttribute(u'longdesc', 1, 12, None)


attribId_121205855951786596 = pycopia.XML.POM.XMLAttribute(u'id', 2, 12, None)


attribHeight_607192057250935849 = pycopia.XML.POM.XMLAttribute(u'height', 1, 12, None)


attribContent_3546404873644026241 = pycopia.XML.POM.XMLAttribute(u'content', 1, 11, None)


attribRel_3659796562539513529 = pycopia.XML.POM.XMLAttribute(u'rel', 8, 12, None)


attribWidth_2698869476000729641 = pycopia.XML.POM.XMLAttribute(u'width', 1, 12, None)


attribStyle_68292116612380816 = pycopia.XML.POM.XMLAttribute(u'style', 1, 12, None)


attribSelected_797750601755673316 = pycopia.XML.POM.XMLAttribute(u'selected', pycopia.XML.POM.Enumeration((u'selected',)), 12, None)


attribSummary_293896294327076841 = pycopia.XML.POM.XMLAttribute(u'summary', 1, 12, None)


attribClass_3214756266708739600 = pycopia.XML.POM.XMLAttribute(u'class', 8, 12, None)


attribXml_lang_2029235648979380625 = pycopia.XML.POM.XMLAttribute(u'xml:lang', 7, 12, None)


attribRows_873710474168435344 = pycopia.XML.POM.XMLAttribute(u'rows', 1, 11, None)


attribScope_688360248864796225 = pycopia.XML.POM.XMLAttribute(u'scope', pycopia.XML.POM.Enumeration((u'row', u'col')), 12, None)


attribHeaders_1895922246332405776 = pycopia.XML.POM.XMLAttribute(u'headers', 4, 12, None)


attribCharset_2456238898048849 = pycopia.XML.POM.XMLAttribute(u'charset', 1, 12, None)


attribCodetype_164813866435053081 = pycopia.XML.POM.XMLAttribute(u'codetype', 1, 12, None)


attribHref_10590696292225 = pycopia.XML.POM.XMLAttribute(u'href', 1, 12, None)


attribMultiple_1270567521988255296 = pycopia.XML.POM.XMLAttribute(u'multiple', pycopia.XML.POM.Enumeration((u'multiple',)), 12, None)


attribColspan_13003694770657536 = pycopia.XML.POM.XMLAttribute(u'colspan', 1, 13, u'1')


attribCodebase_1491350078472004 = pycopia.XML.POM.XMLAttribute(u'codebase', 1, 12, None)


attribType_44301332405719489 = pycopia.XML.POM.XMLAttribute(u'type', pycopia.XML.POM.Enumeration((u'text', u'password', u'checkbox', u'radio', u'submit', u'reset', u'hidden')), 13, u'text')


attribValue_4156605816673722624 = pycopia.XML.POM.XMLAttribute(u'value', 1, 12, None)


attribHref_35096121232009744 = pycopia.XML.POM.XMLAttribute(u'href', 1, 11, None)


attribEnctype_436576891689519025 = pycopia.XML.POM.XMLAttribute(u'enctype', 1, 13, u'application/x-www-form-urlencoded')


attribSrc_622124219914705225 = pycopia.XML.POM.XMLAttribute(u'src', 1, 12, None)


attribName_3951386174947790881 = pycopia.XML.POM.XMLAttribute(u'name', 7, 12, None)


attribXml_space_359981169846238864 = pycopia.XML.POM.XMLAttribute(u'xml:space', pycopia.XML.POM.Enumeration((u'preserve',)), 14, u'preserve')


attribAbbr_2036693206661546449 = pycopia.XML.POM.XMLAttribute(u'abbr', 1, 12, None)


attribFor_666919309859033284 = pycopia.XML.POM.XMLAttribute(u'for', 3, 12, None)


attribChecked_1601429972271201856 = pycopia.XML.POM.XMLAttribute(u'checked', pycopia.XML.POM.Enumeration((u'checked',)), 12, None)


attribCols_157052534391325764 = pycopia.XML.POM.XMLAttribute(u'cols', 1, 11, None)


attribAxis_298091641253602249 = pycopia.XML.POM.XMLAttribute(u'axis', 1, 12, None)


attribRev_684970124142549961 = pycopia.XML.POM.XMLAttribute(u'rev', 8, 12, None)


attribData_119997120992872036 = pycopia.XML.POM.XMLAttribute(u'data', 1, 12, None)




#  XHTML Mobile 1.0 DTD  ...................................................... 


#  file: xhtml-mobile10.dtd 


#  
#      This is XHTML Mobile profile, a proper subset of XHTML.
#      
#      	@Wireless Application Protocol Forum, Ltd. 2001.
# 
# 	Terms and conditions of use are available from the Wireless Application Protocol Forum Ltd. 
# 	Web site (http://www.wapforum.org/what/copyright.htm).
#     
# 


#  This is the driver file for version 1.0 of the XHTML Mobile DTD.
# 
#      This DTD is identified by the PUBLIC and SYSTEM identifiers:
# 
#      PUBLIC: "-//WAPFORUM//DTD XHTML Mobile 1.0//EN"
#      SYSTEM: "http://www.wapforum.org/DTD/xhtml-mobile10.dtd"
# 


#  Use this URI to identify the default namespace:
# 
#          "http://www.w3.org/1999/xhtml"
# 
#      See the Qualified Names module for information
#      on the use of namespace prefixes in the DTD.
# 


#  For example, if you are using XHTML Mobile 1.0 directly, use
#      the FPI in the DOCTYPE declaration, with the xmlns attribute
#      on the document element to identify the default namespace:
# 
#          <?xml version="1.0"?>
#          <!DOCTYPE html PUBLIC "-//WAPFORUM//DTD XHTML Mobile 1.0//EN"
#              "http://www.wapforum.org/DTD/xhtml-mobile10.dtd" >
#          <html xmlns="http://www.w3.org/1999/xhtml"
#                xml:lang="en" >
#          ...
#          </html>
# 


#  reserved for future use with document profiles 


#  Inline Style Module  ........................................ 


#  ...................................................................... 


#  XHTML Inline Style Module  ........................................... 


#  file: xhtml-inlstyle-1.mod
# 
#      This is XHTML, a reformulation of HTML as a modular XML application.
#      Copyright 1998-2001 W3C (MIT, INRIA, Keio), All Rights Reserved.
#      Revision: $Id$
# 
#      This DTD module is identified by the PUBLIC and SYSTEM identifiers:
# 
#        PUBLIC "-//W3C//ENTITIES XHTML Inline Style 1.0//EN"
#        SYSTEM "http://www.w3.org/TR/xhtml-modularization/DTD/xhtml-inlstyle-1.mod"
# 
#      Revisions:
#      (none)
#      ....................................................................... 


#  Inline Style
# 
#      This module declares the 'style' attribute, used to support inline
#      style markup. This module must be instantiated prior to the XHTML
#      Common Attributes module in order to be included in %Core.attrib;.
# 


#  end of xhtml-inlstyle-1.mod 


#  Document Model ........................................ 


#  XHTML Framework ........................................ 


#  ...................................................................... 


#  XHTML Modular Framework Module  ...................................... 


#  file: xhtml-framework-1.mod
# 
#      This is XHTML, a reformulation of HTML as a modular XML application.
#      Copyright 1998-2001 W3C (MIT, INRIA, Keio), All Rights Reserved.
#      Revision: $Id$ SMI
# 
#      This DTD module is identified by the PUBLIC and SYSTEM identifiers:
# 
#        PUBLIC "-//W3C//ENTITIES XHTML Modular Framework 1.0//EN"
#        SYSTEM "http://www.w3.org/TR/xhtml-modularization/DTD/xhtml-framework-1.mod"
# 
#      Revisions:
#      (none)
#      ....................................................................... 


#  Modular Framework
# 
#      This required module instantiates the modules needed
#      to support the XHTML modularization model, including:
# 
#         +  notations
#         +  datatypes
#         +  namespace-qualified names
#         +  common attributes
#         +  document model
#         +  character entities
# 
#      The Intrinsic Events module is ignored by default but
#      occurs in this module because it must be instantiated
#      prior to Attributes but after Datatypes.
# 


#  ...................................................................... 


#  XHTML Notations Module  .............................................. 


#  file: xhtml-notations-1.mod
# 
#      This is XHTML, a reformulation of HTML as a modular XML application.
#      Copyright 1998-2001 W3C (MIT, INRIA, Keio), All Rights Reserved.
#      Revision: $Id$
# 
#      This DTD module is identified by the PUBLIC and SYSTEM identifiers:
# 
#        PUBLIC "-//W3C//NOTATIONS XHTML Notations 1.0//EN"
#        SYSTEM "http://www.w3.org/TR/xhtml-modularization/DTD/xhtml-notations-1.mod"
# 
#      Revisions:
#      (none)
#      ....................................................................... 


#  Notations
# 
#      defines the following notations, many of these imported from
#      other specifications and standards. When an existing FPI is
#      known, it is incorporated here.
# 


#  XML Notations ..................................... 


#  SGML and XML Notations ............................ 


#  W3C XML 1.0 Recommendation 


W3c_xml = pycopia.XML.POM.Notation(u'w3c-xml', u'ISO 8879//NOTATION Extensible Markup Language (XML) 1.0//EN', None)

#  XML 1.0 CDATA 


Cdata = pycopia.XML.POM.Notation(u'cdata', u'-//W3C//NOTATION XML 1.0: CDATA//EN', None)

#  SGML Formal Public Identifiers 


Fpi = pycopia.XML.POM.Notation(u'fpi', u'ISO 8879:1986//NOTATION Formal Public Identifier//EN', None)

#  XHTML Notations ................................... 


#  Length defined for cellpadding/cellspacing 


#  nn for pixels or nn% for percentage length 


Length = pycopia.XML.POM.Notation(u'length', u'-//W3C//NOTATION XHTML Datatype: Length//EN', None)

#  space-separated list of link types 


Linktypes = pycopia.XML.POM.Notation(u'linkTypes', u'-//W3C//NOTATION XHTML Datatype: LinkTypes//EN', None)

#  single or comma-separated list of media descriptors 


Mediadesc = pycopia.XML.POM.Notation(u'mediaDesc', u'-//W3C//NOTATION XHTML Datatype: MediaDesc//EN', None)

#  pixel, percentage, or relative 


Multilength = pycopia.XML.POM.Notation(u'multiLength', u'-//W3C//NOTATION XHTML Datatype: MultiLength//EN', None)

#  one or more digits (NUMBER) 


Number = pycopia.XML.POM.Notation(u'number', u'-//W3C//NOTATION XHTML Datatype: Number//EN', None)

#  integer representing length in pixels 


Pixels = pycopia.XML.POM.Notation(u'pixels', u'-//W3C//NOTATION XHTML Datatype: Pixels//EN', None)

#  script expression 


Script = pycopia.XML.POM.Notation(u'script', u'-//W3C//NOTATION XHTML Datatype: Script//EN', None)

#  textual content 


Text = pycopia.XML.POM.Notation(u'text', u'-//W3C//NOTATION XHTML Datatype: Text//EN', None)

#  Imported Notations ................................ 


#  a single character from [ISO10646] 


Character = pycopia.XML.POM.Notation(u'character', u'-//W3C//NOTATION XHTML Datatype: Character//EN', None)

#  a character encoding, as per [RFC2045] 


Charset = pycopia.XML.POM.Notation(u'charset', u'-//W3C//NOTATION XHTML Datatype: Charset//EN', None)

#  a space separated list of character encodings, as per [RFC2045] 


Charsets = pycopia.XML.POM.Notation(u'charsets', u'-//W3C//NOTATION XHTML Datatype: Charsets//EN', None)

#  media type, as per [RFC2045] 


Contenttype = pycopia.XML.POM.Notation(u'contentType', u'-//W3C//NOTATION XHTML Datatype: ContentType//EN', None)

#  comma-separated list of media types, as per [RFC2045] 


Contenttypes = pycopia.XML.POM.Notation(u'contentTypes', u'-//W3C//NOTATION XHTML Datatype: ContentTypes//EN', None)

#  date and time information. ISO date format 


Datetime = pycopia.XML.POM.Notation(u'datetime', u'-//W3C//NOTATION XHTML Datatype: Datetime//EN', None)

#  a language code, as per [RFC3066] 


Languagecode = pycopia.XML.POM.Notation(u'languageCode', u'-//W3C//NOTATION XHTML Datatype: LanguageCode//EN', None)

#  a Uniform Resource Identifier, see [URI] 


Uri = pycopia.XML.POM.Notation(u'uri', u'-//W3C//NOTATION XHTML Datatype: URI//EN', None)

#  a space-separated list of Uniform Resource Identifiers, see [URI] 


Uris = pycopia.XML.POM.Notation(u'uris', u'-//W3C//NOTATION XHTML Datatype: URIs//EN', None)

#  end of xhtml-notations-1.mod 


#  ...................................................................... 


#  XHTML Datatypes Module  .............................................. 


#  file: xhtml-datatypes-1.mod
# 
#      This is XHTML, a reformulation of HTML as a modular XML application.
#      Copyright 1998-2001 W3C (MIT, INRIA, Keio), All Rights Reserved.
#      Revision: $Id$ SMI
# 
#      This DTD module is identified by the PUBLIC and SYSTEM identifiers:
# 
#        PUBLIC "-//W3C//ENTITIES XHTML Datatypes 1.0//EN"
#        SYSTEM "http://www.w3.org/TR/xhtml-modularization/DTD/xhtml-datatypes-1.mod"
# 
#      Revisions:
#      (none)
#      ....................................................................... 


#  Datatypes
# 
#      defines containers for the following datatypes, many of
#      these imported from other specifications and standards.
# 


#  Length defined for cellpadding/cellspacing 


#  nn for pixels or nn% for percentage length 


#  space-separated list of link types 


#  single or comma-separated list of media descriptors 


#  pixel, percentage, or relative 


#  one or more digits (NUMBER) 


#  integer representing length in pixels 


#  script expression 


#  textual content 


#  Imported Datatypes ................................ 


#  a single character from [ISO10646] 


#  a character encoding, as per [RFC2045] 


#  a space separated list of character encodings, as per [RFC2045] 


#  Color specification using color name or sRGB (#RRGGBB) values 


#  media type, as per [RFC2045] 


#  comma-separated list of media types, as per [RFC2045] 


#  date and time information. ISO date format 


#  formal public identifier, as per [ISO8879] 


#  a language code, as per [RFC3066] 


#  a Uniform Resource Identifier, see [URI] 


#  a space-separated list of Uniform Resource Identifiers, see [URI] 


#  end of xhtml-datatypes-1.mod 


#  placeholder for XLink support module 


#  ....................................................................... 


#  XHTML Qname Module  ................................................... 


#  file: xhtml-qname-1.mod
# 
#      This is XHTML, a reformulation of HTML as a modular XML application.
#      Copyright 1998-2001 W3C (MIT, INRIA, Keio), All Rights Reserved.
#      Revision: $Id$ SMI
# 
#      This DTD module is identified by the PUBLIC and SYSTEM identifiers:
# 
#        PUBLIC "-//W3C//ENTITIES XHTML Qualified Names 1.0//EN"
#        SYSTEM "http://www.w3.org/TR/xhtml-modularization/DTD/xhtml-qname-1.mod"
# 
#      Revisions:
# #2000-10-22: added qname declarations for ruby elements
#      ....................................................................... 


#  XHTML Qname (Qualified Name) Module
# 
#      This module is contained in two parts, labeled Section 'A' and 'B':
# 
#        Section A declares parameter entities to support namespace-
#        qualified names, namespace declarations, and name prefixing
#        for XHTML and extensions.
# 
#        Section B declares parameter entities used to provide
#        namespace-qualified names for all XHTML element types:
# 
#          %applet.qname;   the xmlns-qualified name for <applet>
#          %base.qname;     the xmlns-qualified name for <base>
#          ...
# 
#      XHTML extensions would create a module similar to this one.
#      Included in the XHTML distribution is a template module
#      ('template-qname-1.mod') suitable for this purpose.
# 


#  Section A: XHTML XML Namespace Framework :::::::::::::::::::: 


#  1. Declare a %XHTML.prefixed; conditional section keyword, used
#         to activate namespace prefixing. The default value should
#         inherit '%NS.prefixed;' from the DTD driver, so that unless
#         overridden, the default behaviour follows the overall DTD
#         prefixing scheme.
# 


#  2. Declare a parameter entity (eg., %XHTML.xmlns;) containing
#         the URI reference used to identify the XHTML namespace:
# 


#  3. Declare parameter entities (eg., %XHTML.prefix;) containing
#         the default namespace prefix string(s) to use when prefixing
#         is enabled. This may be overridden in the DTD driver or the
#         internal subset of an document instance. If no default prefix
#         is desired, this may be declared as an empty string.
# 
#      NOTE: As specified in [XMLNAMES], the namespace prefix serves
#      as a proxy for the URI reference, and is not in itself significant.
# 


#  4. Declare parameter entities (eg., %XHTML.pfx;) containing the
#         colonized prefix(es) (eg., '%XHTML.prefix;:') used when
#         prefixing is active, an empty string when it is not.
# 


#  declare qualified name extensions here ............ 


#  5. The parameter entity %XHTML.xmlns.extra.attrib; may be
#         redeclared to contain any non-XHTML namespace declaration
#         attributes for namespaces embedded in XHTML. The default
#         is an empty string.  XLink should be included here if used
#         in the DTD.
# 


#  The remainder of Section A is only followed in XHTML, not extensions. 


#  Declare a parameter entity %NS.decl.attrib; containing
#      all XML Namespace declarations used in the DTD, plus the
#      xmlns declaration for XHTML, its form dependent on whether
#      prefixing is active.
# 


#  This is a placeholder for future XLink support.
# 


#  Declare a parameter entity %NS.decl.attrib; containing all
#      XML namespace declaration attributes used by XHTML, including
#      a default xmlns attribute when prefixing is inactive.
# 


#  placeholder for qualified name redeclarations 


#  Section B: XHTML Qualified Names ::::::::::::::::::::::::::::: 


#  6. This section declares parameter entities used to provide
#         namespace-qualified names for all XHTML element types.
# 


#  module:  xhtml-applet-1.mod 


#  module:  xhtml-base-1.mod 


#  module:  xhtml-bdo-1.mod 


#  module:  xhtml-blkphras-1.mod 


#  module:  xhtml-blkpres-1.mod 


#  module:  xhtml-blkstruct-1.mod 


#  module:  xhtml-edit-1.mod 


#  module:  xhtml-form-1.mod 


#  module:  xhtml-hypertext-1.mod 


#  module:  xhtml-image-1.mod 


#  module:  xhtml-inlphras-1.mod 


#  module:  xhtml-inlpres-1.mod 


#  module:  xhtml-inlstruct-1.mod 


#  module:  xhtml-ismap-1.mod (also csismap, ssismap) 


#  module:  xhtml-link-1.mod 


#  module:  xhtml-list-1.mod 


#  module:  xhtml-meta-1.mod 


#  module:  xhtml-param-1.mod 


#  module:  xhtml-object-1.mod 


#  module:  xhtml-script-1.mod 


#  module:  xhtml-struct-1.mod 


#  module:  xhtml-style-1.mod 


#  module:  xhtml-table-1.mod 


#  module:  xhtml-ruby-1.mod 


#  Provisional XHTML 2.0 Qualified Names  ...................... 


#  module:  xhtml-image-2.mod 


#  end of xhtml-qname-1.mod 


#  ...................................................................... 


#  XHTML Common Attributes Module  ...................................... 


#  file: xhtml-attribs-1.mod
# 
#      This is XHTML, a reformulation of HTML as a modular XML application.
#      Copyright 1998-2001 W3C (MIT, INRIA, Keio), All Rights Reserved.
#      Revision: $Id$ SMI
# 
#      This DTD module is identified by the PUBLIC and SYSTEM identifiers:
# 
#        PUBLIC "-//W3C//ENTITIES XHTML Common Attributes 1.0//EN"
#        SYSTEM "http://www.w3.org/TR/xhtml-modularization/DTD/xhtml-attribs-1.mod"
# 
#      Revisions:
#      (none)
#      ....................................................................... 


#  Common Attributes
# 
#      This module declares many of the common attributes for the XHTML DTD.
#      %NS.decl.attrib; is declared in the XHTML Qname module.
# 


#  intrinsic event attributes declared previously
# 


#  end of xhtml-attribs-1.mod 


#  placeholder for content model redeclarations 


#  instantiate the Document Model module declared in the DTD driver
# 


#  ....................................................................... 


#  XHTML Mobile 1.0 Document Model Module  .................................... 


#  file: xhtml-mobile10-model-1.mod
# 
#      This is XHTML Mobile, a proper subset of XHTML.
#      	@Wireless Application Protocol Forum, Ltd. 2001.
# 
# 	Terms and conditions of use are available from the Wireless Application Protocol Forum Ltd. 
# 	Web site (http://www.wapforum.org/what/copyright.htm).
#     
# 


#  XHTML Mobile Document Model
# 
#      This module describes the groupings of elements that make up
#      common content models for XHTML elements.
# 


#  Optional Elements in head  .............. 


#  Miscellaneous Elements  ................. 


#  Inline Elements  ........................ 


#  Block Elements  ......................... 


#  All Content Elements  ................... 


#  declares all content except tables
# 


#  end of xhtml-mobile10-model-1.mod 


#  ...................................................................... 


#  XHTML Character Entities Module  ......................................... 


#  file: xhtml-charent-1.mod
# 
#      This is XHTML, a reformulation of HTML as a modular XML application.
#      Copyright 1998-2001 W3C (MIT, INRIA, Keio), All Rights Reserved.
#      Revision: $Id$ SMI
# 
#      This DTD module is identified by the PUBLIC and SYSTEM identifiers:
# 
#        PUBLIC "-//W3C//ENTITIES XHTML Character Entities 1.0//EN"
#        SYSTEM "http://www.w3.org/TR/xhtml-modularization/DTD/xhtml-charent-1.mod"
# 
#      Revisions:
#      (none)
#      ....................................................................... 


#  Character Entities for XHTML
# 
#      This module declares the set of character entities for XHTML,
#      including the Latin 1, Symbol and Special character collections.
# 


#  ...................................................................... 


#  XML-compatible ISO Latin 1 Character Entity Set for XHTML ............ 


#  file: xhtml-lat1.ent
# 
#      Typical invocation:
# 
#        <!ENTITY % xhtml-lat1
#            PUBLIC "-//W3C//ENTITIES Latin 1 for XHTML//EN"
#                   "xhtml-lat1.ent" >
#        %xhtml-lat1;
# 
#      This DTD module is identified by the PUBLIC and SYSTEM identifiers:
# 
#        PUBLIC "-//W3C//ENTITIES Latin 1 for XHTML//EN"
#        SYSTEM "http://www.w3.org/TR/xhtml-modularization/DTD/xhtml-lat1.ent"
# 
#      Revision:  $Id$ SMI
# 
#      Portions (C) International Organization for Standardization 1986:
#      Permission to copy in any form is granted for use with conforming
#      SGML systems and applications as defined in ISO 8879, provided
#      this notice is included in all copies.
# 


#  no-break space = non-breaking space, U+00A0 ISOnum 


#  inverted exclamation mark, U+00A1 ISOnum 


#  cent sign, U+00A2 ISOnum 


#  pound sign, U+00A3 ISOnum 


#  currency sign, U+00A4 ISOnum 


#  yen sign = yuan sign, U+00A5 ISOnum 


#  broken bar = broken vertical bar, U+00A6 ISOnum 


#  section sign, U+00A7 ISOnum 


#  diaeresis = spacing diaeresis, U+00A8 ISOdia 


#  copyright sign, U+00A9 ISOnum 


#  feminine ordinal indicator, U+00AA ISOnum 


#  left-pointing double angle quotation mark = left pointing guillemet, U+00AB ISOnum 


#  not sign, U+00AC ISOnum 


#  soft hyphen = discretionary hyphen, U+00AD ISOnum 


#  registered sign = registered trade mark sign, U+00AE ISOnum 


#  macron = spacing macron = overline = APL overbar, U+00AF ISOdia 


#  degree sign, U+00B0 ISOnum 


#  plus-minus sign = plus-or-minus sign, U+00B1 ISOnum 


#  superscript two = superscript digit two = squared, U+00B2 ISOnum 


#  superscript three = superscript digit three = cubed, U+00B3 ISOnum 


#  acute accent = spacing acute, U+00B4 ISOdia 


#  micro sign, U+00B5 ISOnum 


#  pilcrow sign = paragraph sign, U+00B6 ISOnum 


#  middle dot = Georgian comma = Greek middle dot, U+00B7 ISOnum 


#  cedilla = spacing cedilla, U+00B8 ISOdia 


#  superscript one = superscript digit one, U+00B9 ISOnum 


#  masculine ordinal indicator, U+00BA ISOnum 


#  right-pointing double angle quotation mark = right pointing guillemet, U+00BB ISOnum 


#  vulgar fraction one quarter = fraction one quarter, U+00BC ISOnum 


#  vulgar fraction one half = fraction one half, U+00BD ISOnum 


#  vulgar fraction three quarters = fraction three quarters, U+00BE ISOnum 


#  inverted question mark = turned question mark, U+00BF ISOnum 


#  latin capital A with grave = latin capital A grave, U+00C0 ISOlat1 


#  latin capital A with acute, U+00C1 ISOlat1 


#  latin capital A with circumflex, U+00C2 ISOlat1 


#  latin capital A with tilde, U+00C3 ISOlat1 


#  latin capital A with diaeresis, U+00C4 ISOlat1 


#  latin capital A with ring above = latin capital A ring, U+00C5 ISOlat1 


#  latin capital AE = latin capital ligature AE, U+00C6 ISOlat1 


#  latin capital C with cedilla, U+00C7 ISOlat1 


#  latin capital E with grave, U+00C8 ISOlat1 


#  latin capital E with acute, U+00C9 ISOlat1 


#  latin capital E with circumflex, U+00CA ISOlat1 


#  latin capital E with diaeresis, U+00CB ISOlat1 


#  latin capital I with grave, U+00CC ISOlat1 


#  latin capital I with acute, U+00CD ISOlat1 


#  latin capital I with circumflex, U+00CE ISOlat1 


#  latin capital I with diaeresis, U+00CF ISOlat1 


#  latin capital ETH, U+00D0 ISOlat1 


#  latin capital N with tilde, U+00D1 ISOlat1 


#  latin capital O with grave, U+00D2 ISOlat1 


#  latin capital O with acute, U+00D3 ISOlat1 


#  latin capital O with circumflex, U+00D4 ISOlat1 


#  latin capital O with tilde, U+00D5 ISOlat1 


#  latin capital O with diaeresis, U+00D6 ISOlat1 


#  multiplication sign, U+00D7 ISOnum 


#  latin capital O with stroke = latin capital O slash, U+00D8 ISOlat1 


#  latin capital U with grave, U+00D9 ISOlat1 


#  latin capital U with acute, U+00DA ISOlat1 


#  latin capital U with circumflex, U+00DB ISOlat1 


#  latin capital U with diaeresis, U+00DC ISOlat1 


#  latin capital Y with acute, U+00DD ISOlat1 


#  latin capital THORN, U+00DE ISOlat1 


#  latin small sharp s = ess-zed, U+00DF ISOlat1 


#  latin small a with grave = latin small a grave, U+00E0 ISOlat1 


#  latin small a with acute, U+00E1 ISOlat1 


#  latin small a with circumflex, U+00E2 ISOlat1 


#  latin small a with tilde, U+00E3 ISOlat1 


#  latin small a with diaeresis, U+00E4 ISOlat1 


#  latin small a with ring above = latin small a ring, U+00E5 ISOlat1 


#  latin small ae = latin small ligature ae, U+00E6 ISOlat1 


#  latin small c with cedilla, U+00E7 ISOlat1 


#  latin small e with grave, U+00E8 ISOlat1 


#  latin small e with acute, U+00E9 ISOlat1 


#  latin small e with circumflex, U+00EA ISOlat1 


#  latin small e with diaeresis, U+00EB ISOlat1 


#  latin small i with grave, U+00EC ISOlat1 


#  latin small i with acute, U+00ED ISOlat1 


#  latin small i with circumflex, U+00EE ISOlat1 


#  latin small i with diaeresis, U+00EF ISOlat1 


#  latin small eth, U+00F0 ISOlat1 


#  latin small n with tilde, U+00F1 ISOlat1 


#  latin small o with grave, U+00F2 ISOlat1 


#  latin small o with acute, U+00F3 ISOlat1 


#  latin small o with circumflex, U+00F4 ISOlat1 


#  latin small o with tilde, U+00F5 ISOlat1 


#  latin small o with diaeresis, U+00F6 ISOlat1 


#  division sign, U+00F7 ISOnum 


#  latin small o with stroke, = latin small o slash, U+00F8 ISOlat1 


#  latin small u with grave, U+00F9 ISOlat1 


#  latin small u with acute, U+00FA ISOlat1 


#  latin small u with circumflex, U+00FB ISOlat1 


#  latin small u with diaeresis, U+00FC ISOlat1 


#  latin small y with acute, U+00FD ISOlat1 


#  latin small thorn with, U+00FE ISOlat1 


#  latin small y with diaeresis, U+00FF ISOlat1 


#  end of xhtml-lat1.ent 


#  ...................................................................... 


#  ISO Math, Greek and Symbolic Character Entity Set for XHTML .......... 


#  file: xhtml-symbol.ent
# 
#      Typical invocation:
# 
#        <!ENTITY % xhtml-symbol
#            PUBLIC "-//W3C//ENTITIES Symbols for XHTML//EN"
#                   "xhtml-symbol.ent" >
#        %xhtml-symbol;
# 
#      This DTD module is identified by the PUBLIC and SYSTEM identifiers:
# 
#        PUBLIC "-//W3C//ENTITIES Symbols for XHTML//EN"
#        SYSTEM "http://www.w3.org/TR/xhtml-modularization/DTD/xhtml-symbol.ent"
# 
#      Revision:  $Id$ SMI
# 
#      Portions (C) International Organization for Standardization 1986:
#      Permission to copy in any form is granted for use with conforming
#      SGML systems and applications as defined in ISO 8879, provided
#      this notice is included in all copies.
# 


#  Relevant ISO entity set is given unless names are newly introduced.
#      New names (i.e., not in ISO 8879 [SGML] list) do not clash with
#      any existing ISO 8879 entity names. ISO 10646 [ISO10646] character
#      numbers are given for each character, in hex. Entity values are
#      decimal conversions of the ISO 10646 values and refer to the
#      document character set. Names are Unicode [UNICODE] names.
# 


#  Latin Extended-B 


#  latin small f with hook = function
#                               = florin, U+0192 ISOtech 


#  Greek 


#  greek capital letter alpha, U+0391 


#  greek capital letter beta, U+0392 


#  greek capital letter gamma, U+0393 ISOgrk3 


#  greek capital letter delta, U+0394 ISOgrk3 


#  greek capital letter epsilon, U+0395 


#  greek capital letter zeta, U+0396 


#  greek capital letter eta, U+0397 


#  greek capital letter theta, U+0398 ISOgrk3 


#  greek capital letter iota, U+0399 


#  greek capital letter kappa, U+039A 


#  greek capital letter lambda, U+039B ISOgrk3 


#  greek capital letter mu, U+039C 


#  greek capital letter nu, U+039D 


#  greek capital letter xi, U+039E ISOgrk3 


#  greek capital letter omicron, U+039F 


#  greek capital letter pi, U+03A0 ISOgrk3 


#  greek capital letter rho, U+03A1 


#  there is no Sigmaf, and no U+03A2 character either 


#  greek capital letter sigma, U+03A3 ISOgrk3 


#  greek capital letter tau, U+03A4 


#  greek capital letter upsilon,
#                               U+03A5 ISOgrk3 


#  greek capital letter phi, U+03A6 ISOgrk3 


#  greek capital letter chi, U+03A7 


#  greek capital letter psi, U+03A8 ISOgrk3 


#  greek capital letter omega, U+03A9 ISOgrk3 


#  greek small letter alpha, U+03B1 ISOgrk3 


#  greek small letter beta, U+03B2 ISOgrk3 


#  greek small letter gamma, U+03B3 ISOgrk3 


#  greek small letter delta, U+03B4 ISOgrk3 


#  greek small letter epsilon, U+03B5 ISOgrk3 


#  greek small letter zeta, U+03B6 ISOgrk3 


#  greek small letter eta, U+03B7 ISOgrk3 


#  greek small letter theta, U+03B8 ISOgrk3 


#  greek small letter iota, U+03B9 ISOgrk3 


#  greek small letter kappa, U+03BA ISOgrk3 


#  greek small letter lambda, U+03BB ISOgrk3 


#  greek small letter mu, U+03BC ISOgrk3 


#  greek small letter nu, U+03BD ISOgrk3 


#  greek small letter xi, U+03BE ISOgrk3 


#  greek small letter omicron, U+03BF NEW 


#  greek small letter pi, U+03C0 ISOgrk3 


#  greek small letter rho, U+03C1 ISOgrk3 


#  greek small letter final sigma, U+03C2 ISOgrk3 


#  greek small letter sigma, U+03C3 ISOgrk3 


#  greek small letter tau, U+03C4 ISOgrk3 


#  greek small letter upsilon, U+03C5 ISOgrk3 


#  greek small letter phi, U+03C6 ISOgrk3 


#  greek small letter chi, U+03C7 ISOgrk3 


#  greek small letter psi, U+03C8 ISOgrk3 


#  greek small letter omega, U+03C9 ISOgrk3 


#  greek small letter theta symbol, U+03D1 NEW 


#  greek upsilon with hook symbol, U+03D2 NEW 


#  greek pi symbol, U+03D6 ISOgrk3 


#  General Punctuation 


#  bullet = black small circle, U+2022 ISOpub  


#  bullet is NOT the same as bullet operator, U+2219 


#  horizontal ellipsis = three dot leader, U+2026 ISOpub  


#  prime = minutes = feet, U+2032 ISOtech 


#  double prime = seconds = inches, U+2033 ISOtech 


#  overline = spacing overscore, U+203E NEW 


#  fraction slash, U+2044 NEW 


#  Letterlike Symbols 


#  script capital P = power set = Weierstrass p, U+2118 ISOamso 


#  blackletter capital I = imaginary part, U+2111 ISOamso 


#  blackletter capital R = real part symbol, U+211C ISOamso 


#  trade mark sign, U+2122 ISOnum 


#  alef symbol = first transfinite cardinal, U+2135 NEW 


#  alef symbol is NOT the same as hebrew letter alef, U+05D0 although
#      the same glyph could be used to depict both characters 


#  Arrows 


#  leftwards arrow, U+2190 ISOnum 


#  upwards arrow, U+2191 ISOnum


#  rightwards arrow, U+2192 ISOnum 


#  downwards arrow, U+2193 ISOnum 


#  left right arrow, U+2194 ISOamsa 


#  downwards arrow with corner leftwards
#                                = carriage return, U+21B5 NEW 


#  leftwards double arrow, U+21D0 ISOtech 


#  Unicode does not say that lArr is the same as the 'is implied by' arrow
#     but also does not have any other character for that function. So ? lArr can
#     be used for 'is implied by' as ISOtech suggests 


#  upwards double arrow, U+21D1 ISOamsa 


#  rightwards double arrow, U+21D2 ISOtech 


#  Unicode does not say this is the 'implies' character but does not have
#      another character with this function so ?
#      rArr can be used for 'implies' as ISOtech suggests 


#  downwards double arrow, U+21D3 ISOamsa 


#  left right double arrow, U+21D4 ISOamsa 


#  Mathematical Operators 


#  for all, U+2200 ISOtech 


#  partial differential, U+2202 ISOtech  


#  there exists, U+2203 ISOtech 


#  empty set = null set = diameter, U+2205 ISOamso 


#  nabla = backward difference, U+2207 ISOtech 


#  element of, U+2208 ISOtech 


#  not an element of, U+2209 ISOtech 


#  contains as member, U+220B ISOtech 


#  should there be a more memorable name than 'ni'? 


#  n-ary product = product sign, U+220F ISOamsb 


#  prod is NOT the same character as U+03A0 'greek capital letter pi' though
#      the same glyph might be used for both 


#  n-ary sumation, U+2211 ISOamsb 


#  sum is NOT the same character as U+03A3 'greek capital letter sigma'
#      though the same glyph might be used for both 


#  minus sign, U+2212 ISOtech 


#  asterisk operator, U+2217 ISOtech 


#  square root = radical sign, U+221A ISOtech 


#  proportional to, U+221D ISOtech 


#  infinity, U+221E ISOtech 


#  angle, U+2220 ISOamso 


#  logical and = wedge, U+2227 ISOtech 


#  logical or = vee, U+2228 ISOtech 


#  intersection = cap, U+2229 ISOtech 


#  union = cup, U+222A ISOtech 


#  integral, U+222B ISOtech 


#  therefore, U+2234 ISOtech 


#  tilde operator = varies with = similar to, U+223C ISOtech 


#  tilde operator is NOT the same character as the tilde, U+007E,
#      although the same glyph might be used to represent both  


#  approximately equal to, U+2245 ISOtech 


#  almost equal to = asymptotic to, U+2248 ISOamsr 


#  not equal to, U+2260 ISOtech 


#  identical to, U+2261 ISOtech 


#  less-than or equal to, U+2264 ISOtech 


#  greater-than or equal to, U+2265 ISOtech 


#  subset of, U+2282 ISOtech 


#  superset of, U+2283 ISOtech 


#  note that nsup, 'not a superset of, U+2283' is not covered by the Symbol
#      font encoding and is not included. Should it be, for symmetry?
#      It is in ISOamsn  


#  not a subset of, U+2284 ISOamsn 


#  subset of or equal to, U+2286 ISOtech 


#  superset of or equal to, U+2287 ISOtech 


#  circled plus = direct sum, U+2295 ISOamsb 


#  circled times = vector product, U+2297 ISOamsb 


#  up tack = orthogonal to = perpendicular, U+22A5 ISOtech 


#  dot operator, U+22C5 ISOamsb 


#  dot operator is NOT the same character as U+00B7 middle dot 


#  Miscellaneous Technical 


#  left ceiling = apl upstile, U+2308 ISOamsc  


#  right ceiling, U+2309 ISOamsc  


#  left floor = apl downstile, U+230A ISOamsc  


#  right floor, U+230B ISOamsc  


#  left-pointing angle bracket = bra, U+2329 ISOtech 


#  lang is NOT the same character as U+003C 'less than'
#      or U+2039 'single left-pointing angle quotation mark' 


#  right-pointing angle bracket = ket, U+232A ISOtech 


#  rang is NOT the same character as U+003E 'greater than'
#      or U+203A 'single right-pointing angle quotation mark' 


#  Geometric Shapes 


#  lozenge, U+25CA ISOpub 


#  Miscellaneous Symbols 


#  black spade suit, U+2660 ISOpub 


#  black here seems to mean filled as opposed to hollow 


#  black club suit = shamrock, U+2663 ISOpub 


#  black heart suit = valentine, U+2665 ISOpub 


#  black diamond suit, U+2666 ISOpub 


#  end of xhtml-symbol.ent 


#  ...................................................................... 


#  XML-compatible ISO Special Character Entity Set for XHTML ............ 


#  file: xhtml-special.ent
# 
#      Typical invocation:
# 
#        <!ENTITY % xhtml-special
#            PUBLIC "-//W3C//ENTITIES Special for XHTML//EN"
#                   "xhtml-special.ent" >
#        %xhtml-special;
# 
#      This DTD module is identified by the PUBLIC and SYSTEM identifiers:
# 
#        PUBLIC "-//W3C//ENTITIES Special for XHTML//EN"
#        SYSTEM "http://www.w3.org/TR/xhtml-modularization/DTD/xhtml-special.ent"
# 
#      Revision:  $Id$ SMI
# 
#      Portions (C) International Organization for Standardization 1986:
#      Permission to copy in any form is granted for use with conforming
#      SGML systems and applications as defined in ISO 8879, provided
#      this notice is included in all copies.
# 
#      Revisions:
# 2000-10-28: added &apos; and altered XML Predefined Entities for compatibility
# 


#  Relevant ISO entity set is given unless names are newly introduced.
#      New names (i.e., not in ISO 8879 [SGML] list) do not clash with
#      any existing ISO 8879 entity names. ISO 10646 [ISO10646] character
#      numbers are given for each character, in hex. Entity values are
#      decimal conversions of the ISO 10646 values and refer to the
#      document character set. Names are Unicode [UNICODE] names.
# 


#  C0 Controls and Basic Latin 


#  less-than sign, U+003C ISOnum 


#  greater-than sign, U+003E ISOnum 


#  ampersand, U+0026 ISOnum 


#  apostrophe, U+0027 ISOnum 


#  quotation mark = APL quote, U+0022 ISOnum 


#  Latin Extended-A 


#  latin capital ligature OE, U+0152 ISOlat2 


#  latin small ligature oe, U+0153 ISOlat2 


#  ligature is a misnomer, this is a separate character in some languages 


#  latin capital letter S with caron, U+0160 ISOlat2 


#  latin small letter s with caron, U+0161 ISOlat2 


#  latin capital letter Y with diaeresis, U+0178 ISOlat2 


#  Spacing Modifier Letters 


#  modifier letter circumflex accent, U+02C6 ISOpub 


#  small tilde, U+02DC ISOdia 


#  General Punctuation 


#  en space, U+2002 ISOpub 


#  em space, U+2003 ISOpub 


#  thin space, U+2009 ISOpub 


#  zero width non-joiner, U+200C NEW RFC 2070 


#  zero width joiner, U+200D NEW RFC 2070 


#  left-to-right mark, U+200E NEW RFC 2070 


#  right-to-left mark, U+200F NEW RFC 2070 


#  en dash, U+2013 ISOpub 


#  em dash, U+2014 ISOpub 


#  left single quotation mark, U+2018 ISOnum 


#  right single quotation mark, U+2019 ISOnum 


#  single low-9 quotation mark, U+201A NEW 


#  left double quotation mark, U+201C ISOnum 


#  right double quotation mark, U+201D ISOnum 


#  double low-9 quotation mark, U+201E NEW 


#  dagger, U+2020 ISOpub 


#  double dagger, U+2021 ISOpub 


#  per mille sign, U+2030 ISOtech 


#  lsaquo is proposed but not yet ISO standardized 


#  single left-pointing angle quotation mark, U+2039 ISO proposed 


#  rsaquo is proposed but not yet ISO standardized 


#  single right-pointing angle quotation mark, U+203A ISO proposed 


#  euro sign, U+20AC NEW 


#  end of xhtml-special.ent 


#  end of xhtml-charent-1.mod 


#  end of xhtml-framework-1.mod 


#  XHTML Core Modules ........................................ 


#  ...................................................................... 


#  XHTML Text Module  ................................................... 


#  file: xhtml-text-1.mod
# 
#      This is XHTML, a reformulation of HTML as a modular XML application.
#      Copyright 1998-2001 W3C (MIT, INRIA, Keio), All Rights Reserved.
#      Revision: $Id$ SMI
# 
#      This DTD module is identified by the PUBLIC and SYSTEM identifiers:
# 
#        PUBLIC "-//W3C//ELEMENTS XHTML Text 1.0//EN"
#        SYSTEM "http://www.w3.org/TR/xhtml-modularization/DTD/xhtml-text-1.mod"
# 
#      Revisions:
#      (none)
#      ....................................................................... 


#  Textual Content
# 
#      The Text module includes declarations for all core
#      text container elements and their attributes.
# 


#  ...................................................................... 


#  XHTML Inline Structural Module  ...................................... 


#  file: xhtml-inlstruct-1.mod
# 
#      This is XHTML, a reformulation of HTML as a modular XML application.
#      Copyright 1998-2001 W3C (MIT, INRIA, Keio), All Rights Reserved.
#      Revision: $Id$ SMI
# 
#      This DTD module is identified by the PUBLIC and SYSTEM identifiers:
# 
#        PUBLIC "-//W3C//ELEMENTS XHTML Inline Structural 1.0//EN"
#        SYSTEM "http://www.w3.org/TR/xhtml-modularization/DTD/xhtml-inlstruct-1.mod"
# 
#      Revisions:
#      (none)
#      ....................................................................... 


#  Inline Structural
# 
#         br, span
# 
#      This module declares the elements and their attributes
#      used to support inline-level structural markup.
# 


#  br: forced line break ............................. 


class Br(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'class_': attribClass_3214756266708739600, 
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'id': attribId_121205855951786596, 
         'title': attribTitle_4254840287891469241, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel(None)
	_name = u'br'


#  end of br.element 


#  end of br.attlist 


#  span: generic inline container .................... 


class Span(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'class_': attribClass_3214756266708739600, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'span'


#  end of span.element 


#  end of span.attlist 


#  end of xhtml-inlstruct-1.mod 


#  ...................................................................... 


#  XHTML Inline Phrasal Module  ......................................... 


#  file: xhtml-inlphras-1.mod
# 
#      This is XHTML, a reformulation of HTML as a modular XML application.
#      Copyright 1998-2001 W3C (MIT, INRIA, Keio), All Rights Reserved.
#      Revision: $Id$ SMI
# 
#      This DTD module is identified by the PUBLIC and SYSTEM identifiers:
# 
#        PUBLIC "-//W3C//ELEMENTS XHTML Inline Phrasal 1.0//EN"
#        SYSTEM "http://www.w3.org/TR/xhtml-modularization/DTD/xhtml-inlphras-1.mod"
# 
#      Revisions:
#      (none)
#      ....................................................................... 


#  Inline Phrasal
# 
#         abbr, acronym, cite, code, dfn, em, kbd, q, samp, strong, var
# 
#      This module declares the elements and their attributes used to
#      support inline-level phrasal markup.
# 


class Abbr(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'class_': attribClass_3214756266708739600, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'abbr'


#  end of abbr.element 


#  end of abbr.attlist 


class Acronym(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'class_': attribClass_3214756266708739600, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'acronym'


#  end of acronym.element 


#  end of acronym.attlist 


class Cite(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'class_': attribClass_3214756266708739600, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'cite'


#  end of cite.element 


#  end of cite.attlist 


class Code(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'class_': attribClass_3214756266708739600, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'code'


#  end of code.element 


#  end of code.attlist 


class Dfn(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'class_': attribClass_3214756266708739600, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'dfn'


#  end of dfn.element 


#  end of dfn.attlist 


class Em(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'class_': attribClass_3214756266708739600, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'em'


#  end of em.element 


#  end of em.attlist 


class Kbd(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'class_': attribClass_3214756266708739600, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'kbd'


#  end of kbd.element 


#  end of kbd.attlist 


class Q(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'cite': attribCite_2366926375086749281, 
         'class_': attribClass_3214756266708739600, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'q'


#  end of q.element 


#  end of q.attlist 


class Samp(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'class_': attribClass_3214756266708739600, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'samp'


#  end of samp.element 


#  end of samp.attlist 


class Strong(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'class_': attribClass_3214756266708739600, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'strong'


#  end of strong.element 


#  end of strong.attlist 


class Var(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'class_': attribClass_3214756266708739600, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'var'


#  end of var.element 


#  end of var.attlist 


#  end of xhtml-inlphras-1.mod 


#  ...................................................................... 


#  XHTML Block Structural Module  ....................................... 


#  file: xhtml-blkstruct-1.mod
# 
#      This is XHTML, a reformulation of HTML as a modular XML application.
#      Copyright 1998-2001 W3C (MIT, INRIA, Keio), All Rights Reserved.
#      Revision: $Id$ SMI
# 
#      This DTD module is identified by the PUBLIC and SYSTEM identifiers:
# 
#        PUBLIC "-//W3C//ELEMENTS XHTML Block Structural 1.0//EN"
#        SYSTEM "http://www.w3.org/TR/xhtml-modularization/DTD/xhtml-blkstruct-1.mod"
# 
#      Revisions:
#      (none)
#      ....................................................................... 


#  Block Structural
# 
#         div, p
# 
#      This module declares the elements and their attributes used to
#      support block-level structural markup.
# 


class Div(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'class_': attribClass_3214756266708739600, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'div'


#  end of div.element 


#  end of div.attlist 


class P(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'class_': attribClass_3214756266708739600, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'p'


#  end of p.element 


#  end of p.attlist 


#  end of xhtml-blkstruct-1.mod 


#  ...................................................................... 


#  XHTML Block Phrasal Module  .......................................... 


#  file: xhtml-blkphras-1.mod
# 
#      This is XHTML, a reformulation of HTML as a modular XML application.
#      Copyright 1998-2001 W3C (MIT, INRIA, Keio), All Rights Reserved.
#      Revision: $Id$ SMI
# 
#      This DTD module is identified by the PUBLIC and SYSTEM identifiers:
# 
#        PUBLIC "-//W3C//ELEMENTS XHTML Block Phrasal 1.0//EN"
#        SYSTEM "http://www.w3.org/TR/xhtml-modularization/DTD/xhtml-blkphras-1.mod"
# 
#      Revisions:
#      (none)
#      ....................................................................... 


#  Block Phrasal
# 
#         address, blockquote, pre, h1, h2, h3, h4, h5, h6
# 
#      This module declares the elements and their attributes used to
#      support block-level phrasal markup.
# 


class Address(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'class_': attribClass_3214756266708739600, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'address'


#  end of address.element 


#  end of address.attlist 


class Blockquote(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'cite': attribCite_2366926375086749281, 
         'class_': attribClass_3214756266708739600, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'blockquote'


#  end of blockquote.element 


#  end of blockquote.attlist 


class Pre(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'xml_space': attribXml_space_359981169846238864, 
         'class_': attribClass_3214756266708739600, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'pre'


#  end of pre.element 


#  end of pre.attlist 


#  ...................  Heading Elements  ................... 


class H1(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'class_': attribClass_3214756266708739600, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'h1'


#  end of h1.element 


#  end of h1.attlist 


class H2(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'class_': attribClass_3214756266708739600, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'h2'


#  end of h2.element 


#  end of h2.attlist 


class H3(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'class_': attribClass_3214756266708739600, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'h3'


#  end of h3.element 


#  end of h3.attlist 


class H4(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'class_': attribClass_3214756266708739600, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'h4'


#  end of h4.element 


#  end of h4.attlist 


class H5(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'class_': attribClass_3214756266708739600, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'h5'


#  end of h5.element 


#  end of h5.attlist 


class H6(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'class_': attribClass_3214756266708739600, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'h6'


#  end of h6.element 


#  end of h6.attlist 


#  end of xhtml-blkphras-1.mod 


#  end of xhtml-text-1.mod 


#  ...................................................................... 


#  XHTML Hypertext Module  .............................................. 


#  file: xhtml-hypertext-1.mod
# 
#      This is XHTML, a reformulation of HTML as a modular XML application.
#      Copyright 1998-2001 W3C (MIT, INRIA, Keio), All Rights Reserved.
#      Revision: $Id$ SMI
# 
#      This DTD module is identified by the PUBLIC and SYSTEM identifiers:
# 
#        PUBLIC "-//W3C//ELEMENTS XHTML Hypertext 1.0//EN"
#        SYSTEM "http://www.w3.org/TR/xhtml-modularization/DTD/xhtml-hypertext-1.mod"
# 
#      Revisions:
#      (none)
#      ....................................................................... 


#  Hypertext
# 
#         a
# 
#      This module declares the anchor ('a') element type, which
#      defines the source of a hypertext link. The destination
#      (or link 'target') is identified via its 'id' attribute
#      rather than the 'name' attribute as was used in HTML.
# 


#  ............  Anchor Element  ............ 


class A(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'accesskey': attribAccesskey_2737575848648385424, 
         'charset': attribCharset_2456238898048849, 
         'rev': attribRev_684970124142549961, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'hreflang': attribHreflang_96177259461920569, 
         'class_': attribClass_3214756266708739600, 
         'href': attribHref_10590696292225, 
         'rel': attribRel_3659796562539513529, 
         'type': attribType_3598646553109970404, 
         'id': attribId_121205855951786596, 
         'tabindex': attribTabindex_1924349933320454025, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'a'


#  end of a.element 


#  end of a.attlist 


#  end of xhtml-hypertext-1.mod 


#  ...................................................................... 


#  XHTML Lists Module  .................................................. 


#  file: xhtml-list-1.mod
# 
#      This is XHTML, a reformulation of HTML as a modular XML application.
#      Copyright 1998-2001 W3C (MIT, INRIA, Keio), All Rights Reserved.
#      Revision: $Id$ SMI
# 
#      This DTD module is identified by the PUBLIC and SYSTEM identifiers:
# 
#        PUBLIC "-//W3C//ELEMENTS XHTML Lists 1.0//EN"
#        SYSTEM "http://www.w3.org/TR/xhtml-modularization/DTD/xhtml-list-1.mod"
# 
#      Revisions:
#      (none)
#      ....................................................................... 


#  Lists
# 
#         dl, dt, dd, ol, ul, li
# 
#      This module declares the list-oriented element types
#      and their attributes.
# 


#  dl: Definition List ............................... 


class Dl(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'class_': attribClass_3214756266708739600, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'dl'


#  end of dl.element 


#  end of dl.attlist 


#  dt: Definition Term ............................... 


class Dt(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'class_': attribClass_3214756266708739600, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'dt'


#  end of dt.element 


#  end of dt.attlist 


#  dd: Definition Description ........................ 


class Dd(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'class_': attribClass_3214756266708739600, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'dd'


#  end of dd.element 


#  end of dd.attlist 


#  ol: Ordered List (numbered styles) ................ 


class Ol(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'start': attribStart_37096382094932521, 
         'class_': attribClass_3214756266708739600, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'ol'


#  end of ol.element 


#  end of ol.attlist 


#  ul: Unordered List (bullet styles) ................ 


class Ul(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'class_': attribClass_3214756266708739600, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'ul'


#  end of ul.element 


#  end of ul.attlist 


#  li: List Item ..................................... 


class Li(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'value': attribValue_4156605816673722624, 
         'class_': attribClass_3214756266708739600, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'li'


#  end of li.element 


#  end of li.attlist 


#  end of xhtml-list-1.mod 


#  Extend lists with value and start attributes 


#  ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 


#  Image Module  ............................................... 


#  ...................................................................... 


#  XHTML Images Module  ................................................. 


#  file: xhtml-image-1.mod
# 
#      This is XHTML, a reformulation of HTML as a modular XML application.
#      Copyright 1998-2001 W3C (MIT, INRIA, Keio), All Rights Reserved.
#      Rovision: $Id$ SMI
# 
#      This DTD module is identified by the PUBLIC and SYSTEM identifiers:
# 
#        PUBLIC "-//W3C//ELEMENTS XHTML Images 1.0//EN"
#        SYSTEM "http://www.w3.org/TR/xhtml-modularization/DTD/xhtml-image-1.mod"
# 
#      Revisions:
#      (none)
#      ....................................................................... 


#  Images
# 
#         img
# 
#      This module provides markup to support basic image embedding.
# 


#  To avoid problems with text-only UAs as well as to make
#      image content understandable and navigable to users of
#      non-visual UAs, you need to provide a description with
#      the 'alt' attribute, and avoid server-side image maps.
# 


class Img(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'src': attribSrc_3104320399512748900, 
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'longdesc': attribLongdesc_551606211785669089, 
         'class_': attribClass_3214756266708739600, 
         'width': attribWidth_2698869476000729641, 
         'alt': attribAlt_1162895347347825025, 
         'height': attribHeight_607192057250935849, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel(None)
	_name = u'img'


#  end of img.element 


#  end of img.attlist 


#  end of xhtml-image-1.mod 


#  Tables Module ............................................... 


#  ....................................................................... 


#  XHTML Basic Table Module  ............................................. 


#  file: xhtml-basic-table-1.mod
# 
#      This is XHTML Basic, a proper subset of XHTML.
#      Copyright 1998-2001 W3C (MIT, INRIA, Keio), All Rights Reserved.
#      Revision: $Id$ SMI
# 
#      This DTD module is identified by the PUBLIC and SYSTEM identifiers:
# 
#        PUBLIC "-//W3C//ELEMENTS XHTML Basic Tables 1.0//EN"
#        SYSTEM "http://www.w3.org/TR/xhtml-modularization/DTD/xhtml-basic-table-1.mod"
# 
#      Revisions:
#      (none)
#      ....................................................................... 


#  Basic Tables
# 
#         table, caption, tr, th, td
# 
#      This table module declares elements and attributes defining
#      a table model based fundamentally on features found in the
#      widely-deployed HTML 3.2 table model.  While this module
#      mimics the content model and table attributes of HTML 3.2
#      tables, the element types declared herein also includes all
#      HTML 4 common and most of the HTML 4 table attributes.
# 


#  declare qualified element type names:
# 


#  horizontal alignment attributes for cell contents
# 


#  vertical alignment attributes for cell contents
# 


#  scope is simpler than axes attribute for common tables
# 


#  table: Table Element .............................. 


class Table(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'summary': attribSummary_293896294327076841, 
         'class_': attribClass_3214756266708739600, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'table'


#  end of table.element 


#  end of table.attlist 


#  caption: Table Caption ............................ 


class Caption(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'class_': attribClass_3214756266708739600, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'caption'


#  end of caption.element 


#  end of caption.attlist 


#  tr: Table Row ..................................... 


class Tr(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'align': attribAlign_1920212820748718721, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'class_': attribClass_3214756266708739600, 
         'valign': attribValign_2142455386295617129, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'tr'


#  end of tr.element 


#  end of tr.attlist 


#  th: Table Header Cell ............................. 


#  th is for header cells, td for data,
#      but for cells acting as both use td
# 


class Th(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'colspan': attribColspan_13003694770657536, 
         'align': attribAlign_1920212820748718721, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'headers': attribHeaders_1895922246332405776, 
         'class_': attribClass_3214756266708739600, 
         'rowspan': attribRowspan_824571289138210084, 
         'abbr': attribAbbr_2036693206661546449, 
         'valign': attribValign_2142455386295617129, 
         'scope': attribScope_688360248864796225, 
         'id': attribId_121205855951786596, 
         'axis': attribAxis_298091641253602249, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'th'


#  end of th.element 


#  end of th.attlist 


#  td: Table Data Cell ............................... 


class Td(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'colspan': attribColspan_13003694770657536, 
         'align': attribAlign_1920212820748718721, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'headers': attribHeaders_1895922246332405776, 
         'class_': attribClass_3214756266708739600, 
         'rowspan': attribRowspan_824571289138210084, 
         'abbr': attribAbbr_2036693206661546449, 
         'valign': attribValign_2142455386295617129, 
         'scope': attribScope_688360248864796225, 
         'id': attribId_121205855951786596, 
         'axis': attribAxis_298091641253602249, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'td'


#  end of td.element 


#  end of td.attlist 


#  end of xhtml-basic-table-1.mod 


#  Forms Module  ............................................... 
# 	XHTML basic forms module extended with optgroup and fieldset
# 


class Optgroup(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'label': attribLabel_1260736214172610816, 
         'class_': attribClass_3214756266708739600, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'optgroup'


class Fieldset(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'class_': attribClass_3214756266708739600, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'fieldset'


#  ...................................................................... 


#  XHTML Simplified Forms Module  ....................................... 


#  file: xhtml-basic-form-1.mod
# 
#      This is XHTML Basic, a proper subset of XHTML.
#      Copyright 1998-2001 W3C (MIT, INRIA, Keio), All Rights Reserved.
#      Revision: $Id$ SMI
# 
#      This DTD module is identified by the PUBLIC and SYSTEM identifiers:
# 
#        PUBLIC "-//W3C//ELEMENTS XHTML Basic Forms 1.0//EN"  
#        SYSTEM "http://www.w3.org/TR/xhtml-modularization/DTD/xhtml-basic-form-1.mod"
# 
#      Revisions:
#      (none)
#      ....................................................................... 


#  Basic Forms
# 
#      This forms module is based on the HTML 3.2 forms model, with
#      the WAI-requested addition of the label element. While this 
#      module essentially mimics the content model and attributes of 
#      HTML 3.2 forms, the element types declared herein also include
#      all HTML 4 common attributes.
# 
#         form, label, input, select, option, textarea
# 


#  declare qualified element type names:
# 


#  %BlkNoForm.mix; includes all non-form block elements,
#      plus %Misc.class;
# 


#  form: Form Element ................................ 


class Form(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'method': attribMethod_1594070884251040000, 
         'class_': attribClass_3214756266708739600, 
         'action': attribAction_142350502103259025, 
         'id': attribId_121205855951786596, 
         'enctype': attribEnctype_436576891689519025, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'form'


#  end of form.element 


#  end of form.attlist 


#  label: Form Field Label Text ...................... 


#  Each label must not contain more than ONE field
# 


class Label(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'accesskey': attribAccesskey_2737575848648385424, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'class_': attribClass_3214756266708739600, 
         'for_': attribFor_666919309859033284, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'label'


#  end of label.element 


#  end of label.attlist 


#  input: Form Control ............................... 


class Input(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'src': attribSrc_622124219914705225, 
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'checked': attribChecked_1601429972271201856, 
         'name': attribName_1423564487243335089, 
         'title': attribTitle_4254840287891469241, 
         'accesskey': attribAccesskey_2737575848648385424, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'value': attribValue_4156605816673722624, 
         'class_': attribClass_3214756266708739600, 
         'maxlength': attribMaxlength_604742143183339225, 
         'tabindex': attribTabindex_1924349933320454025, 
         'type': attribType_44301332405719489, 
         'id': attribId_121205855951786596, 
         'size': attribSize_1540036912549524169, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel(None)
	_name = u'input'


#  end of input.element 


#  Basic Forms removes 'image' and 'file' input types.
# 


#  attribute name required for all but submit & reset
# 


#  end of input.attlist 


#  select: Option Selector ........................... 


class Select(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'multiple': attribMultiple_1270567521988255296, 
         'name': attribName_1423564487243335089, 
         'title': attribTitle_4254840287891469241, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'class_': attribClass_3214756266708739600, 
         'tabindex': attribTabindex_1924349933320454025, 
         'id': attribId_121205855951786596, 
         'size': attribSize_1540036912549524169, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'select'


#  end of select.element 


#  end of select.attlist 


#  option: Selectable Choice ......................... 


class Option(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'selected': attribSelected_797750601755673316, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'value': attribValue_4156605816673722624, 
         'class_': attribClass_3214756266708739600, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'option'


#  end of option.element 


#  end of option.attlist 


#  textarea: Multi-Line Text Field ................... 


class Textarea(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'name': attribName_1423564487243335089, 
         'title': attribTitle_4254840287891469241, 
         'accesskey': attribAccesskey_2737575848648385424, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'cols': attribCols_157052534391325764, 
         'class_': attribClass_3214756266708739600, 
         'rows': attribRows_873710474168435344, 
         'id': attribId_121205855951786596, 
         'tabindex': attribTabindex_1924349933320454025, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'textarea'


#  end of textarea.element 


#  end of textarea.attlist 


#  end of xhtml-basic-form-1.mod 


#  Link Element Module  ........................................ 


#  ...................................................................... 


#  XHTML Link Element Module  ........................................... 


#  file: xhtml-link-1.mod
# 
#      This is XHTML, a reformulation of HTML as a modular XML application.
#      Copyright 1998-2001 W3C (MIT, INRIA, Keio), All Rights Reserved.
#      Revision: $Id$ SMI
# 
#      This DTD module is identified by the PUBLIC and SYSTEM identifiers:
# 
#        PUBLIC "-//W3C//ELEMENTS XHTML Link Element 1.0//EN"
#        SYSTEM "http://www.w3.org/TR/xhtml-modularization/DTD/xhtml-link-1.mod"
# 
#      Revisions:
#      (none)
#      ....................................................................... 


#  Link element
# 
#         link
# 
#      This module declares the link element type and its attributes,
#      which could (in principle) be used to define document-level links
#      to external resources such as:
# 
#      a) for document specific toolbars/menus, e.g. start, contents,
#         previous, next, index, end, help
#      b) to link to a separate style sheet (rel="stylesheet")
#      c) to make a link to a script (rel="script")
#      d) by style sheets to control how collections of html nodes are
#         rendered into printed documents
#      e) to make a link to a printable version of this document
#         e.g. a postscript or pdf version (rel="alternate" media="print")
# 


#  link: Media-Independent Link ...................... 


class Link(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'media': attribMedia_1916838375387458329, 
         'charset': attribCharset_2456238898048849, 
         'rev': attribRev_684970124142549961, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'hreflang': attribHreflang_96177259461920569, 
         'class_': attribClass_3214756266708739600, 
         'href': attribHref_10590696292225, 
         'rel': attribRel_3659796562539513529, 
         'type': attribType_3598646553109970404, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel(None)
	_name = u'link'


#  end of link.element 


#  end of link.attlist 


#  end of xhtml-link-1.mod 


#  Document Metainformation Module  ............................ 


#  ...................................................................... 


#  XHTML Document Metainformation Module  ............................... 


#  file: xhtml-meta-1.mod
# 
#      This is XHTML, a reformulation of HTML as a modular XML application.
#      Copyright 1998-2001 W3C (MIT, INRIA, Keio), All Rights Reserved.
#      Revision: $Id$ SMI
# 
#      This DTD module is identified by the PUBLIC and SYSTEM identifiers:
# 
#        PUBLIC "-//W3C//ELEMENTS XHTML Metainformation 1.0//EN"
#        SYSTEM "http://www.w3.org/TR/xhtml-modularization/DTD/xhtml-meta-1.mod"
# 
#      Revisions:
#      (none)
#      ....................................................................... 


#  Meta Information
# 
#         meta
# 
#      This module declares the meta element type and its attributes,
#      used to provide declarative document metainformation.
# 


#  meta: Generic Metainformation ..................... 


class Meta(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'xml_lang': attribXml_lang_2029235648979380625, 
         'xmlns': attribXmlns_2523611023564185025, 
         'http_equiv': attribHttp_equiv_1245057564071175625, 
         'content': attribContent_3546404873644026241, 
         'scheme': attribScheme_305738970983549041, 
         'name': attribName_3951386174947790881, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel(None)
	_name = u'meta'


#  end of meta.element 


#  end of meta.attlist 


#  end of xhtml-meta-1.mod 


#  Base Element Module  ........................................ 


#  ...................................................................... 


#  XHTML Base Element Module  ........................................... 


#  file: xhtml-base-1.mod
# 
#      This is XHTML, a reformulation of HTML as a modular XML application.
#      Copyright 1998-2001 W3C (MIT, INRIA, Keio), All Rights Reserved.
#      Revision: $Id$ SMI
# 
#      This DTD module is identified by the PUBLIC and SYSTEM identifiers:
# 
#        PUBLIC "-//W3C//ELEMENTS XHTML Base Element 1.0//EN"
#        SYSTEM "http://www.w3.org/TR/xhtml-modularization/DTD/xhtml-base-1.mod"
# 
#      Revisions:
#      (none)
#      ....................................................................... 


#  Base element
# 
#         base
# 
#      This module declares the base element type and its attributes,
#      used to define a base URI against which relative URIs in the
#      document will be resolved.
# 
#      Note that this module also redeclares the content model for
#      the head element to include the base element.
# 


#  base: Document Base URI ........................... 


class Base(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'href': attribHref_35096121232009744, 
         'xmlns': attribXmlns_2523611023564185025, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel(None)
	_name = u'base'


#  end of base.element 


#  end of base.attlist 


#  end of xhtml-base-1.mod 


#  Stylesheets Module  ......................................... 


#  ...................................................................... 


#  XHTML Document Style Sheet Module  ................................... 


#  file: xhtml-style-1.mod
# 
#      This is XHTML, a reformulation of HTML as a modular XML application.
#      Copyright 1998-2001 W3C (MIT, INRIA, Keio), All Rights Reserved.
#      Revision: $Id$ SMI
# 
#      This DTD module is identified by the PUBLIC and SYSTEM identifiers:
# 
#        PUBLIC "-//W3C//DTD XHTML Style Sheets 1.0//EN"
#        SYSTEM "http://www.w3.org/TR/xhtml-modularization/DTD/xhtml-style-1.mod"
# 
#      Revisions:
#      (none)
#      ....................................................................... 


#  Style Sheets
# 
#         style
# 
#      This module declares the style element type and its attributes,
#      used to embed style sheet information in the document head element.
# 


#  style: Style Sheet Information .................... 


class Style(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'xml_lang': attribXml_lang_2029235648979380625, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'media': attribMedia_1916838375387458329, 
         'type': attribType_291473665566426121, 
         'xml_space': attribXml_space_359981169846238864, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'style'


#  end of style.element 


#  end of style.attlist 


#  end of xhtml-style-1.mod 


#  Param Element Module  ....................................... 


#  ...................................................................... 


#  XHTML Param Element Module  ..................................... 


#  file: xhtml-param-1.mod
# 
#      This is XHTML, a reformulation of HTML as a modular XML application.
#      Copyright 1998-2001 W3C (MIT, INRIA, Keio), All Rights Reserved.
#      Revision: $Id$ SMI
# 
#      This DTD module is identified by the PUBLIC and SYSTEM identifiers:
# 
#        PUBLIC "-//W3C//ELEMENTS XHTML Param Element 1.0//EN"
#        SYSTEM "http://www.w3.org/TR/xhtml-modularization/DTD/xhtml-param-1.mod"
# 
#      Revisions:
#      (none)
#      ....................................................................... 


#  Parameters for Java Applets and Embedded Objects
# 
#         param
# 
#      This module provides declarations for the param element,
#      used to provide named property values for the applet
#      and object elements.
# 


#  param: Named Property Value ....................... 


class Param(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'xmlns': attribXmlns_2523611023564185025, 
         'name': attribName_1246620389478747364, 
         'valuetype': attribValuetype_3058020386316608164, 
         'value': attribValue_4156605816673722624, 
         'type': attribType_3598646553109970404, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel(None)
	_name = u'param'


#  end of param.element 


#  end of param.attlist 


#  end of xhtml-param-1.mod 


#  Embedded Object Module  ..................................... 


#  ...................................................................... 


#  XHTML Embedded Object Module  ........................................ 


#  file: xhtml-object-1.mod
# 
#      This is XHTML, a reformulation of HTML as a modular XML application.
#      Copyright 1998-2001 W3C (MIT, INRIA, Keio), All Rights Reserved.
#      Revision: $Id$ SMI
# 
#      This DTD module is identified by the PUBLIC and SYSTEM identifiers:
# 
#        PUBLIC "-//W3C//ELEMENTS XHTML Embedded Object 1.0//EN"
#        SYSTEM "http://www.w3.org/TR/xhtml-modularization/DTD/xhtml-object-1.mod"
# 
#      Revisions:
#      (none)
#      ....................................................................... 


#  Embedded Objects
# 
#         object
# 
#      This module declares the object element type and its attributes, used
#      to embed external objects as part of XHTML pages. In the document,
#      place param elements prior to other content within the object element.
# 
#      Note that use of this module requires instantiation of the Param
#      Element Module.
# 


#  object: Generic Embedded Object ................... 


class Object(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'classid': attribClassid_1288014720321799044, 
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'name': attribName_1423564487243335089, 
         'title': attribTitle_4254840287891469241, 
         'archive': attribArchive_2029791469104495009, 
         'type': attribType_3598646553109970404, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'declare': attribDeclare_857178368687561284, 
         'codebase': attribCodebase_1491350078472004, 
         'class_': attribClass_3214756266708739600, 
         'width': attribWidth_2698869476000729641, 
         'standby': attribStandby_275913609211742436, 
         'codetype': attribCodetype_164813866435053081, 
         'height': attribHeight_607192057250935849, 
         'data': attribData_119997120992872036, 
         'id': attribId_121205855951786596, 
         'tabindex': attribTabindex_1924349933320454025, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'object'


#  end of object.element 


#  end of object.attlist 


#  end of xhtml-object-1.mod 


#  Document Structure Module  ..................................... 


#  ...................................................................... 


#  XHTML Structure Module  .............................................. 


#  file: xhtml-struct-1.mod
# 
#      This is XHTML, a reformulation of HTML as a modular XML application.
#      Copyright 1998-2001 W3C (MIT, INRIA, Keio), All Rights Reserved.
#      Revision: $Id$ SMI
# 
#      This DTD module is identified by the PUBLIC and SYSTEM identifiers:
# 
#        PUBLIC "-//W3C//ELEMENTS XHTML Document Structure 1.0//EN"
#        SYSTEM "http://www.w3.org/TR/xhtml-modularization/DTD/xhtml-struct-1.mod"
# 
#      Revisions:
#      (none)
#      ....................................................................... 


#  Document Structure
# 
#         title, head, body, html
# 
#      The Structure Module defines the major structural elements and
#      their attributes.
# 
#      Note that the content model of the head element type is redeclared
#      when the Base Module is included in the DTD.
# 
#      The parameter entity containing the XML namespace URI value used
#      for XHTML is '%XHTML.xmlns;', defined in the Qualified Names module.
# 


#  title: Document Title ............................. 


#  The title element is not considered part of the flow of text.
#      It should be displayed, for example as the page header or
#      window title. Exactly one title is required per document.
# 


class Title(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'xml_lang': attribXml_lang_2029235648979380625, 
         'xmlns': attribXmlns_2523611023564185025, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'title'


#  end of title.element 


#  end of title.attlist 


#  head: Document Head ............................... 


class Head(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'profile': attribProfile_3085446061595951089, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'xmlns': attribXmlns_2523611023564185025, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'head'


#  end of head.element 


#  reserved for future use with document profiles
# 


#  end of head.attlist 


#  body: Document Body ............................... 


class Body(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'class_': attribClass_3214756266708739600, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'body'


#  end of body.element 


#  end of body.attlist 


#  html: XHTML Document Element ...................... 


class Html(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'xml_lang': attribXml_lang_2029235648979380625, 
         'xmlns': attribXmlns_2523611023564185025, 
         'version': attribVersion_1798756531258807849, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'html'



_Root = Html



#  end of html.element 


#  version attribute value defined in driver
# 


#  see the Qualified Names module for information
#      on how to extend XHTML using XML namespaces
# 


#  end of html.attlist 


#  end of xhtml-struct-1.mod 


#  Block Presentation ........................................ 


#  ...................................................................... 


#  XHTML Block Presentation Module  ..................................... 


#  file: xhtml-blkpres-1.mod
# 
#      This is XHTML, a reformulation of HTML as a modular XML application.
#      Copyright 1998-2001 W3C (MIT, INRIA, Keio), All Rights Reserved.
#      Revision: $Id$ SMI
# 
#      This DTD module is identified by the PUBLIC and SYSTEM identifiers:
# 
#        PUBLIC "-//W3C//ELEMENTS XHTML Block Presentation 1.0//EN"
#        SYSTEM "http://www.w3.org/TR/xhtml-modularization/DTD/xhtml-blkpres-1.mod"
# 
#      Revisions:
#      (none)
#      ....................................................................... 


#  Block Presentational Elements
# 
#         hr
# 
#      This module declares the elements and their attributes used to
#      support block-level presentational markup.
# 


class Hr(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'class_': attribClass_3214756266708739600, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel(None)
	_name = u'hr'


#  end of hr.element 


#  end of hr.attlist 


#  end of xhtml-blkpres-1.mod 


#  ========================================== 


#  
# 	Inline Presentation: b, big, i, small		
# 


#  ...................................................................... 


#  XHTML Inline Presentation Module  .................................... 


#  file: xhtml-inlpres-1.mod
# 
#      This is XHTML, a reformulation of HTML as a modular XML application.
#      Copyright 1998-2001 W3C (MIT, INRIA, Keio), All Rights Reserved.
#      Revision: $Id$ SMI
# 
#      This DTD module is identified by the PUBLIC and SYSTEM identifiers:
# 
#        PUBLIC "-//W3C//ELEMENTS XHTML Inline Presentation 1.0//EN"
#        SYSTEM "http://www.w3.org/TR/xhtml-modularization/DTD/xhtml-inlpres-1.mod"
# 
#      Revisions:
#      (none)
#      ....................................................................... 


#  Inline Presentational Elements
# 
#         b, big, i, small, sub, sup, tt
# 
#      This module declares the elements and their attributes used to
#      support inline-level presentational markup.
# 


class B(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'class_': attribClass_3214756266708739600, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'b'


#  end of b.element 


#  end of b.attlist 


class Big(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'class_': attribClass_3214756266708739600, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'big'


#  end of big.element 


#  end of big.attlist 


class I(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'class_': attribClass_3214756266708739600, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'i'


#  end of i.element 


#  end of i.attlist 


class Small(pycopia.XML.POM.ElementNode):
	ATTRIBUTES = {
         'style': attribStyle_68292116612380816, 
         'xmlns': attribXmlns_2523611023564185025, 
         'title': attribTitle_4254840287891469241, 
         'xml_lang': attribXml_lang_2029235648979380625, 
         'class_': attribClass_3214756266708739600, 
         'id': attribId_121205855951786596, 
         }
	CONTENTMODEL = pycopia.XML.POM.ContentModel((True,))
	_name = u'small'


#  end of small.element 


#  end of small.attlist 


#  end of xhtml-inlpres-1.mod 


#  end of XHTML Mobile 1.0 DTD  ........................................... 


GENERAL_ENTITIES = {   'AElig': u'\xc6',
    'Aacute': u'\xc1',
    'Acirc': u'\xc2',
    'Agrave': u'\xc0',
    'Alpha': u'\u0391',
    'Aring': u'\xc5',
    'Atilde': u'\xc3',
    'Auml': u'\xc4',
    'Beta': u'\u0392',
    'Ccedil': u'\xc7',
    'Chi': u'\u03a7',
    'Dagger': u'\u2021',
    'Delta': u'\u0394',
    'ETH': u'\xd0',
    'Eacute': u'\xc9',
    'Ecirc': u'\xca',
    'Egrave': u'\xc8',
    'Epsilon': u'\u0395',
    'Eta': u'\u0397',
    'Euml': u'\xcb',
    'Gamma': u'\u0393',
    'Iacute': u'\xcd',
    'Icirc': u'\xce',
    'Igrave': u'\xcc',
    'Iota': u'\u0399',
    'Iuml': u'\xcf',
    'Kappa': u'\u039a',
    'Lambda': u'\u039b',
    'Mu': u'\u039c',
    'Ntilde': u'\xd1',
    'Nu': u'\u039d',
    'OElig': u'\u0152',
    'Oacute': u'\xd3',
    'Ocirc': u'\xd4',
    'Ograve': u'\xd2',
    'Omega': u'\u03a9',
    'Omicron': u'\u039f',
    'Oslash': u'\xd8',
    'Otilde': u'\xd5',
    'Ouml': u'\xd6',
    'Phi': u'\u03a6',
    'Pi': u'\u03a0',
    'Prime': u'\u2033',
    'Psi': u'\u03a8',
    'Rho': u'\u03a1',
    'Scaron': u'\u0160',
    'Sigma': u'\u03a3',
    'THORN': u'\xde',
    'Tau': u'\u03a4',
    'Theta': u'\u0398',
    'Uacute': u'\xda',
    'Ucirc': u'\xdb',
    'Ugrave': u'\xd9',
    'Upsilon': u'\u03a5',
    'Uuml': u'\xdc',
    'Xi': u'\u039e',
    'Yacute': u'\xdd',
    'Yuml': u'\u0178',
    'Zeta': u'\u0396',
    'aacute': u'\xe1',
    'acirc': u'\xe2',
    'acute': u'\xb4',
    'aelig': u'\xe6',
    'agrave': u'\xe0',
    'alefsym': u'\u2135',
    'alpha': u'\u03b1',
    'amp': u'&&',
    'and': u'\u2227',
    'ang': u'\u2220',
    'apos': u"'",
    'aring': u'\xe5',
    'asymp': u'\u2248',
    'atilde': u'\xe3',
    'auml': u'\xe4',
    'bdquo': u'\u201e',
    'beta': u'\u03b2',
    'brvbar': u'\xa6',
    'bull': u'\u2022',
    'cap': u'\u2229',
    'ccedil': u'\xe7',
    'cedil': u'\xb8',
    'cent': u'\xa2',
    'chi': u'\u03c7',
    'circ': u'\u02c6',
    'clubs': u'\u2663',
    'cong': u'\u2245',
    'copy': u'\xa9',
    'crarr': u'\u21b5',
    'cup': u'\u222a',
    'curren': u'\xa4',
    'dArr': u'\u21d3',
    'dagger': u'\u2020',
    'darr': u'\u2193',
    'deg': u'\xb0',
    'delta': u'\u03b4',
    'diams': u'\u2666',
    'divide': u'\xf7',
    'eacute': u'\xe9',
    'ecirc': u'\xea',
    'egrave': u'\xe8',
    'empty': u'\u2205',
    'emsp': u'\u2003',
    'ensp': u'\u2002',
    'epsilon': u'\u03b5',
    'equiv': u'\u2261',
    'eta': u'\u03b7',
    'eth': u'\xf0',
    'euml': u'\xeb',
    'euro': u'\u20ac',
    'exist': u'\u2203',
    'fnof': u'\u0192',
    'forall': u'\u2200',
    'frac12': u'\xbd',
    'frac14': u'\xbc',
    'frac34': u'\xbe',
    'frasl': u'\u2044',
    'gamma': u'\u03b3',
    'ge': u'\u2265',
    'gt': u'>',
    'hArr': u'\u21d4',
    'harr': u'\u2194',
    'hearts': u'\u2665',
    'hellip': u'\u2026',
    'iacute': u'\xed',
    'icirc': u'\xee',
    'iexcl': u'\xa1',
    'igrave': u'\xec',
    'image': u'\u2111',
    'infin': u'\u221e',
    'int': u'\u222b',
    'iota': u'\u03b9',
    'iquest': u'\xbf',
    'isin': u'\u2208',
    'iuml': u'\xef',
    'kappa': u'\u03ba',
    'lArr': u'\u21d0',
    'lambda': u'\u03bb',
    'lang': u'\u2329',
    'laquo': u'\xab',
    'larr': u'\u2190',
    'lceil': u'\u2308',
    'ldquo': u'\u201c',
    'le': u'\u2264',
    'lfloor': u'\u230a',
    'lowast': u'\u2217',
    'loz': u'\u25ca',
    'lrm': u'\u200e',
    'lsaquo': u'\u2039',
    'lsquo': u'\u2018',
    'lt': u'&<',
    'macr': u'\xaf',
    'mdash': u'\u2014',
    'micro': u'\xb5',
    'middot': u'\xb7',
    'minus': u'\u2212',
    'mu': u'\u03bc',
    'nabla': u'\u2207',
    'nbsp': u'\xa0',
    'ndash': u'\u2013',
    'ne': u'\u2260',
    'ni': u'\u220b',
    'not': u'\xac',
    'notin': u'\u2209',
    'nsub': u'\u2284',
    'ntilde': u'\xf1',
    'nu': u'\u03bd',
    'oacute': u'\xf3',
    'ocirc': u'\xf4',
    'oelig': u'\u0153',
    'ograve': u'\xf2',
    'oline': u'\u203e',
    'omega': u'\u03c9',
    'omicron': u'\u03bf',
    'oplus': u'\u2295',
    'or': u'\u2228',
    'ordf': u'\xaa',
    'ordm': u'\xba',
    'oslash': u'\xf8',
    'otilde': u'\xf5',
    'otimes': u'\u2297',
    'ouml': u'\xf6',
    'para': u'\xb6',
    'part': u'\u2202',
    'permil': u'\u2030',
    'perp': u'\u22a5',
    'phi': u'\u03c6',
    'pi': u'\u03c0',
    'piv': u'\u03d6',
    'plusmn': u'\xb1',
    'pound': u'\xa3',
    'prime': u'\u2032',
    'prod': u'\u220f',
    'prop': u'\u221d',
    'psi': u'\u03c8',
    'quot': u'"',
    'rArr': u'\u21d2',
    'radic': u'\u221a',
    'rang': u'\u232a',
    'raquo': u'\xbb',
    'rarr': u'\u2192',
    'rceil': u'\u2309',
    'rdquo': u'\u201d',
    'real': u'\u211c',
    'reg': u'\xae',
    'rfloor': u'\u230b',
    'rho': u'\u03c1',
    'rlm': u'\u200f',
    'rsaquo': u'\u203a',
    'rsquo': u'\u2019',
    'sbquo': u'\u201a',
    'scaron': u'\u0161',
    'sdot': u'\u22c5',
    'sect': u'\xa7',
    'shy': u'\xad',
    'sigma': u'\u03c3',
    'sigmaf': u'\u03c2',
    'sim': u'\u223c',
    'spades': u'\u2660',
    'sub': u'\u2282',
    'sube': u'\u2286',
    'sum': u'\u2211',
    'sup': u'\u2283',
    'sup1': u'\xb9',
    'sup2': u'\xb2',
    'sup3': u'\xb3',
    'supe': u'\u2287',
    'szlig': u'\xdf',
    'tau': u'\u03c4',
    'there4': u'\u2234',
    'theta': u'\u03b8',
    'thetasym': u'\u03d1',
    'thinsp': u'\u2009',
    'thorn': u'\xfe',
    'tilde': u'\u02dc',
    'times': u'\xd7',
    'trade': u'\u2122',
    'uArr': u'\u21d1',
    'uacute': u'\xfa',
    'uarr': u'\u2191',
    'ucirc': u'\xfb',
    'ugrave': u'\xf9',
    'uml': u'\xa8',
    'upsih': u'\u03d2',
    'upsilon': u'\u03c5',
    'uuml': u'\xfc',
    'weierp': u'\u2118',
    'xi': u'\u03be',
    'yacute': u'\xfd',
    'yen': u'\xa5',
    'yuml': u'\xff',
    'zeta': u'\u03b6',
    'zwj': u'\u200d',
    'zwnj': u'\u200c'}

# Cache for dynamic classes for this dtd.


_CLASSCACHE = {}


