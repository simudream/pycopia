#!/usr/bin/env python2.4
# vim:ts=4:sw=4:softtabstop=4:smarttab:expandtab
#
# $Id: qaunittest,v 1.1 2005/07/25 21:25:16 kdart Exp $

"""
Runs pyNMS unit tests using special test runner.

"""


import sys, os
import testrunner

TESTDIR = os.path.join(os.environ["PYNMS_HOME"], "lib", "_unittest")
os.environ["TESTHOME"] = TESTDIR

class NMSTestRunner(testrunner.TestRunner):
    def initialize(self):
        self._old_sp = sys.path[:]
        sys.path.insert(0, TESTDIR)
        os.chdir(TESTDIR)
        super(NMSTestRunner, self).initialize()

    def finalize(self):
        sys.path = self._old_sp
        super(NMSTestRunner, self).finalize()

    def get_test_list(self):
        import _boilerplate # should be from _unittests
        TESTDIR = os.path.dirname(_boilerplate.__file__)
        modnames = []
        os.path.walk(TESTDIR, _collect, modnames)
        modnames = map(lambda n: n[len(TESTDIR)+1:].replace("/", "."), modnames)
        return modnames

# callback for testdir walker
def _collect(flist, dirname, names):
    for name in names:
        if name.endswith(".py") and not name.startswith("_"):
            flist.append(os.path.join(dirname, name[:-3]))


def main(argv):
    tr =NMSTestRunner()
    tr(argv)

main(sys.argv)
